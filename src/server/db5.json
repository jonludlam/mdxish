{"metadata":{"kernelspec":{"display_name":"OCaml 4.07.1","language":"OCaml","name":"ocaml-jupyter"},"language_info":{"name":"OCaml","version":"4.07.1","codemirror_mode":"text/x-ocaml","file_extension":".ml","mimetype":"text/x-ocaml","nbconverter_exporter":null,"pygments_lexer":"OCaml"}},"nbformat":4,"nbformat_minor":2,"cells":[{"cell_type":"markdown","metadata":{},"source":"# GADTs for marshalling and unmarshalling\n\n\n\nOur next task is to eliminate the need for the generated functions that turn our typed values into strings and back again. We're going to turn again to GADTs to help us do this. Let's consider how we declared the types of our API fields:\n"},{"cell_type":"code","metadata":{},"source":"type ty =\n  | String\n  | Int\n  | Float\n  | Bool\n  | DateTime\n  | Set of ty\n  | Map of ty * ty\n  | Ref of string\n  | Record of string\n  | Enum of string * (string * string) list;;","outputs":[],"execution_count":1},{"cell_type":"markdown","metadata":{},"source":"\nWe'll start by cutting this down to a couple of cases so it's easier to work with - we'll do Ints and Bools for now:\n"},{"cell_type":"code","metadata":{},"source":"type ty =\n  | Int\n  | Bool;;","outputs":[],"execution_count":2},{"cell_type":"markdown","metadata":{},"source":"\nNow even with a value of type `ty` in our hands we still have no way to generically handle values of ocaml type `bool` or `int`. However, it we turn this into a GADT and carry the ocaml type alongside the value we might be able to do better. Let's declare ty as a GADT:\n"},{"cell_type":"code","metadata":{},"source":"type _ ty =\n  | Int : int ty\n  | Bool : bool ty;;","outputs":[],"execution_count":3},{"cell_type":"markdown","metadata":{},"source":"\nThis allows us now to write a function whose signature looks like this:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"val shiny_marshal_function : 'a ty -> 'a -> string","outputs":[],"execution_count":4},{"cell_type":"markdown","metadata":{},"source":"\nso we can write `shiny_marshal_function Bool` and we're left with a `bool -> string` function, or `shiny_marshal_function Int` and we're left with an `int -> string` function. Let's write it!\n"},{"cell_type":"code","metadata":{},"source":"let shiny_marshal_function : type a. a ty -> a -> string = function\n  | Bool -> string_of_bool\n  | Int -> string_of_int;;","outputs":[],"execution_count":5},{"cell_type":"markdown","metadata":{},"source":"\nOnce again we have to declare `a` as locally abstract so that the type checker doesn't try to unify it across each of our `ty` constructors. And of course we can declare the inverse of this function to convert back from strings:\n"},{"cell_type":"code","metadata":{},"source":"let shiny_unmarshal_function : type a. a ty -> string -> a = function\n  | Bool -> bool_of_string\n  | Int -> int_of_string;;","outputs":[],"execution_count":6},{"cell_type":"markdown","metadata":{},"source":"\nLet's extend our `ty` type a little to express more of the types in our datamodel:\n"},{"cell_type":"code","metadata":{},"source":"type _ ty =\n  | String : string ty\n  | Int : int ty\n  | Float : float ty\n  | Bool : bool ty\n  | DateTime : string ty;;","outputs":[],"execution_count":7},{"cell_type":"markdown","metadata":{},"source":"\nThese are all fine. But what do we do about our `Set` ty? That's one where in our original definition it was `Set of ty` - how do we do that in our new syntax?\n\nIt turns out that the new thing of putting a type constraint on each constructor means it's really easy to do:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"type _ ty =\n...\n    | Set : 'a ty -> 'b ty","outputs":[],"execution_count":8},{"cell_type":"markdown","metadata":{},"source":"\nBecause, of course, `Set of ty` is used in a way that looks a lot like function application (`Set Int` for example), so it's  natural to use the function syntax to declare them.\n\nHaving said that, the type's not quite right yet. What we want on the right hand side is for the type parameter to have the type we want values to have. So if we've got `Set Int`, how do we want to represent this in a normal OCaml type? An int list might be a reasonable first go. The type of our constructor should look like this then:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"type _ ty =\n...\n  | Set : 'a ty -> 'a list ty","outputs":[],"execution_count":9},{"cell_type":"markdown","metadata":{},"source":"\nAnd by a similar argument, our `Map` should be:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"type _ ty =\n...\n  | Map : ('a ty * 'b ty) -> ('a * 'b) list ty","outputs":[],"execution_count":10},{"cell_type":"markdown","metadata":{},"source":"\nFor example, a `Map (Int, String)` becomes a `(int * string) list ty`\n\nOur marshalling and unmarshalling function now need to be recursive, but magically this all just works! I'm going to skip the types that all look similar for brevity, so we'll skip out Bool, Float and DateTime\n"},{"cell_type":"code","metadata":{},"source":"type _ typ =\n  | String : string typ\n  | Int : int typ\n  | List : 'a typ -> 'a list typ\n  | Map : ('a typ * 'b typ) -> ('a * 'b) list typ;;\n\nlet rec to_string : type a. a typ -> a -> string = fun typ v ->\n  match typ with\n  | String -> v\n  | Int -> string_of_int v\n  | List ty -> String.concat \",\" (List.map (to_string ty) v)\n  | Map (k_ty, v_ty) ->\n    v\n    |> List.map (fun (k,v) ->\n         let k_str = to_string k_ty k in\n         let v_str = to_string v_ty v in\n         Printf.sprintf \"%s|%s\" k_str v_str)\n    |> String.concat \";\";;\n\nlet rec of_string : type a. a typ -> string -> a = fun typ str ->\n  match typ with\n  | String -> str\n  | Int -> int_of_string str\n  | List ty -> Astring.String.cuts ~sep:\",\" str |> List.map (of_string ty)\n  | Map (k_ty, v_ty) ->\n    Astring.String.cuts ~sep:\";\" str |>\n    List.map (fun s ->\n      match Astring.String.cuts ~sep:\"|\" s with\n      | [k;v] -> (of_string k_ty k, of_string v_ty v)\n      | _ -> failwith (Printf.sprintf \"Unmarshalling error: %s doesn't split correctly\" s));;","outputs":[],"execution_count":11},{"cell_type":"markdown","metadata":{},"source":"\nHow about Refs? The original definition of `Ref` only had a string as an argument, and hence there's no useful type information there. That's an easy fix: we can use our `cls` type from the previous article, so, using `Refv` rather than `Ref` to avoid confusing the constructor with the module, we'll have `| Refv : 'a cls -> ..?`. Let's pull in the code:\n"},{"cell_type":"code","metadata":{},"source":"type _ cls =\n  | VM : [`vm] cls\n  | VBD : [`vbd] cls\n\n(* Phantom-type-using references *)\nmodule Ref : sig\n  type 'c t\n  val string_of : 'c t -> string\n  val of_string : 'c cls -> string -> 'c t (* Here we're using our new GADT *)\n  val pp : Format.formatter -> 'c t -> unit\nend = struct\n  type 'c t = string\n  let string_of v = v\n  let of_string _ v = v (* We don't need the value of the GADT, just its type *)\n  let pp fmt v = Format.pp_print_string fmt v\nend","outputs":[],"execution_count":12},{"cell_type":"markdown","metadata":{},"source":"\nAs before, the right hand side needs to represent the OCaml type we'd like to use, which is an `'a Ref.t`. The type declaration therefore looks like this:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"type _ ty =\n...\n  | Refv : 'a cls -> 'a Ref.t tyA","outputs":[],"execution_count":13},{"cell_type":"markdown","metadata":{},"source":"\nBut alas! with this addition to our ty definition we now get a compilation error!\n"},{"cell_type":"code","metadata":{},"source":"type _ typ =\n| String : string typ\n| Int : int typ\n| Refv : 'c cls -> 'c Ref.t typ\n| Map : ('a typ * 'b typ) -> ('a * 'b) list typ\n| List : 'a typ -> 'a list typ;;","outputs":[],"execution_count":14},{"cell_type":"markdown","metadata":{},"source":"\nutop helpfully underlines the entire type declaration so we know something in it is wrong. Thanks! Fortunately we know it worked before we added the `Refv` thing, so we know to look there. A bit of googling brings us to a [discussion of this issue on the caml list](https://sympa.inria.fr/sympa/arc/caml-list/2013-10/msg00189.html) and the problem turns out to be one of being able to decide whether types are the same or not. It's an interesting discussion and one that's worth reading. Happily the fix is a simple one: Wrap the Ref.t in a variant:\n"},{"cell_type":"code","metadata":{},"source":"module Ref : sig\n  type 'c t = S of string\n  val string_of : 'c t -> string\n  val of_string : 'c cls -> string -> 'c t\n  val pp : Format.formatter -> 'c t -> unit\nend = struct\n  type 'c t = S of string\n  let string_of (S v) = v\n  let of_string _ v = (S v)\n  let pp fmt (S v) = Format.pp_print_string fmt v\nend;;","outputs":[],"execution_count":15},{"cell_type":"markdown","metadata":{},"source":"\nand now OCaml is happy with our `ty` definition. Next, we need to add to our `to_string` and `of_string` functions. The new bits are straightforward:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"let rec to_string : type a. a typ -> a -> string = fun typ v ->\n  match typ with\n  ...\n  | Ref _ -> Ref.string_of v\n\nlet rec of_string  : type a. a typ -> string -> a = fun typ v ->\n  match typ with\n  ...\n  | Ref _ -> Ref.of_string v","outputs":[],"execution_count":16},{"cell_type":"markdown","metadata":{},"source":"\nWith these all in place we can now remove the `to_string` and `of_string` from our field definition, and instead store the `ty` information and pass this into our generic marshal and unmarshal functions. We end up with a simpler definition of `Field`:\n"},{"cell_type":"code","metadata":{},"source":"module Field = struct\n  type ('a,'b) t = {\n    name : string;\n    cls : 'a cls;\n    ty : 'b typ;\n  }\n  let name_of x = x.name\n  let table_of : type a . (a, _) t -> string = fun x -> match x.cls with | VM -> \"VM\" | VBD -> \"VBD\"\nend;;","outputs":[],"execution_count":17},{"cell_type":"markdown","metadata":{},"source":"\nand we call `to_string` and `of_string` in our database set and get functions:\n"},{"cell_type":"code","metadata":{"skip":true},"source":"let set : 'a Ref.t -> ('a,'b) Field.t -> 'b -> unit = fun ref field v ->\n  db := set_field (Field.table_of field) (Ref.string_of ref) (name_of field) (to_string field.Field.ty v) !db\n\nlet get : 'a Ref.t -> ('a,'b) Field.t -> 'b = fun ref field ->\n  get_field (Field.table_of field) (Ref.string_of ref) (name_of field) !db |> (of_string field.Field.ty);;","outputs":[],"execution_count":18},{"cell_type":"markdown","metadata":{},"source":"\n\nLooking back at what we've just done, the Map and List to string convertions are looking pretty ugly. Additionally we're still suffering from the penalty of having to convert to and from strings to put things in the DB. Next time let's see whether we can improve the situation by storing typed data in our database rather than untyped strings.\n\nHere's the final `db5.ml`:\n"},{"cell_type":"code","metadata":{},"source":"(* DB5 - GADTs for marshalling *)\nmodule StringMap = Map.Make(String)\n\nmodule type VAL = sig\n  type t\nend\n\nmodule Make (V : VAL) = struct\n  type t = V.t StringMap.t\n  let empty = StringMap.empty\n  let add = StringMap.add\n  let find = StringMap.find\n  let mem = StringMap.mem\n  let remove = StringMap.remove\n  let update key default f t =\n    let cur = if mem key t then find key t else default in\n    let newv = f cur in\n    StringMap.add key newv t\n  let iter = StringMap.iter\nend\n\nmodule Row = struct\n  include Make(String)\nend\n\nmodule Table = struct\n  include Make(Row)\nend\n\nmodule TableSet = struct\n  include Make(Table)\nend\n\nmodule Database = struct\n  type t = TableSet.t\n  let empty = TableSet.empty\nend\n\nlet get_field tblname objref fldname db =\n  TableSet.find tblname db |>\n  Table.find objref |>\n  Row.find fldname\n\nlet set_field tblname objref fldname v : Database.t -> Database.t =\n  (function _ -> v)\n  |> Row.update fldname \"\"\n  |> Table.update objref Row.empty\n  |> TableSet.update tblname Table.empty\n\nlet db = ref Database.empty\n\ntype _ cls =\n  | VM : [`vm] cls\n  | VBD : [`vbd] cls\n\n(* Phantom-type-using references *)\nmodule Ref : sig\n  type 'c t = private S: string -> 'c t\n  val string_of : 'c t -> string\n  val of_string : 'c cls -> string -> 'c t\n  val pp : Format.formatter -> 'c t -> unit\nend = struct\n  type 'c t = S : string -> 'c t\n  let string_of (S v) = v\n  let of_string _ v = (S v)\n  let pp fmt (S v) = Format.pp_print_string fmt v\nend\n\ntype _ typ =\n  | String : string typ\n  | Int : int typ\n  | Refv : 'c cls -> 'c Ref.t typ\n  | Set : 'a typ -> 'a list typ\n  | Map : ('a typ * 'b typ) -> ('a * 'b) list typ\n\nlet rec to_string : type a. a typ -> a -> string = fun typ v ->\n  match typ with\n  | String -> v\n  | Int -> string_of_int v\n  | Refv _ -> Ref.string_of v\n  | Set ty -> String.concat \",\" (List.map (to_string ty) v)\n  | Map (k_ty, v_ty) ->\n    v\n    |> List.map (fun (k,v) ->\n         let k_str = to_string k_ty k in\n         let v_str = to_string v_ty v in\n         Printf.sprintf \"%s|%s\" k_str v_str)\n    |> String.concat \";\"\n\nlet rec of_string : type a. a typ -> string -> a = fun typ str ->\n  match typ with\n  | String -> str\n  | Int -> int_of_string str\n  | Refv cls -> Ref.of_string cls str\n  | Set ty -> Astring.String.cuts ~sep:\",\" str |> List.map (of_string ty)\n  | Map (k_ty, v_ty) ->\n    Astring.String.cuts ~sep:\";\" str |>\n    List.map (fun s ->\n      match Astring.String.cuts ~sep:\"|\" s with\n      | [k;v] -> (of_string k_ty k, of_string v_ty v)\n      | _ -> failwith (Printf.sprintf \"Unmarshalling error: %s doesn't split correctly\" s))\n\nmodule Field : sig\n  type ('c, 'f) t\n  val construct : string -> 'c cls -> 'f typ -> ('c, 'f) t\n  val name_of : ('c, 'f) t -> string\n  val table_of : ('c, 'f) t -> string\n  val to_string : ('c, 'f) t -> 'f -> string\n  val of_string : ('c, 'f) t -> string -> 'f\nend = struct\n  type ('c,'f) t = {\n    name : string;\n    cls : 'c cls;\n    ty : 'f typ;\n  }\n  let name_of x = x.name\n  let table_of : type c. (c, _) t -> string = fun x -> match x.cls with | VM -> \"VM\" | VBD -> \"VBD\"\n  let construct name cls ty = {name; cls; ty}\n  let to_string f v = to_string f.ty v\n  let of_string f v = of_string f.ty v\nend\n\nlet set : 'a Ref.t -> ('a,'b) Field.t -> 'b -> unit = fun ref field v ->\n  let open Field in\n  db := set_field (table_of field) (Ref.string_of ref) (name_of field) (to_string field v) !db\n\nlet get : 'a Ref.t -> ('a,'b) Field.t -> 'b = fun ref field ->\n  let open Field in\n  get_field (table_of field) (Ref.string_of ref) (name_of field) !db |> (of_string field)\n\n(* Example showing how we would use these in practice *)\nlet dump db =\n  TableSet.iter (fun tblname table ->\n    Printf.printf \"\\n# TABLE: %s\\n\\n\" tblname;\n    Table.iter (fun objref row ->\n      Printf.printf \"## Object: %s\\n\" objref;\n      Row.iter (fun fldname v ->\n        Printf.printf \"  %s: %s\\n\" fldname v) row) table) db\n\nlet vm1 = Ref.of_string VM \"OpaqueRef:abcde\"\nlet vbd1 = Ref.of_string VBD \"OpaqueRef:fghij\"\nlet vbd2 = Ref.of_string VBD \"OpaqueRef:12345\"\n\nlet name_label = Field.construct \"name_label\" VM String\nlet vBDs = Field.construct \"VBDs\" VM (Set (Refv VBD))\nlet vbd_vm = Field.construct \"VM\" VBD (Refv VM)\nlet memory = Field.construct \"memory\" VM Int\n\nlet _ =\n  set vm1 name_label \"my first vm\";\n  set vbd1 vbd_vm vm1;\n  set vbd2 vbd_vm vm1;\n  set vm1 vBDs [vbd1; vbd2];\n  set vm1 memory 63356;\n  dump !db\n","outputs":[],"execution_count":19}]}