(() => {
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };

  // ../../../node_modules/@codemirror/text/dist/index.cjs
  var require_dist = __commonJS({
    "../../../node_modules/@codemirror/text/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var extend = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s) => s ? parseInt(s, 36) : 1);
      for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
      function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
          if (extend[i] > code)
            return extend[i - 1] <= code;
        return false;
      }
      function isRegionalIndicator(code) {
        return code >= 127462 && code <= 127487;
      }
      var ZWJ = 8205;
      function findClusterBreak(str, pos, forward = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);
      }
      function nextClusterBreak(str, pos) {
        if (pos == str.length)
          return pos;
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
          pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
          let next = codePointAt(str, pos);
          if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
            pos += codePointSize(next);
            prev = next;
          } else if (isRegionalIndicator(next)) {
            let countBefore = 0, i = pos - 2;
            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
              countBefore++;
              i -= 2;
            }
            if (countBefore % 2 == 0)
              break;
            else
              pos += 2;
          } else {
            break;
          }
        }
        return pos;
      }
      function prevClusterBreak(str, pos) {
        while (pos > 0) {
          let found = nextClusterBreak(str, pos - 2);
          if (found < pos)
            return found;
          pos--;
        }
        return 0;
      }
      function surrogateLow(ch) {
        return ch >= 56320 && ch < 57344;
      }
      function surrogateHigh(ch) {
        return ch >= 55296 && ch < 56320;
      }
      function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
          return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
          return code0;
        return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
      }
      function fromCodePoint(code) {
        if (code <= 65535)
          return String.fromCharCode(code);
        code -= 65536;
        return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
      }
      function codePointSize(code) {
        return code < 65536 ? 1 : 2;
      }
      function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to; ) {
          if (string.charCodeAt(i) == 9) {
            n += tabSize - n % tabSize;
            i++;
          } else {
            n++;
            i = findClusterBreak(string, i);
          }
        }
        return n;
      }
      function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0; ; ) {
          if (n >= col)
            return i;
          if (i == string.length)
            break;
          n += string.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
          i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
      }
      var Text = class {
        constructor() {
        }
        lineAt(pos) {
          if (pos < 0 || pos > this.length)
            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
          return this.lineInner(pos, false, 1, 0);
        }
        line(n) {
          if (n < 1 || n > this.lines)
            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
          return this.lineInner(n, true, 1, 0);
        }
        replace(from, to, text) {
          let parts = [];
          this.decompose(0, from, parts, 2);
          if (text.length)
            text.decompose(0, text.length, parts, 1 | 2);
          this.decompose(to, this.length, parts, 1);
          return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        append(other) {
          return this.replace(this.length, this.length, other);
        }
        slice(from, to = this.length) {
          let parts = [];
          this.decompose(from, to, parts, 0);
          return TextNode.from(parts, to - from);
        }
        eq(other) {
          if (other == this)
            return true;
          if (other.length != this.length || other.lines != this.lines)
            return false;
          let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
          let a = new RawTextCursor(this), b = new RawTextCursor(other);
          for (let skip = start, pos = start; ; ) {
            a.next(skip);
            b.next(skip);
            skip = 0;
            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
              return false;
            pos += a.value.length;
            if (a.done || pos >= end)
              return true;
          }
        }
        iter(dir = 1) {
          return new RawTextCursor(this, dir);
        }
        iterRange(from, to = this.length) {
          return new PartialTextCursor(this, from, to);
        }
        iterLines(from, to) {
          let inner;
          if (from == null) {
            inner = this.iter();
          } else {
            if (to == null)
              to = this.lines + 1;
            let start = this.line(from).from;
            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
          }
          return new LineCursor(inner);
        }
        toString() {
          return this.sliceString(0);
        }
        toJSON() {
          let lines = [];
          this.flatten(lines);
          return lines;
        }
        static of(text) {
          if (text.length == 0)
            throw new RangeError("A document must have at least one line");
          if (text.length == 1 && !text[0])
            return Text.empty;
          return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
      };
      var TextLeaf = class extends Text {
        constructor(text, length = textLength(text)) {
          super();
          this.text = text;
          this.length = length;
        }
        get lines() {
          return this.text.length;
        }
        get children() {
          return null;
        }
        lineInner(target, isLine, line, offset) {
          for (let i = 0; ; i++) {
            let string = this.text[i], end = offset + string.length;
            if ((isLine ? line : end) >= target)
              return new Line(offset, end, line, string);
            offset = end + 1;
            line++;
          }
        }
        decompose(from, to, target, open) {
          let text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
          if (open & 1) {
            let prev = target.pop();
            let joined = appendText(text.text, prev.text.slice(), 0, text.length);
            if (joined.length <= 32) {
              target.push(new TextLeaf(joined, prev.length + text.length));
            } else {
              let mid = joined.length >> 1;
              target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
            }
          } else {
            target.push(text);
          }
        }
        replace(from, to, text) {
          if (!(text instanceof TextLeaf))
            return super.replace(from, to, text);
          let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
          let newLen = this.length + text.length - (to - from);
          if (lines.length <= 32)
            return new TextLeaf(lines, newLen);
          return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
          let result = "";
          for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
            let line = this.text[i], end = pos + line.length;
            if (pos > from && i)
              result += lineSep;
            if (from < end && to > pos)
              result += line.slice(Math.max(0, from - pos), to - pos);
            pos = end + 1;
          }
          return result;
        }
        flatten(target) {
          for (let line of this.text)
            target.push(line);
        }
        scanIdentical() {
          return 0;
        }
        static split(text, target) {
          let part = [], len = -1;
          for (let line of text) {
            part.push(line);
            len += line.length + 1;
            if (part.length == 32) {
              target.push(new TextLeaf(part, len));
              part = [];
              len = -1;
            }
          }
          if (len > -1)
            target.push(new TextLeaf(part, len));
          return target;
        }
      };
      var TextNode = class extends Text {
        constructor(children, length) {
          super();
          this.children = children;
          this.length = length;
          this.lines = 0;
          for (let child of children)
            this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
          for (let i = 0; ; i++) {
            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
            if ((isLine ? endLine : end) >= target)
              return child.lineInner(target, isLine, line, offset);
            offset = end + 1;
            line = endLine + 1;
          }
        }
        decompose(from, to, target, open) {
          for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
            let child = this.children[i], end = pos + child.length;
            if (from <= end && to >= pos) {
              let childOpen = open & ((pos <= from ? 1 : 0) | (end >= to ? 2 : 0));
              if (pos >= from && end <= to && !childOpen)
                target.push(child);
              else
                child.decompose(from - pos, to - pos, target, childOpen);
            }
            pos = end + 1;
          }
        }
        replace(from, to, text) {
          if (text.lines < this.lines)
            for (let i = 0, pos = 0; i < this.children.length; i++) {
              let child = this.children[i], end = pos + child.length;
              if (from >= pos && to <= end) {
                let updated = child.replace(from - pos, to - pos, text);
                let totalLines = this.lines - child.lines + updated.lines;
                if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
                  let copy = this.children.slice();
                  copy[i] = updated;
                  return new TextNode(copy, this.length - (to - from) + text.length);
                }
                return super.replace(pos, end, updated);
              }
              pos = end + 1;
            }
          return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
          let result = "";
          for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
            let child = this.children[i], end = pos + child.length;
            if (pos > from && i)
              result += lineSep;
            if (from < end && to > pos)
              result += child.sliceString(from - pos, to - pos, lineSep);
            pos = end + 1;
          }
          return result;
        }
        flatten(target) {
          for (let child of this.children)
            child.flatten(target);
        }
        scanIdentical(other, dir) {
          if (!(other instanceof TextNode))
            return 0;
          let length = 0;
          let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
          for (; ; iA += dir, iB += dir) {
            if (iA == eA || iB == eB)
              return length;
            let chA = this.children[iA], chB = other.children[iB];
            if (chA != chB)
              return length + chA.scanIdentical(chB, dir);
            length += chA.length + 1;
          }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
          let lines = 0;
          for (let ch of children)
            lines += ch.lines;
          if (lines < 32) {
            let flat = [];
            for (let ch of children)
              ch.flatten(flat);
            return new TextLeaf(flat, length);
          }
          let chunk = Math.max(32, lines >> 5), maxChunk = chunk << 1, minChunk = chunk >> 1;
          let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
          function add(child) {
            let last;
            if (child.lines > maxChunk && child instanceof TextNode) {
              for (let node of child.children)
                add(node);
            } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
              flush();
              chunked.push(child);
            } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
              currentLines += child.lines;
              currentLen += child.length + 1;
              currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
            } else {
              if (currentLines + child.lines > chunk)
                flush();
              currentLines += child.lines;
              currentLen += child.length + 1;
              currentChunk.push(child);
            }
          }
          function flush() {
            if (currentLines == 0)
              return;
            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
            currentLen = -1;
            currentLines = currentChunk.length = 0;
          }
          for (let child of children)
            add(child);
          flush();
          return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
      };
      Text.empty = new TextLeaf([""], 0);
      function textLength(text) {
        let length = -1;
        for (let line of text)
          length += line.length + 1;
        return length;
      }
      function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
          let line = text[i], end = pos + line.length;
          if (end >= from) {
            if (end > to)
              line = line.slice(0, to - pos);
            if (pos < from)
              line = line.slice(from - pos);
            if (first) {
              target[target.length - 1] += line;
              first = false;
            } else
              target.push(line);
          }
          pos = end + 1;
        }
        return target;
      }
      function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
      }
      var RawTextCursor = class {
        constructor(text, dir = 1) {
          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
          this.done = this.lineBreak = false;
          for (; ; ) {
            let last = this.nodes.length - 1;
            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
            let size = top instanceof TextLeaf ? top.text.length : top.children.length;
            if (offset == (dir > 0 ? size : 0)) {
              if (last == 0) {
                this.done = true;
                this.value = "";
                return this;
              }
              if (dir > 0)
                this.offsets[last - 1]++;
              this.nodes.pop();
              this.offsets.pop();
            } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
              this.offsets[last] += dir;
              if (skip == 0) {
                this.lineBreak = true;
                this.value = "\n";
                return this;
              }
              skip--;
            } else if (top instanceof TextLeaf) {
              let next = top.text[offset + (dir < 0 ? -1 : 0)];
              this.offsets[last] += dir;
              if (next.length > Math.max(0, skip)) {
                this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                return this;
              }
              skip -= next.length;
            } else {
              let next = top.children[offset + (dir < 0 ? -1 : 0)];
              if (skip > next.length) {
                skip -= next.length;
                this.offsets[last] += dir;
              } else {
                if (dir < 0)
                  this.offsets[last]--;
                this.nodes.push(next);
                this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
              }
            }
          }
        }
        next(skip = 0) {
          if (skip < 0) {
            this.nextInner(-skip, -this.dir);
            skip = this.value.length;
          }
          return this.nextInner(skip, this.dir);
        }
      };
      var PartialTextCursor = class {
        constructor(text, start, end) {
          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
          this.pos = start > end ? text.length : 0;
          this.from = Math.min(start, end);
          this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
          if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
            this.value = "";
            this.done = true;
            return this;
          }
          skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
          let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
          if (skip > limit)
            skip = limit;
          limit -= skip;
          let { value } = this.cursor.next(skip);
          this.pos += (value.length + skip) * dir;
          this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
          this.done = !this.value;
          return this;
        }
        next(skip = 0) {
          if (skip < 0)
            skip = Math.max(skip, this.from - this.pos);
          else if (skip > 0)
            skip = Math.min(skip, this.to - this.pos);
          return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() {
          return this.cursor.lineBreak && this.value != "";
        }
      };
      var LineCursor = class {
        constructor(inner) {
          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
        }
        next(skip = 0) {
          let { done, lineBreak, value } = this.inner.next(skip);
          if (done) {
            this.done = true;
            this.value = "";
          } else if (lineBreak) {
            if (this.afterBreak) {
              this.value = "";
            } else {
              this.afterBreak = true;
              this.next();
            }
          } else {
            this.value = value;
            this.afterBreak = false;
          }
          return this;
        }
        get lineBreak() {
          return false;
        }
      };
      if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function() {
          return this.iter();
        };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
          return this;
        };
      }
      var Line = class {
        constructor(from, to, number, text) {
          this.from = from;
          this.to = to;
          this.number = number;
          this.text = text;
        }
        get length() {
          return this.to - this.from;
        }
      };
      exports.Line = Line;
      exports.Text = Text;
      exports.codePointAt = codePointAt;
      exports.codePointSize = codePointSize;
      exports.countColumn = countColumn;
      exports.findClusterBreak = findClusterBreak;
      exports.findColumn = findColumn;
      exports.fromCodePoint = fromCodePoint;
    }
  });

  // ../../../node_modules/@codemirror/state/dist/index.cjs
  var require_dist2 = __commonJS({
    "../../../node_modules/@codemirror/state/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var text = require_dist();
      var DefaultSplit = /\r\n?|\n/;
      exports.MapMode = void 0;
      (function(MapMode) {
        MapMode[MapMode["Simple"] = 0] = "Simple";
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
      })(exports.MapMode || (exports.MapMode = {}));
      var ChangeDesc = class {
        constructor(sections) {
          this.sections = sections;
        }
        get length() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2)
            result += this.sections[i];
          return result;
        }
        get newLength() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2) {
            let ins = this.sections[i + 1];
            result += ins < 0 ? this.sections[i] : ins;
          }
          return result;
        }
        get empty() {
          return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
        }
        iterGaps(f) {
          for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++];
            if (ins < 0) {
              f(posA, posB, len);
              posB += len;
            } else {
              posB += ins;
            }
            posA += len;
          }
        }
        iterChangedRanges(f, individual = false) {
          iterChanges(this, f, individual);
        }
        get invertedDesc() {
          let sections = [];
          for (let i = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++];
            if (ins < 0)
              sections.push(len, ins);
            else
              sections.push(ins, len);
          }
          return new ChangeDesc(sections);
        }
        composeDesc(other) {
          return this.empty ? other : other.empty ? this : composeSets(this, other);
        }
        mapDesc(other, before = false) {
          return other.empty ? this : mapSet(this, other, before);
        }
        mapPos(pos, assoc = -1, mode = exports.MapMode.Simple) {
          let posA = 0, posB = 0;
          for (let i = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
            if (ins < 0) {
              if (endA > pos)
                return posB + (pos - posA);
              posB += len;
            } else {
              if (mode != exports.MapMode.Simple && endA >= pos && (mode == exports.MapMode.TrackDel && posA < pos && endA > pos || mode == exports.MapMode.TrackBefore && posA < pos || mode == exports.MapMode.TrackAfter && endA > pos))
                return null;
              if (endA > pos || endA == pos && assoc < 0 && !len)
                return pos == posA || assoc < 0 ? posB : posB + ins;
              posB += ins;
            }
            posA = endA;
          }
          if (pos > posA)
            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
          return posB;
        }
        touchesRange(from, to = from) {
          for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
            if (ins >= 0 && pos <= to && end >= from)
              return pos < from && end > to ? "cover" : true;
            pos = end;
          }
          return false;
        }
        toString() {
          let result = "";
          for (let i = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++];
            result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
          }
          return result;
        }
        toJSON() {
          return this.sections;
        }
        static fromJSON(json) {
          if (!Array.isArray(json) || json.length % 2 || json.some((a) => typeof a != "number"))
            throw new RangeError("Invalid JSON representation of ChangeDesc");
          return new ChangeDesc(json);
        }
      };
      var ChangeSet = class extends ChangeDesc {
        constructor(sections, inserted) {
          super(sections);
          this.inserted = inserted;
        }
        apply(doc) {
          if (this.length != doc.length)
            throw new RangeError("Applying change set to a document with the wrong length");
          iterChanges(this, (fromA, toA, fromB, _toB, text2) => doc = doc.replace(fromB, fromB + (toA - fromA), text2), false);
          return doc;
        }
        mapDesc(other, before = false) {
          return mapSet(this, other, before, true);
        }
        invert(doc) {
          let sections = this.sections.slice(), inserted = [];
          for (let i = 0, pos = 0; i < sections.length; i += 2) {
            let len = sections[i], ins = sections[i + 1];
            if (ins >= 0) {
              sections[i] = ins;
              sections[i + 1] = len;
              let index = i >> 1;
              while (inserted.length < index)
                inserted.push(text.Text.empty);
              inserted.push(len ? doc.slice(pos, pos + len) : text.Text.empty);
            }
            pos += len;
          }
          return new ChangeSet(sections, inserted);
        }
        compose(other) {
          return this.empty ? other : other.empty ? this : composeSets(this, other, true);
        }
        map(other, before = false) {
          return other.empty ? this : mapSet(this, other, before, true);
        }
        iterChanges(f, individual = false) {
          iterChanges(this, f, individual);
        }
        get desc() {
          return new ChangeDesc(this.sections);
        }
        filter(ranges) {
          let resultSections = [], resultInserted = [], filteredSections = [];
          let iter = new SectionIter(this);
          done:
            for (let i = 0, pos = 0; ; ) {
              let next = i == ranges.length ? 1e9 : ranges[i++];
              while (pos < next || pos == next && iter.len == 0) {
                if (iter.done)
                  break done;
                let len = Math.min(iter.len, next - pos);
                addSection(filteredSections, len, -1);
                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                addSection(resultSections, len, ins);
                if (ins > 0)
                  addInsert(resultInserted, resultSections, iter.text);
                iter.forward(len);
                pos += len;
              }
              let end = ranges[i++];
              while (pos < end) {
                if (iter.done)
                  break done;
                let len = Math.min(iter.len, end - pos);
                addSection(resultSections, len, -1);
                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                iter.forward(len);
                pos += len;
              }
            }
          return {
            changes: new ChangeSet(resultSections, resultInserted),
            filtered: new ChangeDesc(filteredSections)
          };
        }
        toJSON() {
          let parts = [];
          for (let i = 0; i < this.sections.length; i += 2) {
            let len = this.sections[i], ins = this.sections[i + 1];
            if (ins < 0)
              parts.push(len);
            else if (ins == 0)
              parts.push([len]);
            else
              parts.push([len].concat(this.inserted[i >> 1].toJSON()));
          }
          return parts;
        }
        static of(changes, length, lineSep) {
          let sections = [], inserted = [], pos = 0;
          let total = null;
          function flush(force = false) {
            if (!force && !sections.length)
              return;
            if (pos < length)
              addSection(sections, length - pos, -1);
            let set = new ChangeSet(sections, inserted);
            total = total ? total.compose(set.map(total)) : set;
            sections = [];
            inserted = [];
            pos = 0;
          }
          function process2(spec) {
            if (Array.isArray(spec)) {
              for (let sub of spec)
                process2(sub);
            } else if (spec instanceof ChangeSet) {
              if (spec.length != length)
                throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
              flush();
              total = total ? total.compose(spec.map(total)) : spec;
            } else {
              let { from, to = from, insert } = spec;
              if (from > to || from < 0 || to > length)
                throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
              let insText = !insert ? text.Text.empty : typeof insert == "string" ? text.Text.of(insert.split(lineSep || DefaultSplit)) : insert;
              let insLen = insText.length;
              if (from == to && insLen == 0)
                return;
              if (from < pos)
                flush();
              if (from > pos)
                addSection(sections, from - pos, -1);
              addSection(sections, to - from, insLen);
              addInsert(inserted, sections, insText);
              pos = to;
            }
          }
          process2(changes);
          flush(!total);
          return total;
        }
        static empty(length) {
          return new ChangeSet(length ? [length, -1] : [], []);
        }
        static fromJSON(json) {
          if (!Array.isArray(json))
            throw new RangeError("Invalid JSON representation of ChangeSet");
          let sections = [], inserted = [];
          for (let i = 0; i < json.length; i++) {
            let part = json[i];
            if (typeof part == "number") {
              sections.push(part, -1);
            } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
              throw new RangeError("Invalid JSON representation of ChangeSet");
            } else if (part.length == 1) {
              sections.push(part[0], 0);
            } else {
              while (inserted.length < i)
                inserted.push(text.Text.empty);
              inserted[i] = text.Text.of(part.slice(1));
              sections.push(part[0], inserted[i].length);
            }
          }
          return new ChangeSet(sections, inserted);
        }
      };
      function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
          return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
          sections[last] += len;
        else if (len == 0 && sections[last] == 0)
          sections[last + 1] += ins;
        else if (forceJoin) {
          sections[last] += len;
          sections[last + 1] += ins;
        } else
          sections.push(len, ins);
      }
      function addInsert(values, sections, value) {
        if (value.length == 0)
          return;
        let index = sections.length - 2 >> 1;
        if (index < values.length) {
          values[values.length - 1] = values[values.length - 1].append(value);
        } else {
          while (values.length < index)
            values.push(text.Text.empty);
          values.push(value);
        }
      }
      function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
          let len = desc.sections[i++], ins = desc.sections[i++];
          if (ins < 0) {
            posA += len;
            posB += len;
          } else {
            let endA = posA, endB = posB, text$1 = text.Text.empty;
            for (; ; ) {
              endA += len;
              endB += ins;
              if (ins && inserted)
                text$1 = text$1.append(inserted[i - 2 >> 1]);
              if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                break;
              len = desc.sections[i++];
              ins = desc.sections[i++];
            }
            f(posA, endA, posB, endB, text$1);
            posA = endA;
            posB = endB;
          }
        }
      }
      function mapSet(setA, setB, before, mkSet = false) {
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let posA = 0, posB = 0; ; ) {
          if (a.ins == -1) {
            posA += a.len;
            a.next();
          } else if (b.ins == -1 && posB < posA) {
            let skip = Math.min(b.len, posA - posB);
            b.forward(skip);
            addSection(sections, skip, -1);
            posB += skip;
          } else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
            addSection(sections, b.ins, -1);
            while (posA > posB && !a.done && posA + a.len < posB + b.len) {
              posA += a.len;
              a.next();
            }
            posB += b.len;
            b.next();
          } else if (a.ins >= 0) {
            let len = 0, end = posA + a.len;
            for (; ; ) {
              if (b.ins >= 0 && posB > posA && posB + b.len < end) {
                len += b.ins;
                posB += b.len;
                b.next();
              } else if (b.ins == -1 && posB < end) {
                let skip = Math.min(b.len, end - posB);
                len += skip;
                b.forward(skip);
                posB += skip;
              } else {
                break;
              }
            }
            addSection(sections, len, a.ins);
            if (insert)
              addInsert(insert, sections, a.text);
            posA = end;
            a.next();
          } else if (a.done && b.done) {
            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
          } else {
            throw new Error("Mismatched change set lengths");
          }
        }
      }
      function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false; ; ) {
          if (a.done && b.done) {
            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
          } else if (a.ins == 0) {
            addSection(sections, a.len, 0, open);
            a.next();
          } else if (b.len == 0 && !b.done) {
            addSection(sections, 0, b.ins, open);
            if (insert)
              addInsert(insert, sections, b.text);
            b.next();
          } else if (a.done || b.done) {
            throw new Error("Mismatched change set lengths");
          } else {
            let len = Math.min(a.len2, b.len), sectionLen = sections.length;
            if (a.ins == -1) {
              let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
              addSection(sections, len, insB, open);
              if (insert && insB)
                addInsert(insert, sections, b.text);
            } else if (b.ins == -1) {
              addSection(sections, a.off ? 0 : a.len, len, open);
              if (insert)
                addInsert(insert, sections, a.textBit(len));
            } else {
              addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
              if (insert && !b.off)
                addInsert(insert, sections, b.text);
            }
            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
            a.forward2(len);
            b.forward(len);
          }
        }
      }
      var SectionIter = class {
        constructor(set) {
          this.set = set;
          this.i = 0;
          this.next();
        }
        next() {
          let { sections } = this.set;
          if (this.i < sections.length) {
            this.len = sections[this.i++];
            this.ins = sections[this.i++];
          } else {
            this.len = 0;
            this.ins = -2;
          }
          this.off = 0;
        }
        get done() {
          return this.ins == -2;
        }
        get len2() {
          return this.ins < 0 ? this.len : this.ins;
        }
        get text() {
          let { inserted } = this.set, index = this.i - 2 >> 1;
          return index >= inserted.length ? text.Text.empty : inserted[index];
        }
        textBit(len) {
          let { inserted } = this.set, index = this.i - 2 >> 1;
          return index >= inserted.length && !len ? text.Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
        }
        forward(len) {
          if (len == this.len)
            this.next();
          else {
            this.len -= len;
            this.off += len;
          }
        }
        forward2(len) {
          if (this.ins == -1)
            this.forward(len);
          else if (len == this.ins)
            this.next();
          else {
            this.ins -= len;
            this.off += len;
          }
        }
      };
      var SelectionRange = class {
        constructor(from, to, flags) {
          this.from = from;
          this.to = to;
          this.flags = flags;
        }
        get anchor() {
          return this.flags & 16 ? this.to : this.from;
        }
        get head() {
          return this.flags & 16 ? this.from : this.to;
        }
        get empty() {
          return this.from == this.to;
        }
        get assoc() {
          return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
        }
        get bidiLevel() {
          let level = this.flags & 3;
          return level == 3 ? null : level;
        }
        get goalColumn() {
          let value = this.flags >> 5;
          return value == 33554431 ? void 0 : value;
        }
        map(change, assoc = -1) {
          let from = change.mapPos(this.from, assoc), to = change.mapPos(this.to, assoc);
          return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        extend(from, to = from) {
          if (from <= this.anchor && to >= this.anchor)
            return EditorSelection.range(from, to);
          let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
          return EditorSelection.range(this.anchor, head);
        }
        eq(other) {
          return this.anchor == other.anchor && this.head == other.head;
        }
        toJSON() {
          return { anchor: this.anchor, head: this.head };
        }
        static fromJSON(json) {
          if (!json || typeof json.anchor != "number" || typeof json.head != "number")
            throw new RangeError("Invalid JSON representation for SelectionRange");
          return EditorSelection.range(json.anchor, json.head);
        }
      };
      var EditorSelection = class {
        constructor(ranges, mainIndex = 0) {
          this.ranges = ranges;
          this.mainIndex = mainIndex;
        }
        map(change, assoc = -1) {
          if (change.empty)
            return this;
          return EditorSelection.create(this.ranges.map((r) => r.map(change, assoc)), this.mainIndex);
        }
        eq(other) {
          if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
            return false;
          for (let i = 0; i < this.ranges.length; i++)
            if (!this.ranges[i].eq(other.ranges[i]))
              return false;
          return true;
        }
        get main() {
          return this.ranges[this.mainIndex];
        }
        asSingle() {
          return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
        }
        addRange(range, main = true) {
          return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        replaceRange(range, which = this.mainIndex) {
          let ranges = this.ranges.slice();
          ranges[which] = range;
          return EditorSelection.create(ranges, this.mainIndex);
        }
        toJSON() {
          return { ranges: this.ranges.map((r) => r.toJSON()), main: this.mainIndex };
        }
        static fromJSON(json) {
          if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
            throw new RangeError("Invalid JSON representation for EditorSelection");
          return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        static single(anchor, head = anchor) {
          return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        static create(ranges, mainIndex = 0) {
          if (ranges.length == 0)
            throw new RangeError("A selection needs at least one range");
          for (let pos = 0, i = 0; i < ranges.length; i++) {
            let range = ranges[i];
            if (range.empty ? range.from <= pos : range.from < pos)
              return normalized(ranges.slice(), mainIndex);
            pos = range.to;
          }
          return new EditorSelection(ranges, mainIndex);
        }
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
          return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 : 8) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431) << 5);
        }
        static range(anchor, head, goalColumn) {
          let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431) << 5;
          return head < anchor ? new SelectionRange(head, anchor, 16 | goal) : new SelectionRange(anchor, head, goal);
        }
      };
      function normalized(ranges, mainIndex = 0) {
        let main = ranges[mainIndex];
        ranges.sort((a, b) => a.from - b.from);
        mainIndex = ranges.indexOf(main);
        for (let i = 1; i < ranges.length; i++) {
          let range = ranges[i], prev = ranges[i - 1];
          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            let from = prev.from, to = Math.max(range.to, prev.to);
            if (i <= mainIndex)
              mainIndex--;
            ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
          }
        }
        return new EditorSelection(ranges, mainIndex);
      }
      function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
          if (range.to > docLength)
            throw new RangeError("Selection points outside of document");
      }
      var nextID = 0;
      var Facet = class {
        constructor(combine, compareInput, compare, isStatic, extensions) {
          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare;
          this.isStatic = isStatic;
          this.extensions = extensions;
          this.id = nextID++;
          this.default = combine([]);
        }
        static define(config = {}) {
          return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
        }
        of(value) {
          return new FacetProvider([], this, 0, value);
        }
        compute(deps, get) {
          if (this.isStatic)
            throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 1, get);
        }
        computeN(deps, get) {
          if (this.isStatic)
            throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 2, get);
        }
        from(field, get) {
          if (!get)
            get = (x) => x;
          return this.compute([field], (state) => get(state.field(field)));
        }
      };
      function sameArray(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
      }
      var FacetProvider = class {
        constructor(dependencies, facet, type, value) {
          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type;
          this.value = value;
          this.id = nextID++;
        }
        dynamicSlot(addresses) {
          var _a;
          let getter = this.value;
          let compare = this.facet.compareInput;
          let idx = addresses[this.id] >> 1, multi = this.type == 2;
          let depDoc = false, depSel = false, depAddrs = [];
          for (let dep of this.dependencies) {
            if (dep == "doc")
              depDoc = true;
            else if (dep == "selection")
              depSel = true;
            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
              depAddrs.push(addresses[dep.id]);
          }
          return (state, tr) => {
            let oldVal = state.values[idx];
            if (oldVal === Uninitialized) {
              state.values[idx] = getter(state);
              return 1;
            }
            if (tr) {
              let depChanged = depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || depAddrs.some((addr) => (ensureAddr(state, addr) & 1) > 0);
              if (depChanged) {
                let newVal = getter(state);
                if (multi ? !compareArray(newVal, oldVal, compare) : !compare(newVal, oldVal)) {
                  state.values[idx] = newVal;
                  return 1;
                }
              }
            }
            return 0;
          };
        }
      };
      function compareArray(a, b, compare) {
        if (a.length != b.length)
          return false;
        for (let i = 0; i < a.length; i++)
          if (!compare(a[i], b[i]))
            return false;
        return true;
      }
      function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map((p) => addresses[p.id]);
        let providerTypes = providers.map((p) => p.type);
        let dynamic = providerAddrs.filter((p) => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        return (state, tr) => {
          let oldVal = state.values[idx], changed = oldVal === Uninitialized || !tr;
          for (let dynAddr of dynamic) {
            if (ensureAddr(state, dynAddr) & 1)
              changed = true;
          }
          if (!changed)
            return 0;
          let values = [];
          for (let i = 0; i < providerAddrs.length; i++) {
            let value2 = getAddr(state, providerAddrs[i]);
            if (providerTypes[i] == 2)
              for (let val of value2)
                values.push(val);
            else
              values.push(value2);
          }
          let value = facet.combine(values);
          if (oldVal !== Uninitialized && facet.compare(value, oldVal))
            return 0;
          state.values[idx] = value;
          return 1;
        };
      }
      var initField = Facet.define({ static: true });
      var StateField = class {
        constructor(id, createF, updateF, compareF, spec) {
          this.id = id;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          this.provides = void 0;
        }
        static define(config) {
          let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
          if (config.provide)
            field.provides = config.provide(field);
          return field;
        }
        create(state) {
          let init = state.facet(initField).find((i) => i.field == this);
          return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        slot(addresses) {
          let idx = addresses[this.id] >> 1;
          return (state, tr) => {
            let oldVal = state.values[idx];
            if (oldVal === Uninitialized) {
              state.values[idx] = this.create(state);
              return 1;
            }
            if (tr) {
              let value = this.updateF(oldVal, tr);
              if (!this.compareF(oldVal, value)) {
                state.values[idx] = value;
                return 1;
              }
            }
            return 0;
          };
        }
        init(create) {
          return [this, initField.of({ field: this, create })];
        }
        get extension() {
          return this;
        }
      };
      var Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
      function prec(value) {
        return (ext) => new PrecExtension(ext, value);
      }
      var Prec = {
        lowest: prec(Prec_.lowest),
        low: prec(Prec_.low),
        default: prec(Prec_.default),
        high: prec(Prec_.high),
        highest: prec(Prec_.highest),
        fallback: prec(Prec_.lowest),
        extend: prec(Prec_.high),
        override: prec(Prec_.highest)
      };
      var PrecExtension = class {
        constructor(inner, prec2) {
          this.inner = inner;
          this.prec = prec2;
        }
      };
      var Compartment = class {
        of(ext) {
          return new CompartmentInstance(this, ext);
        }
        reconfigure(content) {
          return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        get(state) {
          return state.config.compartments.get(this);
        }
      };
      var CompartmentInstance = class {
        constructor(compartment, inner) {
          this.compartment = compartment;
          this.inner = inner;
        }
      };
      var Configuration = class {
        constructor(base, compartments, dynamicSlots, address, staticValues) {
          this.base = base;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.statusTemplate = [];
          while (this.statusTemplate.length < dynamicSlots.length)
            this.statusTemplate.push(0);
        }
        staticFacet(facet) {
          let addr = this.address[facet.id];
          return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
          let fields = [];
          let facets = Object.create(null);
          let newCompartments = /* @__PURE__ */ new Map();
          for (let ext of flatten(base, compartments, newCompartments)) {
            if (ext instanceof StateField)
              fields.push(ext);
            else
              (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
          let address = Object.create(null);
          let staticValues = [];
          let dynamicSlots = [];
          let dynamicDeps = [];
          for (let field of fields) {
            address[field.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a) => field.slot(a));
            dynamicDeps.push([]);
          }
          for (let id in facets) {
            let providers = facets[id], facet = providers[0].facet;
            if (providers.every((p) => p.type == 0)) {
              address[facet.id] = staticValues.length << 1 | 1;
              let value = facet.combine(providers.map((p) => p.value));
              let oldAddr = oldState ? oldState.config.address[facet.id] : null;
              if (oldAddr != null) {
                let oldVal = getAddr(oldState, oldAddr);
                if (facet.compare(value, oldVal))
                  value = oldVal;
              }
              staticValues.push(value);
            } else {
              for (let p of providers) {
                if (p.type == 0) {
                  address[p.id] = staticValues.length << 1 | 1;
                  staticValues.push(p.value);
                } else {
                  address[p.id] = dynamicSlots.length << 1;
                  dynamicSlots.push((a) => p.dynamicSlot(a));
                  dynamicDeps.push(p.dependencies.filter((d) => typeof d != "string").map((d) => d.id));
                }
              }
              address[facet.id] = dynamicSlots.length << 1;
              dynamicSlots.push((a) => dynamicFacetSlot(a, facet, providers));
              dynamicDeps.push(providers.filter((p) => p.type != 0).map((d) => d.id));
            }
          }
          let dynamicValues = dynamicSlots.map((_) => Uninitialized);
          if (oldState) {
            let canReuse = (id, depth) => {
              if (depth > 7)
                return false;
              let addr = address[id];
              if (!(addr & 1))
                return dynamicDeps[addr >> 1].every((id2) => canReuse(id2, depth + 1));
              let oldAddr = oldState.config.address[id];
              return oldAddr != null && getAddr(oldState, oldAddr) == staticValues[addr >> 1];
            };
            for (let id in address) {
              let cur = address[id], prev = oldState.config.address[id];
              if (prev != null && (cur & 1) == 0 && canReuse(+id, 0))
                dynamicValues[cur >> 1] = getAddr(oldState, prev);
            }
          }
          return {
            configuration: new Configuration(base, newCompartments, dynamicSlots.map((f) => f(address)), address, staticValues),
            values: dynamicValues
          };
        }
      };
      function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = /* @__PURE__ */ new Map();
        function inner(ext, prec2) {
          let known = seen.get(ext);
          if (known != null) {
            if (known >= prec2)
              return;
            let found = result[known].indexOf(ext);
            if (found > -1)
              result[known].splice(found, 1);
            if (ext instanceof CompartmentInstance)
              newCompartments.delete(ext.compartment);
          }
          seen.set(ext, prec2);
          if (Array.isArray(ext)) {
            for (let e of ext)
              inner(e, prec2);
          } else if (ext instanceof CompartmentInstance) {
            if (newCompartments.has(ext.compartment))
              throw new RangeError(`Duplicate use of compartment in extensions`);
            let content = compartments.get(ext.compartment) || ext.inner;
            newCompartments.set(ext.compartment, content);
            inner(content, prec2);
          } else if (ext instanceof PrecExtension) {
            inner(ext.inner, ext.prec);
          } else if (ext instanceof StateField) {
            result[prec2].push(ext);
            if (ext.provides)
              inner(ext.provides, prec2);
          } else if (ext instanceof FacetProvider) {
            result[prec2].push(ext);
            if (ext.facet.extensions)
              inner(ext.facet.extensions, prec2);
          } else {
            let content = ext.extension;
            if (!content)
              throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
            inner(content, prec2);
          }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
      }
      var Uninitialized = {};
      function ensureAddr(state, addr) {
        if (addr & 1)
          return 2;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4)
          throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2)
          return status;
        state.status[idx] = 4;
        let changed = state.config.dynamicSlots[idx](state, state.applying);
        return state.status[idx] = 2 | changed;
      }
      function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
      }
      var languageData = Facet.define();
      var allowMultipleSelections = Facet.define({
        combine: (values) => values.some((v) => v),
        static: true
      });
      var lineSeparator = Facet.define({
        combine: (values) => values.length ? values[0] : void 0,
        static: true
      });
      var changeFilter = Facet.define();
      var transactionFilter = Facet.define();
      var transactionExtender = Facet.define();
      var readOnly = Facet.define({
        combine: (values) => values.length ? values[0] : false
      });
      var Annotation = class {
        constructor(type, value) {
          this.type = type;
          this.value = value;
        }
        static define() {
          return new AnnotationType();
        }
      };
      var AnnotationType = class {
        of(value) {
          return new Annotation(this, value);
        }
      };
      var StateEffectType = class {
        constructor(map) {
          this.map = map;
        }
        of(value) {
          return new StateEffect(this, value);
        }
      };
      var StateEffect = class {
        constructor(type, value) {
          this.type = type;
          this.value = value;
        }
        map(mapping) {
          let mapped = this.type.map(this.value, mapping);
          return mapped === void 0 ? void 0 : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        is(type) {
          return this.type == type;
        }
        static define(spec = {}) {
          return new StateEffectType(spec.map || ((v) => v));
        }
        static mapEffects(effects, mapping) {
          if (!effects.length)
            return effects;
          let result = [];
          for (let effect of effects) {
            let mapped = effect.map(mapping);
            if (mapped)
              result.push(mapped);
          }
          return result;
        }
      };
      StateEffect.reconfigure = StateEffect.define();
      StateEffect.appendConfig = StateEffect.define();
      var Transaction = class {
        constructor(startState, changes, selection, effects, annotations, scrollIntoView) {
          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView;
          this._doc = null;
          this._state = null;
          if (selection)
            checkSelection(selection, changes.newLength);
          if (!annotations.some((a) => a.type == Transaction.time))
            this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        get newDoc() {
          return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        get newSelection() {
          return this.selection || this.startState.selection.map(this.changes);
        }
        get state() {
          if (!this._state)
            this.startState.applyTransaction(this);
          return this._state;
        }
        annotation(type) {
          for (let ann of this.annotations)
            if (ann.type == type)
              return ann.value;
          return void 0;
        }
        get docChanged() {
          return !this.changes.empty;
        }
        get reconfigured() {
          return this.startState.config != this.state.config;
        }
        isUserEvent(event) {
          let e = this.annotation(Transaction.userEvent);
          return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
      };
      Transaction.time = Annotation.define();
      Transaction.userEvent = Annotation.define();
      Transaction.addToHistory = Annotation.define();
      Transaction.remote = Annotation.define();
      function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0; ; ) {
          let from, to;
          if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
            from = a[iA++];
            to = a[iA++];
          } else if (iB < b.length) {
            from = b[iB++];
            to = b[iB++];
          } else
            return result;
          if (!result.length || result[result.length - 1] < from)
            result.push(from, to);
          else if (result[result.length - 1] < to)
            result[result.length - 1] = to;
        }
      }
      function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
          mapForA = b.changes;
          mapForB = ChangeSet.empty(b.changes.length);
          changes = a.changes.compose(b.changes);
        } else {
          mapForA = b.changes.map(a.changes);
          mapForB = a.changes.mapDesc(b.changes, true);
          changes = a.changes.compose(mapForA);
        }
        return {
          changes,
          selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
          effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
          annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
          scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
      }
      function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray(spec.annotations);
        if (spec.userEvent)
          annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
          changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
          selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
          effects: asArray(spec.effects),
          annotations,
          scrollIntoView: !!spec.scrollIntoView
        };
      }
      function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
          filter = false;
        for (let i = 1; i < specs.length; i++) {
          if (specs[i].filter === false)
            filter = false;
          let seq = !!specs[i].sequential;
          s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
      }
      function filterTransaction(tr) {
        let state = tr.startState;
        let result = true;
        for (let filter of state.facet(changeFilter)) {
          let value = filter(tr);
          if (value === false) {
            result = false;
            break;
          }
          if (Array.isArray(value))
            result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
          let changes, back;
          if (result === false) {
            back = tr.changes.invertedDesc;
            changes = ChangeSet.empty(state.doc.length);
          } else {
            let filtered = tr.changes.filter(result);
            changes = filtered.changes;
            back = filtered.filtered.invertedDesc;
          }
          tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
          let filtered = filters[i](tr);
          if (filtered instanceof Transaction)
            tr = filtered;
          else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
            tr = filtered[0];
          else
            tr = resolveTransaction(state, asArray(filtered), false);
        }
        return tr;
      }
      function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
          let extension = extenders[i](tr);
          if (extension && Object.keys(extension).length)
            spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
      }
      var none = [];
      function asArray(value) {
        return value == null ? none : Array.isArray(value) ? value : [value];
      }
      exports.CharCategory = void 0;
      (function(CharCategory) {
        CharCategory[CharCategory["Word"] = 0] = "Word";
        CharCategory[CharCategory["Space"] = 1] = "Space";
        CharCategory[CharCategory["Other"] = 2] = "Other";
      })(exports.CharCategory || (exports.CharCategory = {}));
      var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
      var wordChar;
      try {
        wordChar = new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
      } catch (_) {
      }
      function hasWordChar(str) {
        if (wordChar)
          return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
          let ch = str[i];
          if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
            return true;
        }
        return false;
      }
      function makeCategorizer(wordChars) {
        return (char) => {
          if (!/\S/.test(char))
            return exports.CharCategory.Space;
          if (hasWordChar(char))
            return exports.CharCategory.Word;
          for (let i = 0; i < wordChars.length; i++)
            if (char.indexOf(wordChars[i]) > -1)
              return exports.CharCategory.Word;
          return exports.CharCategory.Other;
        };
      }
      var EditorState = class {
        constructor(config, doc, selection, values, tr = null) {
          this.config = config;
          this.doc = doc;
          this.selection = selection;
          this.values = values;
          this.applying = null;
          this.status = config.statusTemplate.slice();
          this.applying = tr;
          if (tr)
            tr._state = this;
          for (let i = 0; i < this.config.dynamicSlots.length; i++)
            ensureAddr(this, i << 1);
          this.applying = null;
        }
        field(field, require2 = true) {
          let addr = this.config.address[field.id];
          if (addr == null) {
            if (require2)
              throw new RangeError("Field is not present in this state");
            return void 0;
          }
          ensureAddr(this, addr);
          return getAddr(this, addr);
        }
        update(...specs) {
          return resolveTransaction(this, specs, true);
        }
        applyTransaction(tr) {
          let conf = this.config, { base, compartments } = conf;
          for (let effect of tr.effects) {
            if (effect.is(Compartment.reconfigure)) {
              if (conf) {
                compartments = /* @__PURE__ */ new Map();
                conf.compartments.forEach((val, key) => compartments.set(key, val));
                conf = null;
              }
              compartments.set(effect.value.compartment, effect.value.extension);
            } else if (effect.is(StateEffect.reconfigure)) {
              conf = null;
              base = effect.value;
            } else if (effect.is(StateEffect.appendConfig)) {
              conf = null;
              base = asArray(base).concat(effect.value);
            }
          }
          let startValues;
          if (!conf) {
            let resolved = Configuration.resolve(base, compartments, this);
            conf = resolved.configuration;
            let intermediateState = new EditorState(conf, this.doc, this.selection, resolved.values, null);
            startValues = intermediateState.values;
          } else {
            startValues = tr.startState.values.slice();
          }
          new EditorState(conf, tr.newDoc, tr.newSelection, startValues, tr);
        }
        replaceSelection(text2) {
          if (typeof text2 == "string")
            text2 = this.toText(text2);
          return this.changeByRange((range) => ({
            changes: { from: range.from, to: range.to, insert: text2 },
            range: EditorSelection.cursor(range.from + text2.length)
          }));
        }
        changeByRange(f) {
          let sel = this.selection;
          let result1 = f(sel.ranges[0]);
          let changes = this.changes(result1.changes), ranges = [result1.range];
          let effects = asArray(result1.effects);
          for (let i = 1; i < sel.ranges.length; i++) {
            let result = f(sel.ranges[i]);
            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
            for (let j = 0; j < i; j++)
              ranges[j] = ranges[j].map(newMapped);
            let mapBy = changes.mapDesc(newChanges, true);
            ranges.push(result.range.map(mapBy));
            changes = changes.compose(newMapped);
            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
          }
          return {
            changes,
            selection: EditorSelection.create(ranges, sel.mainIndex),
            effects
          };
        }
        changes(spec = []) {
          if (spec instanceof ChangeSet)
            return spec;
          return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        toText(string) {
          return text.Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        sliceDoc(from = 0, to = this.doc.length) {
          return this.doc.sliceString(from, to, this.lineBreak);
        }
        facet(facet) {
          let addr = this.config.address[facet.id];
          if (addr == null)
            return facet.default;
          ensureAddr(this, addr);
          return getAddr(this, addr);
        }
        toJSON(fields) {
          let result = {
            doc: this.sliceDoc(),
            selection: this.selection.toJSON()
          };
          if (fields)
            for (let prop in fields) {
              let value = fields[prop];
              if (value instanceof StateField)
                result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
            }
          return result;
        }
        static fromJSON(json, config = {}, fields) {
          if (!json || typeof json.doc != "string")
            throw new RangeError("Invalid JSON representation for EditorState");
          let fieldInit = [];
          if (fields)
            for (let prop in fields) {
              let field = fields[prop], value = json[prop];
              fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
            }
          return EditorState.create({
            doc: json.doc,
            selection: EditorSelection.fromJSON(json.selection),
            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
          });
        }
        static create(config = {}) {
          let { configuration, values } = Configuration.resolve(config.extensions || [], /* @__PURE__ */ new Map());
          let doc = config.doc instanceof text.Text ? config.doc : text.Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
          let selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
          checkSelection(selection, doc.length);
          if (!configuration.staticFacet(allowMultipleSelections))
            selection = selection.asSingle();
          return new EditorState(configuration, doc, selection, values);
        }
        get tabSize() {
          return this.facet(EditorState.tabSize);
        }
        get lineBreak() {
          return this.facet(EditorState.lineSeparator) || "\n";
        }
        get readOnly() {
          return this.facet(readOnly);
        }
        phrase(phrase) {
          for (let map of this.facet(EditorState.phrases))
            if (Object.prototype.hasOwnProperty.call(map, phrase))
              return map[phrase];
          return phrase;
        }
        languageDataAt(name, pos, side = -1) {
          let values = [];
          for (let provider of this.facet(languageData)) {
            for (let result of provider(this, pos, side)) {
              if (Object.prototype.hasOwnProperty.call(result, name))
                values.push(result[name]);
            }
          }
          return values;
        }
        charCategorizer(at) {
          return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        wordAt(pos) {
          let { text: text$1, from, length } = this.doc.lineAt(pos);
          let cat = this.charCategorizer(pos);
          let start = pos - from, end = pos - from;
          while (start > 0) {
            let prev = text.findClusterBreak(text$1, start, false);
            if (cat(text$1.slice(prev, start)) != exports.CharCategory.Word)
              break;
            start = prev;
          }
          while (end < length) {
            let next = text.findClusterBreak(text$1, end);
            if (cat(text$1.slice(end, next)) != exports.CharCategory.Word)
              break;
            end = next;
          }
          return start == end ? null : EditorSelection.range(start + from, end + from);
        }
      };
      EditorState.allowMultipleSelections = allowMultipleSelections;
      EditorState.tabSize = Facet.define({
        combine: (values) => values.length ? values[0] : 4
      });
      EditorState.lineSeparator = lineSeparator;
      EditorState.readOnly = readOnly;
      EditorState.phrases = Facet.define();
      EditorState.languageData = languageData;
      EditorState.changeFilter = changeFilter;
      EditorState.transactionFilter = transactionFilter;
      EditorState.transactionExtender = transactionExtender;
      Compartment.reconfigure = StateEffect.define();
      function combineConfig(configs, defaults, combine = {}) {
        let result = {};
        for (let config of configs)
          for (let key of Object.keys(config)) {
            let value = config[key], current = result[key];
            if (current === void 0)
              result[key] = value;
            else if (current === value || value === void 0)
              ;
            else if (Object.hasOwnProperty.call(combine, key))
              result[key] = combine[key](current, value);
            else
              throw new Error("Config merge conflict for field " + key);
          }
        for (let key in defaults)
          if (result[key] === void 0)
            result[key] = defaults[key];
        return result;
      }
      Object.defineProperty(exports, "Text", {
        enumerable: true,
        get: function() {
          return text.Text;
        }
      });
      exports.Annotation = Annotation;
      exports.AnnotationType = AnnotationType;
      exports.ChangeDesc = ChangeDesc;
      exports.ChangeSet = ChangeSet;
      exports.Compartment = Compartment;
      exports.EditorSelection = EditorSelection;
      exports.EditorState = EditorState;
      exports.Facet = Facet;
      exports.Prec = Prec;
      exports.SelectionRange = SelectionRange;
      exports.StateEffect = StateEffect;
      exports.StateEffectType = StateEffectType;
      exports.StateField = StateField;
      exports.Transaction = Transaction;
      exports.combineConfig = combineConfig;
    }
  });

  // ../../../node_modules/style-mod/dist/style-mod.cjs
  var require_style_mod = __commonJS({
    "../../../node_modules/style-mod/dist/style-mod.cjs"(exports) {
      var C = "\u037C";
      var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
      var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
      var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
      var StyleModule = exports.StyleModule = function StyleModule2(spec, options) {
        this.rules = [];
        var ref = options || {};
        var finish = ref.finish;
        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
        }
        function render(selectors, spec2, target, isKeyframes) {
          var local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec2 == null) {
            return target.push(selectors[0] + ";");
          }
          for (var prop2 in spec2) {
            var value = spec2[prop2];
            if (/&/.test(prop2)) {
              render(prop2.split(/,\s*/).map(function(part) {
                return selectors.map(function(sel) {
                  return part.replace(/&/, sel);
                });
              }).reduce(function(a, b) {
                return a.concat(b);
              }), value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) {
                throw new RangeError("The value of a property (" + prop2 + ") should be a primitive value.");
              }
              render(splitSelector(prop2), value, local, keyframes);
            } else if (value != null) {
              local.push(prop2.replace(/_.*/, "").replace(/[A-Z]/g, function(l) {
                return "-" + l.toLowerCase();
              }) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
          }
        }
        for (var prop in spec) {
          render(splitSelector(prop), spec[prop], this.rules);
        }
      };
      StyleModule.prototype.getRules = function getRules() {
        return this.rules.join("\n");
      };
      StyleModule.newName = function newName() {
        var id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36);
      };
      StyleModule.mount = function mount(root, modules) {
        (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
      };
      var adoptedSet = null;
      var StyleSet = function StyleSet2(root) {
        if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
          if (adoptedSet) {
            root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
            return root[SET] = adoptedSet;
          }
          this.sheet = new CSSStyleSheet();
          root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
          adoptedSet = this;
        } else {
          this.styleTag = (root.ownerDocument || root).createElement("style");
          var target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      };
      StyleSet.prototype.mount = function mount(modules) {
        var sheet = this.sheet;
        var pos = 0, j = 0;
        for (var i = 0; i < modules.length; i++) {
          var mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) {
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) {
              for (var k = 0; k < mod.rules.length; k++) {
                sheet.insertRule(mod.rules[k], pos++);
              }
            }
          } else {
            while (j < index) {
              pos += this.modules[j++].rules.length;
            }
            pos += mod.rules.length;
            j++;
          }
        }
        if (!sheet) {
          var text = "";
          for (var i$1 = 0; i$1 < this.modules.length; i$1++) {
            text += this.modules[i$1].getRules() + "\n";
          }
          this.styleTag.textContent = text;
        }
      };
    }
  });

  // ../../../node_modules/@codemirror/rangeset/dist/index.cjs
  var require_dist3 = __commonJS({
    "../../../node_modules/@codemirror/rangeset/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var RangeValue = class {
        eq(other) {
          return this == other;
        }
        range(from, to = from) {
          return new Range(from, to, this);
        }
      };
      RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
      RangeValue.prototype.point = false;
      RangeValue.prototype.mapMode = state.MapMode.TrackDel;
      var Range = class {
        constructor(from, to, value) {
          this.from = from;
          this.to = to;
          this.value = value;
        }
      };
      function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
      }
      var Chunk = class {
        constructor(from, to, value, maxPoint) {
          this.from = from;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
        }
        get length() {
          return this.to[this.to.length - 1];
        }
        findIndex(pos, side, end, startAt = 0) {
          let arr = end ? this.to : this.from;
          for (let lo = startAt, hi = arr.length; ; ) {
            if (lo == hi)
              return lo;
            let mid = lo + hi >> 1;
            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
            if (mid == lo)
              return diff >= 0 ? lo : hi;
            if (diff >= 0)
              hi = mid;
            else
              lo = mid + 1;
          }
        }
        between(offset, from, to, f) {
          for (let i = this.findIndex(from, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
              return false;
        }
        map(offset, changes) {
          let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
          for (let i = 0; i < this.value.length; i++) {
            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
            if (curFrom == curTo) {
              let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
              if (mapped == null)
                continue;
              newFrom = newTo = mapped;
            } else {
              newFrom = changes.mapPos(curFrom, val.startSide);
              newTo = changes.mapPos(curTo, val.endSide);
              if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                continue;
            }
            if ((newTo - newFrom || val.endSide - val.startSide) < 0)
              continue;
            if (newPos < 0)
              newPos = newFrom;
            if (val.point)
              maxPoint = Math.max(maxPoint, newTo - newFrom);
            value.push(val);
            from.push(newFrom - newPos);
            to.push(newTo - newPos);
          }
          return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
      };
      var RangeSet = class {
        constructor(chunkPos, chunk, nextLayer = RangeSet.empty, maxPoint) {
          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
        }
        get length() {
          let last = this.chunk.length - 1;
          return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        get size() {
          if (this.isEmpty)
            return 0;
          let size = this.nextLayer.size;
          for (let chunk of this.chunk)
            size += chunk.value.length;
          return size;
        }
        chunkEnd(index) {
          return this.chunkPos[index] + this.chunk[index].length;
        }
        update(updateSpec) {
          let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
          let filter = updateSpec.filter;
          if (add.length == 0 && !filter)
            return this;
          if (sort)
            add.slice().sort(cmpRange);
          if (this.isEmpty)
            return add.length ? RangeSet.of(add) : this;
          let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
          let builder = new RangeSetBuilder();
          while (cur.value || i < add.length) {
            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
              let range = add[i++];
              if (!builder.addInner(range.from, range.to, range.value))
                spill.push(range);
            } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
              cur.nextChunk();
            } else {
              if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                if (!builder.addInner(cur.from, cur.to, cur.value))
                  spill.push(new Range(cur.from, cur.to, cur.value));
              }
              cur.next();
            }
          }
          return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        map(changes) {
          if (changes.length == 0 || this.isEmpty)
            return this;
          let chunks = [], chunkPos = [], maxPoint = -1;
          for (let i = 0; i < this.chunk.length; i++) {
            let start = this.chunkPos[i], chunk = this.chunk[i];
            let touch = changes.touchesRange(start, start + chunk.length);
            if (touch === false) {
              maxPoint = Math.max(maxPoint, chunk.maxPoint);
              chunks.push(chunk);
              chunkPos.push(changes.mapPos(start));
            } else if (touch === true) {
              let { mapped, pos } = chunk.map(start, changes);
              if (mapped) {
                maxPoint = Math.max(maxPoint, mapped.maxPoint);
                chunks.push(mapped);
                chunkPos.push(pos);
              }
            }
          }
          let next = this.nextLayer.map(changes);
          return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
        }
        between(from, to, f) {
          if (this.isEmpty)
            return;
          for (let i = 0; i < this.chunk.length; i++) {
            let start = this.chunkPos[i], chunk = this.chunk[i];
            if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false)
              return;
          }
          this.nextLayer.between(from, to, f);
        }
        iter(from = 0) {
          return HeapCursor.from([this]).goto(from);
        }
        get isEmpty() {
          return this.nextLayer == this;
        }
        static iter(sets, from = 0) {
          return HeapCursor.from(sets).goto(from);
        }
        static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
          let a = oldSets.filter((set) => set.maxPoint >= 500 || !set.isEmpty && set.maxPoint >= minPointSize);
          let b = newSets.filter((set) => set.maxPoint >= 500 || !set.isEmpty && set.maxPoint >= minPointSize);
          let sharedChunks = findSharedChunks(a, b, textDiff);
          let sideA = new SpanCursor(a, sharedChunks, minPointSize);
          let sideB = new SpanCursor(b, sharedChunks, minPointSize);
          textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
          if (textDiff.empty && textDiff.length == 0)
            compare(sideA, 0, sideB, 0, 0, comparator);
        }
        static eq(oldSets, newSets, from = 0, to) {
          if (to == null)
            to = 1e9;
          let a = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
          let b = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
          if (a.length != b.length)
            return false;
          if (!a.length)
            return true;
          let sharedChunks = findSharedChunks(a, b);
          let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
          for (; ; ) {
            if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
              return false;
            if (sideA.to > to)
              return true;
            sideA.next();
            sideB.next();
          }
        }
        static spans(sets, from, to, iterator, minPointSize = -1) {
          let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
          let open = cursor.openStart;
          for (; ; ) {
            let curTo = Math.min(cursor.to, to);
            if (cursor.point) {
              iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
              open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
            } else if (curTo > pos) {
              iterator.span(pos, curTo, cursor.active, open);
              open = cursor.openEnd(curTo);
            }
            if (cursor.to > to)
              break;
            pos = cursor.to;
            cursor.next();
          }
          return open;
        }
        static of(ranges, sort = false) {
          let build = new RangeSetBuilder();
          for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
            build.add(range.from, range.to, range.value);
          return build.finish();
        }
      };
      RangeSet.empty = new RangeSet([], [], null, -1);
      function lazySort(ranges) {
        if (ranges.length > 1)
          for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
            let cur = ranges[i];
            if (cmpRange(prev, cur) > 0)
              return ranges.slice().sort(cmpRange);
            prev = cur;
          }
        return ranges;
      }
      RangeSet.empty.nextLayer = RangeSet.empty;
      var RangeSetBuilder = class {
        constructor() {
          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1e9;
          this.lastTo = -1e9;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
        }
        finishChunk(newArrays) {
          this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
          this.chunkPos.push(this.chunkStart);
          this.chunkStart = -1;
          this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
          this.maxPoint = -1;
          if (newArrays) {
            this.from = [];
            this.to = [];
            this.value = [];
          }
        }
        add(from, to, value) {
          if (!this.addInner(from, to, value))
            (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
        }
        addInner(from, to, value) {
          let diff = from - this.lastTo || value.startSide - this.last.endSide;
          if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
            throw new Error("Ranges must be added sorted by `from` position and `startSide`");
          if (diff < 0)
            return false;
          if (this.from.length == 250)
            this.finishChunk(true);
          if (this.chunkStart < 0)
            this.chunkStart = from;
          this.from.push(from - this.chunkStart);
          this.to.push(to - this.chunkStart);
          this.last = value;
          this.lastFrom = from;
          this.lastTo = to;
          this.value.push(value);
          if (value.point)
            this.maxPoint = Math.max(this.maxPoint, to - from);
          return true;
        }
        addChunk(from, chunk) {
          if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
            return false;
          if (this.from.length)
            this.finishChunk(true);
          this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
          this.chunks.push(chunk);
          this.chunkPos.push(from);
          let last = chunk.value.length - 1;
          this.last = chunk.value[last];
          this.lastFrom = chunk.from[last] + from;
          this.lastTo = chunk.to[last] + from;
          return true;
        }
        finish() {
          return this.finishInner(RangeSet.empty);
        }
        finishInner(next) {
          if (this.from.length)
            this.finishChunk(false);
          if (this.chunks.length == 0)
            return next;
          let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
          this.from = null;
          return result;
        }
      };
      function findSharedChunks(a, b, textDiff) {
        let inA = /* @__PURE__ */ new Map();
        for (let set of a)
          for (let i = 0; i < set.chunk.length; i++)
            if (set.chunk[i].maxPoint < 500)
              inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = /* @__PURE__ */ new Set();
        for (let set of b)
          for (let i = 0; i < set.chunk.length; i++) {
            let known = inA.get(set.chunk[i]);
            if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i])
              shared.add(set.chunk[i]);
          }
        return shared;
      }
      var LayerCursor = class {
        constructor(layer, skip, minPoint, rank = 0) {
          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
        }
        get startSide() {
          return this.value ? this.value.startSide : 0;
        }
        get endSide() {
          return this.value ? this.value.endSide : 0;
        }
        goto(pos, side = -1e9) {
          this.chunkIndex = this.rangeIndex = 0;
          this.gotoInner(pos, side, false);
          return this;
        }
        gotoInner(pos, side, forward) {
          while (this.chunkIndex < this.layer.chunk.length) {
            let next = this.layer.chunk[this.chunkIndex];
            if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint))
              break;
            this.chunkIndex++;
            forward = false;
          }
          if (this.chunkIndex < this.layer.chunk.length) {
            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
            if (!forward || this.rangeIndex < rangeIndex)
              this.setRangeIndex(rangeIndex);
          }
          this.next();
        }
        forward(pos, side) {
          if ((this.to - pos || this.endSide - side) < 0)
            this.gotoInner(pos, side, true);
        }
        next() {
          for (; ; ) {
            if (this.chunkIndex == this.layer.chunk.length) {
              this.from = this.to = 1e9;
              this.value = null;
              break;
            } else {
              let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
              let from = chunkPos + chunk.from[this.rangeIndex];
              this.from = from;
              this.to = chunkPos + chunk.to[this.rangeIndex];
              this.value = chunk.value[this.rangeIndex];
              this.setRangeIndex(this.rangeIndex + 1);
              if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                break;
            }
          }
        }
        setRangeIndex(index) {
          if (index == this.layer.chunk[this.chunkIndex].value.length) {
            this.chunkIndex++;
            if (this.skip) {
              while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                this.chunkIndex++;
            }
            this.rangeIndex = 0;
          } else {
            this.rangeIndex = index;
          }
        }
        nextChunk() {
          this.chunkIndex++;
          this.rangeIndex = 0;
          this.next();
        }
        compare(other) {
          return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
        }
      };
      var HeapCursor = class {
        constructor(heap) {
          this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
          let heap = [];
          for (let i = 0; i < sets.length; i++) {
            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
              if (cur.maxPoint >= minPoint)
                heap.push(new LayerCursor(cur, skip, minPoint, i));
            }
          }
          return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() {
          return this.value ? this.value.startSide : 0;
        }
        goto(pos, side = -1e9) {
          for (let cur of this.heap)
            cur.goto(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
            heapBubble(this.heap, i);
          this.next();
          return this;
        }
        forward(pos, side) {
          for (let cur of this.heap)
            cur.forward(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
            heapBubble(this.heap, i);
          if ((this.to - pos || this.value.endSide - side) < 0)
            this.next();
        }
        next() {
          if (this.heap.length == 0) {
            this.from = this.to = 1e9;
            this.value = null;
            this.rank = -1;
          } else {
            let top = this.heap[0];
            this.from = top.from;
            this.to = top.to;
            this.value = top.value;
            this.rank = top.rank;
            if (top.value)
              top.next();
            heapBubble(this.heap, 0);
          }
        }
      };
      function heapBubble(heap, index) {
        for (let cur = heap[index]; ; ) {
          let childIndex = (index << 1) + 1;
          if (childIndex >= heap.length)
            break;
          let child = heap[childIndex];
          if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
            child = heap[childIndex + 1];
            childIndex++;
          }
          if (cur.compare(child) < 0)
            break;
          heap[childIndex] = cur;
          heap[index] = child;
          index = childIndex;
        }
      }
      var SpanCursor = class {
        constructor(sets, skip, minPoint) {
          this.minPoint = minPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1;
          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1e9;
          this.endSide = 0;
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1e9) {
          this.cursor.goto(pos, side);
          this.active.length = this.activeTo.length = this.activeRank.length = 0;
          this.minActive = -1;
          this.to = pos;
          this.endSide = side;
          this.openStart = -1;
          this.next();
          return this;
        }
        forward(pos, side) {
          while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
            this.removeActive(this.minActive);
          this.cursor.forward(pos, side);
        }
        removeActive(index) {
          remove(this.active, index);
          remove(this.activeTo, index);
          remove(this.activeRank, index);
          this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
          let i = 0, { value, to, rank } = this.cursor;
          while (i < this.activeRank.length && this.activeRank[i] <= rank)
            i++;
          insert(this.active, i, value);
          insert(this.activeTo, i, to);
          insert(this.activeRank, i, rank);
          if (trackOpen)
            insert(trackOpen, i, this.cursor.from);
          this.minActive = findMinIndex(this.active, this.activeTo);
        }
        next() {
          let from = this.to, wasPoint = this.point;
          this.point = null;
          let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
          for (; ; ) {
            let a = this.minActive;
            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
              if (this.activeTo[a] > from) {
                this.to = this.activeTo[a];
                this.endSide = this.active[a].endSide;
                break;
              }
              this.removeActive(a);
              if (trackOpen)
                remove(trackOpen, a);
            } else if (!this.cursor.value) {
              this.to = this.endSide = 1e9;
              break;
            } else if (this.cursor.from > from) {
              this.to = this.cursor.from;
              this.endSide = this.cursor.startSide;
              break;
            } else {
              let nextVal = this.cursor.value;
              if (!nextVal.point) {
                this.addActive(trackOpen);
                this.cursor.next();
              } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to && nextVal.endSide == this.endSide) {
                this.cursor.next();
              } else {
                this.point = nextVal;
                this.pointFrom = this.cursor.from;
                this.pointRank = this.cursor.rank;
                this.to = this.cursor.to;
                this.endSide = nextVal.endSide;
                if (this.cursor.from < from)
                  trackExtra = 1;
                this.cursor.next();
                if (this.to > from)
                  this.forward(this.to, this.endSide);
                break;
              }
            }
          }
          if (trackOpen) {
            let openStart = 0;
            while (openStart < trackOpen.length && trackOpen[openStart] < from)
              openStart++;
            this.openStart = openStart + trackExtra;
          }
        }
        activeForPoint(to) {
          if (!this.active.length)
            return this.active;
          let active = [];
          for (let i = this.active.length - 1; i >= 0; i--) {
            if (this.activeRank[i] < this.pointRank)
              break;
            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
              active.push(this.active[i]);
          }
          return active.reverse();
        }
        openEnd(to) {
          let open = 0;
          for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
            open++;
          return open;
        }
      };
      function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (; ; ) {
          let diff = a.to + dPos - b.to || a.endSide - b.endSide;
          let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
          if (a.point || b.point) {
            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
              comparator.comparePoint(pos, clipEnd, a.point, b.point);
          } else {
            if (clipEnd > pos && !sameValues(a.active, b.active))
              comparator.compareRange(pos, clipEnd, a.active, b.active);
          }
          if (end > endB)
            break;
          pos = end;
          if (diff <= 0)
            a.next();
          if (diff >= 0)
            b.next();
        }
      }
      function sameValues(a, b) {
        if (a.length != b.length)
          return false;
        for (let i = 0; i < a.length; i++)
          if (a[i] != b[i] && !a[i].eq(b[i]))
            return false;
        return true;
      }
      function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
          array[i] = array[i + 1];
        array.pop();
      }
      function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
          array[i + 1] = array[i];
        array[index] = value;
      }
      function findMinIndex(value, array) {
        let found = -1, foundPos = 1e9;
        for (let i = 0; i < array.length; i++)
          if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
            found = i;
            foundPos = array[i];
          }
        return found;
      }
      exports.Range = Range;
      exports.RangeSet = RangeSet;
      exports.RangeSetBuilder = RangeSetBuilder;
      exports.RangeValue = RangeValue;
    }
  });

  // ../../../node_modules/w3c-keyname/index.cjs
  var require_w3c_keyname = __commonJS({
    "../../../node_modules/w3c-keyname/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var base = {
        8: "Backspace",
        9: "Tab",
        10: "Enter",
        12: "NumLock",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        44: "PrintScreen",
        45: "Insert",
        46: "Delete",
        59: ";",
        61: "=",
        91: "Meta",
        92: "Meta",
        106: "*",
        107: "+",
        108: ",",
        109: "-",
        110: ".",
        111: "/",
        144: "NumLock",
        145: "ScrollLock",
        160: "Shift",
        161: "Shift",
        162: "Control",
        163: "Control",
        164: "Alt",
        165: "Alt",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'",
        229: "q"
      };
      var shift = {
        48: ")",
        49: "!",
        50: "@",
        51: "#",
        52: "$",
        53: "%",
        54: "^",
        55: "&",
        56: "*",
        57: "(",
        59: ":",
        61: "+",
        173: "_",
        186: ":",
        187: "+",
        188: "<",
        189: "_",
        190: ">",
        191: "?",
        192: "~",
        219: "{",
        220: "|",
        221: "}",
        222: '"',
        229: "Q"
      };
      var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
      var safari = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
      var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
      var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
      var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
      var brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac;
      for (i = 0; i < 10; i++)
        base[48 + i] = base[96 + i] = String(i);
      var i;
      for (i = 1; i <= 24; i++)
        base[i + 111] = "F" + i;
      var i;
      for (i = 65; i <= 90; i++) {
        base[i] = String.fromCharCode(i + 32);
        shift[i] = String.fromCharCode(i);
      }
      var i;
      for (code in base)
        if (!shift.hasOwnProperty(code))
          shift[code] = base[code];
      var code;
      function keyName(event) {
        var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || (safari || ie) && event.shiftKey && event.key && event.key.length == 1;
        var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
        if (name == "Esc")
          name = "Escape";
        if (name == "Del")
          name = "Delete";
        if (name == "Left")
          name = "ArrowLeft";
        if (name == "Up")
          name = "ArrowUp";
        if (name == "Right")
          name = "ArrowRight";
        if (name == "Down")
          name = "ArrowDown";
        return name;
      }
      exports.base = base;
      exports.keyName = keyName;
      exports.shift = shift;
    }
  });

  // ../../../node_modules/@codemirror/view/dist/index.cjs
  var require_dist4 = __commonJS({
    "../../../node_modules/@codemirror/view/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var styleMod = require_style_mod();
      var rangeset = require_dist3();
      var text = require_dist();
      var w3cKeyname = require_w3c_keyname();
      function getSelection(root) {
        let target;
        if (root.nodeType == 11) {
          target = root.getSelection ? root : root.ownerDocument;
        } else {
          target = root;
        }
        return target.getSelection();
      }
      function contains(dom, node) {
        return node ? dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
      }
      function deepActiveElement() {
        let elt = document.activeElement;
        while (elt && elt.shadowRoot)
          elt = elt.shadowRoot.activeElement;
        return elt;
      }
      function hasSelection(dom, selection) {
        if (!selection.anchorNode)
          return false;
        try {
          return contains(dom, selection.anchorNode);
        } catch (_) {
          return false;
        }
      }
      function clientRectsFor(dom) {
        if (dom.nodeType == 3)
          return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
          return dom.getClientRects();
        else
          return [];
      }
      function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
      }
      function domIndex(node) {
        for (var index = 0; ; index++) {
          node = node.previousSibling;
          if (!node)
            return index;
        }
      }
      function scanFor(node, off, targetNode, targetOff, dir) {
        for (; ; ) {
          if (node == targetNode && off == targetOff)
            return true;
          if (off == (dir < 0 ? 0 : maxOffset(node))) {
            if (node.nodeName == "DIV")
              return false;
            let parent = node.parentNode;
            if (!parent || parent.nodeType != 1)
              return false;
            off = domIndex(node) + (dir < 0 ? 0 : 1);
            node = parent;
          } else if (node.nodeType == 1) {
            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
            if (node.nodeType == 1 && node.contentEditable == "false")
              return false;
            off = dir < 0 ? maxOffset(node) : 0;
          } else {
            return false;
          }
        }
      }
      function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
      }
      var Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
      function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
      }
      function windowRect(win) {
        return {
          left: 0,
          right: win.innerWidth,
          top: 0,
          bottom: win.innerHeight
        };
      }
      var ScrollSpace = 5;
      function scrollRectIntoView(dom, rect, side, center) {
        let doc2 = dom.ownerDocument, win = doc2.defaultView;
        for (let cur = dom; cur; ) {
          if (cur.nodeType == 1) {
            let bounding, top = cur == doc2.body;
            if (top) {
              bounding = windowRect(win);
            } else {
              if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                cur = cur.parentNode;
                continue;
              }
              let rect2 = cur.getBoundingClientRect();
              bounding = {
                left: rect2.left,
                right: rect2.left + cur.clientWidth,
                top: rect2.top,
                bottom: rect2.top + cur.clientHeight
              };
            }
            let moveX = 0, moveY = 0;
            if (center) {
              let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
              let targetTop;
              if (rectHeight <= boundingHeight)
                targetTop = rect.top + rectHeight / 2 - boundingHeight / 2;
              else if (side < 0)
                targetTop = rect.top - ScrollSpace;
              else
                targetTop = rect.bottom + ScrollSpace - boundingHeight;
              moveY = targetTop - bounding.top;
              if (Math.abs(moveY) <= 1)
                moveY = 0;
            } else if (rect.top < bounding.top) {
              moveY = -(bounding.top - rect.top + ScrollSpace);
              if (side > 0 && rect.bottom > bounding.bottom + moveY)
                moveY = rect.bottom - bounding.bottom + moveY + ScrollSpace;
            } else if (rect.bottom > bounding.bottom) {
              moveY = rect.bottom - bounding.bottom + ScrollSpace;
              if (side < 0 && rect.top - moveY < bounding.top)
                moveY = -(bounding.top + moveY - rect.top + ScrollSpace);
            }
            if (rect.left < bounding.left) {
              moveX = -(bounding.left - rect.left + ScrollSpace);
              if (side > 0 && rect.right > bounding.right + moveX)
                moveX = rect.right - bounding.right + moveX + ScrollSpace;
            } else if (rect.right > bounding.right) {
              moveX = rect.right - bounding.right + ScrollSpace;
              if (side < 0 && rect.left < bounding.left + moveX)
                moveX = -(bounding.left + moveX - rect.left + ScrollSpace);
            }
            if (moveX || moveY) {
              if (top) {
                win.scrollBy(moveX, moveY);
              } else {
                if (moveY) {
                  let start = cur.scrollTop;
                  cur.scrollTop += moveY;
                  moveY = cur.scrollTop - start;
                }
                if (moveX) {
                  let start = cur.scrollLeft;
                  cur.scrollLeft += moveX;
                  moveX = cur.scrollLeft - start;
                }
                rect = {
                  left: rect.left - moveX,
                  top: rect.top - moveY,
                  right: rect.right - moveX,
                  bottom: rect.bottom - moveY
                };
              }
            }
            if (top)
              break;
            cur = cur.assignedSlot || cur.parentNode;
            center = false;
          } else if (cur.nodeType == 11) {
            cur = cur.host;
          } else {
            break;
          }
        }
      }
      var DOMSelectionState = class {
        constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
        }
        eq(domSel) {
          return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
          this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
          this.anchorNode = anchorNode;
          this.anchorOffset = anchorOffset;
          this.focusNode = focusNode;
          this.focusOffset = focusOffset;
        }
      };
      var preventScrollSupported = null;
      function focusPreventScroll(dom) {
        if (dom.setActive)
          return dom.setActive();
        if (preventScrollSupported)
          return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
          stack.push(cur, cur.scrollTop, cur.scrollLeft);
          if (cur == cur.ownerDocument)
            break;
        }
        dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
            preventScrollSupported = { preventScroll: true };
            return true;
          }
        } : void 0);
        if (!preventScrollSupported) {
          preventScrollSupported = false;
          for (let i = 0; i < stack.length; ) {
            let elt = stack[i++], top = stack[i++], left = stack[i++];
            if (elt.scrollTop != top)
              elt.scrollTop = top;
            if (elt.scrollLeft != left)
              elt.scrollLeft = left;
          }
        }
      }
      var scratchRange;
      function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
      }
      function dispatchKey(elt, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
      }
      function getRoot(node) {
        while (node) {
          if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
            return node;
          node = node.assignedSlot || node.parentNode;
        }
        return null;
      }
      var DOMPos = class {
        constructor(node, offset, precise = true) {
          this.node = node;
          this.offset = offset;
          this.precise = precise;
        }
        static before(dom, precise) {
          return new DOMPos(dom.parentNode, domIndex(dom), precise);
        }
        static after(dom, precise) {
          return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
        }
      };
      var noChildren = [];
      var ContentView = class {
        constructor() {
          this.parent = null;
          this.dom = null;
          this.dirty = 2;
        }
        get editorView() {
          if (!this.parent)
            throw new Error("Accessing view in orphan content view");
          return this.parent.editorView;
        }
        get overrideDOMText() {
          return null;
        }
        get posAtStart() {
          return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
          return this.posAtStart + this.length;
        }
        posBefore(view) {
          let pos = this.posAtStart;
          for (let child of this.children) {
            if (child == view)
              return pos;
            pos += child.length + child.breakAfter;
          }
          throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
          return this.posBefore(view) + view.length;
        }
        coordsAt(_pos, _side) {
          return null;
        }
        sync(track) {
          var _a;
          if (this.dirty & 2) {
            let parent = this.dom;
            let pos = parent.firstChild;
            for (let child of this.children) {
              if (child.dirty) {
                if (!child.dom && pos && !((_a = ContentView.get(pos)) === null || _a === void 0 ? void 0 : _a.parent))
                  child.reuseDOM(pos);
                child.sync(track);
                child.dirty = 0;
              }
              if (track && !track.written && track.node == parent && pos != child.dom)
                track.written = true;
              if (child.dom.parentNode == parent) {
                while (pos && pos != child.dom)
                  pos = rm(pos);
                pos = child.dom.nextSibling;
              } else {
                parent.insertBefore(child.dom, pos);
              }
            }
            if (pos && track && track.node == parent)
              track.written = true;
            while (pos)
              pos = rm(pos);
          } else if (this.dirty & 1) {
            for (let child of this.children)
              if (child.dirty) {
                child.sync(track);
                child.dirty = 0;
              }
          }
        }
        reuseDOM(_dom) {
          return false;
        }
        localPosFromDOM(node, offset) {
          let after;
          if (node == this.dom) {
            after = this.dom.childNodes[offset];
          } else {
            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
            for (; ; ) {
              let parent = node.parentNode;
              if (parent == this.dom)
                break;
              if (bias == 0 && parent.firstChild != parent.lastChild) {
                if (node == parent.firstChild)
                  bias = -1;
                else
                  bias = 1;
              }
              node = parent;
            }
            if (bias < 0)
              after = node;
            else
              after = node.nextSibling;
          }
          if (after == this.dom.firstChild)
            return 0;
          while (after && !ContentView.get(after))
            after = after.nextSibling;
          if (!after)
            return this.length;
          for (let i = 0, pos = 0; ; i++) {
            let child = this.children[i];
            if (child.dom == after)
              return pos;
            pos += child.length + child.breakAfter;
          }
        }
        domBoundsAround(from, to, offset = 0) {
          let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
          for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
            let child = this.children[i], end = pos + child.length;
            if (pos < from && end > to)
              return child.domBoundsAround(from, to, pos);
            if (end >= from && fromI == -1) {
              fromI = i;
              fromStart = pos;
            }
            if (pos > to && child.dom.parentNode == this.dom) {
              toI = i;
              toEnd = prevEnd;
              break;
            }
            prevEnd = end;
            pos = end + child.breakAfter;
          }
          return {
            from: fromStart,
            to: toEnd < 0 ? offset + this.length : toEnd,
            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
          };
        }
        markDirty(andParent = false) {
          this.dirty |= 2;
          this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
          for (let parent = this.parent; parent; parent = parent.parent) {
            if (childList)
              parent.dirty |= 2;
            if (parent.dirty & 1)
              return;
            parent.dirty |= 1;
            childList = false;
          }
        }
        setParent(parent) {
          if (this.parent != parent) {
            this.parent = parent;
            if (this.dirty)
              this.markParentsDirty(true);
          }
        }
        setDOM(dom) {
          if (this.dom)
            this.dom.cmView = null;
          this.dom = dom;
          dom.cmView = this;
        }
        get rootView() {
          for (let v = this; ; ) {
            let parent = v.parent;
            if (!parent)
              return v;
            v = parent;
          }
        }
        replaceChildren(from, to, children = noChildren) {
          this.markDirty();
          for (let i = from; i < to; i++) {
            let child = this.children[i];
            if (child.parent == this)
              child.destroy();
          }
          this.children.splice(from, to - from, ...children);
          for (let i = 0; i < children.length; i++)
            children[i].setParent(this);
        }
        ignoreMutation(_rec) {
          return false;
        }
        ignoreEvent(_event) {
          return false;
        }
        childCursor(pos = this.length) {
          return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
          return this.childCursor().findPos(pos, bias);
        }
        toString() {
          let name = this.constructor.name.replace("View", "");
          return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
        }
        static get(node) {
          return node.cmView;
        }
        get isEditable() {
          return true;
        }
        merge(from, to, source, hasStart, openStart, openEnd) {
          return false;
        }
        become(other) {
          return false;
        }
        getSide() {
          return 0;
        }
        destroy() {
          this.parent = null;
        }
      };
      ContentView.prototype.breakAfter = 0;
      function rm(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
      }
      var ChildCursor = class {
        constructor(children, pos, i) {
          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
        }
        findPos(pos, bias = 1) {
          for (; ; ) {
            if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
              this.off = pos - this.pos;
              return this;
            }
            let next = this.children[--this.i];
            this.pos -= next.length + next.breakAfter;
          }
        }
      };
      function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 && before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
          return;
        if (toI < children.length) {
          let after = children[toI];
          if (after && toOff < after.length) {
            if (fromI == toI) {
              after = after.split(toOff);
              toOff = 0;
            }
            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
              insert[insert.length - 1] = after;
            } else {
              if (toOff)
                after.merge(0, toOff, null, false, 0, openEnd);
              insert.push(after);
            }
          } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
            if (last)
              last.breakAfter = 1;
            else
              breakAtStart = 1;
          }
          toI++;
        }
        if (before) {
          before.breakAfter = breakAtStart;
          if (fromOff > 0) {
            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
              before.breakAfter = insert.shift().breakAfter;
            } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
              before.merge(fromOff, before.length, null, false, openStart, 0);
            }
            fromI++;
          }
        }
        while (fromI < toI && insert.length) {
          if (children[toI - 1].become(insert[insert.length - 1])) {
            toI--;
            insert.pop();
            openEnd = insert.length ? 0 : openStart;
          } else if (children[fromI].become(insert[0])) {
            fromI++;
            insert.shift();
            openStart = insert.length ? 0 : openEnd;
          } else {
            break;
          }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
          fromI--;
        if (fromI < toI || insert.length)
          parent.replaceChildren(fromI, toI, insert);
      }
      function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
          dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
      }
      var [nav, doc] = typeof navigator != "undefined" ? [navigator, document] : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
      var ie_edge = /Edge\/(\d+)/.exec(nav.userAgent);
      var ie_upto10 = /MSIE \d/.test(nav.userAgent);
      var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
      var ie = !!(ie_upto10 || ie_11up || ie_edge);
      var gecko = !ie && /gecko\/(\d+)/i.test(nav.userAgent);
      var chrome = !ie && /Chrome\/(\d+)/.exec(nav.userAgent);
      var webkit = "webkitFontSmoothing" in doc.documentElement.style;
      var safari = !ie && /Apple Computer/.test(nav.vendor);
      var ios = safari && (/Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
      var browser = {
        mac: ios || /Mac/.test(nav.platform),
        windows: /Win/.test(nav.platform),
        linux: /Linux|X11/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
      };
      var MaxJoinLen = 256;
      var TextView = class extends ContentView {
        constructor(text2) {
          super();
          this.text = text2;
        }
        get length() {
          return this.text.length;
        }
        createDOM(textDOM) {
          this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(track) {
          if (!this.dom)
            this.createDOM();
          if (this.dom.nodeValue != this.text) {
            if (track && track.node == this.dom)
              track.written = true;
            this.dom.nodeValue = this.text;
          }
        }
        reuseDOM(dom) {
          if (dom.nodeType != 3)
            return false;
          this.createDOM(dom);
          return true;
        }
        merge(from, to, source) {
          if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
            return false;
          this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
          this.markDirty();
          return true;
        }
        split(from) {
          let result = new TextView(this.text.slice(from));
          this.text = this.text.slice(0, from);
          return result;
        }
        localPosFromDOM(node, offset) {
          return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) {
          return new DOMPos(this.dom, pos);
        }
        domBoundsAround(_from, _to, offset) {
          return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
          return textCoords(this.dom, pos, side);
        }
      };
      var MarkView = class extends ContentView {
        constructor(mark, children = [], length = 0) {
          super();
          this.mark = mark;
          this.children = children;
          this.length = length;
          for (let ch of children)
            ch.setParent(this);
        }
        createDOM() {
          let dom = document.createElement(this.mark.tagName);
          if (this.mark.class)
            dom.className = this.mark.class;
          if (this.mark.attrs)
            for (let name in this.mark.attrs)
              dom.setAttribute(name, this.mark.attrs[name]);
          this.setDOM(dom);
        }
        sync(track) {
          if (!this.dom || this.dirty & 4)
            this.createDOM();
          super.sync(track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
          if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
            return false;
          mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
          this.markDirty();
          return true;
        }
        split(from) {
          let result = [], off = 0, detachFrom = -1, i = 0;
          for (let elt of this.children) {
            let end = off + elt.length;
            if (end > from)
              result.push(off < from ? elt.split(from - off) : elt);
            if (detachFrom < 0 && off >= from)
              detachFrom = i;
            off = end;
            i++;
          }
          let length = this.length - from;
          this.length = from;
          if (detachFrom > -1) {
            this.children.length = detachFrom;
            this.markDirty();
          }
          return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
          return inlineDOMAtPos(this.dom, this.children, pos);
        }
        coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
        }
      };
      function textCoords(text2, pos, side) {
        let length = text2.nodeValue.length;
        if (pos > length)
          pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
          if (!(browser.chrome || browser.gecko)) {
            if (pos) {
              from--;
              flatten = 1;
            } else {
              to++;
              flatten = -1;
            }
          }
        } else {
          if (side < 0)
            from--;
          else
            to++;
        }
        let rects = textRange(text2, from, to).getClientRects();
        if (!rects.length)
          return Rect0;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
          rect = Array.prototype.find.call(rects, (r) => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
      }
      var WidgetView = class extends ContentView {
        constructor(widget, length, side) {
          super();
          this.widget = widget;
          this.length = length;
          this.side = side;
        }
        static create(widget, length, side) {
          return new (widget.customView || WidgetView)(widget, length, side);
        }
        split(from) {
          let result = WidgetView.create(this.widget, this.length - from, this.side);
          this.length -= from;
          return result;
        }
        sync() {
          if (!this.dom || !this.widget.updateDOM(this.dom)) {
            this.setDOM(this.widget.toDOM(this.editorView));
            this.dom.contentEditable = "false";
          }
        }
        getSide() {
          return this.side;
        }
        merge(from, to, source, hasStart, openStart, openEnd) {
          if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
            return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
        }
        become(other) {
          if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
            if (this.widget.constructor == other.widget.constructor) {
              if (!this.widget.eq(other.widget))
                this.markDirty(true);
              this.widget = other.widget;
              return true;
            }
          }
          return false;
        }
        ignoreMutation() {
          return true;
        }
        ignoreEvent(event) {
          return this.widget.ignoreEvent(event);
        }
        get overrideDOMText() {
          if (this.length == 0)
            return text.Text.empty;
          let top = this;
          while (top.parent)
            top = top.parent;
          let view = top.editorView, text$1 = view && view.state.doc, start = this.posAtStart;
          return text$1 ? text$1.slice(start, start + this.length) : text.Text.empty;
        }
        domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() {
          return null;
        }
        coordsAt(pos, side) {
          let rects = this.dom.getClientRects(), rect = null;
          if (!rects.length)
            return Rect0;
          for (let i = pos > 0 ? rects.length - 1 : 0; ; i += pos > 0 ? -1 : 1) {
            rect = rects[i];
            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
              break;
          }
          return pos == 0 && side > 0 || pos == this.length && side <= 0 ? rect : flattenRect(rect, pos == 0);
        }
        get isEditable() {
          return false;
        }
        destroy() {
          super.destroy();
          if (this.dom)
            this.widget.destroy(this.dom);
        }
      };
      var CompositionView = class extends WidgetView {
        domAtPos(pos) {
          return new DOMPos(this.widget.text, pos);
        }
        sync() {
          if (!this.dom)
            this.setDOM(this.widget.toDOM());
        }
        localPosFromDOM(node, offset) {
          return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
        }
        ignoreMutation() {
          return false;
        }
        get overrideDOMText() {
          return null;
        }
        coordsAt(pos, side) {
          return textCoords(this.widget.text, pos, side);
        }
        get isEditable() {
          return true;
        }
      };
      var ZeroWidthSpace = browser.android ? "\u200B\u200B" : "\u200B";
      var WidgetBufferView = class extends ContentView {
        constructor(side) {
          super();
          this.side = side;
        }
        get length() {
          return 0;
        }
        merge() {
          return false;
        }
        become(other) {
          return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() {
          return new WidgetBufferView(this.side);
        }
        sync() {
          if (!this.dom)
            this.setDOM(document.createTextNode(ZeroWidthSpace));
          else if (this.dirty && this.dom.nodeValue != ZeroWidthSpace)
            this.dom.nodeValue = ZeroWidthSpace;
        }
        getSide() {
          return this.side;
        }
        domAtPos(pos) {
          return DOMPos.before(this.dom);
        }
        localPosFromDOM() {
          return 0;
        }
        domBoundsAround() {
          return null;
        }
        coordsAt(pos) {
          let rects = clientRectsFor(this.dom);
          return rects[rects.length - 1] || null;
        }
        get overrideDOMText() {
          return text.Text.of([this.dom.nodeValue.replace(/\u200b/g, "")]);
        }
      };
      TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
      function inlineDOMAtPos(dom, children, pos) {
        let i = 0;
        for (let off = 0; i < children.length; i++) {
          let child = children[i], end = off + child.length;
          if (end == off && child.getSide() <= 0)
            continue;
          if (pos > off && pos < end && child.dom.parentNode == dom)
            return child.domAtPos(pos - off);
          if (pos <= off)
            break;
          off = end;
        }
        for (; i > 0; i--) {
          let before = children[i - 1].dom;
          if (before.parentNode == dom)
            return DOMPos.after(before);
        }
        return new DOMPos(dom, 0);
      }
      function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
          joinInlineInto(last, view.children[0], open - 1);
        } else {
          children.push(view);
          view.setParent(parent);
        }
        parent.length += view.length;
      }
      function coordsInChildren(view, pos, side) {
        for (let off = 0, i = 0; i < view.children.length; i++) {
          let child = view.children[i], end = off + child.length, next;
          if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) && (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
            let flatten = 0;
            if (end == off) {
              if (child.getSide() <= 0)
                continue;
              flatten = side = -child.getSide();
            }
            let rect = child.coordsAt(pos - off, side);
            return flatten && rect ? flattenRect(rect, side < 0) : rect;
          }
          off = end;
        }
        let last = view.dom.lastChild;
        if (!last)
          return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
      }
      function combineAttrs(source, target) {
        for (let name in source) {
          if (name == "class" && target.class)
            target.class += " " + source.class;
          else if (name == "style" && target.style)
            target.style += ";" + source.style;
          else
            target[name] = source[name];
        }
        return target;
      }
      function attrsEq(a, b) {
        if (a == b)
          return true;
        if (!a || !b)
          return false;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length != keysB.length)
          return false;
        for (let key of keysA) {
          if (keysB.indexOf(key) == -1 || a[key] !== b[key])
            return false;
        }
        return true;
      }
      function updateAttrs(dom, prev, attrs) {
        if (prev) {
          for (let name in prev)
            if (!(attrs && name in attrs))
              dom.removeAttribute(name);
        }
        if (attrs) {
          for (let name in attrs)
            if (!(prev && prev[name] == attrs[name]))
              dom.setAttribute(name, attrs[name]);
        }
      }
      var WidgetType = class {
        eq(_widget) {
          return false;
        }
        updateDOM(_dom) {
          return false;
        }
        compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
        }
        get estimatedHeight() {
          return -1;
        }
        ignoreEvent(_event) {
          return true;
        }
        get customView() {
          return null;
        }
        destroy(_dom) {
        }
      };
      exports.BlockType = void 0;
      (function(BlockType) {
        BlockType[BlockType["Text"] = 0] = "Text";
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
      })(exports.BlockType || (exports.BlockType = {}));
      var Decoration = class extends rangeset.RangeValue {
        constructor(startSide, endSide, widget, spec) {
          super();
          this.startSide = startSide;
          this.endSide = endSide;
          this.widget = widget;
          this.spec = spec;
        }
        get heightRelevant() {
          return false;
        }
        static mark(spec) {
          return new MarkDecoration(spec);
        }
        static widget(spec) {
          let side = spec.side || 0, block = !!spec.block;
          side += block ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
          return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        static replace(spec) {
          let block = !!spec.block;
          let { start, end } = getInclusive(spec, block);
          let startSide = block ? start ? -3e8 : -1 : 4e8;
          let endSide = block ? end ? 2e8 : 1 : -5e8;
          return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        static line(spec) {
          return new LineDecoration(spec);
        }
        static set(of, sort = false) {
          return rangeset.RangeSet.of(of, sort);
        }
        hasHeight() {
          return this.widget ? this.widget.estimatedHeight > -1 : false;
        }
      };
      Decoration.none = rangeset.RangeSet.empty;
      var MarkDecoration = class extends Decoration {
        constructor(spec) {
          let { start, end } = getInclusive(spec);
          super(start ? -1 : 4e8, end ? 1 : -5e8, null, spec);
          this.tagName = spec.tagName || "span";
          this.class = spec.class || "";
          this.attrs = spec.attributes || null;
        }
        eq(other) {
          return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this.class == other.class && attrsEq(this.attrs, other.attrs);
        }
        range(from, to = from) {
          if (from >= to)
            throw new RangeError("Mark decorations may not be empty");
          return super.range(from, to);
        }
      };
      MarkDecoration.prototype.point = false;
      var LineDecoration = class extends Decoration {
        constructor(spec) {
          super(-2e8, -2e8, null, spec);
        }
        eq(other) {
          return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
          if (to != from)
            throw new RangeError("Line decoration ranges must be zero-length");
          return super.range(from, to);
        }
      };
      LineDecoration.prototype.mapMode = state.MapMode.TrackBefore;
      LineDecoration.prototype.point = true;
      var PointDecoration = class extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
          super(startSide, endSide, widget, spec);
          this.block = block;
          this.isReplace = isReplace;
          this.mapMode = !block ? state.MapMode.TrackDel : startSide <= 0 ? state.MapMode.TrackBefore : state.MapMode.TrackAfter;
        }
        get type() {
          return this.startSide < this.endSide ? exports.BlockType.WidgetRange : this.startSide <= 0 ? exports.BlockType.WidgetBefore : exports.BlockType.WidgetAfter;
        }
        get heightRelevant() {
          return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
        }
        eq(other) {
          return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
          if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
            throw new RangeError("Invalid range for replacement decoration");
          if (!this.isReplace && to != from)
            throw new RangeError("Widget decorations can only have zero-length ranges");
          return super.range(from, to);
        }
      };
      PointDecoration.prototype.point = true;
      function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
          start = spec.inclusive;
        if (end == null)
          end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
      }
      function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
      }
      function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin > from)
          ranges[last] = Math.max(ranges[last], to);
        else
          ranges.push(from, to);
      }
      var LineView = class extends ContentView {
        constructor() {
          super(...arguments);
          this.children = [];
          this.length = 0;
          this.prevAttrs = void 0;
          this.attrs = null;
          this.breakAfter = 0;
        }
        merge(from, to, source, hasStart, openStart, openEnd) {
          if (source) {
            if (!(source instanceof LineView))
              return false;
            if (!this.dom)
              source.transferDOM(this);
          }
          if (hasStart)
            this.setDeco(source ? source.attrs : null);
          mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
          return true;
        }
        split(at) {
          let end = new LineView();
          end.breakAfter = this.breakAfter;
          if (this.length == 0)
            return end;
          let { i, off } = this.childPos(at);
          if (off) {
            end.append(this.children[i].split(off), 0);
            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
            i++;
          }
          for (let j = i; j < this.children.length; j++)
            end.append(this.children[j], 0);
          while (i > 0 && this.children[i - 1].length == 0)
            this.children[--i].destroy();
          this.children.length = i;
          this.markDirty();
          this.length = at;
          return end;
        }
        transferDOM(other) {
          if (!this.dom)
            return;
          other.setDOM(this.dom);
          other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
          this.prevAttrs = void 0;
          this.dom = null;
        }
        setDeco(attrs) {
          if (!attrsEq(this.attrs, attrs)) {
            if (this.dom) {
              this.prevAttrs = this.attrs;
              this.markDirty();
            }
            this.attrs = attrs;
          }
        }
        append(child, openStart) {
          joinInlineInto(this, child, openStart);
        }
        addLineDeco(deco) {
          let attrs = deco.spec.attributes, cls = deco.spec.class;
          if (attrs)
            this.attrs = combineAttrs(attrs, this.attrs || {});
          if (cls)
            this.attrs = combineAttrs(attrs, { class: cls });
        }
        domAtPos(pos) {
          return inlineDOMAtPos(this.dom, this.children, pos);
        }
        sync(track) {
          var _a;
          if (!this.dom || this.dirty & 4) {
            this.setDOM(document.createElement("div"));
            this.dom.className = "cm-line";
            this.prevAttrs = this.attrs ? null : void 0;
          }
          if (this.prevAttrs !== void 0) {
            updateAttrs(this.dom, this.prevAttrs, this.attrs);
            this.dom.classList.add("cm-line");
            this.prevAttrs = void 0;
          }
          super.sync(track);
          let last = this.dom.lastChild;
          while (last && ContentView.get(last) instanceof MarkView)
            last = last.lastChild;
          if (!last || last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false && (!browser.ios || !this.children.some((ch) => ch instanceof TextView))) {
            let hack = document.createElement("BR");
            hack.cmIgnore = true;
            this.dom.appendChild(hack);
          }
        }
        measureTextSize() {
          if (this.children.length == 0 || this.length > 20)
            return null;
          let totalWidth = 0;
          for (let child of this.children) {
            if (!(child instanceof TextView))
              return null;
            let rects = clientRectsFor(child.dom);
            if (rects.length != 1)
              return null;
            totalWidth += rects[0].width;
          }
          return {
            lineHeight: this.dom.getBoundingClientRect().height,
            charWidth: totalWidth / this.length
          };
        }
        coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
        }
        become(_other) {
          return false;
        }
        get type() {
          return exports.BlockType.Text;
        }
        static find(docView, pos) {
          for (let i = 0, off = 0; ; i++) {
            let block = docView.children[i], end = off + block.length;
            if (end >= pos) {
              if (block instanceof LineView)
                return block;
              if (block.length)
                return null;
            }
            off = end + block.breakAfter;
          }
        }
      };
      var BlockWidgetView = class extends ContentView {
        constructor(widget, length, type) {
          super();
          this.widget = widget;
          this.length = length;
          this.type = type;
          this.breakAfter = 0;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
          if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
            return false;
          this.length = from + (source ? source.length : 0) + (this.length - to);
          return true;
        }
        domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
          let len = this.length - at;
          this.length = at;
          let end = new BlockWidgetView(this.widget, len, this.type);
          end.breakAfter = this.breakAfter;
          return end;
        }
        get children() {
          return noChildren;
        }
        sync() {
          if (!this.dom || !this.widget.updateDOM(this.dom)) {
            this.setDOM(this.widget.toDOM(this.editorView));
            this.dom.contentEditable = "false";
          }
        }
        get overrideDOMText() {
          return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : state.Text.empty;
        }
        domBoundsAround() {
          return null;
        }
        become(other) {
          if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
            if (!other.widget.eq(this.widget))
              this.markDirty(true);
            this.widget = other.widget;
            this.length = other.length;
            this.breakAfter = other.breakAfter;
            return true;
          }
          return false;
        }
        ignoreMutation() {
          return true;
        }
        ignoreEvent(event) {
          return this.widget.ignoreEvent(event);
        }
        destroy() {
          super.destroy();
          if (this.dom)
            this.widget.destroy(this.dom);
        }
      };
      var ContentBuilder = class {
        constructor(doc2, pos, end) {
          this.doc = doc2;
          this.pos = pos;
          this.end = end;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0;
          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc2.iter();
          this.skip = pos;
        }
        posCovered() {
          if (this.content.length == 0)
            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
          let last = this.content[this.content.length - 1];
          return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == exports.BlockType.WidgetBefore);
        }
        getLine() {
          if (!this.curLine) {
            this.content.push(this.curLine = new LineView());
            this.atCursorPos = true;
          }
          return this.curLine;
        }
        flushBuffer(active) {
          if (this.pendingBuffer) {
            this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
            this.pendingBuffer = 0;
          }
        }
        addBlockWidget(view) {
          this.flushBuffer([]);
          this.curLine = null;
          this.content.push(view);
        }
        finish(openEnd) {
          if (!openEnd)
            this.flushBuffer([]);
          else
            this.pendingBuffer = 0;
          if (!this.posCovered())
            this.getLine();
        }
        buildText(length, active, openStart) {
          while (length > 0) {
            if (this.textOff == this.text.length) {
              let { value, lineBreak, done } = this.cursor.next(this.skip);
              this.skip = 0;
              if (done)
                throw new Error("Ran out of text content when drawing inline views");
              if (lineBreak) {
                if (!this.posCovered())
                  this.getLine();
                if (this.content.length)
                  this.content[this.content.length - 1].breakAfter = 1;
                else
                  this.breakAtStart = 1;
                this.flushBuffer([]);
                this.curLine = null;
                length--;
                continue;
              } else {
                this.text = value;
                this.textOff = 0;
              }
            }
            let take = Math.min(this.text.length - this.textOff, length, 512);
            this.flushBuffer(active);
            this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
            this.atCursorPos = true;
            this.textOff += take;
            length -= take;
            openStart = 0;
          }
        }
        span(from, to, active, openStart) {
          this.buildText(to - from, active, openStart);
          this.pos = to;
          if (this.openStart < 0)
            this.openStart = openStart;
        }
        point(from, to, deco, active, openStart) {
          let len = to - from;
          if (deco instanceof PointDecoration) {
            if (deco.block) {
              let { type } = deco;
              if (type == exports.BlockType.WidgetAfter && !this.posCovered())
                this.getLine();
              this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
            } else {
              let view = WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide);
              let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
              let cursorAfter = !view.isEditable && (from < to || deco.startSide <= 0);
              let line = this.getLine();
              if (this.pendingBuffer == 2 && !cursorBefore)
                this.pendingBuffer = 0;
              this.flushBuffer(active);
              if (cursorBefore) {
                line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                openStart = active.length + Math.max(0, openStart - active.length);
              }
              line.append(wrapMarks(view, active), openStart);
              this.atCursorPos = cursorAfter;
              this.pendingBuffer = !cursorAfter ? 0 : from < to ? 1 : 2;
            }
          } else if (this.doc.lineAt(this.pos).from == this.pos) {
            this.getLine().addLineDeco(deco);
          }
          if (len) {
            if (this.textOff + len <= this.text.length) {
              this.textOff += len;
            } else {
              this.skip += len - (this.text.length - this.textOff);
              this.text = "";
              this.textOff = 0;
            }
            this.pos = to;
          }
          if (this.openStart < 0)
            this.openStart = openStart;
        }
        static build(text2, from, to, decorations2) {
          let builder = new ContentBuilder(text2, from, to);
          builder.openEnd = rangeset.RangeSet.spans(decorations2, from, to, builder);
          if (builder.openStart < 0)
            builder.openStart = builder.openEnd;
          builder.finish(builder.openEnd);
          return builder;
        }
      };
      function wrapMarks(view, active) {
        for (let mark of active)
          view = new MarkView(mark, [view], view.length);
        return view;
      }
      var NullWidget = class extends WidgetType {
        constructor(tag) {
          super();
          this.tag = tag;
        }
        eq(other) {
          return other.tag == this.tag;
        }
        toDOM() {
          return document.createElement(this.tag);
        }
        updateDOM(elt) {
          return elt.nodeName.toLowerCase() == this.tag;
        }
      };
      var none = [];
      var clickAddsSelectionRange = state.Facet.define();
      var dragMovesSelection$1 = state.Facet.define();
      var mouseSelectionStyle = state.Facet.define();
      var exceptionSink = state.Facet.define();
      var updateListener = state.Facet.define();
      var inputHandler = state.Facet.define();
      var scrollTo = state.StateEffect.define({
        map: (range, changes) => range.map(changes)
      });
      var centerOn = state.StateEffect.define({
        map: (range, changes) => range.map(changes)
      });
      function logException(state2, exception, context) {
        let handler = state2.facet(exceptionSink);
        if (handler.length)
          handler[0](exception);
        else if (window.onerror)
          window.onerror(String(exception), context, void 0, void 0, exception);
        else if (context)
          console.error(context + ":", exception);
        else
          console.error(exception);
      }
      var editable = state.Facet.define({ combine: (values) => values.length ? values[0] : true });
      var PluginFieldProvider = class {
        constructor(field, get) {
          this.field = field;
          this.get = get;
        }
      };
      var PluginField = class {
        from(get) {
          return new PluginFieldProvider(this, get);
        }
        static define() {
          return new PluginField();
        }
      };
      PluginField.decorations = PluginField.define();
      PluginField.atomicRanges = PluginField.define();
      PluginField.scrollMargins = PluginField.define();
      var nextPluginID = 0;
      var viewPlugin = state.Facet.define();
      var ViewPlugin = class {
        constructor(id, create, fields) {
          this.id = id;
          this.create = create;
          this.fields = fields;
          this.extension = viewPlugin.of(this);
        }
        static define(create, spec) {
          let { eventHandlers, provide, decorations: decorations2 } = spec || {};
          let fields = [];
          if (provide)
            for (let provider of Array.isArray(provide) ? provide : [provide])
              fields.push(provider);
          if (eventHandlers)
            fields.push(domEventHandlers.from((value) => ({ plugin: value, handlers: eventHandlers })));
          if (decorations2)
            fields.push(PluginField.decorations.from(decorations2));
          return new ViewPlugin(nextPluginID++, create, fields);
        }
        static fromClass(cls, spec) {
          return ViewPlugin.define((view) => new cls(view), spec);
        }
      };
      var domEventHandlers = PluginField.define();
      var PluginInstance = class {
        constructor(spec) {
          this.spec = spec;
          this.mustUpdate = null;
          this.value = null;
        }
        takeField(type, target) {
          if (this.spec) {
            for (let { field, get } of this.spec.fields)
              if (field == type)
                target.push(get(this.value));
          }
        }
        update(view) {
          if (!this.value) {
            if (this.spec) {
              try {
                this.value = this.spec.create(view);
              } catch (e) {
                logException(view.state, e, "CodeMirror plugin crashed");
                this.deactivate();
              }
            }
          } else if (this.mustUpdate) {
            let update = this.mustUpdate;
            this.mustUpdate = null;
            if (this.value.update) {
              try {
                this.value.update(update);
              } catch (e) {
                logException(update.state, e, "CodeMirror plugin crashed");
                if (this.value.destroy)
                  try {
                    this.value.destroy();
                  } catch (_) {
                  }
                this.deactivate();
              }
            }
          }
          return this;
        }
        destroy(view) {
          var _a;
          if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
            try {
              this.value.destroy();
            } catch (e) {
              logException(view.state, e, "CodeMirror plugin crashed");
            }
          }
        }
        deactivate() {
          this.spec = this.value = null;
        }
      };
      var editorAttributes = state.Facet.define();
      var contentAttributes = state.Facet.define();
      var decorations = state.Facet.define();
      var styleModule = state.Facet.define();
      var ChangedRange = class {
        constructor(fromA, toA, fromB, toB) {
          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
        }
        join(other) {
          return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
          let i = set.length, me = this;
          for (; i > 0; i--) {
            let range = set[i - 1];
            if (range.fromA > me.toA)
              continue;
            if (range.toA < me.fromA)
              break;
            me = me.join(range);
            set.splice(i - 1, 1);
          }
          set.splice(i, 0, me);
          return set;
        }
        static extendWithRanges(diff, ranges) {
          if (ranges.length == 0)
            return diff;
          let result = [];
          for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
            let next = dI == diff.length ? null : diff[dI], off = posA - posB;
            let end = next ? next.fromB : 1e9;
            while (rI < ranges.length && ranges[rI] < end) {
              let from = ranges[rI], to = ranges[rI + 1];
              let fromB = Math.max(posB, from), toB = Math.min(end, to);
              if (fromB <= toB)
                new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
              if (to > end)
                break;
              else
                rI += 2;
            }
            if (!next)
              return result;
            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
            posA = next.toA;
            posB = next.toB;
          }
        }
      };
      var ViewUpdate = class {
        constructor(view, state$1, transactions = none) {
          this.view = view;
          this.state = state$1;
          this.transactions = transactions;
          this.flags = 0;
          this.startState = view.state;
          this.changes = state.ChangeSet.empty(this.startState.doc.length);
          for (let tr of transactions)
            this.changes = this.changes.compose(tr.changes);
          let changedRanges = [];
          this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
          this.changedRanges = changedRanges;
          let focus = view.hasFocus;
          if (focus != view.inputState.notifiedFocused) {
            view.inputState.notifiedFocused = focus;
            this.flags |= 1;
          }
          if (this.docChanged)
            this.flags |= 2;
        }
        get viewportChanged() {
          return (this.flags & 4) > 0;
        }
        get heightChanged() {
          return (this.flags & 2) > 0;
        }
        get geometryChanged() {
          return this.docChanged || (this.flags & (8 | 2)) > 0;
        }
        get focusChanged() {
          return (this.flags & 1) > 0;
        }
        get docChanged() {
          return !this.changes.empty;
        }
        get selectionSet() {
          return this.transactions.some((tr) => tr.selection);
        }
        get empty() {
          return this.flags == 0 && this.transactions.length == 0;
        }
      };
      exports.Direction = void 0;
      (function(Direction) {
        Direction[Direction["LTR"] = 0] = "LTR";
        Direction[Direction["RTL"] = 1] = "RTL";
      })(exports.Direction || (exports.Direction = {}));
      var LTR = exports.Direction.LTR;
      var RTL = exports.Direction.RTL;
      function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
          result.push(1 << +str[i]);
        return result;
      }
      var LowTypes = dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
      var ArabicTypes = dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
      var Brackets = Object.create(null);
      var BracketStack = [];
      for (let p of ["()", "[]", "{}"]) {
        let l = p.charCodeAt(0), r = p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
      }
      function charType(ch) {
        return ch <= 247 ? LowTypes[ch] : 1424 <= ch && ch <= 1524 ? 2 : 1536 <= ch && ch <= 1785 ? ArabicTypes[ch - 1536] : 1774 <= ch && ch <= 2220 ? 4 : 8192 <= ch && ch <= 8203 ? 256 : ch == 8204 ? 256 : 1;
      }
      var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
      var BidiSpan = class {
        constructor(from, to, level) {
          this.from = from;
          this.to = to;
          this.level = level;
        }
        get dir() {
          return this.level % 2 ? RTL : LTR;
        }
        side(end, dir) {
          return this.dir == dir == end ? this.to : this.from;
        }
        static find(order, index, level, assoc) {
          let maybe = -1;
          for (let i = 0; i < order.length; i++) {
            let span = order[i];
            if (span.from <= index && span.to >= index) {
              if (span.level == level)
                return i;
              if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
                maybe = i;
            }
          }
          if (maybe < 0)
            throw new RangeError("Index out of range");
          return maybe;
        }
      };
      var types = [];
      function computeOrder(line, direction) {
        let len = line.length, outerType = direction == LTR ? 1 : 2, oppositeType = direction == LTR ? 2 : 1;
        if (!line || outerType == 1 && !BidiRE.test(line))
          return trivialOrder(len);
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
          let type = charType(line.charCodeAt(i));
          if (type == 512)
            type = prev;
          else if (type == 8 && prevStrong == 4)
            type = 16;
          types[i] = type == 4 ? 2 : type;
          if (type & 7)
            prevStrong = type;
          prev = type;
        }
        for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
          let type = types[i];
          if (type == 128) {
            if (i < len - 1 && prev == types[i + 1] && prev & 24)
              type = types[i] = prev;
            else
              types[i] = 256;
          } else if (type == 64) {
            let end = i + 1;
            while (end < len && types[end] == 64)
              end++;
            let replace = i && prev == 8 || end < len && types[end] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
            for (let j = i; j < end; j++)
              types[j] = replace;
            i = end - 1;
          } else if (type == 8 && prevStrong == 1) {
            types[i] = 1;
          }
          prev = type;
          if (type & 7)
            prevStrong = type;
        }
        for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
          if (br = Brackets[ch = line.charCodeAt(i)]) {
            if (br < 0) {
              for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                if (BracketStack[sJ + 1] == -br) {
                  let flags = BracketStack[sJ + 2];
                  let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
                  if (type2)
                    types[i] = types[BracketStack[sJ]] = type2;
                  sI = sJ;
                  break;
                }
              }
            } else if (BracketStack.length == 189) {
              break;
            } else {
              BracketStack[sI++] = i;
              BracketStack[sI++] = ch;
              BracketStack[sI++] = context;
            }
          } else if ((type = types[i]) == 2 || type == 1) {
            let embed = type == outerType;
            context = embed ? 0 : 1;
            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
              let cur = BracketStack[sJ + 2];
              if (cur & 2)
                break;
              if (embed) {
                BracketStack[sJ + 2] |= 2;
              } else {
                if (cur & 4)
                  break;
                BracketStack[sJ + 2] |= 4;
              }
            }
          }
        }
        for (let i = 0; i < len; i++) {
          if (types[i] == 256) {
            let end = i + 1;
            while (end < len && types[end] == 256)
              end++;
            let beforeL = (i ? types[i - 1] : outerType) == 1;
            let afterL = (end < len ? types[end] : outerType) == 1;
            let replace = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
            for (let j = i; j < end; j++)
              types[j] = replace;
            i = end - 1;
          }
        }
        let order = [];
        if (outerType == 1) {
          for (let i = 0; i < len; ) {
            let start = i, rtl = types[i++] != 1;
            while (i < len && rtl == (types[i] != 1))
              i++;
            if (rtl) {
              for (let j = i; j > start; ) {
                let end = j, l = types[--j] != 2;
                while (j > start && l == (types[j - 1] != 2))
                  j--;
                order.push(new BidiSpan(j, end, l ? 2 : 1));
              }
            } else {
              order.push(new BidiSpan(start, i, 0));
            }
          }
        } else {
          for (let i = 0; i < len; ) {
            let start = i, rtl = types[i++] == 2;
            while (i < len && rtl == (types[i] == 2))
              i++;
            order.push(new BidiSpan(start, i, rtl ? 1 : 2));
          }
        }
        return order;
      }
      function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
      }
      var movedOver = "";
      function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
          if (!forward || !line.length)
            return null;
          if (order[0].level != dir) {
            startIndex = order[0].side(false, dir);
            spanI = 0;
          }
        } else if (startIndex == line.length) {
          if (forward)
            return null;
          let last = order[order.length - 1];
          if (last.level != dir) {
            startIndex = last.side(true, dir);
            spanI = order.length - 1;
          }
        }
        if (spanI < 0)
          spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        if (startIndex == span.side(forward, dir)) {
          span = order[spanI += forward ? 1 : -1];
          startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = text.findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
          return state.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
          return state.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
          return state.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return state.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
      }
      var DOMReader = class {
        constructor(points, view) {
          this.points = points;
          this.view = view;
          this.text = "";
          this.lineBreak = view.state.lineBreak;
        }
        readRange(start, end) {
          if (!start)
            return this;
          let parent = start.parentNode;
          for (let cur = start; ; ) {
            this.findPointBefore(parent, cur);
            this.readNode(cur);
            let next = cur.nextSibling;
            if (next == end)
              break;
            let view = ContentView.get(cur), nextView = ContentView.get(next);
            if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore))
              this.text += this.lineBreak;
            cur = next;
          }
          this.findPointBefore(parent, end);
          return this;
        }
        readNode(node) {
          if (node.cmIgnore)
            return;
          let view = ContentView.get(node);
          let fromView = view && view.overrideDOMText;
          let text2;
          if (fromView != null)
            text2 = fromView.sliceString(0, void 0, this.lineBreak);
          else if (node.nodeType == 3)
            text2 = node.nodeValue;
          else if (node.nodeName == "BR")
            text2 = node.nextSibling ? this.lineBreak : "";
          else if (node.nodeType == 1)
            this.readRange(node.firstChild, null);
          if (text2 != null) {
            this.findPointIn(node, text2.length);
            this.text += text2;
            if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text))
              this.text = this.text.slice(0, -1);
          }
        }
        findPointBefore(node, next) {
          for (let point of this.points)
            if (point.node == node && node.childNodes[point.offset] == next)
              point.pos = this.text.length;
        }
        findPointIn(node, maxLen) {
          for (let point of this.points)
            if (point.node == node)
              point.pos = this.text.length + Math.min(point.offset, maxLen);
        }
      };
      function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
      }
      var DOMPoint = class {
        constructor(node, offset) {
          this.node = node;
          this.offset = offset;
          this.pos = -1;
        }
      };
      var DocView = class extends ContentView {
        constructor(view) {
          super();
          this.view = view;
          this.compositionDeco = Decoration.none;
          this.decorations = [];
          this.minWidth = 0;
          this.minWidthFrom = 0;
          this.minWidthTo = 0;
          this.impreciseAnchor = null;
          this.impreciseHead = null;
          this.forceSelection = false;
          this.lastUpdate = Date.now();
          this.setDOM(view.contentDOM);
          this.children = [new LineView()];
          this.children[0].setParent(this);
          this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
        }
        get root() {
          return this.view.root;
        }
        get editorView() {
          return this.view;
        }
        get length() {
          return this.view.state.doc.length;
        }
        update(update) {
          let changedRanges = update.changedRanges;
          if (this.minWidth > 0 && changedRanges.length) {
            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
              this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
            } else {
              this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
              this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
            }
          }
          if (this.view.inputState.composing < 0)
            this.compositionDeco = Decoration.none;
          else if (update.transactions.length || this.dirty)
            this.compositionDeco = computeCompositionDeco(this.view, update.changes);
          if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update && update.state.doc.lines != update.startState.doc.lines)
            this.forceSelection = true;
          let prevDeco = this.decorations, deco = this.updateDeco();
          let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
          changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
          if (this.dirty == 0 && changedRanges.length == 0) {
            return false;
          } else {
            this.updateInner(changedRanges, deco, update.startState.doc.length);
            if (update.transactions.length)
              this.lastUpdate = Date.now();
            return true;
          }
        }
        reset(sel) {
          if (this.dirty) {
            this.view.observer.ignore(() => this.view.docView.sync());
            this.dirty = 0;
            this.updateSelection(true);
          } else {
            this.updateSelection();
          }
        }
        updateInner(changes, deco, oldLength) {
          this.view.viewState.mustMeasureContent = true;
          this.updateChildren(changes, deco, oldLength);
          let { observer } = this.view;
          observer.ignore(() => {
            this.dom.style.height = this.view.viewState.contentHeight + "px";
            this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
            this.sync(track);
            this.dirty = 0;
            if (track && (track.written || observer.selectionRange.focusNode != track.node))
              this.forceSelection = true;
            this.dom.style.height = "";
          });
          let gaps = [];
          if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
            for (let child of this.children)
              if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                gaps.push(child.dom);
          }
          observer.updateGaps(gaps);
        }
        updateChildren(changes, deco, oldLength) {
          let cursor = this.childCursor(oldLength);
          for (let i = changes.length - 1; ; i--) {
            let next = i >= 0 ? changes[i] : null;
            if (!next)
              break;
            let { fromA, toA, fromB, toB } = next;
            let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, deco);
            let { i: toI, off: toOff } = cursor.findPos(toA, 1);
            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
            replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
          }
        }
        updateSelection(mustRead = false, fromPointer = false) {
          if (mustRead)
            this.view.observer.readSelectionRange();
          if (!(fromPointer || this.mayControlSelection()) || browser.ios && this.view.inputState.rapidCompositionStart)
            return;
          let force = this.forceSelection;
          this.forceSelection = false;
          let main = this.view.state.selection.main;
          let anchor = this.domAtPos(main.anchor);
          let head = main.empty ? anchor : this.domAtPos(main.head);
          if (browser.gecko && main.empty && betweenUneditable(anchor)) {
            let dummy = document.createTextNode("");
            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
            anchor = head = new DOMPos(dummy, 0);
            force = true;
          }
          let domSel = this.view.observer.selectionRange;
          if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
            this.view.observer.ignore(() => {
              if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
                this.dom.blur();
                this.dom.focus({ preventScroll: true });
              }
              let rawSel = getSelection(this.root);
              if (main.empty) {
                if (browser.gecko) {
                  let nextTo = nextToUneditable(anchor.node, anchor.offset);
                  if (nextTo && nextTo != (1 | 2)) {
                    let text2 = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 ? 1 : -1);
                    if (text2)
                      anchor = new DOMPos(text2, nextTo == 1 ? 0 : text2.nodeValue.length);
                  }
                }
                rawSel.collapse(anchor.node, anchor.offset);
                if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                  domSel.cursorBidiLevel = main.bidiLevel;
              } else if (rawSel.extend) {
                rawSel.collapse(anchor.node, anchor.offset);
                rawSel.extend(head.node, head.offset);
              } else {
                let range = document.createRange();
                if (main.anchor > main.head)
                  [anchor, head] = [head, anchor];
                range.setEnd(head.node, head.offset);
                range.setStart(anchor.node, anchor.offset);
                rawSel.removeAllRanges();
                rawSel.addRange(range);
              }
            });
            this.view.observer.setSelectionRange(anchor, head);
          }
          this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
          this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
          if (this.compositionDeco.size)
            return;
          let cursor = this.view.state.selection.main;
          let sel = getSelection(this.root);
          if (!cursor.empty || !cursor.assoc || !sel.modify)
            return;
          let line = LineView.find(this, cursor.head);
          if (!line)
            return;
          let lineStart = line.posAtStart;
          if (cursor.head == lineStart || cursor.head == lineStart + line.length)
            return;
          let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
          if (!before || !after || before.bottom > after.top)
            return;
          let dom = this.domAtPos(cursor.head + cursor.assoc);
          sel.collapse(dom.node, dom.offset);
          sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        }
        mayControlSelection() {
          return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, this.view.observer.selectionRange);
        }
        nearest(dom) {
          for (let cur = dom; cur; ) {
            let domView = ContentView.get(cur);
            if (domView && domView.rootView == this)
              return domView;
            cur = cur.parentNode;
          }
          return null;
        }
        posFromDOM(node, offset) {
          let view = this.nearest(node);
          if (!view)
            throw new RangeError("Trying to find position for a DOM position outside of the document");
          return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
          let { i, off } = this.childCursor().findPos(pos, -1);
          for (; i < this.children.length - 1; ) {
            let child = this.children[i];
            if (off < child.length || child instanceof LineView)
              break;
            i++;
            off = 0;
          }
          return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
          for (let off = this.length, i = this.children.length - 1; ; i--) {
            let child = this.children[i], start = off - child.breakAfter - child.length;
            if (pos > start || pos == start && child.type != exports.BlockType.WidgetBefore && child.type != exports.BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == exports.BlockType.WidgetBefore && side > -2))
              return child.coordsAt(pos - start, side);
            off = start;
          }
        }
        measureVisibleLineHeights() {
          let result = [], { from, to } = this.view.viewState.viewport;
          let contentWidth = this.view.contentDOM.clientWidth;
          let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
          let widest = -1;
          for (let pos = 0, i = 0; i < this.children.length; i++) {
            let child = this.children[i], end = pos + child.length;
            if (end > to)
              break;
            if (pos >= from) {
              let childRect = child.dom.getBoundingClientRect();
              result.push(childRect.height);
              if (isWider) {
                let last = child.dom.lastChild;
                let rects = last ? clientRectsFor(last) : [];
                if (rects.length) {
                  let rect = rects[rects.length - 1];
                  let width = this.view.textDirection == exports.Direction.LTR ? rect.right - childRect.left : childRect.right - rect.left;
                  if (width > widest) {
                    widest = width;
                    this.minWidth = contentWidth;
                    this.minWidthFrom = pos;
                    this.minWidthTo = end;
                  }
                }
              }
            }
            pos = end + child.breakAfter;
          }
          return result;
        }
        measureTextSize() {
          for (let child of this.children) {
            if (child instanceof LineView) {
              let measure = child.measureTextSize();
              if (measure)
                return measure;
            }
          }
          let dummy = document.createElement("div"), lineHeight, charWidth;
          dummy.className = "cm-line";
          dummy.textContent = "abc def ghi jkl mno pqr stu";
          this.view.observer.ignore(() => {
            this.dom.appendChild(dummy);
            let rect = clientRectsFor(dummy.firstChild)[0];
            lineHeight = dummy.getBoundingClientRect().height;
            charWidth = rect ? rect.width / 27 : 7;
            dummy.remove();
          });
          return { lineHeight, charWidth };
        }
        childCursor(pos = this.length) {
          let i = this.children.length;
          if (i)
            pos -= this.children[--i].length;
          return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
          let deco = [], vs = this.view.viewState;
          for (let pos = 0, i = 0; ; i++) {
            let next = i == vs.viewports.length ? null : vs.viewports[i];
            let end = next ? next.from - 1 : this.length;
            if (end > pos) {
              let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
              deco.push(Decoration.replace({ widget: new BlockGapWidget(height), block: true, inclusive: true }).range(pos, end));
            }
            if (!next)
              break;
            pos = next.to + 1;
          }
          return Decoration.set(deco);
        }
        updateDeco() {
          return this.decorations = [
            ...this.view.pluginField(PluginField.decorations),
            ...this.view.state.facet(decorations),
            this.compositionDeco,
            this.computeBlockGapDeco(),
            this.view.viewState.lineGapDeco
          ];
        }
        scrollIntoView({ range, center }) {
          let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
          if (!rect)
            return;
          if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
            rect = {
              left: Math.min(rect.left, other.left),
              top: Math.min(rect.top, other.top),
              right: Math.max(rect.right, other.right),
              bottom: Math.max(rect.bottom, other.bottom)
            };
          let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
          for (let margins of this.view.pluginField(PluginField.scrollMargins))
            if (margins) {
              let { left, right, top, bottom } = margins;
              if (left != null)
                mLeft = Math.max(mLeft, left);
              if (right != null)
                mRight = Math.max(mRight, right);
              if (top != null)
                mTop = Math.max(mTop, top);
              if (bottom != null)
                mBottom = Math.max(mBottom, bottom);
            }
          scrollRectIntoView(this.view.scrollDOM, {
            left: rect.left - mLeft,
            top: rect.top - mTop,
            right: rect.right + mRight,
            bottom: rect.bottom + mBottom
          }, range.head < range.anchor ? -1 : 1, center);
        }
      };
      function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
      }
      var BlockGapWidget = class extends WidgetType {
        constructor(height) {
          super();
          this.height = height;
        }
        toDOM() {
          let elt = document.createElement("div");
          this.updateDOM(elt);
          return elt;
        }
        eq(other) {
          return other.height == this.height;
        }
        updateDOM(elt) {
          elt.style.height = this.height + "px";
          return true;
        }
        get estimatedHeight() {
          return this.height;
        }
      };
      function computeCompositionDeco(view, changes) {
        let sel = view.observer.selectionRange;
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
          return Decoration.none;
        let cView = view.docView.nearest(textNode);
        if (!cView)
          return Decoration.none;
        let from, to, topNode = textNode;
        if (cView instanceof LineView) {
          while (topNode.parentNode != cView.dom)
            topNode = topNode.parentNode;
          let prev = topNode.previousSibling;
          while (prev && !ContentView.get(prev))
            prev = prev.previousSibling;
          from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
        } else {
          for (; ; ) {
            let { parent } = cView;
            if (!parent)
              return Decoration.none;
            if (parent instanceof LineView)
              break;
            cView = parent;
          }
          from = cView.posAtStart;
          to = from + cView.length;
          topNode = cView.dom;
        }
        let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
        let { state: state2 } = view, text2 = topNode.nodeType == 3 ? topNode.nodeValue : new DOMReader([], view).readRange(topNode.firstChild, null).text;
        if (newTo - newFrom < text2.length) {
          if (state2.sliceDoc(newFrom, Math.min(state2.doc.length, newFrom + text2.length)) == text2)
            newTo = newFrom + text2.length;
          else if (state2.sliceDoc(Math.max(0, newTo - text2.length), newTo) == text2)
            newFrom = newTo - text2.length;
          else
            return Decoration.none;
        } else if (state2.sliceDoc(newFrom, newTo) != text2) {
          return Decoration.none;
        }
        return Decoration.set(Decoration.replace({ widget: new CompositionWidget(topNode, textNode) }).range(newFrom, newTo));
      }
      var CompositionWidget = class extends WidgetType {
        constructor(top, text2) {
          super();
          this.top = top;
          this.text = text2;
        }
        eq(other) {
          return this.top == other.top && this.text == other.text;
        }
        toDOM() {
          return this.top;
        }
        ignoreEvent() {
          return false;
        }
        get customView() {
          return CompositionView;
        }
      };
      function nearbyTextNode(node, offset, side) {
        for (; ; ) {
          if (node.nodeType == 3)
            return node;
          if (node.nodeType == 1 && offset > 0 && side <= 0) {
            node = node.childNodes[offset - 1];
            offset = maxOffset(node);
          } else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
            node = node.childNodes[offset];
            offset = 0;
          } else {
            return null;
          }
        }
      }
      function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
          return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
      }
      var DecorationComparator$1 = class {
        constructor() {
          this.changes = [];
        }
        compareRange(from, to) {
          addRange(from, to, this.changes);
        }
        comparePoint(from, to) {
          addRange(from, to, this.changes);
        }
      };
      function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1();
        rangeset.RangeSet.compare(a, b, diff, comp);
        return comp.changes;
      }
      function inUneditable(node, inside2) {
        for (let cur = node; cur && cur != inside2; cur = cur.assignedSlot || cur.parentNode) {
          if (cur.nodeType == 1 && cur.contentEditable == "false") {
            return true;
          }
        }
        return false;
      }
      function groupAt(state$1, pos, bias = 1) {
        let categorize = state$1.charCategorizer(pos);
        let line = state$1.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
          return state.EditorSelection.cursor(pos);
        if (linePos == 0)
          bias = 1;
        else if (linePos == line.length)
          bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
          from = text.findClusterBreak(line.text, linePos, false);
        else
          to = text.findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
          let prev = text.findClusterBreak(line.text, from, false);
          if (categorize(line.text.slice(prev, from)) != cat)
            break;
          from = prev;
        }
        while (to < line.length) {
          let next = text.findClusterBreak(line.text, to);
          if (categorize(line.text.slice(to, next)) != cat)
            break;
          to = next;
        }
        return state.EditorSelection.range(from + line.from, to + line.from);
      }
      function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
      }
      function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
      }
      function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
      }
      function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
      }
      function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
      }
      function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
          let rects = clientRectsFor(child);
          for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (closestRect && yOverlap(closestRect, rect))
              rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
            let dx = getdx(x, rect), dy = getdy(y, rect);
            if (dx == 0 && dy == 0)
              return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
            if (!closest || closestY > dy || closestY == dy && closestX > dx) {
              closest = child;
              closestRect = rect;
              closestX = dx;
              closestY = dy;
            }
            if (dx == 0) {
              if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                above = child;
                aboveRect = rect;
              } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                below = child;
                belowRect = rect;
              }
            } else if (aboveRect && yOverlap(aboveRect, rect)) {
              aboveRect = upBot(aboveRect, rect.bottom);
            } else if (belowRect && yOverlap(belowRect, rect)) {
              belowRect = upTop(belowRect, rect.top);
            }
          }
        }
        if (aboveRect && aboveRect.bottom >= y) {
          closest = above;
          closestRect = aboveRect;
        } else if (belowRect && belowRect.top <= y) {
          closest = below;
          closestRect = belowRect;
        }
        if (!closest)
          return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
          return domPosInText(closest, clipX, y);
        if (!closestX && closest.contentEditable == "true")
          return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
      }
      function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
          let rects = textRange(node, i, i + 1).getClientRects();
          for (let j = 0; j < rects.length; j++) {
            let rect = rects[j];
            if (rect.top == rect.bottom)
              continue;
            if (!generalSide)
              generalSide = x - rect.left;
            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
              let right = x >= (rect.left + rect.right) / 2, after = right;
              if (browser.chrome || browser.gecko) {
                let rectBefore = textRange(node, i).getBoundingClientRect();
                if (rectBefore.left == rect.right)
                  after = !right;
              }
              if (dy <= 0)
                return { node, offset: i + (after ? 1 : 0) };
              closestOffset = i + (after ? 1 : 0);
              closestDY = dy;
            }
          }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
      }
      function posAtCoords(view, { x, y }, precise, bias = -1) {
        var _a;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, yOffset = y - docTop, { docHeight } = view.viewState;
        if (yOffset < 0 || yOffset > docHeight) {
          if (precise)
            return null;
          yOffset = yOffset < 0 ? 0 : docHeight;
        }
        for (let halfLine = view.defaultLineHeight / 2, bounced = false; ; ) {
          block = view.elementAtHeight(yOffset);
          if (block.type == exports.BlockType.Text)
            break;
          for (; ; ) {
            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
            if (yOffset >= 0 && yOffset <= docHeight)
              break;
            if (bounced)
              return precise ? null : 0;
            bounced = true;
            bias = -bias;
          }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        x = Math.max(content.left + 1, Math.min(Math.max(content.right, content.left + view.docView.minWidth) - 1, x));
        if (lineStart < view.viewport.from)
          return view.viewport.from == 0 ? 0 : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
          return view.viewport.to == view.state.doc.length ? view.state.doc.length : posAtCoordsImprecise(view, content, block, x, y);
        let doc2 = view.dom.ownerDocument;
        let element = (view.root.elementFromPoint ? view.root : doc2).elementFromPoint(x, y);
        let node, offset = -1;
        if (element && view.contentDOM.contains(element) && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
          if (doc2.caretPositionFromPoint) {
            let pos = doc2.caretPositionFromPoint(x, y);
            if (pos)
              ({ offsetNode: node, offset } = pos);
          } else if (doc2.caretRangeFromPoint) {
            let range = doc2.caretRangeFromPoint(x, y);
            if (range) {
              ({ startContainer: node, startOffset: offset } = range);
              if (browser.safari && isSuspiciousCaretResult(node, offset, x))
                node = void 0;
            }
          }
        }
        if (!node || !view.docView.dom.contains(node)) {
          let line = LineView.find(view.docView, lineStart);
          ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        return view.docView.posFromDOM(node, offset);
      }
      function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
          let line = Math.floor((y - block.top) / view.defaultLineHeight);
          into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + text.findColumn(content, into, view.state.tabSize);
      }
      function isSuspiciousCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
          return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
          if (next.nodeType != 1 || next.nodeName != "BR")
            return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
      }
      function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = view.state.doc.lineAt(start.head);
        let coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
          let editorRect = view.dom.getBoundingClientRect();
          let pos = view.posAtCoords({
            x: forward == (view.textDirection == exports.Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
            y: (coords.top + coords.bottom) / 2
          });
          if (pos != null)
            return state.EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        let lineView = LineView.find(view.docView, start.head);
        let end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
        return state.EditorSelection.cursor(end, forward ? -1 : 1);
      }
      function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        for (let cur = start, check = null; ; ) {
          let next = moveVisually(line, spans, view.textDirection, cur, forward), char = movedOver;
          if (!next) {
            if (line.number == (forward ? view.state.doc.lines : 1))
              return cur;
            char = "\n";
            line = view.state.doc.line(line.number + (forward ? 1 : -1));
            spans = view.bidiSpans(line);
            next = state.EditorSelection.cursor(forward ? line.from : line.to);
          }
          if (!check) {
            if (!by)
              return next;
            check = by(char);
          } else if (!check(char)) {
            return cur;
          }
          cur = next;
        }
      }
      function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
          let nextCat = categorize(next);
          if (cat == state.CharCategory.Space)
            cat = nextCat;
          return cat == nextCat;
        };
      }
      function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
          return state.EditorSelection.cursor(startPos);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
        if (startCoords) {
          if (goal == null)
            goal = startCoords.left - rect.left;
          startY = dir < 0 ? startCoords.top : startCoords.bottom;
        } else {
          let line = view.viewState.lineBlockAt(startPos - docTop);
          if (goal == null)
            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
          startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
        for (let extra = 0; ; extra += 10) {
          let curY = startY + (dist + extra) * dir;
          let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
          if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
            return state.EditorSelection.cursor(pos, void 0, void 0, goal);
        }
      }
      function skipAtoms(view, oldPos, pos) {
        let atoms = view.pluginField(PluginField.atomicRanges);
        for (; ; ) {
          let moved = false;
          for (let set of atoms) {
            set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
              if (pos.from > from && pos.from < to) {
                pos = oldPos.from > pos.from ? state.EditorSelection.cursor(from, 1) : state.EditorSelection.cursor(to, -1);
                moved = true;
              }
            });
          }
          if (!moved)
            return pos;
        }
      }
      var InputState = class {
        constructor(view) {
          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.pendingAndroidKey = void 0;
          this.pendingIOSKey = void 0;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastEscPress = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.registeredEvents = [];
          this.customHandlers = [];
          this.composing = -1;
          this.compositionFirstChange = null;
          this.compositionEndedAt = 0;
          this.rapidCompositionStart = false;
          this.mouseSelection = null;
          for (let type in handlers) {
            let handler = handlers[type];
            view.contentDOM.addEventListener(type, (event) => {
              if (type == "keydown" && this.keydown(view, event))
                return;
              if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
                return;
              if (this.mustFlushObserver(event))
                view.observer.forceFlush();
              if (this.runCustomHandlers(type, view, event))
                event.preventDefault();
              else
                handler(view, event);
            });
            this.registeredEvents.push(type);
          }
          this.notifiedFocused = view.hasFocus;
          this.ensureHandlers(view);
          if (browser.safari)
            view.contentDOM.addEventListener("input", () => null);
        }
        setSelectionOrigin(origin) {
          this.lastSelectionOrigin = origin;
          this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view) {
          let handlers2 = this.customHandlers = view.pluginField(domEventHandlers);
          for (let set of handlers2) {
            for (let type in set.handlers)
              if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                this.registeredEvents.push(type);
                view.contentDOM.addEventListener(type, (event) => {
                  if (!eventBelongsToEditor(view, event))
                    return;
                  if (this.runCustomHandlers(type, view, event))
                    event.preventDefault();
                });
              }
          }
        }
        runCustomHandlers(type, view, event) {
          for (let set of this.customHandlers) {
            let handler = set.handlers[type], handled = false;
            if (handler) {
              try {
                handled = handler.call(set.plugin, event, view);
              } catch (e) {
                logException(view.state, e);
              }
              if (handled || event.defaultPrevented) {
                if (browser.android && type == "keydown" && event.keyCode == 13)
                  view.observer.flushSoon();
                return true;
              }
            }
          }
          return false;
        }
        runScrollHandlers(view, event) {
          for (let set of this.customHandlers) {
            let handler = set.handlers.scroll;
            if (handler) {
              try {
                handler.call(set.plugin, event, view);
              } catch (e) {
                logException(view.state, e);
              }
            }
          }
        }
        keydown(view, event) {
          this.lastKeyCode = event.keyCode;
          this.lastKeyTime = Date.now();
          if (this.screenKeyEvent(view, event))
            return true;
          let pending;
          if (browser.ios && (pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
            this.pendingIOSKey = pending;
            setTimeout(() => this.flushIOSKey(view), 250);
            return true;
          }
          return false;
        }
        flushIOSKey(view) {
          let key = this.pendingIOSKey;
          if (!key)
            return false;
          this.pendingIOSKey = void 0;
          return dispatchKey(view.contentDOM, key.key, key.keyCode);
        }
        setPendingAndroidKey(view, pending) {
          this.pendingAndroidKey = pending;
          requestAnimationFrame(() => {
            let key = this.pendingAndroidKey;
            if (!key)
              return;
            this.pendingAndroidKey = void 0;
            view.observer.processRecords();
            let startState = view.state;
            dispatchKey(view.contentDOM, key.key, key.keyCode);
            if (view.state == startState)
              view.docView.reset(true);
          });
        }
        ignoreDuringComposition(event) {
          if (!/^key/.test(event.type))
            return false;
          if (this.composing > 0)
            return true;
          if (browser.safari && Date.now() - this.compositionEndedAt < 500) {
            this.compositionEndedAt = 0;
            return true;
          }
          return false;
        }
        screenKeyEvent(view, event) {
          let protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2e3;
          if (event.keyCode == 27)
            this.lastEscPress = Date.now();
          else if (modifierCodes.indexOf(event.keyCode) < 0)
            this.lastEscPress = 0;
          return protectedTab;
        }
        mustFlushObserver(event) {
          return event.type == "keydown" && event.keyCode != 229 || event.type == "compositionend" && !browser.ios;
        }
        startMouseSelection(mouseSelection) {
          if (this.mouseSelection)
            this.mouseSelection.destroy();
          this.mouseSelection = mouseSelection;
        }
        update(update) {
          if (this.mouseSelection)
            this.mouseSelection.update(update);
          if (update.transactions.length)
            this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
          if (this.mouseSelection)
            this.mouseSelection.destroy();
        }
      };
      var PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
      ];
      var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
      var MouseSelection = class {
        constructor(view, startEvent, style, mustSelect) {
          this.view = view;
          this.style = style;
          this.mustSelect = mustSelect;
          this.lastEvent = startEvent;
          let doc2 = view.contentDOM.ownerDocument;
          doc2.addEventListener("mousemove", this.move = this.move.bind(this));
          doc2.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(state.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragMove = dragMovesSelection(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
          if (this.dragging === false) {
            startEvent.preventDefault();
            this.select(startEvent);
          }
        }
        move(event) {
          if (event.buttons == 0)
            return this.destroy();
          if (this.dragging !== false)
            return;
          this.select(this.lastEvent = event);
        }
        up(event) {
          if (this.dragging == null)
            this.select(this.lastEvent);
          if (!this.dragging)
            event.preventDefault();
          this.destroy();
        }
        destroy() {
          let doc2 = this.view.contentDOM.ownerDocument;
          doc2.removeEventListener("mousemove", this.move);
          doc2.removeEventListener("mouseup", this.up);
          this.view.inputState.mouseSelection = null;
        }
        select(event) {
          let selection = this.style.get(event, this.extend, this.multiple);
          if (this.mustSelect || !selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc)
            this.view.dispatch({
              selection,
              userEvent: "select.pointer",
              scrollIntoView: true
            });
          this.mustSelect = false;
        }
        update(update) {
          if (update.docChanged && this.dragging)
            this.dragging = this.dragging.map(update.changes);
          if (this.style.update(update))
            setTimeout(() => this.select(this.lastEvent), 20);
        }
      };
      function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
      }
      function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
      }
      function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
          return false;
        let sel = getSelection(view.root);
        if (sel.rangeCount == 0)
          return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
            return true;
        }
        return false;
      }
      function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
          return true;
        if (event.defaultPrevented)
          return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
          if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
            return false;
        return true;
      }
      var handlers = Object.create(null);
      var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
      function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
          return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
          view.focus();
          target.remove();
          doPaste(view, target.value);
        }, 50);
      }
      function doPaste(view, input) {
        let { state: state$1 } = view, changes, i = 1, text2 = state$1.toText(input);
        let byLine = text2.lines == state$1.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state$1.selection.ranges.every((r) => r.empty) && lastLinewiseCopy == text2.toString();
        if (linewise) {
          let lastLine = -1;
          changes = state$1.changeByRange((range) => {
            let line = state$1.doc.lineAt(range.from);
            if (line.from == lastLine)
              return { range };
            lastLine = line.from;
            let insert = state$1.toText((byLine ? text2.line(i++).text : input) + state$1.lineBreak);
            return {
              changes: { from: line.from, insert },
              range: state.EditorSelection.cursor(range.from + insert.length)
            };
          });
        } else if (byLine) {
          changes = state$1.changeByRange((range) => {
            let line = text2.line(i++);
            return {
              changes: { from: range.from, to: range.to, insert: line.text },
              range: state.EditorSelection.cursor(range.from + line.length)
            };
          });
        } else {
          changes = state$1.replaceSelection(text2);
        }
        view.dispatch(changes, {
          userEvent: "input.paste",
          scrollIntoView: true
        });
      }
      handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
      };
      var lastTouch = 0;
      handlers.touchstart = (view, e) => {
        lastTouch = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
      };
      handlers.touchmove = (view) => {
        view.inputState.setSelectionOrigin("select.pointer");
      };
      handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (lastTouch > Date.now() - 2e3)
          return;
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
          style = makeStyle(view, event);
          if (style)
            break;
        }
        if (!style && event.button == 0)
          style = basicMouseSelection(view, event);
        if (style) {
          let mustFocus = view.root.activeElement != view.contentDOM;
          if (mustFocus)
            view.observer.ignore(() => focusPreventScroll(view.contentDOM));
          view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
        }
      };
      function rangeForClick(view, pos, bias, type) {
        if (type == 1) {
          return state.EditorSelection.cursor(pos, bias);
        } else if (type == 2) {
          return groupAt(view.state, pos, bias);
        } else {
          let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
          let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
          if (to < view.state.doc.length && to == line.to)
            to++;
          return state.EditorSelection.range(from, to);
        }
      }
      var insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
      var inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
      function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
          return 1;
        let off = pos - line.posAtStart;
        if (off == 0)
          return 1;
        if (off == line.length)
          return -1;
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
          return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
          return 1;
        return before && insideY(y, before) ? -1 : 1;
      }
      function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
      }
      var BadMouseDetail = browser.ie && browser.ie_version <= 11;
      var lastMouseDown = null;
      var lastMouseDownCount = 0;
      var lastMouseDownTime = 0;
      function getClickType(event) {
        if (!BadMouseDetail)
          return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
      }
      function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        let last = start, lastEvent = event;
        return {
          update(update) {
            if (update.docChanged) {
              if (start)
                start.pos = update.changes.mapPos(start.pos);
              startSel = startSel.map(update.changes);
              lastEvent = null;
            }
          },
          get(event2, extend, multiple) {
            let cur;
            if (lastEvent && event2.clientX == lastEvent.clientX && event2.clientY == lastEvent.clientY)
              cur = last;
            else {
              cur = last = queryPos(view, event2);
              lastEvent = event2;
            }
            if (!cur || !start)
              return startSel;
            let range = rangeForClick(view, cur.pos, cur.bias, type);
            if (start.pos != cur.pos && !extend) {
              let startRange = rangeForClick(view, start.pos, start.bias, type);
              let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
              range = from < range.from ? state.EditorSelection.range(from, to) : state.EditorSelection.range(to, from);
            }
            if (extend)
              return startSel.replaceRange(startSel.main.extend(range.from, range.to));
            else if (multiple)
              return startSel.addRange(range);
            else
              return state.EditorSelection.create([range]);
          }
        };
      }
      handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
          mouseSelection.dragging = main;
        if (event.dataTransfer) {
          event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
          event.dataTransfer.effectAllowed = "copyMove";
        }
      };
      function dropText(view, event, text2, direct) {
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
        if (dropPos == null || !text2)
          return;
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text2 };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
          changes,
          selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
          userEvent: del ? "move.drop" : "input.drop"
        });
      }
      handlers.drop = (view, event) => {
        if (!event.dataTransfer)
          return;
        if (view.state.readOnly)
          return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) {
          event.preventDefault();
          let text2 = Array(files.length), read = 0;
          let finishFile = () => {
            if (++read == files.length)
              dropText(view, event, text2.filter((s) => s != null).join(view.state.lineBreak), false);
          };
          for (let i = 0; i < files.length; i++) {
            let reader = new FileReader();
            reader.onerror = finishFile;
            reader.onload = () => {
              if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                text2[i] = reader.result;
              finishFile();
            };
            reader.readAsText(files[i]);
          }
        } else {
          dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
      };
      handlers.paste = (view, event) => {
        if (view.state.readOnly)
          return event.preventDefault();
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
          doPaste(view, data.getData("text/plain"));
          event.preventDefault();
        } else {
          capturePaste(view);
        }
      };
      function captureCopy(view, text2) {
        let parent = view.dom.parentNode;
        if (!parent)
          return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text2;
        target.focus();
        target.selectionEnd = text2.length;
        target.selectionStart = 0;
        setTimeout(() => {
          target.remove();
          view.focus();
        }, 50);
      }
      function copiedRange(state2) {
        let content = [], ranges = [], linewise = false;
        for (let range of state2.selection.ranges)
          if (!range.empty) {
            content.push(state2.sliceDoc(range.from, range.to));
            ranges.push(range);
          }
        if (!content.length) {
          let upto = -1;
          for (let { from } of state2.selection.ranges) {
            let line = state2.doc.lineAt(from);
            if (line.number > upto) {
              content.push(line.text);
              ranges.push({ from: line.from, to: Math.min(state2.doc.length, line.to + 1) });
            }
            upto = line.number;
          }
          linewise = true;
        }
        return { text: content.join(state2.lineBreak), ranges, linewise };
      }
      var lastLinewiseCopy = null;
      handlers.copy = handlers.cut = (view, event) => {
        let { text: text2, ranges, linewise } = copiedRange(view.state);
        if (!text2 && !linewise)
          return;
        lastLinewiseCopy = linewise ? text2 : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
          event.preventDefault();
          data.clearData();
          data.setData("text/plain", text2);
        } else {
          captureCopy(view, text2);
        }
        if (event.type == "cut" && !view.state.readOnly)
          view.dispatch({
            changes: ranges,
            scrollIntoView: true,
            userEvent: "delete.cut"
          });
      };
      handlers.focus = handlers.blur = (view) => {
        setTimeout(() => {
          if (view.hasFocus != view.inputState.notifiedFocused)
            view.update([]);
        }, 10);
      };
      handlers.beforeprint = (view) => {
        view.viewState.printing = true;
        view.requestMeasure();
        setTimeout(() => {
          view.viewState.printing = false;
          view.requestMeasure();
        }, 2e3);
      };
      function forceClearComposition(view, rapid) {
        if (view.docView.compositionDeco.size) {
          view.inputState.rapidCompositionStart = rapid;
          try {
            view.update([]);
          } finally {
            view.inputState.rapidCompositionStart = false;
          }
        }
      }
      handlers.compositionstart = handlers.compositionupdate = (view) => {
        if (view.inputState.compositionFirstChange == null)
          view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
          if (view.docView.compositionDeco.size) {
            view.observer.flush();
            forceClearComposition(view, true);
          }
          view.inputState.composing = 0;
        }
      };
      handlers.compositionend = (view) => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        setTimeout(() => {
          if (view.inputState.composing < 0)
            forceClearComposition(view, false);
        }, 50);
      };
      handlers.contextmenu = (view) => {
        view.inputState.lastContextMenu = Date.now();
      };
      handlers.beforeinput = (view, event) => {
        var _a;
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
          view.inputState.setPendingAndroidKey(view, pending);
          if (pending.key == "Backspace" || pending.key == "Delete") {
            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
            setTimeout(() => {
              var _a2;
              if ((((_a2 = window.visualViewport) === null || _a2 === void 0 ? void 0 : _a2.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                view.contentDOM.blur();
                view.focus();
              }
            }, 100);
          }
        }
      };
      var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
      var HeightOracle = class {
        constructor() {
          this.doc = text.Text.empty;
          this.lineWrapping = false;
          this.direction = exports.Direction.LTR;
          this.heightSamples = {};
          this.lineHeight = 14;
          this.charWidth = 7;
          this.lineLength = 30;
          this.heightChanged = false;
        }
        heightForGap(from, to) {
          let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
          if (this.lineWrapping)
            lines += Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength);
          return this.lineHeight * lines;
        }
        heightForLine(length) {
          if (!this.lineWrapping)
            return this.lineHeight;
          let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
          return lines * this.lineHeight;
        }
        setDoc(doc2) {
          this.doc = doc2;
          return this;
        }
        mustRefreshForStyle(whiteSpace, direction) {
          return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping || this.direction != direction;
        }
        mustRefreshForHeights(lineHeights) {
          let newHeight = false;
          for (let i = 0; i < lineHeights.length; i++) {
            let h = lineHeights[i];
            if (h < 0) {
              i++;
            } else if (!this.heightSamples[Math.floor(h * 10)]) {
              newHeight = true;
              this.heightSamples[Math.floor(h * 10)] = true;
            }
          }
          return newHeight;
        }
        refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
          let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
          let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping || this.direction != direction;
          this.lineWrapping = lineWrapping;
          this.direction = direction;
          this.lineHeight = lineHeight;
          this.charWidth = charWidth;
          this.lineLength = lineLength;
          if (changed) {
            this.heightSamples = {};
            for (let i = 0; i < knownHeights.length; i++) {
              let h = knownHeights[i];
              if (h < 0)
                i++;
              else
                this.heightSamples[Math.floor(h * 10)] = true;
            }
          }
          return changed;
        }
      };
      var MeasuredHeights = class {
        constructor(from, heights) {
          this.from = from;
          this.heights = heights;
          this.index = 0;
        }
        get more() {
          return this.index < this.heights.length;
        }
      };
      var BlockInfo = class {
        constructor(from, length, top, height, type) {
          this.from = from;
          this.length = length;
          this.top = top;
          this.height = height;
          this.type = type;
        }
        get to() {
          return this.from + this.length;
        }
        get bottom() {
          return this.top + this.height;
        }
        join(other) {
          let detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
          return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
        moveY(offset) {
          return !offset ? this : new BlockInfo(this.from, this.length, this.top + offset, this.height, Array.isArray(this.type) ? this.type.map((b) => b.moveY(offset)) : this.type);
        }
      };
      var QueryType;
      (function(QueryType2) {
        QueryType2[QueryType2["ByPos"] = 0] = "ByPos";
        QueryType2[QueryType2["ByHeight"] = 1] = "ByHeight";
        QueryType2[QueryType2["ByPosNoHeight"] = 2] = "ByPosNoHeight";
      })(QueryType || (QueryType = {}));
      var Epsilon = 1e-3;
      var HeightMap = class {
        constructor(length, height, flags = 2) {
          this.length = length;
          this.height = height;
          this.flags = flags;
        }
        get outdated() {
          return (this.flags & 2) > 0;
        }
        set outdated(value) {
          this.flags = (value ? 2 : 0) | this.flags & ~2;
        }
        setHeight(oracle, height) {
          if (this.height != height) {
            if (Math.abs(this.height - height) > Epsilon)
              oracle.heightChanged = true;
            this.height = height;
          }
        }
        replace(_from, _to, nodes) {
          return HeightMap.of(nodes);
        }
        decomposeLeft(_to, result) {
          result.push(this);
        }
        decomposeRight(_from, result) {
          result.push(this);
        }
        applyChanges(decorations2, oldDoc, oracle, changes) {
          let me = this;
          for (let i = changes.length - 1; i >= 0; i--) {
            let { fromA, toA, fromB, toB } = changes[i];
            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
            toB += end.to - toA;
            toA = end.to;
            while (i > 0 && start.from <= changes[i - 1].toA) {
              fromA = changes[i - 1].fromA;
              fromB = changes[i - 1].fromB;
              i--;
              if (fromA < start.from)
                start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
            }
            fromB += start.from - fromA;
            fromA = start.from;
            let nodes = NodeBuilder.build(oracle, decorations2, fromB, toB);
            me = me.replace(fromA, toA, nodes);
          }
          return me.updateHeight(oracle, 0);
        }
        static empty() {
          return new HeightMapText(0, 0);
        }
        static of(nodes) {
          if (nodes.length == 1)
            return nodes[0];
          let i = 0, j = nodes.length, before = 0, after = 0;
          for (; ; ) {
            if (i == j) {
              if (before > after * 2) {
                let split = nodes[i - 1];
                if (split.break)
                  nodes.splice(--i, 1, split.left, null, split.right);
                else
                  nodes.splice(--i, 1, split.left, split.right);
                j += 1 + split.break;
                before -= split.size;
              } else if (after > before * 2) {
                let split = nodes[j];
                if (split.break)
                  nodes.splice(j, 1, split.left, null, split.right);
                else
                  nodes.splice(j, 1, split.left, split.right);
                j += 2 + split.break;
                after -= split.size;
              } else {
                break;
              }
            } else if (before < after) {
              let next = nodes[i++];
              if (next)
                before += next.size;
            } else {
              let next = nodes[--j];
              if (next)
                after += next.size;
            }
          }
          let brk = 0;
          if (nodes[i - 1] == null) {
            brk = 1;
            i--;
          } else if (nodes[i] == null) {
            brk = 1;
            j++;
          }
          return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
      };
      HeightMap.prototype.size = 1;
      var HeightMapBlock = class extends HeightMap {
        constructor(length, height, type) {
          super(length, height);
          this.type = type;
        }
        blockAt(_height, _doc, top, offset) {
          return new BlockInfo(offset, this.length, top, this.height, this.type);
        }
        lineAt(_value, _type, doc2, top, offset) {
          return this.blockAt(0, doc2, top, offset);
        }
        forEachLine(_from, _to, doc2, top, offset, f) {
          f(this.blockAt(0, doc2, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
            this.setHeight(oracle, measured.heights[measured.index++]);
          this.outdated = false;
          return this;
        }
        toString() {
          return `block(${this.length})`;
        }
      };
      var HeightMapText = class extends HeightMapBlock {
        constructor(length, height) {
          super(length, height, exports.BlockType.Text);
          this.collapsed = 0;
          this.widgetHeight = 0;
        }
        replace(_from, _to, nodes) {
          let node = nodes[0];
          if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
            if (node instanceof HeightMapGap)
              node = new HeightMapText(node.length, this.height);
            else
              node.height = this.height;
            if (!this.outdated)
              node.outdated = false;
            return node;
          } else {
            return HeightMap.of(nodes);
          }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
          if (measured && measured.from <= offset && measured.more)
            this.setHeight(oracle, measured.heights[measured.index++]);
          else if (force || this.outdated)
            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
          this.outdated = false;
          return this;
        }
        toString() {
          return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
      };
      var HeightMapGap = class extends HeightMap {
        constructor(length) {
          super(length, 0);
        }
        lines(doc2, offset) {
          let firstLine = doc2.lineAt(offset).number, lastLine = doc2.lineAt(offset + this.length).number;
          return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
        }
        blockAt(height, doc2, top, offset) {
          let { firstLine, lastLine, lineHeight } = this.lines(doc2, offset);
          let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
          let { from, length } = doc2.line(firstLine + line);
          return new BlockInfo(from, length, top + lineHeight * line, lineHeight, exports.BlockType.Text);
        }
        lineAt(value, type, doc2, top, offset) {
          if (type == QueryType.ByHeight)
            return this.blockAt(value, doc2, top, offset);
          if (type == QueryType.ByPosNoHeight) {
            let { from: from2, to } = doc2.lineAt(value);
            return new BlockInfo(from2, to - from2, 0, 0, exports.BlockType.Text);
          }
          let { firstLine, lineHeight } = this.lines(doc2, offset);
          let { from, length, number } = doc2.lineAt(value);
          return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, exports.BlockType.Text);
        }
        forEachLine(from, to, doc2, top, offset, f) {
          let { firstLine, lineHeight } = this.lines(doc2, offset);
          for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end; ) {
            let line = doc2.lineAt(pos);
            if (pos == from)
              top += lineHeight * (line.number - firstLine);
            f(new BlockInfo(line.from, line.length, top, lineHeight, exports.BlockType.Text));
            top += lineHeight;
            pos = line.to + 1;
          }
        }
        replace(from, to, nodes) {
          let after = this.length - to;
          if (after > 0) {
            let last = nodes[nodes.length - 1];
            if (last instanceof HeightMapGap)
              nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
            else
              nodes.push(null, new HeightMapGap(after - 1));
          }
          if (from > 0) {
            let first = nodes[0];
            if (first instanceof HeightMapGap)
              nodes[0] = new HeightMapGap(from + first.length);
            else
              nodes.unshift(new HeightMapGap(from - 1), null);
          }
          return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
          result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
          result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
          let end = offset + this.length;
          if (measured && measured.from <= offset + this.length && measured.more) {
            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
            let wasChanged = oracle.heightChanged;
            if (measured.from > offset)
              nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
            while (pos <= end && measured.more) {
              let len = oracle.doc.lineAt(pos).length;
              if (nodes.length)
                nodes.push(null);
              let height = measured.heights[measured.index++];
              if (singleHeight == -1)
                singleHeight = height;
              else if (Math.abs(height - singleHeight) >= Epsilon)
                singleHeight = -2;
              let line = new HeightMapText(len, height);
              line.outdated = false;
              nodes.push(line);
              pos += len + 1;
            }
            if (pos <= end)
              nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
            let result = HeightMap.of(nodes);
            oracle.heightChanged = wasChanged || singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.lines(oracle.doc, offset).lineHeight) >= Epsilon;
            return result;
          } else if (force || this.outdated) {
            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
            this.outdated = false;
          }
          return this;
        }
        toString() {
          return `gap(${this.length})`;
        }
      };
      var HeightMapBranch = class extends HeightMap {
        constructor(left, brk, right) {
          super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
          this.left = left;
          this.right = right;
          this.size = left.size + right.size;
        }
        get break() {
          return this.flags & 1;
        }
        blockAt(height, doc2, top, offset) {
          let mid = top + this.left.height;
          return height < mid ? this.left.blockAt(height, doc2, top, offset) : this.right.blockAt(height, doc2, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, doc2, top, offset) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
          let base = left ? this.left.lineAt(value, type, doc2, top, offset) : this.right.lineAt(value, type, doc2, rightTop, rightOffset);
          if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
            return base;
          let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
          if (left)
            return base.join(this.right.lineAt(rightOffset, subQuery, doc2, rightTop, rightOffset));
          else
            return this.left.lineAt(rightOffset, subQuery, doc2, top, offset).join(base);
        }
        forEachLine(from, to, doc2, top, offset, f) {
          let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
          if (this.break) {
            if (from < rightOffset)
              this.left.forEachLine(from, to, doc2, top, offset, f);
            if (to >= rightOffset)
              this.right.forEachLine(from, to, doc2, rightTop, rightOffset, f);
          } else {
            let mid = this.lineAt(rightOffset, QueryType.ByPos, doc2, top, offset);
            if (from < mid.from)
              this.left.forEachLine(from, mid.from - 1, doc2, top, offset, f);
            if (mid.to >= from && mid.from <= to)
              f(mid);
            if (to > mid.to)
              this.right.forEachLine(mid.to + 1, to, doc2, rightTop, rightOffset, f);
          }
        }
        replace(from, to, nodes) {
          let rightStart = this.left.length + this.break;
          if (to < rightStart)
            return this.balanced(this.left.replace(from, to, nodes), this.right);
          if (from > this.left.length)
            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
          let result = [];
          if (from > 0)
            this.decomposeLeft(from, result);
          let left = result.length;
          for (let node of nodes)
            result.push(node);
          if (from > 0)
            mergeGaps(result, left - 1);
          if (to < this.length) {
            let right = result.length;
            this.decomposeRight(to, result);
            mergeGaps(result, right);
          }
          return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
          let left = this.left.length;
          if (to <= left)
            return this.left.decomposeLeft(to, result);
          result.push(this.left);
          if (this.break) {
            left++;
            if (to >= left)
              result.push(null);
          }
          if (to > left)
            this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
          let left = this.left.length, right = left + this.break;
          if (from >= right)
            return this.right.decomposeRight(from - right, result);
          if (from < left)
            this.left.decomposeRight(from, result);
          if (this.break && from < right)
            result.push(null);
          result.push(this.right);
        }
        balanced(left, right) {
          if (left.size > 2 * right.size || right.size > 2 * left.size)
            return HeightMap.of(this.break ? [left, null, right] : [left, right]);
          this.left = left;
          this.right = right;
          this.height = left.height + right.height;
          this.outdated = left.outdated || right.outdated;
          this.size = left.size + right.size;
          this.length = left.length + this.break + right.length;
          return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
          let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
          if (measured && measured.from <= offset + left.length && measured.more)
            rebalance = left = left.updateHeight(oracle, offset, force, measured);
          else
            left.updateHeight(oracle, offset, force);
          if (measured && measured.from <= rightStart + right.length && measured.more)
            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
          else
            right.updateHeight(oracle, rightStart, force);
          if (rebalance)
            return this.balanced(left, right);
          this.height = this.left.height + this.right.height;
          this.outdated = false;
          return this;
        }
        toString() {
          return this.left + (this.break ? " " : "-") + this.right;
        }
      };
      function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
          nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
      }
      var relevantWidgetHeight = 5;
      var NodeBuilder = class {
        constructor(pos, oracle) {
          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
        }
        get isCovered() {
          return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
          if (this.lineStart > -1) {
            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
            if (last instanceof HeightMapText)
              last.length += end - this.pos;
            else if (end > this.pos || !this.isCovered)
              this.nodes.push(new HeightMapText(end - this.pos, -1));
            this.writtenTo = end;
            if (to > end) {
              this.nodes.push(null);
              this.writtenTo++;
              this.lineStart = -1;
            }
          }
          this.pos = to;
        }
        point(from, to, deco) {
          if (from < to || deco.heightRelevant) {
            let height = deco.widget ? deco.widget.estimatedHeight : 0;
            if (height < 0)
              height = this.oracle.lineHeight;
            let len = to - from;
            if (deco.block) {
              this.addBlock(new HeightMapBlock(len, height, deco.type));
            } else if (len || height >= relevantWidgetHeight) {
              this.addLineDeco(height, len);
            }
          } else if (to > from) {
            this.span(from, to);
          }
          if (this.lineEnd > -1 && this.lineEnd < this.pos)
            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
          if (this.lineStart > -1)
            return;
          let { from, to } = this.oracle.doc.lineAt(this.pos);
          this.lineStart = from;
          this.lineEnd = to;
          if (this.writtenTo < from) {
            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
              this.nodes.push(this.blankContent(this.writtenTo, from - 1));
            this.nodes.push(null);
          }
          if (this.pos > from)
            this.nodes.push(new HeightMapText(this.pos - from, -1));
          this.writtenTo = this.pos;
        }
        blankContent(from, to) {
          let gap = new HeightMapGap(to - from);
          if (this.oracle.doc.lineAt(from).to == to)
            gap.flags |= 4;
          return gap;
        }
        ensureLine() {
          this.enterLine();
          let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
          if (last instanceof HeightMapText)
            return last;
          let line = new HeightMapText(0, -1);
          this.nodes.push(line);
          return line;
        }
        addBlock(block) {
          this.enterLine();
          if (block.type == exports.BlockType.WidgetAfter && !this.isCovered)
            this.ensureLine();
          this.nodes.push(block);
          this.writtenTo = this.pos = this.pos + block.length;
          if (block.type != exports.BlockType.WidgetBefore)
            this.covering = block;
        }
        addLineDeco(height, length) {
          let line = this.ensureLine();
          line.length += length;
          line.collapsed += length;
          line.widgetHeight = Math.max(line.widgetHeight, height);
          this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
          let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
          if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
            this.nodes.push(new HeightMapText(0, -1));
          else if (this.writtenTo < this.pos || last == null)
            this.nodes.push(this.blankContent(this.writtenTo, this.pos));
          let pos = from;
          for (let node of this.nodes) {
            if (node instanceof HeightMapText)
              node.updateHeight(this.oracle, pos);
            pos += node ? node.length : 1;
          }
          return this.nodes;
        }
        static build(oracle, decorations2, from, to) {
          let builder = new NodeBuilder(from, oracle);
          rangeset.RangeSet.spans(decorations2, from, to, builder, 0);
          return builder.finish(from);
        }
      };
      function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator();
        rangeset.RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
      }
      var DecorationComparator = class {
        constructor() {
          this.changes = [];
        }
        compareRange() {
        }
        comparePoint(from, to, a, b) {
          if (from < to || a && a.heightRelevant || b && b.heightRelevant)
            addRange(from, to, this.changes, 5);
        }
      };
      function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
        let body = dom.ownerDocument.body;
        for (let parent = dom.parentNode; parent && parent != body; ) {
          if (parent.nodeType == 1) {
            let elt = parent;
            let style = window.getComputedStyle(elt);
            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style.overflow != "visible") {
              let parentRect = elt.getBoundingClientRect();
              left = Math.max(left, parentRect.left);
              right = Math.min(right, parentRect.right);
              top = Math.max(top, parentRect.top);
              bottom = Math.min(bottom, parentRect.bottom);
            }
            parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
          } else if (parent.nodeType == 11) {
            parent = parent.host;
          } else {
            break;
          }
        }
        return {
          left: left - rect.left,
          right: Math.max(left, right) - rect.left,
          top: top - (rect.top + paddingTop),
          bottom: Math.max(top, bottom) - (rect.top + paddingTop)
        };
      }
      var LineGap = class {
        constructor(from, to, size) {
          this.from = from;
          this.to = to;
          this.size = size;
        }
        static same(a, b) {
          if (a.length != b.length)
            return false;
          for (let i = 0; i < a.length; i++) {
            let gA = a[i], gB = b[i];
            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
              return false;
          }
          return true;
        }
        draw(wrapping) {
          return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
      };
      var LineGapWidget = class extends WidgetType {
        constructor(size, vertical) {
          super();
          this.size = size;
          this.vertical = vertical;
        }
        eq(other) {
          return other.size == this.size && other.vertical == this.vertical;
        }
        toDOM() {
          let elt = document.createElement("div");
          if (this.vertical) {
            elt.style.height = this.size + "px";
          } else {
            elt.style.width = this.size + "px";
            elt.style.height = "2px";
            elt.style.display = "inline-block";
          }
          return elt;
        }
        get estimatedHeight() {
          return this.vertical ? this.size : -1;
        }
      };
      var ScrollTarget = class {
        constructor(range, center = false) {
          this.range = range;
          this.center = center;
        }
        map(changes) {
          return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.center);
        }
      };
      var ViewState = class {
        constructor(state2) {
          this.state = state2;
          this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
          this.inView = true;
          this.paddingTop = 0;
          this.paddingBottom = 0;
          this.contentDOMWidth = 0;
          this.contentDOMHeight = 0;
          this.editorHeight = 0;
          this.heightOracle = new HeightOracle();
          this.scaler = IdScaler;
          this.scrollTarget = null;
          this.printing = false;
          this.mustMeasureContent = true;
          this.visibleRanges = [];
          this.mustEnforceCursorAssoc = false;
          this.heightMap = HeightMap.empty().applyChanges(state2.facet(decorations), text.Text.empty, this.heightOracle.setDoc(state2.doc), [new ChangedRange(0, 0, 0, state2.doc.length)]);
          this.viewport = this.getViewport(0, null);
          this.updateViewportLines();
          this.updateForViewport();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(false)));
          this.computeVisibleRanges();
        }
        updateForViewport() {
          let viewports = [this.viewport], { main } = this.state.selection;
          for (let i = 0; i <= 1; i++) {
            let pos = i ? main.head : main.anchor;
            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
              let { from, to } = this.lineBlockAt(pos);
              viewports.push(new Viewport(from, to));
            }
          }
          this.viewports = viewports.sort((a, b) => a.from - b.from);
          this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
        }
        updateViewportLines() {
          this.viewportLines = [];
          this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, (block) => {
            this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
          });
        }
        update(update, scrollTarget = null) {
          let prev = this.state;
          this.state = update.state;
          let newDeco = this.state.facet(decorations);
          let contentChanges = update.changedRanges;
          let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(update.startState.facet(decorations), newDeco, update ? update.changes : state.ChangeSet.empty(this.state.doc.length)));
          let prevHeight = this.heightMap.height;
          this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
          if (this.heightMap.height != prevHeight)
            update.flags |= 2;
          let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
          if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
            viewport = this.getViewport(0, scrollTarget);
          let updateLines = !update.changes.empty || update.flags & 2 || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
          this.viewport = viewport;
          if (updateLines)
            this.updateViewportLines();
          this.updateForViewport();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3)
            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
          update.flags |= this.computeVisibleRanges();
          if (scrollTarget)
            this.scrollTarget = scrollTarget;
          if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc)
            this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
          let dom = view.contentDOM, style = window.getComputedStyle(dom);
          let oracle = this.heightOracle;
          let whiteSpace = style.whiteSpace, direction = style.direction == "rtl" ? exports.Direction.RTL : exports.Direction.LTR;
          let refresh = this.heightOracle.mustRefreshForStyle(whiteSpace, direction);
          let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != dom.clientHeight;
          let result = 0, bias = 0;
          if (measureContent) {
            this.mustMeasureContent = false;
            this.contentDOMHeight = dom.clientHeight;
            let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
              result |= 8;
              this.paddingTop = paddingTop;
              this.paddingBottom = paddingBottom;
            }
          }
          let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange(dom, this.paddingTop);
          let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
          this.pixelViewport = pixelViewport;
          this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
          if (!this.inView)
            return 0;
          if (measureContent) {
            let lineHeights = view.docView.measureVisibleLineHeights();
            if (oracle.mustRefreshForHeights(lineHeights))
              refresh = true;
            let contentWidth = dom.clientWidth;
            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
              let { lineHeight, charWidth } = view.docView.measureTextSize();
              refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
              if (refresh) {
                view.docView.minWidth = 0;
                result |= 8;
              }
            }
            if (this.contentDOMWidth != contentWidth) {
              this.contentDOMWidth = contentWidth;
              result |= 8;
            }
            if (this.editorHeight != view.scrollDOM.clientHeight) {
              this.editorHeight = view.scrollDOM.clientHeight;
              result |= 8;
            }
            if (dTop > 0 && dBottom > 0)
              bias = Math.max(dTop, dBottom);
            else if (dTop < 0 && dBottom < 0)
              bias = Math.min(dTop, dBottom);
            oracle.heightChanged = false;
            this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
            if (oracle.heightChanged)
              result |= 2;
          }
          let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
          if (viewportChange)
            this.viewport = this.getViewport(bias, this.scrollTarget);
          if (result & 2 || viewportChange)
            this.updateViewportLines();
          this.updateForViewport();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3)
            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
          result |= this.computeVisibleRanges();
          if (this.mustEnforceCursorAssoc) {
            this.mustEnforceCursorAssoc = false;
            view.docView.enforceCursorAssoc();
          }
          return result;
        }
        get visibleTop() {
          return this.scaler.fromDOM(this.pixelViewport.top);
        }
        get visibleBottom() {
          return this.scaler.fromDOM(this.pixelViewport.bottom);
        }
        getViewport(bias, scrollTarget) {
          let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
          let map = this.heightMap, doc2 = this.state.doc, { visibleTop, visibleBottom } = this;
          let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, doc2, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, doc2, 0, 0).to);
          if (scrollTarget) {
            let { head } = scrollTarget.range, viewHeight = this.editorHeight;
            if (head < viewport.from || head > viewport.to) {
              let block = map.lineAt(head, QueryType.ByPos, doc2, 0, 0), topPos;
              if (scrollTarget.center)
                topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
              else if (head < viewport.from)
                topPos = block.top;
              else
                topPos = block.bottom - viewHeight;
              viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, doc2, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, doc2, 0, 0).to);
            }
          }
          return viewport;
        }
        mapViewport(viewport, changes) {
          let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
          return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
        }
        viewportIsAppropriate({ from, to }, bias = 0) {
          if (!this.inView)
            return true;
          let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
          let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
          let { visibleTop, visibleBottom } = this;
          return (from == 0 || top <= visibleTop - Math.max(10, Math.min(-bias, 250))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(bias, 250))) && (top > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
        }
        mapLineGaps(gaps, changes) {
          if (!gaps.length || changes.empty)
            return gaps;
          let mapped = [];
          for (let gap of gaps)
            if (!changes.touchesRange(gap.from, gap.to))
              mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
          return mapped;
        }
        ensureLineGaps(current) {
          let gaps = [];
          if (this.heightOracle.direction != exports.Direction.LTR)
            return gaps;
          for (let line of this.viewportLines) {
            if (line.length < 4e3)
              continue;
            let structure = lineStructure(line.from, line.to, this.state);
            if (structure.total < 4e3)
              continue;
            let viewFrom, viewTo;
            if (this.heightOracle.lineWrapping) {
              let marginHeight = 2e3 / this.heightOracle.lineLength * this.heightOracle.lineHeight;
              viewFrom = findPosition(structure, (this.visibleTop - line.top - marginHeight) / line.height);
              viewTo = findPosition(structure, (this.visibleBottom - line.top + marginHeight) / line.height);
            } else {
              let totalWidth = structure.total * this.heightOracle.charWidth;
              let marginWidth = 2e3 * this.heightOracle.charWidth;
              viewFrom = findPosition(structure, (this.pixelViewport.left - marginWidth) / totalWidth);
              viewTo = findPosition(structure, (this.pixelViewport.right + marginWidth) / totalWidth);
            }
            let outside = [];
            if (viewFrom > line.from)
              outside.push({ from: line.from, to: viewFrom });
            if (viewTo < line.to)
              outside.push({ from: viewTo, to: line.to });
            let sel = this.state.selection.main;
            if (sel.from >= line.from && sel.from <= line.to)
              cutRange(outside, sel.from - 10, sel.from + 10);
            if (!sel.empty && sel.to >= line.from && sel.to <= line.to)
              cutRange(outside, sel.to - 10, sel.to + 10);
            for (let { from, to } of outside)
              if (to - from > 1e3) {
                gaps.push(find(current, (gap) => gap.from >= line.from && gap.to <= line.to && Math.abs(gap.from - from) < 1e3 && Math.abs(gap.to - to) < 1e3) || new LineGap(from, to, this.gapSize(line, from, to, structure)));
              }
          }
          return gaps;
        }
        gapSize(line, from, to, structure) {
          let fraction = findFraction(structure, to) - findFraction(structure, from);
          if (this.heightOracle.lineWrapping) {
            return line.height * fraction;
          } else {
            return structure.total * this.heightOracle.charWidth * fraction;
          }
        }
        updateLineGaps(gaps) {
          if (!LineGap.same(gaps, this.lineGaps)) {
            this.lineGaps = gaps;
            this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this.heightOracle.lineWrapping)));
          }
        }
        computeVisibleRanges() {
          let deco = this.state.facet(decorations);
          if (this.lineGaps.length)
            deco = deco.concat(this.lineGapDeco);
          let ranges = [];
          rangeset.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
            span(from, to) {
              ranges.push({ from, to });
            },
            point() {
            }
          }, 20);
          let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
          this.visibleRanges = ranges;
          return changed ? 4 : 0;
        }
        lineBlockAt(pos) {
          return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
          return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.state.doc, 0, 0), this.scaler);
        }
        elementAtHeight(height) {
          return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.state.doc, 0, 0), this.scaler);
        }
        get docHeight() {
          return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
          return this.docHeight + this.paddingTop + this.paddingBottom;
        }
      };
      var Viewport = class {
        constructor(from, to) {
          this.from = from;
          this.to = to;
        }
      };
      function lineStructure(from, to, state2) {
        let ranges = [], pos = from, total = 0;
        rangeset.RangeSet.spans(state2.facet(decorations), from, to, {
          span() {
          },
          point(from2, to2) {
            if (from2 > pos) {
              ranges.push({ from: pos, to: from2 });
              total += from2 - pos;
            }
            pos = to2;
          }
        }, 20);
        if (pos < to) {
          ranges.push({ from: pos, to });
          total += to - pos;
        }
        return { total, ranges };
      }
      function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
          return ranges[0].from;
        if (ratio >= 1)
          return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0; ; i++) {
          let { from, to } = ranges[i], size = to - from;
          if (dist <= size)
            return from + dist;
          dist -= size;
        }
      }
      function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
          if (pos <= to) {
            counted += pos - from;
            break;
          }
          counted += to - from;
        }
        return counted / structure.total;
      }
      function cutRange(ranges, from, to) {
        for (let i = 0; i < ranges.length; i++) {
          let r = ranges[i];
          if (r.from < to && r.to > from) {
            let pieces = [];
            if (r.from < from)
              pieces.push({ from: r.from, to: from });
            if (r.to > to)
              pieces.push({ from: to, to: r.to });
            ranges.splice(i, 1, ...pieces);
            i += pieces.length - 1;
          }
        }
      }
      function find(array, f) {
        for (let val of array)
          if (f(val))
            return val;
        return void 0;
      }
      var IdScaler = {
        toDOM(n) {
          return n;
        },
        fromDOM(n) {
          return n;
        },
        scale: 1
      };
      var BigScaler = class {
        constructor(doc2, heightMap, viewports) {
          let vpHeight = 0, base = 0, domBase = 0;
          this.viewports = viewports.map(({ from, to }) => {
            let top = heightMap.lineAt(from, QueryType.ByPos, doc2, 0, 0).top;
            let bottom = heightMap.lineAt(to, QueryType.ByPos, doc2, 0, 0).bottom;
            vpHeight += bottom - top;
            return { from, to, top, bottom, domTop: 0, domBottom: 0 };
          });
          this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
          for (let obj of this.viewports) {
            obj.domTop = domBase + (obj.top - base) * this.scale;
            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
            base = obj.bottom;
          }
        }
        toDOM(n) {
          for (let i = 0, base = 0, domBase = 0; ; i++) {
            let vp = i < this.viewports.length ? this.viewports[i] : null;
            if (!vp || n < vp.top)
              return domBase + (n - base) * this.scale;
            if (n <= vp.bottom)
              return vp.domTop + (n - vp.top);
            base = vp.bottom;
            domBase = vp.domBottom;
          }
        }
        fromDOM(n) {
          for (let i = 0, base = 0, domBase = 0; ; i++) {
            let vp = i < this.viewports.length ? this.viewports[i] : null;
            if (!vp || n < vp.domTop)
              return base + (n - domBase) / this.scale;
            if (n <= vp.domBottom)
              return vp.top + (n - vp.domTop);
            base = vp.bottom;
            domBase = vp.domBottom;
          }
        }
      };
      function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
          return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map((b) => scaleBlock(b, scaler)) : block.type);
      }
      var theme = state.Facet.define({ combine: (strs) => strs.join(" ") });
      var darkTheme = state.Facet.define({ combine: (values) => values.indexOf(true) > -1 });
      var baseThemeID = styleMod.StyleModule.newName();
      var baseLightID = styleMod.StyleModule.newName();
      var baseDarkID = styleMod.StyleModule.newName();
      var lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
      function buildTheme(main, spec, scopes) {
        return new styleMod.StyleModule(spec, {
          finish(sel) {
            return /&/.test(sel) ? sel.replace(/&\w*/, (m) => {
              if (m == "&")
                return main;
              if (!scopes || !scopes[m])
                throw new RangeError(`Unsupported selector: ${m}`);
              return scopes[m];
            }) : main + " " + sel;
          }
        });
      }
      var baseTheme = buildTheme("." + baseThemeID, {
        "&.cm-editor": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
            outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
        },
        ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0
        },
        ".cm-content": {
          margin: 0,
          flexGrow: 2,
          minHeight: "100%",
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal",
          boxSizing: "border-box",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
            WebkitUserModify: "read-write-plaintext-only"
          }
        },
        ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap",
          whiteSpace: "break-spaces",
          wordBreak: "break-word",
          overflowWrap: "anywhere"
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
          display: "block",
          padding: "0 2px 0 4px"
        },
        ".cm-selectionLayer": {
          zIndex: -1,
          contain: "size style"
        },
        ".cm-selectionBackground": {
          position: "absolute"
        },
        "&light .cm-selectionBackground": {
          background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
          background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
          background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
          background: "#233"
        },
        ".cm-cursorLayer": {
          zIndex: 100,
          contain: "size style",
          pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
        },
        "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
        ".cm-cursor": {
          position: "absolute",
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none",
          display: "none"
        },
        "&dark .cm-cursor": {
          borderLeftColor: "#444"
        },
        "&.cm-focused .cm-cursor": {
          display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
        "&dark .cm-activeLine": { backgroundColor: "#223039" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
        },
        ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top"
        },
        ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
        },
        "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
        },
        "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#111, #333)"
          }
        },
        ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
        },
        "&light .cm-textfield": {
          backgroundColor: "white"
        },
        "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
        }
      }, lightDarkIDs);
      var observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
      };
      var useCharData = browser.ie && browser.ie_version <= 11;
      var DOMObserver = class {
        constructor(view, onChange, onScrollChanged) {
          this.view = view;
          this.onChange = onChange;
          this.onScrollChanged = onScrollChanged;
          this.active = false;
          this.selectionRange = new DOMSelectionState();
          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.scrollTargets = [];
          this.intersection = null;
          this.resize = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = [];
          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver((mutations) => {
            for (let mut of mutations)
              this.queue.push(mut);
            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
              this.flushSoon();
            else
              this.flush();
          });
          if (useCharData)
            this.onCharData = (event) => {
              this.queue.push({
                target: event.target,
                type: "characterData",
                oldValue: event.prevValue
              });
              this.flushSoon();
            };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          if (typeof ResizeObserver == "function") {
            this.resize = new ResizeObserver(() => {
              if (this.view.docView.lastUpdate < Date.now() - 75 && this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                  this.resizeTimeout = -1;
                  this.view.requestMeasure();
                }, 50);
            });
            this.resize.observe(view.scrollDOM);
          }
          this.start();
          this.onScroll = this.onScroll.bind(this);
          window.addEventListener("scroll", this.onScroll);
          if (typeof IntersectionObserver == "function") {
            this.intersection = new IntersectionObserver((entries) => {
              if (this.parentCheck < 0)
                this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
              if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
                this.intersecting = !this.intersecting;
                if (this.intersecting != this.view.inView)
                  this.onScrollChanged(document.createEvent("Event"));
              }
            }, {});
            this.intersection.observe(this.dom);
            this.gapIntersection = new IntersectionObserver((entries) => {
              if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                this.onScrollChanged(document.createEvent("Event"));
            }, {});
          }
          this.listenForScroll();
          this.readSelectionRange();
          this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }
        onScroll(e) {
          if (this.intersecting)
            this.flush(false);
          this.onScrollChanged(e);
        }
        updateGaps(gaps) {
          if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
            this.gapIntersection.disconnect();
            for (let gap of gaps)
              this.gapIntersection.observe(gap);
            this.gaps = gaps;
          }
        }
        onSelectionChange(event) {
          if (!this.readSelectionRange())
            return;
          let { view } = this, sel = this.selectionRange;
          if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
            return;
          let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
          if (context && context.ignoreEvent(event))
            return;
          if (browser.ie && browser.ie_version <= 11 && !view.state.selection.main.empty && sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
            this.flushSoon();
          else
            this.flush(false);
        }
        readSelectionRange() {
          let { root } = this.view, domSel = getSelection(root);
          let range = browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM && safariSelectionRangeHack(this.view) || domSel;
          if (this.selectionRange.eq(range))
            return false;
          this.selectionRange.setRange(range);
          return this.selectionChanged = true;
        }
        setSelectionRange(anchor, head) {
          this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
          this.selectionChanged = false;
        }
        listenForScroll() {
          this.parentCheck = -1;
          let i = 0, changed = null;
          for (let dom = this.dom; dom; ) {
            if (dom.nodeType == 1) {
              if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                i++;
              else if (!changed)
                changed = this.scrollTargets.slice(0, i);
              if (changed)
                changed.push(dom);
              dom = dom.assignedSlot || dom.parentNode;
            } else if (dom.nodeType == 11) {
              dom = dom.host;
            } else {
              break;
            }
          }
          if (i < this.scrollTargets.length && !changed)
            changed = this.scrollTargets.slice(0, i);
          if (changed) {
            for (let dom of this.scrollTargets)
              dom.removeEventListener("scroll", this.onScroll);
            for (let dom of this.scrollTargets = changed)
              dom.addEventListener("scroll", this.onScroll);
          }
        }
        ignore(f) {
          if (!this.active)
            return f();
          try {
            this.stop();
            return f();
          } finally {
            this.start();
            this.clear();
          }
        }
        start() {
          if (this.active)
            return;
          this.observer.observe(this.dom, observeOptions);
          if (useCharData)
            this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.active = true;
        }
        stop() {
          if (!this.active)
            return;
          this.active = false;
          this.observer.disconnect();
          if (useCharData)
            this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        clear() {
          this.observer.takeRecords();
          this.queue.length = 0;
          this.selectionChanged = false;
        }
        flushSoon() {
          if (this.delayedFlush < 0)
            this.delayedFlush = window.setTimeout(() => {
              this.delayedFlush = -1;
              this.flush();
            }, 20);
        }
        forceFlush() {
          if (this.delayedFlush >= 0) {
            window.clearTimeout(this.delayedFlush);
            this.delayedFlush = -1;
            this.flush();
          }
        }
        processRecords() {
          let records = this.queue;
          for (let mut of this.observer.takeRecords())
            records.push(mut);
          if (records.length)
            this.queue = [];
          let from = -1, to = -1, typeOver = false;
          for (let record of records) {
            let range = this.readMutation(record);
            if (!range)
              continue;
            if (range.typeOver)
              typeOver = true;
            if (from == -1) {
              ({ from, to } = range);
            } else {
              from = Math.min(range.from, from);
              to = Math.max(range.to, to);
            }
          }
          return { from, to, typeOver };
        }
        flush(readSelection = true) {
          if (readSelection)
            this.readSelectionRange();
          if (this.delayedFlush >= 0 || this.view.inputState.pendingAndroidKey)
            return;
          let { from, to, typeOver } = this.processRecords();
          let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
          if (from < 0 && !newSel)
            return;
          this.selectionChanged = false;
          let startState = this.view.state;
          this.onChange(from, to, typeOver);
          if (this.view.state == startState)
            this.view.update([]);
        }
        readMutation(rec) {
          let cView = this.view.docView.nearest(rec.target);
          if (!cView || cView.ignoreMutation(rec))
            return null;
          cView.markDirty(rec.type == "attributes");
          if (rec.type == "attributes")
            cView.dirty |= 4;
          if (rec.type == "childList") {
            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
            return {
              from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
              to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
              typeOver: false
            };
          } else if (rec.type == "characterData") {
            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
          } else {
            return null;
          }
        }
        destroy() {
          var _a, _b, _c;
          this.stop();
          (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
          (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
          (_c = this.resize) === null || _c === void 0 ? void 0 : _c.disconnect();
          for (let dom of this.scrollTargets)
            dom.removeEventListener("scroll", this.onScroll);
          window.removeEventListener("scroll", this.onScroll);
          this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
          clearTimeout(this.parentCheck);
          clearTimeout(this.resizeTimeout);
        }
      };
      function findChild(cView, dom, dir) {
        while (dom) {
          let curView = ContentView.get(dom);
          if (curView && curView.parent == cView)
            return curView;
          let parent = dom.parentNode;
          dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
      }
      function safariSelectionRangeHack(view) {
        let found = null;
        function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found)
          return null;
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
          [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
      }
      function applyDOMChange(view, start, end, typeOver) {
        let change, newSel;
        let sel = view.state.selection.main;
        if (start > -1) {
          let bounds = view.docView.domBoundsAround(start, end, 0);
          if (!bounds || view.state.readOnly)
            return;
          let { from, to } = bounds;
          let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
          let reader = new DOMReader(selPoints, view);
          reader.readRange(bounds.startDOM, bounds.endDOM);
          newSel = selectionFromPoints(selPoints, from);
          let preferredPos = sel.from, preferredSide = null;
          if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && reader.text.length < to - from) {
            preferredPos = sel.to;
            preferredSide = "end";
          }
          let diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
          if (diff)
            change = {
              from: from + diff.from,
              to: from + diff.toA,
              insert: view.state.toText(reader.text.slice(diff.from, diff.toB))
            };
        } else if (view.hasFocus || !view.state.facet(editable)) {
          let domSel = view.observer.selectionRange;
          let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
          let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
          let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
          if (head != sel.head || anchor != sel.anchor)
            newSel = state.EditorSelection.single(anchor, head);
        }
        if (!change && !newSel)
          return;
        if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
          change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4)
          change = {
            from: sel.from,
            to: sel.to,
            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
          };
        if (change) {
          let startState = view.state;
          if (browser.ios && view.inputState.flushIOSKey(view))
            return;
          if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
            return;
          let text2 = change.insert.toString();
          if (view.state.facet(inputHandler).some((h) => h(view, change.from, change.to, text2)))
            return;
          if (view.inputState.composing >= 0)
            view.inputState.composing++;
          let tr;
          if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
          } else {
            let changes = startState.changes(change);
            tr = {
              changes,
              selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? startState.selection.replaceRange(newSel.main) : void 0
            };
          }
          let userEvent = "input.type";
          if (view.composing) {
            userEvent += ".compose";
            if (view.inputState.compositionFirstChange) {
              userEvent += ".start";
              view.inputState.compositionFirstChange = false;
            }
          }
          view.dispatch(tr, { scrollIntoView: true, userEvent });
        } else if (newSel && !newSel.main.eq(sel)) {
          let scrollIntoView = false, userEvent = "select";
          if (view.inputState.lastSelectionTime > Date.now() - 50) {
            if (view.inputState.lastSelectionOrigin == "select")
              scrollIntoView = true;
            userEvent = view.inputState.lastSelectionOrigin;
          }
          view.dispatch({ selection: newSel, scrollIntoView, userEvent });
        }
      }
      function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
          from++;
        if (from == minLen && a.length == b.length)
          return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
          toA--;
          toB--;
        }
        if (preferredSide == "end") {
          let adjust = Math.max(0, from - Math.min(toA, toB));
          preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
          let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
          from -= move;
          toB = from + (toB - toA);
          toA = from;
        } else if (toB < from) {
          let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
          from -= move;
          toA = from + (toA - toB);
          toB = from;
        }
        return { from, toA, toB };
      }
      function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
          return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
          result.push(new DOMPoint(anchorNode, anchorOffset));
          if (focusNode != anchorNode || focusOffset != anchorOffset)
            result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
      }
      function selectionFromPoints(points, base) {
        if (points.length == 0)
          return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? state.EditorSelection.single(anchor + base, head + base) : null;
      }
      var EditorView = class {
        constructor(config = {}) {
          this.plugins = [];
          this.pluginMap = /* @__PURE__ */ new Map();
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          this.updateState = 2;
          this.measureScheduled = -1;
          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.style.cssText = "position: absolute; top: -10000px";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);
          this._dispatch = config.dispatch || ((tr) => this.update([tr]));
          this.dispatch = this.dispatch.bind(this);
          this.root = config.root || getRoot(config.parent) || document;
          this.viewState = new ViewState(config.state || state.EditorState.create());
          this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
          for (let plugin2 of this.plugins)
            plugin2.update(this);
          this.observer = new DOMObserver(this, (from, to, typeOver) => {
            applyDOMChange(this, from, to, typeOver);
          }, (event) => {
            this.inputState.runScrollHandlers(this, event);
            if (this.observer.intersecting)
              this.measure();
          });
          this.inputState = new InputState(this);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0;
          ensureGlobalHandler();
          this.requestMeasure();
          if (config.parent)
            config.parent.appendChild(this.dom);
        }
        get state() {
          return this.viewState.state;
        }
        get viewport() {
          return this.viewState.viewport;
        }
        get visibleRanges() {
          return this.viewState.visibleRanges;
        }
        get inView() {
          return this.viewState.inView;
        }
        get composing() {
          return this.inputState.composing > 0;
        }
        dispatch(...input) {
          this._dispatch(input.length == 1 && input[0] instanceof state.Transaction ? input[0] : this.state.update(...input));
        }
        update(transactions) {
          if (this.updateState != 0)
            throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
          let redrawn = false, update;
          let state$1 = this.state;
          for (let tr of transactions) {
            if (tr.startState != state$1)
              throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
            state$1 = tr.state;
          }
          if (this.destroyed) {
            this.viewState.state = state$1;
            return;
          }
          if (state$1.facet(state.EditorState.phrases) != this.state.facet(state.EditorState.phrases))
            return this.setState(state$1);
          update = new ViewUpdate(this, state$1, transactions);
          let scrollTarget = null;
          try {
            this.updateState = 2;
            for (let tr of transactions) {
              if (scrollTarget)
                scrollTarget = scrollTarget.map(tr.changes);
              if (tr.scrollIntoView) {
                let { main } = tr.state.selection;
                scrollTarget = new ScrollTarget(main.empty ? main : state.EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
              }
              for (let e of tr.effects) {
                if (e.is(scrollTo))
                  scrollTarget = new ScrollTarget(e.value);
                else if (e.is(centerOn))
                  scrollTarget = new ScrollTarget(e.value, true);
              }
            }
            this.viewState.update(update, scrollTarget);
            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
            if (!update.empty) {
              this.updatePlugins(update);
              this.inputState.update(update);
            }
            redrawn = this.docView.update(update);
            if (this.state.facet(styleModule) != this.styleModules)
              this.mountStyles();
            this.updateAttrs();
            this.showAnnouncements(transactions);
            this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
          } finally {
            this.updateState = 0;
          }
          if (redrawn || scrollTarget || this.viewState.mustEnforceCursorAssoc)
            this.requestMeasure();
          if (!update.empty)
            for (let listener of this.state.facet(updateListener))
              listener(update);
        }
        setState(newState) {
          if (this.updateState != 0)
            throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
          if (this.destroyed) {
            this.viewState.state = newState;
            return;
          }
          this.updateState = 2;
          try {
            for (let plugin2 of this.plugins)
              plugin2.destroy(this);
            this.viewState = new ViewState(newState);
            this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
            this.pluginMap.clear();
            for (let plugin2 of this.plugins)
              plugin2.update(this);
            this.docView = new DocView(this);
            this.inputState.ensureHandlers(this);
            this.mountStyles();
            this.updateAttrs();
            this.bidiCache = [];
          } finally {
            this.updateState = 0;
          }
          this.requestMeasure();
        }
        updatePlugins(update) {
          let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
          if (prevSpecs != specs) {
            let newPlugins = [];
            for (let spec of specs) {
              let found = prevSpecs.indexOf(spec);
              if (found < 0) {
                newPlugins.push(new PluginInstance(spec));
              } else {
                let plugin2 = this.plugins[found];
                plugin2.mustUpdate = update;
                newPlugins.push(plugin2);
              }
            }
            for (let plugin2 of this.plugins)
              if (plugin2.mustUpdate != update)
                plugin2.destroy(this);
            this.plugins = newPlugins;
            this.pluginMap.clear();
            this.inputState.ensureHandlers(this);
          } else {
            for (let p of this.plugins)
              p.mustUpdate = update;
          }
          for (let i = 0; i < this.plugins.length; i++)
            this.plugins[i].update(this);
        }
        measure(flush = true) {
          if (this.destroyed)
            return;
          if (this.measureScheduled > -1)
            cancelAnimationFrame(this.measureScheduled);
          this.measureScheduled = 0;
          if (flush)
            this.observer.flush();
          let updated = null;
          try {
            for (let i = 0; ; i++) {
              this.updateState = 1;
              let oldViewport = this.viewport;
              let changed = this.viewState.measure(this);
              if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                break;
              if (i > 5) {
                console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
                break;
              }
              let measuring = [];
              if (!(changed & 4))
                [this.measureRequests, measuring] = [measuring, this.measureRequests];
              let measured = measuring.map((m) => {
                try {
                  return m.read(this);
                } catch (e) {
                  logException(this.state, e);
                  return BadMeasure;
                }
              });
              let update = new ViewUpdate(this, this.state), redrawn = false;
              update.flags |= changed;
              if (!updated)
                updated = update;
              else
                updated.flags |= changed;
              this.updateState = 2;
              if (!update.empty) {
                this.updatePlugins(update);
                this.inputState.update(update);
                this.updateAttrs();
                redrawn = this.docView.update(update);
              }
              for (let i2 = 0; i2 < measuring.length; i2++)
                if (measured[i2] != BadMeasure) {
                  try {
                    let m = measuring[i2];
                    if (m.write)
                      m.write(measured[i2], this);
                  } catch (e) {
                    logException(this.state, e);
                  }
                }
              if (this.viewState.scrollTarget) {
                this.docView.scrollIntoView(this.viewState.scrollTarget);
                this.viewState.scrollTarget = null;
              }
              if (redrawn)
                this.docView.updateSelection(true);
              if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && this.measureRequests.length == 0)
                break;
            }
          } finally {
            this.updateState = 0;
            this.measureScheduled = -1;
          }
          if (updated && !updated.empty)
            for (let listener of this.state.facet(updateListener))
              listener(updated);
        }
        get themeClasses() {
          return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
        }
        updateAttrs() {
          let editorAttrs = attrsFromFacet(this, editorAttributes, {
            class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
          });
          let contentAttrs = {
            spellcheck: "false",
            autocorrect: "off",
            autocapitalize: "off",
            translate: "no",
            contenteditable: !this.state.facet(editable) ? "false" : "true",
            class: "cm-content",
            style: `${browser.tabSize}: ${this.state.tabSize}`,
            role: "textbox",
            "aria-multiline": "true"
          };
          if (this.state.readOnly)
            contentAttrs["aria-readonly"] = "true";
          attrsFromFacet(this, contentAttributes, contentAttrs);
          this.observer.ignore(() => {
            updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
            updateAttrs(this.dom, this.editorAttrs, editorAttrs);
          });
          this.editorAttrs = editorAttrs;
          this.contentAttrs = contentAttrs;
        }
        showAnnouncements(trs) {
          let first = true;
          for (let tr of trs)
            for (let effect of tr.effects)
              if (effect.is(EditorView.announce)) {
                if (first)
                  this.announceDOM.textContent = "";
                first = false;
                let div = this.announceDOM.appendChild(document.createElement("div"));
                div.textContent = effect.value;
              }
        }
        mountStyles() {
          this.styleModules = this.state.facet(styleModule);
          styleMod.StyleModule.mount(this.root, this.styleModules.concat(baseTheme).reverse());
        }
        readMeasured() {
          if (this.updateState == 2)
            throw new Error("Reading the editor layout isn't allowed during an update");
          if (this.updateState == 0 && this.measureScheduled > -1)
            this.measure(false);
        }
        requestMeasure(request) {
          if (this.measureScheduled < 0)
            this.measureScheduled = requestAnimationFrame(() => this.measure());
          if (request) {
            if (request.key != null)
              for (let i = 0; i < this.measureRequests.length; i++) {
                if (this.measureRequests[i].key === request.key) {
                  this.measureRequests[i] = request;
                  return;
                }
              }
            this.measureRequests.push(request);
          }
        }
        pluginField(field) {
          let result = [];
          for (let plugin2 of this.plugins)
            plugin2.update(this).takeField(field, result);
          return result;
        }
        plugin(plugin2) {
          let known = this.pluginMap.get(plugin2);
          if (known === void 0 || known && known.spec != plugin2)
            this.pluginMap.set(plugin2, known = this.plugins.find((p) => p.spec == plugin2) || null);
          return known && known.update(this).value;
        }
        get documentTop() {
          return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        get documentPadding() {
          return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        blockAtHeight(height, docTop) {
          let top = ensureTop(docTop, this);
          return this.elementAtHeight(height - top).moveY(top);
        }
        elementAtHeight(height) {
          this.readMeasured();
          return this.viewState.elementAtHeight(height);
        }
        visualLineAtHeight(height, docTop) {
          let top = ensureTop(docTop, this);
          return this.lineBlockAtHeight(height - top).moveY(top);
        }
        lineBlockAtHeight(height) {
          this.readMeasured();
          return this.viewState.lineBlockAtHeight(height);
        }
        viewportLines(f, docTop) {
          let top = ensureTop(docTop, this);
          for (let line of this.viewportLineBlocks)
            f(line.moveY(top));
        }
        get viewportLineBlocks() {
          return this.viewState.viewportLines;
        }
        visualLineAt(pos, docTop = 0) {
          return this.lineBlockAt(pos).moveY(docTop + this.viewState.paddingTop);
        }
        lineBlockAt(pos) {
          return this.viewState.lineBlockAt(pos);
        }
        get contentHeight() {
          return this.viewState.contentHeight;
        }
        moveByChar(start, forward, by) {
          return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        moveByGroup(start, forward) {
          return skipAtoms(this, start, moveByChar(this, start, forward, (initial) => byGroup(this, start.head, initial)));
        }
        moveToLineBoundary(start, forward, includeWrap = true) {
          return moveToLineBoundary(this, start, forward, includeWrap);
        }
        moveVertically(start, forward, distance) {
          return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        scrollPosIntoView(pos) {
          this.dispatch({ effects: scrollTo.of(state.EditorSelection.cursor(pos)) });
        }
        domAtPos(pos) {
          return this.docView.domAtPos(pos);
        }
        posAtDOM(node, offset = 0) {
          return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
          this.readMeasured();
          return posAtCoords(this, coords, precise);
        }
        coordsAtPos(pos, side = 1) {
          this.readMeasured();
          let rect = this.docView.coordsAt(pos, side);
          if (!rect || rect.left == rect.right)
            return rect;
          let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
          let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
          return flattenRect(rect, span.dir == exports.Direction.LTR == side > 0);
        }
        get defaultCharacterWidth() {
          return this.viewState.heightOracle.charWidth;
        }
        get defaultLineHeight() {
          return this.viewState.heightOracle.lineHeight;
        }
        get textDirection() {
          return this.viewState.heightOracle.direction;
        }
        get lineWrapping() {
          return this.viewState.heightOracle.lineWrapping;
        }
        bidiSpans(line) {
          if (line.length > MaxBidiLine)
            return trivialOrder(line.length);
          let dir = this.textDirection;
          for (let entry of this.bidiCache)
            if (entry.from == line.from && entry.dir == dir)
              return entry.order;
          let order = computeOrder(line.text, this.textDirection);
          this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
          return order;
        }
        get hasFocus() {
          var _a;
          return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
        }
        focus() {
          this.observer.ignore(() => {
            focusPreventScroll(this.contentDOM);
            this.docView.updateSelection();
          });
        }
        destroy() {
          for (let plugin2 of this.plugins)
            plugin2.destroy(this);
          this.plugins = [];
          this.inputState.destroy();
          this.dom.remove();
          this.observer.destroy();
          if (this.measureScheduled > -1)
            cancelAnimationFrame(this.measureScheduled);
          this.destroyed = true;
        }
        static domEventHandlers(handlers2) {
          return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
        }
        static theme(spec, options) {
          let prefix = styleMod.StyleModule.newName();
          let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
          if (options && options.dark)
            result.push(darkTheme.of(true));
          return result;
        }
        static baseTheme(spec) {
          return state.Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
      };
      EditorView.scrollTo = scrollTo;
      EditorView.centerOn = centerOn;
      EditorView.styleModule = styleModule;
      EditorView.inputHandler = inputHandler;
      EditorView.exceptionSink = exceptionSink;
      EditorView.updateListener = updateListener;
      EditorView.editable = editable;
      EditorView.mouseSelectionStyle = mouseSelectionStyle;
      EditorView.dragMovesSelection = dragMovesSelection$1;
      EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
      EditorView.decorations = decorations;
      EditorView.contentAttributes = contentAttributes;
      EditorView.editorAttributes = editorAttributes;
      EditorView.lineWrapping = EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
      EditorView.announce = state.StateEffect.define();
      var MaxBidiLine = 4096;
      function ensureTop(given, view) {
        return (given == null ? view.contentDOM.getBoundingClientRect().top : given) + view.viewState.paddingTop;
      }
      var resizeDebounce = -1;
      function ensureGlobalHandler() {
        window.addEventListener("resize", () => {
          if (resizeDebounce == -1)
            resizeDebounce = setTimeout(handleResize, 50);
        });
      }
      function handleResize() {
        resizeDebounce = -1;
        let found = document.querySelectorAll(".cm-content");
        for (let i = 0; i < found.length; i++) {
          let docView = ContentView.get(found[i]);
          if (docView)
            docView.editorView.requestMeasure();
        }
      }
      var BadMeasure = {};
      var CachedOrder = class {
        constructor(from, to, dir, order) {
          this.from = from;
          this.to = to;
          this.dir = dir;
          this.order = order;
        }
        static update(cache, changes) {
          if (changes.empty)
            return cache;
          let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : exports.Direction.LTR;
          for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
            let entry = cache[i];
            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
              result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
          }
          return result;
        }
      };
      function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
          let source = sources[i], value = typeof source == "function" ? source(view) : source;
          if (value)
            combineAttrs(value, base);
        }
        return base;
      }
      var currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
      function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
          result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
          const mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod))
            meta = true;
          else if (/^a(lt)?$/i.test(mod))
            alt = true;
          else if (/^(c|ctrl|control)$/i.test(mod))
            ctrl = true;
          else if (/^s(hift)?$/i.test(mod))
            shift = true;
          else if (/^mod$/i.test(mod)) {
            if (platform == "mac")
              meta = true;
            else
              ctrl = true;
          } else
            throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
          result = "Alt-" + result;
        if (ctrl)
          result = "Ctrl-" + result;
        if (meta)
          result = "Meta-" + result;
        if (shift)
          result = "Shift-" + result;
        return result;
      }
      function modifiers(name, event, shift) {
        if (event.altKey)
          name = "Alt-" + name;
        if (event.ctrlKey)
          name = "Ctrl-" + name;
        if (event.metaKey)
          name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
          name = "Shift-" + name;
        return name;
      }
      var handleKeyEvents = EditorView.domEventHandlers({
        keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
        }
      });
      var keymap = state.Facet.define({ enables: handleKeyEvents });
      var Keymaps = new WeakMap();
      function getKeymap(state2) {
        let bindings = state2.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
          Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
      }
      function runScopeHandlers(view, event, scope) {
        return runHandlers(getKeymap(view.state), event, view, scope);
      }
      var storedPrefix = null;
      var PrefixTimeout = 4e3;
      function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
          let current = isPrefix[name];
          if (current == null)
            isPrefix[name] = is;
          else if (current != is)
            throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault) => {
          let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
          let parts = key.split(/ (?!$)/).map((k) => normalizeKeyName(k, platform));
          for (let i = 1; i < parts.length; i++) {
            let prefix = parts.slice(0, i).join(" ");
            checkPrefix(prefix, true);
            if (!scopeObj[prefix])
              scopeObj[prefix] = {
                preventDefault: true,
                commands: [(view) => {
                  let ourObj = storedPrefix = { view, prefix, scope };
                  setTimeout(() => {
                    if (storedPrefix == ourObj)
                      storedPrefix = null;
                  }, PrefixTimeout);
                  return true;
                }]
              };
          }
          let full = parts.join(" ");
          checkPrefix(full, false);
          let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
          binding.commands.push(command);
          if (preventDefault)
            binding.preventDefault = true;
        };
        for (let b of bindings) {
          let name = b[platform] || b.key;
          if (!name)
            continue;
          for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
            add(scope, name, b.run, b.preventDefault);
            if (b.shift)
              add(scope, "Shift-" + name, b.shift, b.preventDefault);
          }
        }
        return bound;
      }
      function runHandlers(map, event, view, scope) {
        let name = w3cKeyname.keyName(event), isChar = name.length == 1 && name != " ";
        let prefix = "", fallthrough = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
          prefix = storedPrefix.prefix + " ";
          if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
            storedPrefix = null;
        }
        let runFor = (binding) => {
          if (binding) {
            for (let cmd of binding.commands)
              if (cmd(view))
                return true;
            if (binding.preventDefault)
              fallthrough = true;
          }
          return false;
        };
        let scopeObj = map[scope], baseName;
        if (scopeObj) {
          if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
            return true;
          if (isChar && (event.shiftKey || event.altKey || event.metaKey) && (baseName = w3cKeyname.base[event.keyCode]) && baseName != name) {
            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
              return true;
          } else if (isChar && event.shiftKey) {
            if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
              return true;
          }
        }
        return fallthrough;
      }
      var CanHidePrimary = !browser.ios;
      var selectionConfig = state.Facet.define({
        combine(configs) {
          return state.combineConfig(configs, {
            cursorBlinkRate: 1200,
            drawRangeCursor: true
          }, {
            cursorBlinkRate: (a, b) => Math.min(a, b),
            drawRangeCursor: (a, b) => a || b
          });
        }
      });
      function drawSelection(config = {}) {
        return [
          selectionConfig.of(config),
          drawSelectionPlugin,
          hideNativeSelection
        ];
      }
      var Piece = class {
        constructor(left, top, width, height, className) {
          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
          this.className = className;
        }
        draw() {
          let elt = document.createElement("div");
          elt.className = this.className;
          this.adjust(elt);
          return elt;
        }
        adjust(elt) {
          elt.style.left = this.left + "px";
          elt.style.top = this.top + "px";
          if (this.width >= 0)
            elt.style.width = this.width + "px";
          elt.style.height = this.height + "px";
        }
        eq(p) {
          return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
        }
      };
      var drawSelectionPlugin = ViewPlugin.fromClass(class {
        constructor(view) {
          this.view = view;
          this.rangePieces = [];
          this.cursors = [];
          this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
          this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
          this.selectionLayer.className = "cm-selectionLayer";
          this.selectionLayer.setAttribute("aria-hidden", "true");
          this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
          this.cursorLayer.className = "cm-cursorLayer";
          this.cursorLayer.setAttribute("aria-hidden", "true");
          view.requestMeasure(this.measureReq);
          this.setBlinkRate();
        }
        setBlinkRate() {
          this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
        }
        update(update) {
          let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
          if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
            this.view.requestMeasure(this.measureReq);
          if (update.transactions.some((tr) => tr.scrollIntoView))
            this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
          if (confChanged)
            this.setBlinkRate();
        }
        readPos() {
          let { state: state2 } = this.view, conf = state2.facet(selectionConfig);
          let rangePieces = state2.selection.ranges.map((r) => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
          let cursors = [];
          for (let r of state2.selection.ranges) {
            let prim = r == state2.selection.main;
            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
              let piece = measureCursor(this.view, r, prim);
              if (piece)
                cursors.push(piece);
            }
          }
          return { rangePieces, cursors };
        }
        drawSel({ rangePieces, cursors }) {
          if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
            this.selectionLayer.textContent = "";
            for (let p of rangePieces)
              this.selectionLayer.appendChild(p.draw());
            this.rangePieces = rangePieces;
          }
          if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
            let oldCursors = this.cursorLayer.children;
            if (oldCursors.length !== cursors.length) {
              this.cursorLayer.textContent = "";
              for (const c of cursors)
                this.cursorLayer.appendChild(c.draw());
            } else {
              cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
            }
            this.cursors = cursors;
          }
        }
        destroy() {
          this.selectionLayer.remove();
          this.cursorLayer.remove();
        }
      });
      var themeSpec = {
        ".cm-line": {
          "& ::selection": { backgroundColor: "transparent !important" },
          "&::selection": { backgroundColor: "transparent !important" }
        }
      };
      if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
      var hideNativeSelection = state.Prec.highest(EditorView.theme(themeSpec));
      function getBase(view) {
        let rect = view.scrollDOM.getBoundingClientRect();
        let left = view.textDirection == exports.Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
        return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
      }
      function wrappedLine(view, pos, inside2) {
        let range = state.EditorSelection.cursor(pos);
        return {
          from: Math.max(inside2.from, view.moveToLineBoundary(range, false, true).from),
          to: Math.min(inside2.to, view.moveToLineBoundary(range, true, true).from),
          type: exports.BlockType.Text
        };
      }
      function blockAt(view, pos) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type))
          for (let l of line.type) {
            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == exports.BlockType.Text))
              return l;
          }
        return line;
      }
      function measureRange(view, range) {
        if (range.to <= view.viewport.from || range.from >= view.viewport.to)
          return [];
        let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
        let ltr = view.textDirection == exports.Direction.LTR;
        let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
        let lineStyle = window.getComputedStyle(content.firstChild);
        let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
        let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
        let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
        let visualStart = startBlock.type == exports.BlockType.Text ? startBlock : null;
        let visualEnd = endBlock.type == exports.BlockType.Text ? endBlock : null;
        if (view.lineWrapping) {
          if (visualStart)
            visualStart = wrappedLine(view, from, visualStart);
          if (visualEnd)
            visualEnd = wrappedLine(view, to, visualEnd);
        }
        if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
          return pieces(drawForLine(range.from, range.to, visualStart));
        } else {
          let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
          let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
          let between = [];
          if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
          else if (top.bottom < bottom.top && blockAt(view, (top.bottom + bottom.top) / 2).type == exports.BlockType.Text)
            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
          return pieces(top).concat(between).concat(pieces(bottom));
        }
        function piece(left, top, right, bottom) {
          return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
        }
        function pieces({ top, bottom, horizontal }) {
          let pieces2 = [];
          for (let i = 0; i < horizontal.length; i += 2)
            pieces2.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
          return pieces2;
        }
        function drawForLine(from2, to2, line) {
          let top = 1e9, bottom = -1e9, horizontal = [];
          function addSpan(from3, fromOpen, to3, toOpen, dir) {
            let fromCoords = view.coordsAtPos(from3, from3 == line.to ? -2 : 2);
            let toCoords = view.coordsAtPos(to3, to3 == line.from ? 2 : -2);
            top = Math.min(fromCoords.top, toCoords.top, top);
            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
            if (dir == exports.Direction.LTR)
              horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
            else
              horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
          }
          let start = from2 !== null && from2 !== void 0 ? from2 : line.from, end = to2 !== null && to2 !== void 0 ? to2 : line.to;
          for (let r of view.visibleRanges)
            if (r.to > start && r.from < end) {
              for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end); ; ) {
                let docLine = view.state.doc.lineAt(pos);
                for (let span of view.bidiSpans(docLine)) {
                  let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                  if (spanFrom >= endPos)
                    break;
                  if (spanTo > pos)
                    addSpan(Math.max(spanFrom, pos), from2 == null && spanFrom <= start, Math.min(spanTo, endPos), to2 == null && spanTo >= end, span.dir);
                }
                pos = docLine.to + 1;
                if (pos >= endPos)
                  break;
              }
            }
          if (horizontal.length == 0)
            addSpan(start, from2 == null, end, to2 == null, view.textDirection);
          return { top, bottom, horizontal };
        }
        function drawForWidget(block, top) {
          let y = contentRect.top + (top ? block.top : block.bottom);
          return { top: y, bottom: y, horizontal: [] };
        }
      }
      function measureCursor(view, cursor, primary) {
        let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
        if (!pos)
          return null;
        let base = getBase(view);
        return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
      }
      function iterMatches(doc2, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc2.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
          if (!cursor.lineBreak)
            while (m = re.exec(cursor.value))
              f(pos + m.index, pos + m.index + m[0].length, m);
        }
      }
      var MatchDecorator = class {
        constructor(config) {
          let { regexp, decoration, boundary } = config;
          if (!regexp.global)
            throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
          this.regexp = regexp;
          this.getDeco = typeof decoration == "function" ? decoration : () => decoration;
          this.boundary = boundary;
        }
        createDeco(view) {
          let build = new rangeset.RangeSetBuilder();
          for (let { from, to } of view.visibleRanges)
            iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));
          return build.finish();
        }
        updateDeco(update, deco) {
          let changeFrom = 1e9, changeTo = -1;
          if (update.docChanged)
            update.changes.iterChanges((_f, _t, from, to) => {
              if (to > update.view.viewport.from && from < update.view.viewport.to) {
                changeFrom = Math.min(from, changeFrom);
                changeTo = Math.max(to, changeTo);
              }
            });
          if (update.viewportChanged || changeTo - changeFrom > 1e3)
            return this.createDeco(update.view);
          if (changeTo > -1)
            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
          return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
          for (let r of view.visibleRanges) {
            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
            if (to > from) {
              let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
              let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
              if (this.boundary) {
                for (; from > fromLine.from; from--)
                  if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                    start = from;
                    break;
                  }
                for (; to < toLine.to; to++)
                  if (this.boundary.test(toLine.text[to - toLine.from])) {
                    end = to;
                    break;
                  }
              }
              let ranges = [], m;
              if (fromLine == toLine) {
                this.regexp.lastIndex = start - fromLine.from;
                while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                  let pos = m.index + fromLine.from;
                  ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));
                }
              } else {
                iterMatches(view.state.doc, this.regexp, start, end, (from2, to2, m2) => ranges.push(this.getDeco(m2, view, from2).range(from2, to2)));
              }
              deco = deco.update({ filterFrom: start, filterTo: end, filter: (from2, to2) => from2 < start || to2 > end, add: ranges });
            }
          }
          return deco;
        }
      };
      var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
      var Specials = new RegExp("[\0-\b\n-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
      var Names = {
        0: "null",
        7: "bell",
        8: "backspace",
        10: "newline",
        11: "vertical tab",
        13: "carriage return",
        27: "escape",
        8203: "zero width space",
        8204: "zero width non-joiner",
        8205: "zero width joiner",
        8206: "left-to-right mark",
        8207: "right-to-left mark",
        8232: "line separator",
        8237: "left-to-right override",
        8238: "right-to-left override",
        8233: "paragraph separator",
        65279: "zero width no-break space",
        65532: "object replacement"
      };
      var _supportsTabSize = null;
      function supportsTabSize() {
        var _a;
        if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
          let styles = document.body.style;
          _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
        }
        return _supportsTabSize || false;
      }
      var specialCharConfig = state.Facet.define({
        combine(configs) {
          let config = state.combineConfig(configs, {
            render: null,
            specialChars: Specials,
            addSpecialChars: null
          });
          if (config.replaceTabs = !supportsTabSize())
            config.specialChars = new RegExp("	|" + config.specialChars.source, UnicodeRegexpSupport);
          if (config.addSpecialChars)
            config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
          return config;
        }
      });
      function highlightSpecialChars(config = {}) {
        return [specialCharConfig.of(config), specialCharPlugin()];
      }
      var _plugin = null;
      function specialCharPlugin() {
        return _plugin || (_plugin = ViewPlugin.fromClass(class {
          constructor(view) {
            this.view = view;
            this.decorations = Decoration.none;
            this.decorationCache = Object.create(null);
            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
            this.decorations = this.decorator.createDeco(view);
          }
          makeDecorator(conf) {
            return new MatchDecorator({
              regexp: conf.specialChars,
              decoration: (m, view, pos) => {
                let { doc: doc2 } = view.state;
                let code = text.codePointAt(m[0], 0);
                if (code == 9) {
                  let line = doc2.lineAt(pos);
                  let size = view.state.tabSize, col = text.countColumn(line.text, size, pos - line.from);
                  return Decoration.replace({ widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth) });
                }
                return this.decorationCache[code] || (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
              },
              boundary: conf.replaceTabs ? void 0 : /[^]/
            });
          }
          update(update) {
            let conf = update.state.facet(specialCharConfig);
            if (update.startState.facet(specialCharConfig) != conf) {
              this.decorator = this.makeDecorator(conf);
              this.decorations = this.decorator.createDeco(update.view);
            } else {
              this.decorations = this.decorator.updateDeco(update, this.decorations);
            }
          }
        }, {
          decorations: (v) => v.decorations
        }));
      }
      var DefaultPlaceholder = "\u2022";
      function placeholder$1(code) {
        if (code >= 32)
          return DefaultPlaceholder;
        if (code == 10)
          return "\u2424";
        return String.fromCharCode(9216 + code);
      }
      var SpecialCharWidget = class extends WidgetType {
        constructor(options, code) {
          super();
          this.options = options;
          this.code = code;
        }
        eq(other) {
          return other.code == this.code;
        }
        toDOM(view) {
          let ph = placeholder$1(this.code);
          let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
          let custom = this.options.render && this.options.render(this.code, desc, ph);
          if (custom)
            return custom;
          let span = document.createElement("span");
          span.textContent = ph;
          span.title = desc;
          span.setAttribute("aria-label", desc);
          span.className = "cm-specialChar";
          return span;
        }
        ignoreEvent() {
          return false;
        }
      };
      var TabWidget = class extends WidgetType {
        constructor(width) {
          super();
          this.width = width;
        }
        eq(other) {
          return other.width == this.width;
        }
        toDOM() {
          let span = document.createElement("span");
          span.textContent = "	";
          span.className = "cm-tab";
          span.style.width = this.width + "px";
          return span;
        }
        ignoreEvent() {
          return false;
        }
      };
      var plugin = ViewPlugin.fromClass(class {
        constructor() {
          this.height = 1e3;
          this.attrs = { style: "padding-bottom: 1000px" };
        }
        update(update) {
          let height = update.view.viewState.editorHeight - update.view.defaultLineHeight;
          if (height != this.height) {
            this.height = height;
            this.attrs = { style: `padding-bottom: ${height}px` };
          }
        }
      });
      function scrollPastEnd() {
        return [plugin, contentAttributes.of((view) => {
          var _a;
          return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.attrs) || null;
        })];
      }
      function highlightActiveLine() {
        return activeLineHighlighter;
      }
      var lineDeco = Decoration.line({ class: "cm-activeLine" });
      var activeLineHighlighter = ViewPlugin.fromClass(class {
        constructor(view) {
          this.decorations = this.getDeco(view);
        }
        update(update) {
          if (update.docChanged || update.selectionSet)
            this.decorations = this.getDeco(update.view);
        }
        getDeco(view) {
          let lastLineStart = -1, deco = [];
          for (let r of view.state.selection.ranges) {
            if (!r.empty)
              return Decoration.none;
            let line = view.lineBlockAt(r.head);
            if (line.from > lastLineStart) {
              deco.push(lineDeco.range(line.from));
              lastLineStart = line.from;
            }
          }
          return Decoration.set(deco);
        }
      }, {
        decorations: (v) => v.decorations
      });
      var Placeholder = class extends WidgetType {
        constructor(content) {
          super();
          this.content = content;
        }
        toDOM() {
          let wrap = document.createElement("span");
          wrap.className = "cm-placeholder";
          wrap.style.pointerEvents = "none";
          wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
          if (typeof this.content == "string")
            wrap.setAttribute("aria-label", "placeholder " + this.content);
          else
            wrap.setAttribute("aria-hidden", "true");
          return wrap;
        }
        ignoreEvent() {
          return false;
        }
      };
      function placeholder(content) {
        return ViewPlugin.fromClass(class {
          constructor(view) {
            this.view = view;
            this.placeholder = Decoration.set([Decoration.widget({ widget: new Placeholder(content), side: 1 }).range(0)]);
          }
          get decorations() {
            return this.view.state.doc.length ? Decoration.none : this.placeholder;
          }
        }, { decorations: (v) => v.decorations });
      }
      var __test = { HeightMap, HeightOracle, MeasuredHeights, QueryType, ChangedRange, computeOrder, moveVisually };
      Object.defineProperty(exports, "Range", {
        enumerable: true,
        get: function() {
          return rangeset.Range;
        }
      });
      exports.BidiSpan = BidiSpan;
      exports.BlockInfo = BlockInfo;
      exports.Decoration = Decoration;
      exports.EditorView = EditorView;
      exports.MatchDecorator = MatchDecorator;
      exports.PluginField = PluginField;
      exports.PluginFieldProvider = PluginFieldProvider;
      exports.ViewPlugin = ViewPlugin;
      exports.ViewUpdate = ViewUpdate;
      exports.WidgetType = WidgetType;
      exports.__test = __test;
      exports.drawSelection = drawSelection;
      exports.highlightActiveLine = highlightActiveLine;
      exports.highlightSpecialChars = highlightSpecialChars;
      exports.keymap = keymap;
      exports.logException = logException;
      exports.placeholder = placeholder;
      exports.runScopeHandlers = runScopeHandlers;
      exports.scrollPastEnd = scrollPastEnd;
    }
  });

  // ../../../node_modules/@codemirror/history/dist/index.cjs
  var require_dist5 = __commonJS({
    "../../../node_modules/@codemirror/history/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var view = require_dist4();
      var fromHistory = state.Annotation.define();
      var isolateHistory = state.Annotation.define();
      var invertedEffects = state.Facet.define();
      var historyConfig = state.Facet.define({
        combine(configs) {
          return state.combineConfig(configs, {
            minDepth: 100,
            newGroupDelay: 500
          }, { minDepth: Math.max, newGroupDelay: Math.min });
        }
      });
      var historyField_ = state.StateField.define({
        create() {
          return HistoryState.empty;
        },
        update(state$1, tr) {
          let config = tr.state.facet(historyConfig);
          let fromHist = tr.annotation(fromHistory);
          if (fromHist) {
            let item = HistEvent.fromTransaction(tr), from = fromHist.side;
            let other = from == 0 ? state$1.undone : state$1.done;
            if (item)
              other = updateBranch(other, other.length, config.minDepth, item);
            else
              other = addSelection(other, tr.startState.selection);
            return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
          }
          let isolate = tr.annotation(isolateHistory);
          if (isolate == "full" || isolate == "before")
            state$1 = state$1.isolate();
          if (tr.annotation(state.Transaction.addToHistory) === false)
            return !tr.changes.empty ? state$1.addMapping(tr.changes.desc) : state$1;
          let event = HistEvent.fromTransaction(tr);
          let time = tr.annotation(state.Transaction.time), userEvent = tr.annotation(state.Transaction.userEvent);
          if (event)
            state$1 = state$1.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
          else if (tr.selection)
            state$1 = state$1.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
          if (isolate == "full" || isolate == "after")
            state$1 = state$1.isolate();
          return state$1;
        },
        toJSON(value) {
          return { done: value.done.map((e) => e.toJSON()), undone: value.undone.map((e) => e.toJSON()) };
        },
        fromJSON(json) {
          return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
        }
      });
      function history(config = {}) {
        return [
          historyField_,
          historyConfig.of(config),
          view.EditorView.domEventHandlers({
            beforeinput(e, view2) {
              if (e.inputType == "historyUndo")
                return undo(view2);
              if (e.inputType == "historyRedo")
                return redo(view2);
              return false;
            }
          })
        ];
      }
      var historyField = historyField_;
      function cmd(side, selection) {
        return function({ state: state2, dispatch }) {
          let historyState = state2.field(historyField_, false);
          if (!historyState)
            return false;
          let tr = historyState.pop(side, state2, selection);
          if (!tr)
            return false;
          dispatch(tr);
          return true;
        };
      }
      var undo = cmd(0, false);
      var redo = cmd(1, false);
      var undoSelection = cmd(0, true);
      var redoSelection = cmd(1, true);
      function depth(side) {
        return function(state2) {
          let histState = state2.field(historyField_, false);
          if (!histState)
            return 0;
          let branch = side == 0 ? histState.done : histState.undone;
          return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
        };
      }
      var undoDepth = depth(0);
      var redoDepth = depth(1);
      var HistEvent = class {
        constructor(changes, effects, mapped, startSelection, selectionsAfter) {
          this.changes = changes;
          this.effects = effects;
          this.mapped = mapped;
          this.startSelection = startSelection;
          this.selectionsAfter = selectionsAfter;
        }
        setSelAfter(after) {
          return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
        }
        toJSON() {
          var _a, _b, _c;
          return {
            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
            selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
          };
        }
        static fromJSON(json) {
          return new HistEvent(json.changes && state.ChangeSet.fromJSON(json.changes), [], json.mapped && state.ChangeDesc.fromJSON(json.mapped), json.startSelection && state.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(state.EditorSelection.fromJSON));
        }
        static fromTransaction(tr) {
          let effects = none;
          for (let invert of tr.startState.facet(invertedEffects)) {
            let result = invert(tr);
            if (result.length)
              effects = effects.concat(result);
          }
          if (!effects.length && tr.changes.empty)
            return null;
          return new HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, tr.startState.selection, none);
        }
        static selection(selections) {
          return new HistEvent(void 0, none, void 0, void 0, selections);
        }
      };
      function updateBranch(branch, to, maxLen, newEvent) {
        let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
        let newBranch = branch.slice(start, to);
        newBranch.push(newEvent);
        return newBranch;
      }
      function isAdjacent(a, b) {
        let ranges = [], isAdjacent2 = false;
        a.iterChangedRanges((f, t) => ranges.push(f, t));
        b.iterChangedRanges((_f, _t, f, t) => {
          for (let i = 0; i < ranges.length; ) {
            let from = ranges[i++], to = ranges[i++];
            if (t >= from && f <= to)
              isAdjacent2 = true;
          }
        });
        return isAdjacent2;
      }
      function eqSelectionShape(a, b) {
        return a.ranges.length == b.ranges.length && a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
      }
      function conc(a, b) {
        return !a.length ? b : !b.length ? a : a.concat(b);
      }
      var none = [];
      var MaxSelectionsPerEvent = 200;
      function addSelection(branch, selection) {
        if (!branch.length) {
          return [HistEvent.selection([selection])];
        } else {
          let lastEvent = branch[branch.length - 1];
          let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
          if (sels.length && sels[sels.length - 1].eq(selection))
            return branch;
          sels.push(selection);
          return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
        }
      }
      function popSelection(branch) {
        let last = branch[branch.length - 1];
        let newBranch = branch.slice();
        newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
        return newBranch;
      }
      function addMappingToBranch(branch, mapping) {
        if (!branch.length)
          return branch;
        let length = branch.length, selections = none;
        while (length) {
          let event = mapEvent(branch[length - 1], mapping, selections);
          if (event.changes && !event.changes.empty || event.effects.length) {
            let result = branch.slice(0, length);
            result[length - 1] = event;
            return result;
          } else {
            mapping = event.mapped;
            length--;
            selections = event.selectionsAfter;
          }
        }
        return selections.length ? [HistEvent.selection(selections)] : none;
      }
      function mapEvent(event, mapping, extraSelections) {
        let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s) => s.map(mapping)) : none, extraSelections);
        if (!event.changes)
          return HistEvent.selection(selections);
        let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
        let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
        return new HistEvent(mappedChanges, state.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
      }
      var HistoryState = class {
        constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
          this.done = done;
          this.undone = undone;
          this.prevTime = prevTime;
          this.prevUserEvent = prevUserEvent;
        }
        isolate() {
          return this.prevTime ? new HistoryState(this.done, this.undone) : this;
        }
        addChanges(event, time, userEvent, newGroupDelay, maxLen) {
          let done = this.done, lastEvent = done[done.length - 1];
          if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!lastEvent.selectionsAfter.length && time - this.prevTime < newGroupDelay && isAdjacent(lastEvent.changes, event.changes) || userEvent == "input.type.compose")) {
            done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
          } else {
            done = updateBranch(done, done.length, maxLen, event);
          }
          return new HistoryState(done, none, time, userEvent);
        }
        addSelection(selection, time, userEvent, newGroupDelay) {
          let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
          if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
            return this;
          return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
        }
        addMapping(mapping) {
          return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
        }
        pop(side, state2, selection) {
          let branch = side == 0 ? this.done : this.undone;
          if (branch.length == 0)
            return null;
          let event = branch[branch.length - 1];
          if (selection && event.selectionsAfter.length) {
            return state2.update({
              selection: event.selectionsAfter[event.selectionsAfter.length - 1],
              annotations: fromHistory.of({ side, rest: popSelection(branch) }),
              userEvent: side == 0 ? "select.undo" : "select.redo"
            });
          } else if (!event.changes) {
            return null;
          } else {
            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
            if (event.mapped)
              rest = addMappingToBranch(rest, event.mapped);
            return state2.update({
              changes: event.changes,
              selection: event.startSelection,
              effects: event.effects,
              annotations: fromHistory.of({ side, rest }),
              filter: false,
              userEvent: side == 0 ? "undo" : "redo"
            });
          }
        }
      };
      HistoryState.empty = new HistoryState(none, none);
      var historyKeymap = [
        { key: "Mod-z", run: undo, preventDefault: true },
        { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
        { key: "Mod-u", run: undoSelection, preventDefault: true },
        { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
      ];
      exports.history = history;
      exports.historyField = historyField;
      exports.historyKeymap = historyKeymap;
      exports.invertedEffects = invertedEffects;
      exports.isolateHistory = isolateHistory;
      exports.redo = redo;
      exports.redoDepth = redoDepth;
      exports.redoSelection = redoSelection;
      exports.undo = undo;
      exports.undoDepth = undoDepth;
      exports.undoSelection = undoSelection;
    }
  });

  // ../../../node_modules/@lezer/common/dist/index.cjs
  var require_dist6 = __commonJS({
    "../../../node_modules/@lezer/common/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var DefaultBufferLength = 1024;
      var nextPropID = 0;
      var Range = class {
        constructor(from, to) {
          this.from = from;
          this.to = to;
        }
      };
      var NodeProp = class {
        constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
            throw new Error("This node type doesn't define a deserialize function");
          });
        }
        add(match) {
          if (this.perNode)
            throw new RangeError("Can't add per-node props to node types");
          if (typeof match != "function")
            match = NodeType.match(match);
          return (type) => {
            let result = match(type);
            return result === void 0 ? null : [this, result];
          };
        }
      };
      NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
      NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
      NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
      NodeProp.contextHash = new NodeProp({ perNode: true });
      NodeProp.lookAhead = new NodeProp({ perNode: true });
      NodeProp.mounted = new NodeProp({ perNode: true });
      var MountedTree = class {
        constructor(tree, overlay, parser) {
          this.tree = tree;
          this.overlay = overlay;
          this.parser = parser;
        }
      };
      var noProps = Object.create(null);
      var NodeType = class {
        constructor(name, props, id, flags = 0) {
          this.name = name;
          this.props = props;
          this.id = id;
          this.flags = flags;
        }
        static define(spec) {
          let props = spec.props && spec.props.length ? Object.create(null) : noProps;
          let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
          let type = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
            for (let src of spec.props) {
              if (!Array.isArray(src))
                src = src(type);
              if (src) {
                if (src[0].perNode)
                  throw new RangeError("Can't store a per-node prop on a node type");
                props[src[0].id] = src[1];
              }
            }
          return type;
        }
        prop(prop) {
          return this.props[prop.id];
        }
        get isTop() {
          return (this.flags & 1) > 0;
        }
        get isSkipped() {
          return (this.flags & 2) > 0;
        }
        get isError() {
          return (this.flags & 4) > 0;
        }
        get isAnonymous() {
          return (this.flags & 8) > 0;
        }
        is(name) {
          if (typeof name == "string") {
            if (this.name == name)
              return true;
            let group = this.prop(NodeProp.group);
            return group ? group.indexOf(name) > -1 : false;
          }
          return this.id == name;
        }
        static match(map) {
          let direct = Object.create(null);
          for (let prop in map)
            for (let name of prop.split(" "))
              direct[name] = map[prop];
          return (node) => {
            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
              let found = direct[i < 0 ? node.name : groups[i]];
              if (found)
                return found;
            }
          };
        }
      };
      NodeType.none = new NodeType("", Object.create(null), 0, 8);
      var NodeSet = class {
        constructor(types) {
          this.types = types;
          for (let i = 0; i < types.length; i++)
            if (types[i].id != i)
              throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        extend(...props) {
          let newTypes = [];
          for (let type of this.types) {
            let newProps = null;
            for (let source of props) {
              let add = source(type);
              if (add) {
                if (!newProps)
                  newProps = Object.assign({}, type.props);
                newProps[add[0].id] = add[1];
              }
            }
            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
          }
          return new NodeSet(newTypes);
        }
      };
      var CachedNode = new WeakMap();
      var CachedInnerNode = new WeakMap();
      var Tree = class {
        constructor(type, children, positions, length, props) {
          this.type = type;
          this.children = children;
          this.positions = positions;
          this.length = length;
          this.props = null;
          if (props && props.length) {
            this.props = Object.create(null);
            for (let [prop, value] of props)
              this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
        }
        toString() {
          let mounted = this.prop(NodeProp.mounted);
          if (mounted && !mounted.overlay)
            return mounted.tree.toString();
          let children = "";
          for (let ch of this.children) {
            let str = ch.toString();
            if (str) {
              if (children)
                children += ",";
              children += str;
            }
          }
          return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
        }
        cursor(pos, side = 0) {
          let scope = pos != null && CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          if (pos != null) {
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
          }
          return cursor;
        }
        fullCursor() {
          return new TreeCursor(this.topNode, 1);
        }
        get topNode() {
          return new TreeNode(this, 0, 0, null);
        }
        resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
        }
        resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
        }
        iterate(spec) {
          let { enter, leave, from = 0, to = this.length } = spec;
          for (let c = this.cursor(), get = () => c.node; ; ) {
            let mustLeave = false;
            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {
              if (c.firstChild())
                continue;
              if (!c.type.isAnonymous)
                mustLeave = true;
            }
            for (; ; ) {
              if (mustLeave && leave)
                leave(c.type, c.from, c.to, get);
              mustLeave = c.type.isAnonymous;
              if (c.nextSibling())
                break;
              if (!c.parent())
                return;
              mustLeave = true;
            }
          }
        }
        prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
        }
        get propValues() {
          let result = [];
          if (this.props)
            for (let id in this.props)
              result.push([+id, this.props[id]]);
          return result;
        }
        balance(config = {}) {
          return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        static build(data) {
          return buildTree(data);
        }
      };
      Tree.empty = new Tree(NodeType.none, [], [], 0);
      var FlatBufferCursor = class {
        constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
        }
        get id() {
          return this.buffer[this.index - 4];
        }
        get start() {
          return this.buffer[this.index - 3];
        }
        get end() {
          return this.buffer[this.index - 2];
        }
        get size() {
          return this.buffer[this.index - 1];
        }
        get pos() {
          return this.index;
        }
        next() {
          this.index -= 4;
        }
        fork() {
          return new FlatBufferCursor(this.buffer, this.index);
        }
      };
      var TreeBuffer = class {
        constructor(buffer, length, set) {
          this.buffer = buffer;
          this.length = length;
          this.set = set;
        }
        get type() {
          return NodeType.none;
        }
        toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length; ) {
            result.push(this.childString(index));
            index = this.buffer[index + 3];
          }
          return result.join(",");
        }
        childString(index) {
          let id = this.buffer[index], endIndex = this.buffer[index + 3];
          let type = this.set.types[id], result = type.name;
          if (/\W/.test(result) && !type.isError)
            result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
            return result;
          let children = [];
          while (index < endIndex) {
            children.push(this.childString(index));
            index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
        }
        findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
              pick = i;
              if (dir > 0)
                break;
            }
          }
          return pick;
        }
        slice(startI, endI, from, to) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI);
          for (let i = startI, j = 0; i < endI; ) {
            copy[j++] = b[i++];
            copy[j++] = b[i++] - from;
            copy[j++] = b[i++] - from;
            copy[j++] = b[i++] - startI;
          }
          return new TreeBuffer(copy, to - from, this.set);
        }
      };
      function checkSide(side, pos, from, to) {
        switch (side) {
          case -2:
            return from < pos;
          case -1:
            return to >= pos && from < pos;
          case 0:
            return from < pos && to > pos;
          case 1:
            return from <= pos && to > pos;
          case 2:
            return to > pos;
          case 4:
            return true;
        }
      }
      function enterUnfinishedNodesBefore(node, pos) {
        let scan = node.childBefore(pos);
        while (scan) {
          let last = scan.lastChild;
          if (!last || last.to != scan.to)
            break;
          if (last.type.isError && last.from == last.to) {
            node = scan;
            scan = last.prevSibling;
          } else {
            scan = last;
          }
        }
        return node;
      }
      function resolveNode(node, pos, side, overlays) {
        var _a;
        while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
          let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
          if (!parent)
            return node;
          node = parent;
        }
        if (overlays)
          for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, true)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
              node = parent;
          }
        for (; ; ) {
          let inner = node.enter(pos, side, overlays);
          if (!inner)
            return node;
          node = inner;
        }
      }
      var TreeNode = class {
        constructor(node, _from, index, _parent) {
          this.node = node;
          this._from = _from;
          this.index = index;
          this._parent = _parent;
        }
        get type() {
          return this.node.type;
        }
        get name() {
          return this.node.type.name;
        }
        get from() {
          return this._from;
        }
        get to() {
          return this._from + this.node.length;
        }
        nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this; ; ) {
            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {
              let next = children[i], start = positions[i] + parent._from;
              if (!checkSide(side, pos, start, start + next.length))
                continue;
              if (next instanceof TreeBuffer) {
                if (mode & 2)
                  continue;
                let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                if (index > -1)
                  return new BufferNode(new BufferContext(parent, next, i, start), null, index);
              } else if (mode & 1 || (!next.type.isAnonymous || hasChild(next))) {
                let mounted;
                if (!(mode & 1) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                  return new TreeNode(mounted.tree, start, i, parent);
                let inner = new TreeNode(next, start, i, parent);
                return mode & 1 || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
              }
            }
            if (mode & 1 || !parent.type.isAnonymous)
              return null;
            if (parent.index >= 0)
              i = parent.index + dir;
            else
              i = dir < 0 ? -1 : parent._parent.node.children.length;
            parent = parent._parent;
            if (!parent)
              return null;
          }
        }
        get firstChild() {
          return this.nextChild(0, 1, 0, 4);
        }
        get lastChild() {
          return this.nextChild(this.node.children.length - 1, -1, 0, 4);
        }
        childAfter(pos) {
          return this.nextChild(0, 1, pos, 2);
        }
        childBefore(pos) {
          return this.nextChild(this.node.children.length - 1, -1, pos, -2);
        }
        enter(pos, side, overlays = true, buffers = true) {
          let mounted;
          if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {
            let rPos = pos - this.from;
            for (let { from, to } of mounted.overlay) {
              if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
                return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
            }
          }
          return this.nextChild(0, 1, pos, side, buffers ? 0 : 2);
        }
        nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
            val = val._parent;
          return val;
        }
        get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4) : null;
        }
        get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4) : null;
        }
        get cursor() {
          return new TreeCursor(this);
        }
        get tree() {
          return this.node;
        }
        toTree() {
          return this.node;
        }
        resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) {
          return enterUnfinishedNodesBefore(this, pos);
        }
        getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
        }
        toString() {
          return this.node.toString();
        }
      };
      function getChildren(node, type, before, after) {
        let cur = node.cursor, result = [];
        if (!cur.firstChild())
          return result;
        if (before != null) {
          while (!cur.type.is(before))
            if (!cur.nextSibling())
              return result;
        }
        for (; ; ) {
          if (after != null && cur.type.is(after))
            return result;
          if (cur.type.is(type))
            result.push(cur.node);
          if (!cur.nextSibling())
            return after == null ? result : [];
        }
      }
      var BufferContext = class {
        constructor(parent, buffer, index, start) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start;
        }
      };
      var BufferNode = class {
        constructor(context, _parent, index) {
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        get name() {
          return this.type.name;
        }
        get from() {
          return this.context.start + this.context.buffer.buffer[this.index + 1];
        }
        get to() {
          return this.context.start + this.context.buffer.buffer[this.index + 2];
        }
        child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() {
          return this.child(1, 0, 4);
        }
        get lastChild() {
          return this.child(-1, 0, 4);
        }
        childAfter(pos) {
          return this.child(1, pos, 2);
        }
        childBefore(pos) {
          return this.child(-1, pos, -2);
        }
        enter(pos, side, overlays, buffers = true) {
          if (!buffers)
            return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4);
        }
        get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
            return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
        }
        get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
            return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4));
        }
        get cursor() {
          return new TreeCursor(this);
        }
        get tree() {
          return null;
        }
        toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
            children.push(buffer.slice(startI, endI, from, to));
            positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) {
          return enterUnfinishedNodesBefore(this, pos);
        }
        toString() {
          return this.context.buffer.childString(this.index);
        }
        getChild(type, before = null, after = null) {
          let r = getChildren(this, type, before, after);
          return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
          return getChildren(this, type, before, after);
        }
      };
      var TreeCursor = class {
        constructor(node, mode = 0) {
          this.mode = mode;
          this.buffer = null;
          this.stack = [];
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
            this.yieldNode(node);
          } else {
            this._tree = node.context.parent;
            this.buffer = node.context;
            for (let n = node._parent; n; n = n._parent)
              this.stack.unshift(n.index);
            this.bufferNode = node;
            this.yieldBuf(node.index);
          }
        }
        get name() {
          return this.type.name;
        }
        yieldNode(node) {
          if (!node)
            return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
        }
        yieldBuf(index, type) {
          this.index = index;
          let { start, buffer } = this.buffer;
          this.type = type || buffer.set.types[buffer.buffer[index]];
          this.from = start + buffer.buffer[index + 1];
          this.to = start + buffer.buffer[index + 2];
          return true;
        }
        yield(node) {
          if (!node)
            return false;
          if (node instanceof TreeNode) {
            this.buffer = null;
            return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
        }
        toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        enterChild(dir, pos, side) {
          if (!this.buffer)
            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
            return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
        }
        firstChild() {
          return this.enterChild(1, 0, 4);
        }
        lastChild() {
          return this.enterChild(-1, 0, 4);
        }
        childAfter(pos) {
          return this.enterChild(1, pos, 2);
        }
        childBefore(pos) {
          return this.enterChild(-1, pos, -2);
        }
        enter(pos, side, overlays = true, buffers = true) {
          if (!this.buffer)
            return this.yield(this._tree.enter(pos, side, overlays && !(this.mode & 1), buffers));
          return buffers ? this.enterChild(1, pos, side) : false;
        }
        parent() {
          if (!this.buffer)
            return this.yieldNode(this.mode & 1 ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
            return this.yieldBuf(this.stack.pop());
          let parent = this.mode & 1 ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
        }
        sibling(dir) {
          if (!this.buffer)
            return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
          let { buffer } = this.buffer, d = this.stack.length - 1;
          if (dir < 0) {
            let parentStart = d < 0 ? 0 : this.stack[d] + 4;
            if (this.index != parentStart)
              return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4));
          } else {
            let after = buffer.buffer[this.index + 3];
            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
              return this.yieldBuf(after);
          }
          return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
        }
        nextSibling() {
          return this.sibling(1);
        }
        prevSibling() {
          return this.sibling(-1);
        }
        atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
            if (dir > 0) {
              if (this.index < buffer.buffer.buffer.length)
                return false;
            } else {
              for (let i = 0; i < this.index; i++)
                if (buffer.buffer.buffer[i + 3] < this.index)
                  return false;
            }
            ({ index, parent } = buffer);
          } else {
            ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
            if (index > -1)
              for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
                let child = parent.node.children[i];
                if (this.mode & 1 || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
                  return false;
              }
          }
          return true;
        }
        move(dir, enter) {
          if (enter && this.enterChild(dir, 0, 4))
            return true;
          for (; ; ) {
            if (this.sibling(dir))
              return true;
            if (this.atLastNode(dir) || !this.parent())
              return false;
          }
        }
        next(enter = true) {
          return this.move(1, enter);
        }
        prev(enter = true) {
          return this.move(-1, enter);
        }
        moveTo(pos, side = 0) {
          while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
            if (!this.parent())
              break;
          while (this.enterChild(1, pos, side)) {
          }
          return this;
        }
        get node() {
          if (!this.buffer)
            return this._tree;
          let cache = this.bufferNode, result = null, depth = 0;
          if (cache && cache.context == this.buffer) {
            scan:
              for (let index = this.index, d = this.stack.length; d >= 0; ) {
                for (let c = cache; c; c = c._parent)
                  if (c.index == index) {
                    if (index == this.index)
                      return c;
                    result = c;
                    depth = d + 1;
                    break scan;
                  }
                index = this.stack[--d];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
            result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        get tree() {
          return this.buffer ? null : this._tree.node;
        }
      };
      function hasChild(tree) {
        return tree.children.some((ch) => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
      }
      function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children2, positions2, inRepeat) {
          let { id, start, end, size } = cursor;
          let lookAheadAtStart = lookAhead;
          while (size < 0) {
            cursor.next();
            if (size == -1) {
              let node2 = reused[id];
              children2.push(node2);
              positions2.push(start - parentStart);
              return;
            } else if (size == -3) {
              contextHash = id;
              return;
            } else if (size == -4) {
              lookAhead = id;
              return;
            } else {
              throw new RangeError(`Unrecognized record size: ${size}`);
            }
          }
          let type = types[id], node, buffer2;
          let startPos = start - parentStart;
          if (end - start <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
            let data2 = new Uint16Array(buffer2.size - buffer2.skip);
            let endPos = cursor.pos - buffer2.size, index = data2.length;
            while (cursor.pos > endPos)
              index = copyToBuffer(buffer2.start, data2, index);
            node = new TreeBuffer(data2, end - buffer2.start, nodeSet);
            startPos = buffer2.start - parentStart;
          } else {
            let endPos = cursor.pos - size;
            cursor.next();
            let localChildren = [], localPositions = [];
            let localInRepeat = id >= minRepeatType ? id : -1;
            let lastGroup = 0, lastEnd = end;
            while (cursor.pos > endPos) {
              if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                if (cursor.end <= lastEnd - maxBufferLength) {
                  makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                  lastGroup = localChildren.length;
                  lastEnd = cursor.end;
                }
                cursor.next();
              } else {
                takeNode(start, endPos, localChildren, localPositions, localInRepeat);
              }
            }
            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
              makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
            localChildren.reverse();
            localPositions.reverse();
            if (localInRepeat > -1 && lastGroup > 0) {
              let make = makeBalanced(type);
              node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
            } else {
              node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
            }
          }
          children2.push(node);
          positions2.push(startPos);
        }
        function makeBalanced(type) {
          return (children2, positions2, length2) => {
            let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
            if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
              if (!lastI && last.type == type && last.length == length2)
                return last;
              if (lookAheadProp = last.prop(NodeProp.lookAhead))
                lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
            }
            return makeTree(type, children2, positions2, length2, lookAhead2);
          };
        }
        function makeRepeatLeaf(children2, positions2, base, i, from, to, type, lookAhead2) {
          let localChildren = [], localPositions = [];
          while (children2.length > i) {
            localChildren.push(children2.pop());
            localPositions.push(positions2.pop() + base - from);
          }
          children2.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead2 - to));
          positions2.push(from - base);
        }
        function makeTree(type, children2, positions2, length2, lookAhead2 = 0, props) {
          if (contextHash) {
            let pair = [NodeProp.contextHash, contextHash];
            props = props ? [pair].concat(props) : [pair];
          }
          if (lookAhead2 > 25) {
            let pair = [NodeProp.lookAhead, lookAhead2];
            props = props ? [pair].concat(props) : [pair];
          }
          return new Tree(type, children2, positions2, length2, props);
        }
        function findBufferSize(maxSize, inRepeat) {
          let fork = cursor.fork();
          let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
          let result = { size: 0, start: 0, skip: 0 };
          scan:
            for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
              let nodeSize2 = fork.size;
              if (fork.id == inRepeat && nodeSize2 >= 0) {
                result.size = size;
                result.start = start;
                result.skip = skip;
                skip += 4;
                size += 4;
                fork.next();
                continue;
              }
              let startPos = fork.pos - nodeSize2;
              if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
                break;
              let localSkipped = fork.id >= minRepeatType ? 4 : 0;
              let nodeStart = fork.start;
              fork.next();
              while (fork.pos > startPos) {
                if (fork.size < 0) {
                  if (fork.size == -3)
                    localSkipped += 4;
                  else
                    break scan;
                } else if (fork.id >= minRepeatType) {
                  localSkipped += 4;
                }
                fork.next();
              }
              start = nodeStart;
              size += nodeSize2;
              skip += localSkipped;
            }
          if (inRepeat < 0 || size == maxSize) {
            result.size = size;
            result.start = start;
            result.skip = skip;
          }
          return result.size > 4 ? result : void 0;
        }
        function copyToBuffer(bufferStart, buffer2, index) {
          let { id, start, end, size } = cursor;
          cursor.next();
          if (size >= 0 && id < minRepeatType) {
            let startIndex = index;
            if (size > 4) {
              let endPos = cursor.pos - (size - 4);
              while (cursor.pos > endPos)
                index = copyToBuffer(bufferStart, buffer2, index);
            }
            buffer2[--index] = startIndex;
            buffer2[--index] = end - bufferStart;
            buffer2[--index] = start - bufferStart;
            buffer2[--index] = id;
          } else if (size == -3) {
            contextHash = id;
          } else if (size == -4) {
            lookAhead = id;
          }
          return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
          takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
      }
      var nodeSizeCache = new WeakMap();
      function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
          return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
          size = 1;
          for (let child of node.children) {
            if (child.type != balanceType || !(child instanceof Tree)) {
              size = 1;
              break;
            }
            size += nodeSize(balanceType, child);
          }
          nodeSizeCache.set(node, size);
        }
        return size;
      }
      function balanceRange(balanceType, children, positions, from, to, start, length, mkTop, mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
          total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil(total * 1.5 / 8);
        let localChildren = [], localPositions = [];
        function divide(children2, positions2, from2, to2, offset) {
          for (let i = from2; i < to2; ) {
            let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children2[i]);
            i++;
            for (; i < to2; i++) {
              let nextSize = nodeSize(balanceType, children2[i]);
              if (groupSize + nextSize >= maxChild)
                break;
              groupSize += nextSize;
            }
            if (i == groupFrom + 1) {
              if (groupSize > maxChild) {
                let only = children2[groupFrom];
                divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
                continue;
              }
              localChildren.push(children2[groupFrom]);
            } else {
              let length2 = positions2[i - 1] + children2[i - 1].length - groupStart;
              localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i, groupStart, length2, null, mkTree));
            }
            localPositions.push(groupStart + offset - start);
          }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
      }
      var TreeFragment = class {
        constructor(from, to, tree, offset, openStart = false, openEnd = false) {
          this.from = from;
          this.to = to;
          this.tree = tree;
          this.offset = offset;
          this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
        }
        get openStart() {
          return (this.open & 1) > 0;
        }
        get openEnd() {
          return (this.open & 2) > 0;
        }
        static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
            if (f.to > tree.length)
              result.push(f);
          return result;
        }
        static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
            return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0; ; cI++) {
            let nextC = cI < changes.length ? changes[cI] : null;
            let nextPos = nextC ? nextC.fromA : 1e9;
            if (nextPos - pos >= minGap)
              while (nextF && nextF.from < nextPos) {
                let cut = nextF;
                if (pos >= cut.from || nextPos <= cut.to || off) {
                  let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                  cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                }
                if (cut)
                  result.push(cut);
                if (nextF.to > nextPos)
                  break;
                nextF = fI < fragments.length ? fragments[fI++] : null;
              }
            if (!nextC)
              break;
            pos = nextC.toA;
            off = nextC.toA - nextC.toB;
          }
          return result;
        }
      };
      var Parser = class {
        startParse(input, fragments, ranges) {
          if (typeof input == "string")
            input = new StringInput(input);
          ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map((r) => new Range(r.from, r.to)) : [new Range(0, 0)];
          return this.createParse(input, fragments || [], ranges);
        }
        parse(input, fragments, ranges) {
          let parse = this.startParse(input, fragments, ranges);
          for (; ; ) {
            let done = parse.advance();
            if (done)
              return done;
          }
        }
      };
      var StringInput = class {
        constructor(string) {
          this.string = string;
        }
        get length() {
          return this.string.length;
        }
        chunk(from) {
          return this.string.slice(from);
        }
        get lineChunks() {
          return false;
        }
        read(from, to) {
          return this.string.slice(from, to);
        }
      };
      function parseMixed(nest) {
        return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
      }
      var InnerParse = class {
        constructor(parser, parse, overlay, target, ranges) {
          this.parser = parser;
          this.parse = parse;
          this.overlay = overlay;
          this.target = target;
          this.ranges = ranges;
        }
      };
      var ActiveOverlay = class {
        constructor(parser, predicate, mounts, index, start, target, prev) {
          this.parser = parser;
          this.predicate = predicate;
          this.mounts = mounts;
          this.index = index;
          this.start = start;
          this.target = target;
          this.prev = prev;
          this.depth = 0;
          this.ranges = [];
        }
      };
      var stoppedInner = new NodeProp({ perNode: true });
      var MixedParse = class {
        constructor(base, nest, input, fragments, ranges) {
          this.nest = nest;
          this.input = input;
          this.fragments = fragments;
          this.ranges = ranges;
          this.inner = [];
          this.innerDone = 0;
          this.baseTree = null;
          this.stoppedAt = null;
          this.baseParse = base;
        }
        advance() {
          if (this.baseParse) {
            let done2 = this.baseParse.advance();
            if (!done2)
              return null;
            this.baseParse = null;
            this.baseTree = done2;
            this.startInner();
            if (this.stoppedAt != null)
              for (let inner2 of this.inner)
                inner2.parse.stopAt(this.stoppedAt);
          }
          if (this.innerDone == this.inner.length) {
            let result = this.baseTree;
            if (this.stoppedAt != null)
              result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
            return result;
          }
          let inner = this.inner[this.innerDone], done = inner.parse.advance();
          if (done) {
            this.innerDone++;
            let props = Object.assign(Object.create(null), inner.target.props);
            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
            inner.target.props = props;
          }
          return null;
        }
        get parsedPos() {
          if (this.baseParse)
            return 0;
          let pos = this.input.length;
          for (let i = this.innerDone; i < this.inner.length; i++) {
            if (this.inner[i].ranges[0].from < pos)
              pos = Math.min(pos, this.inner[i].parse.parsedPos);
          }
          return pos;
        }
        stopAt(pos) {
          this.stoppedAt = pos;
          if (this.baseParse)
            this.baseParse.stopAt(pos);
          else
            for (let i = this.innerDone; i < this.inner.length; i++)
              this.inner[i].parse.stopAt(pos);
        }
        startInner() {
          let fragmentCursor = new FragmentCursor(this.fragments);
          let overlay = null;
          let covered = null;
          let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), 1);
          scan:
            for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt; ) {
              let enter = true, range;
              if (fragmentCursor.hasNode(cursor)) {
                if (overlay) {
                  let match = overlay.mounts.find((m) => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                  if (match)
                    for (let r of match.mount.overlay) {
                      let from = r.from + match.pos, to = r.to + match.pos;
                      if (from >= cursor.from && to <= cursor.to)
                        overlay.ranges.push({ from, to });
                    }
                }
                enter = false;
              } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                enter = isCovered != 2;
              } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                if (!cursor.tree)
                  materialize(cursor);
                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                if (typeof nest.overlay == "function") {
                  overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                } else {
                  let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
                  if (ranges.length)
                    this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map((r) => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));
                  if (!nest.overlay)
                    enter = false;
                  else if (ranges.length)
                    covered = { ranges, depth: 0, prev: covered };
                }
              } else if (overlay && (range = overlay.predicate(cursor))) {
                if (range === true)
                  range = new Range(cursor.from, cursor.to);
                if (range.from < range.to)
                  overlay.ranges.push(range);
              }
              if (enter && cursor.firstChild()) {
                if (overlay)
                  overlay.depth++;
                if (covered)
                  covered.depth++;
              } else {
                for (; ; ) {
                  if (cursor.nextSibling())
                    break;
                  if (!cursor.parent())
                    break scan;
                  if (overlay && !--overlay.depth) {
                    let ranges = punchRanges(this.ranges, overlay.ranges);
                    if (ranges.length)
                      this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map((r) => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));
                    overlay = overlay.prev;
                  }
                  if (covered && !--covered.depth)
                    covered = covered.prev;
                }
              }
            }
        }
      };
      function checkCover(covered, from, to) {
        for (let range of covered) {
          if (range.from >= to)
            break;
          if (range.to > from)
            return range.from <= from && range.to >= to ? 2 : 1;
        }
        return 0;
      }
      function sliceBuf(buf, startI, endI, nodes, positions, off) {
        if (startI < endI) {
          let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];
          nodes.push(buf.slice(startI, endI, from, to));
          positions.push(from - off);
        }
      }
      function materialize(cursor) {
        let { node } = cursor, depth = 0;
        do {
          cursor.parent();
          depth++;
        } while (!cursor.tree);
        let i = 0, base = cursor.tree, off = 0;
        for (; ; i++) {
          off = base.positions[i] + cursor.from;
          if (off <= node.from && off + base.children[i].length >= node.to)
            break;
        }
        let buf = base.children[i], b = buf.buffer;
        function split(startI, endI, type, innerOffset) {
          let i2 = startI;
          while (b[i2 + 2] + off <= node.from)
            i2 = b[i2 + 3];
          let children = [], positions = [];
          sliceBuf(buf, startI, i2, children, positions, innerOffset);
          let isTarget = b[i2 + 1] + off == node.from && b[i2 + 2] + off == node.to && b[i2] == node.type.id;
          children.push(isTarget ? node.toTree() : split(i2 + 4, b[i2 + 3], buf.set.types[b[i2]], b[i2 + 1]));
          positions.push(b[i2 + 1] - innerOffset);
          sliceBuf(buf, b[i2 + 3], endI, children, positions, innerOffset);
          let last = children.length - 1;
          return new Tree(type, children, positions, positions[last] + children[last].length);
        }
        base.children[i] = split(0, b.length, NodeType.none, 0);
        for (let d = 0; d <= depth; d++)
          cursor.childAfter(node.from);
      }
      var StructureCursor = class {
        constructor(root, offset) {
          this.offset = offset;
          this.done = false;
          this.cursor = root.fullCursor();
        }
        moveTo(pos) {
          let { cursor } = this, p = pos - this.offset;
          while (!this.done && cursor.from < p) {
            if (cursor.to >= pos && cursor.enter(p, 1, false, false))
              ;
            else if (!cursor.next(false))
              this.done = true;
          }
        }
        hasNode(cursor) {
          this.moveTo(cursor.from);
          if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
            for (let tree = this.cursor.tree; ; ) {
              if (tree == cursor.tree)
                return true;
              if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                tree = tree.children[0];
              else
                break;
            }
          }
          return false;
        }
      };
      var FragmentCursor = class {
        constructor(fragments) {
          var _a;
          this.fragments = fragments;
          this.curTo = 0;
          this.fragI = 0;
          if (fragments.length) {
            let first = this.curFrag = fragments[0];
            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
            this.inner = new StructureCursor(first.tree, -first.offset);
          } else {
            this.curFrag = this.inner = null;
          }
        }
        hasNode(node) {
          while (this.curFrag && node.from >= this.curTo)
            this.nextFrag();
          return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
        }
        nextFrag() {
          var _a;
          this.fragI++;
          if (this.fragI == this.fragments.length) {
            this.curFrag = this.inner = null;
          } else {
            let frag = this.curFrag = this.fragments[this.fragI];
            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
            this.inner = new StructureCursor(frag.tree, -frag.offset);
          }
        }
        findMounts(pos, parser) {
          var _a;
          let result = [];
          if (this.inner) {
            this.inner.cursor.moveTo(pos, 1);
            for (let pos2 = this.inner.cursor.node; pos2; pos2 = pos2.parent) {
              let mount = (_a = pos2.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
              if (mount && mount.parser == parser) {
                for (let i = this.fragI; i < this.fragments.length; i++) {
                  let frag = this.fragments[i];
                  if (frag.from >= pos2.to)
                    break;
                  if (frag.tree == this.curFrag.tree)
                    result.push({
                      frag,
                      pos: pos2.from - frag.offset,
                      mount
                    });
                }
              }
            }
          }
          return result;
        }
      };
      function punchRanges(outer, ranges) {
        let copy = null, current = ranges;
        for (let i = 1, j = 0; i < outer.length; i++) {
          let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
          for (; j < current.length; j++) {
            let r = current[j];
            if (r.from >= gapTo)
              break;
            if (r.to <= gapFrom)
              continue;
            if (!copy)
              current = copy = ranges.slice();
            if (r.from < gapFrom) {
              copy[j] = new Range(r.from, gapFrom);
              if (r.to > gapTo)
                copy.splice(j + 1, 0, new Range(gapTo, r.to));
            } else if (r.to > gapTo) {
              copy[j--] = new Range(gapTo, r.to);
            } else {
              copy.splice(j--, 1);
            }
          }
        }
        return current;
      }
      function findCoverChanges(a, b, from, to) {
        let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
        let result = [];
        for (; ; ) {
          let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
          let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
          if (inA != inB) {
            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
            if (start < end)
              result.push(new Range(start, end));
          }
          pos = Math.min(nextA, nextB);
          if (pos == 1e9)
            break;
          if (nextA == pos) {
            if (!inA)
              inA = true;
            else {
              inA = false;
              iA++;
            }
          }
          if (nextB == pos) {
            if (!inB)
              inB = true;
            else {
              inB = false;
              iB++;
            }
          }
        }
        return result;
      }
      function enterFragments(mounts, ranges) {
        let result = [];
        for (let { pos, mount, frag } of mounts) {
          let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
          let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
          if (mount.overlay) {
            let overlay = mount.overlay.map((r) => new Range(r.from + pos, r.to + pos));
            let changes = findCoverChanges(ranges, overlay, from, to);
            for (let i = 0, pos2 = from; ; i++) {
              let last = i == changes.length, end = last ? to : changes[i].from;
              if (end > pos2)
                result.push(new TreeFragment(pos2, end, mount.tree, -startPos, frag.from >= pos2, frag.to <= end));
              if (last)
                break;
              pos2 = changes[i].to;
            }
          } else {
            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));
          }
        }
        return result;
      }
      exports.DefaultBufferLength = DefaultBufferLength;
      exports.MountedTree = MountedTree;
      exports.NodeProp = NodeProp;
      exports.NodeSet = NodeSet;
      exports.NodeType = NodeType;
      exports.Parser = Parser;
      exports.Tree = Tree;
      exports.TreeBuffer = TreeBuffer;
      exports.TreeCursor = TreeCursor;
      exports.TreeFragment = TreeFragment;
      exports.parseMixed = parseMixed;
    }
  });

  // ../../../node_modules/@codemirror/language/dist/index.cjs
  var require_dist7 = __commonJS({
    "../../../node_modules/@codemirror/language/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var common = require_dist6();
      var state = require_dist2();
      var view = require_dist4();
      var text = require_dist();
      var languageDataProp = new common.NodeProp();
      function defineLanguageFacet(baseData) {
        return state.Facet.define({
          combine: baseData ? (values) => values.concat(baseData) : void 0
        });
      }
      var Language = class {
        constructor(data, parser, topNode, extraExtensions = []) {
          this.data = data;
          this.topNode = topNode;
          if (!state.EditorState.prototype.hasOwnProperty("tree"))
            Object.defineProperty(state.EditorState.prototype, "tree", { get() {
              return syntaxTree(this);
            } });
          this.parser = parser;
          this.extension = [
            language.of(this),
            state.EditorState.languageData.of((state2, pos, side) => state2.facet(languageDataFacetAt(state2, pos, side)))
          ].concat(extraExtensions);
        }
        isActiveAt(state2, pos, side = -1) {
          return languageDataFacetAt(state2, pos, side) == this.data;
        }
        findRegions(state2) {
          let lang = state2.facet(language);
          if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
            return [{ from: 0, to: state2.doc.length }];
          if (!lang || !lang.allowsNesting)
            return [];
          let result = [];
          let explore = (tree, from) => {
            if (tree.prop(languageDataProp) == this.data) {
              result.push({ from, to: from + tree.length });
              return;
            }
            let mount = tree.prop(common.NodeProp.mounted);
            if (mount) {
              if (mount.tree.prop(languageDataProp) == this.data) {
                if (mount.overlay)
                  for (let r of mount.overlay)
                    result.push({ from: r.from + from, to: r.to + from });
                else
                  result.push({ from, to: from + tree.length });
                return;
              } else if (mount.overlay) {
                let size = result.length;
                explore(mount.tree, mount.overlay[0].from + from);
                if (result.length > size)
                  return;
              }
            }
            for (let i = 0; i < tree.children.length; i++) {
              let ch = tree.children[i];
              if (ch instanceof common.Tree)
                explore(ch, tree.positions[i] + from);
            }
          };
          explore(syntaxTree(state2), 0);
          return result;
        }
        get allowsNesting() {
          return true;
        }
      };
      Language.setState = state.StateEffect.define();
      function languageDataFacetAt(state2, pos, side) {
        let topLang = state2.facet(language);
        if (!topLang)
          return null;
        let facet = topLang.data;
        if (topLang.allowsNesting) {
          for (let node = syntaxTree(state2).topNode; node; node = node.enter(pos, side, true, false))
            facet = node.type.prop(languageDataProp) || facet;
        }
        return facet;
      }
      var LRLanguage = class extends Language {
        constructor(data, parser) {
          super(data, parser, parser.topNode);
          this.parser = parser;
        }
        static define(spec) {
          let data = defineLanguageFacet(spec.languageData);
          return new LRLanguage(data, spec.parser.configure({
            props: [languageDataProp.add((type) => type.isTop ? data : void 0)]
          }));
        }
        configure(options) {
          return new LRLanguage(this.data, this.parser.configure(options));
        }
        get allowsNesting() {
          return this.parser.wrappers.length > 0;
        }
      };
      function syntaxTree(state2) {
        let field = state2.field(Language.state, false);
        return field ? field.tree : common.Tree.empty;
      }
      function ensureSyntaxTree(state2, upto, timeout = 50) {
        var _a;
        let parse = (_a = state2.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;
        return !parse ? null : parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;
      }
      function syntaxTreeAvailable(state2, upto = state2.doc.length) {
        var _a;
        return ((_a = state2.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;
      }
      function syntaxParserRunning(view2) {
        var _a;
        return ((_a = view2.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;
      }
      var DocInput = class {
        constructor(doc, length = doc.length) {
          this.doc = doc;
          this.length = length;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc.iter();
        }
        syncTo(pos) {
          this.string = this.cursor.next(pos - this.cursorPos).value;
          this.cursorPos = pos + this.string.length;
          return this.cursorPos - this.string.length;
        }
        chunk(pos) {
          this.syncTo(pos);
          return this.string;
        }
        get lineChunks() {
          return true;
        }
        read(from, to) {
          let stringStart = this.cursorPos - this.string.length;
          if (from < stringStart || to >= this.cursorPos)
            return this.doc.sliceString(from, to);
          else
            return this.string.slice(from - stringStart, to - stringStart);
        }
      };
      var currentContext = null;
      var ParseContext = class {
        constructor(parser, state2, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
          this.parser = parser;
          this.state = state2;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          this.tempSkipped = [];
        }
        startParse() {
          return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        work(time, upto) {
          if (upto != null && upto >= this.state.doc.length)
            upto = void 0;
          if (this.tree != common.Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
            this.takeTree();
            return true;
          }
          return this.withContext(() => {
            var _a;
            let endTime = Date.now() + time;
            if (!this.parse)
              this.parse = this.startParse();
            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
              this.parse.stopAt(upto);
            for (; ; ) {
              let done = this.parse.advance();
              if (done) {
                this.fragments = this.withoutTempSkipped(common.TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                this.tree = done;
                this.parse = null;
                if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                  this.parse = this.startParse();
                else
                  return true;
              }
              if (Date.now() > endTime)
                return false;
            }
          });
        }
        takeTree() {
          let pos, tree;
          if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
              this.parse.stopAt(pos);
            this.withContext(() => {
              while (!(tree = this.parse.advance())) {
              }
            });
            this.treeLen = pos;
            this.tree = tree;
            this.fragments = this.withoutTempSkipped(common.TreeFragment.addTree(this.tree, this.fragments, true));
            this.parse = null;
          }
        }
        withContext(f) {
          let prev = currentContext;
          currentContext = this;
          try {
            return f();
          } finally {
            currentContext = prev;
          }
        }
        withoutTempSkipped(fragments) {
          for (let r; r = this.tempSkipped.pop(); )
            fragments = cutFragments(fragments, r.from, r.to);
          return fragments;
        }
        changes(changes, newState) {
          let { fragments, tree, treeLen, viewport, skipped } = this;
          this.takeTree();
          if (!changes.empty) {
            let ranges = [];
            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
            fragments = common.TreeFragment.applyChanges(fragments, ranges);
            tree = common.Tree.empty;
            treeLen = 0;
            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
            if (this.skipped.length) {
              skipped = [];
              for (let r of this.skipped) {
                let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                if (from < to)
                  skipped.push({ from, to });
              }
            }
          }
          return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        updateViewport(viewport) {
          if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
            return false;
          this.viewport = viewport;
          let startLen = this.skipped.length;
          for (let i = 0; i < this.skipped.length; i++) {
            let { from, to } = this.skipped[i];
            if (from < viewport.to && to > viewport.from) {
              this.fragments = cutFragments(this.fragments, from, to);
              this.skipped.splice(i--, 1);
            }
          }
          if (this.skipped.length >= startLen)
            return false;
          this.reset();
          return true;
        }
        reset() {
          if (this.parse) {
            this.takeTree();
            this.parse = null;
          }
        }
        skipUntilInView(from, to) {
          this.skipped.push({ from, to });
        }
        static getSkippingParser(until) {
          return new class extends common.Parser {
            createParse(input, fragments, ranges) {
              let from = ranges[0].from, to = ranges[ranges.length - 1].to;
              let parser = {
                parsedPos: from,
                advance() {
                  let cx = currentContext;
                  if (cx) {
                    for (let r of ranges)
                      cx.tempSkipped.push(r);
                    if (until)
                      cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                  }
                  this.parsedPos = to;
                  return new common.Tree(common.NodeType.none, [], [], to - from);
                },
                stoppedAt: null,
                stopAt() {
                }
              };
              return parser;
            }
          }();
        }
        isDone(upto) {
          upto = Math.min(upto, this.state.doc.length);
          let frags = this.fragments;
          return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        static get() {
          return currentContext;
        }
      };
      function cutFragments(fragments, from, to) {
        return common.TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
      }
      var LanguageState = class {
        constructor(context) {
          this.context = context;
          this.tree = context.tree;
        }
        apply(tr) {
          if (!tr.docChanged)
            return this;
          let newCx = this.context.changes(tr.changes, tr.state);
          let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
          if (!newCx.work(20, upto))
            newCx.takeTree();
          return new LanguageState(newCx);
        }
        static init(state2) {
          let vpTo = Math.min(3e3, state2.doc.length);
          let parseState = new ParseContext(state2.facet(language).parser, state2, [], common.Tree.empty, 0, { from: 0, to: vpTo }, [], null);
          if (!parseState.work(20, vpTo))
            parseState.takeTree();
          return new LanguageState(parseState);
        }
      };
      Language.state = state.StateField.define({
        create: LanguageState.init,
        update(value, tr) {
          for (let e of tr.effects)
            if (e.is(Language.setState))
              return e.value;
          if (tr.startState.facet(language) != tr.state.facet(language))
            return LanguageState.init(tr.state);
          return value.apply(tr);
        }
      });
      var requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500);
        return () => clearTimeout(timeout);
      };
      if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
          let idle = -1, timeout = setTimeout(() => {
            idle = requestIdleCallback(callback, { timeout: 500 - 100 });
          }, 100);
          return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
      var parseWorker = view.ViewPlugin.fromClass(class ParseWorker {
        constructor(view2) {
          this.view = view2;
          this.working = null;
          this.workScheduled = 0;
          this.chunkEnd = -1;
          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
        }
        update(update) {
          let cx = this.view.state.field(Language.state).context;
          if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
            this.scheduleWork();
          if (update.docChanged) {
            if (this.view.hasFocus)
              this.chunkBudget += 50;
            this.scheduleWork();
          }
          this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
          if (this.working)
            return;
          let { state: state2 } = this.view, field = state2.field(Language.state);
          if (field.tree != field.context.tree || !field.context.isDone(state2.doc.length))
            this.working = requestIdle(this.work);
        }
        work(deadline) {
          this.working = null;
          let now = Date.now();
          if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
            this.chunkEnd = now + 3e4;
            this.chunkBudget = 3e3;
          }
          if (this.chunkBudget <= 0)
            return;
          let { state: state2, viewport: { to: vpTo } } = this.view, field = state2.field(Language.state);
          if (field.tree == field.context.tree && field.context.isDone(vpTo + 1e5))
            return;
          let time = Math.min(this.chunkBudget, 100, deadline ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
          let viewportFirst = field.context.treeLen < vpTo && state2.doc.length > vpTo + 1e3;
          let done = field.context.work(time, vpTo + (viewportFirst ? 0 : 1e5));
          this.chunkBudget -= Date.now() - now;
          if (done || this.chunkBudget <= 0) {
            field.context.takeTree();
            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
          }
          if (this.chunkBudget > 0 && !(done && !viewportFirst))
            this.scheduleWork();
          this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
          if (cx.scheduleOn) {
            this.workScheduled++;
            cx.scheduleOn.then(() => this.scheduleWork()).catch((err) => view.logException(this.view.state, err)).then(() => this.workScheduled--);
            cx.scheduleOn = null;
          }
        }
        destroy() {
          if (this.working)
            this.working();
        }
        isWorking() {
          return this.working || this.workScheduled > 0;
        }
      }, {
        eventHandlers: { focus() {
          this.scheduleWork();
        } }
      });
      var language = state.Facet.define({
        combine(languages) {
          return languages.length ? languages[0] : null;
        },
        enables: [Language.state, parseWorker]
      });
      var LanguageSupport = class {
        constructor(language2, support = []) {
          this.language = language2;
          this.support = support;
          this.extension = [language2, support];
        }
      };
      var LanguageDescription = class {
        constructor(name, alias, extensions, filename, loadFunc, support = void 0) {
          this.name = name;
          this.alias = alias;
          this.extensions = extensions;
          this.filename = filename;
          this.loadFunc = loadFunc;
          this.support = support;
          this.loading = null;
        }
        load() {
          return this.loading || (this.loading = this.loadFunc().then((support) => this.support = support, (err) => {
            this.loading = null;
            throw err;
          }));
        }
        static of(spec) {
          let { load, support } = spec;
          if (!load) {
            if (!support)
              throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
            load = () => Promise.resolve(support);
          }
          return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map((s) => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
        }
        static matchFilename(descs, filename) {
          for (let d of descs)
            if (d.filename && d.filename.test(filename))
              return d;
          let ext = /\.([^.]+)$/.exec(filename);
          if (ext) {
            for (let d of descs)
              if (d.extensions.indexOf(ext[1]) > -1)
                return d;
          }
          return null;
        }
        static matchLanguageName(descs, name, fuzzy = true) {
          name = name.toLowerCase();
          for (let d of descs)
            if (d.alias.some((a) => a == name))
              return d;
          if (fuzzy)
            for (let d of descs)
              for (let a of d.alias) {
                let found = name.indexOf(a);
                if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length])))
                  return d;
              }
          return null;
        }
      };
      var indentService = state.Facet.define();
      var indentUnit = state.Facet.define({
        combine: (values) => {
          if (!values.length)
            return "  ";
          if (!/^(?: +|\t+)$/.test(values[0]))
            throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
          return values[0];
        }
      });
      function getIndentUnit(state2) {
        let unit = state2.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state2.tabSize * unit.length : unit.length;
      }
      function indentString(state2, cols) {
        let result = "", ts = state2.tabSize;
        if (state2.facet(indentUnit).charCodeAt(0) == 9)
          while (cols >= ts) {
            result += "	";
            cols -= ts;
          }
        for (let i = 0; i < cols; i++)
          result += " ";
        return result;
      }
      function getIndentation(context, pos) {
        if (context instanceof state.EditorState)
          context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
          let result = service(context, pos);
          if (result != null)
            return result;
        }
        let tree = syntaxTree(context.state);
        return tree ? syntaxIndentation(context, tree, pos) : null;
      }
      var IndentContext = class {
        constructor(state2, options = {}) {
          this.state = state2;
          this.options = options;
          this.unit = getIndentUnit(state2);
        }
        lineAt(pos, bias = 1) {
          let line = this.state.doc.lineAt(pos);
          let { simulateBreak } = this.options;
          if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
            if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
              return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
            else
              return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
          }
          return line;
        }
        textAfterPos(pos, bias = 1) {
          if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
            return "";
          let { text: text2, from } = this.lineAt(pos, bias);
          return text2.slice(pos - from, Math.min(text2.length, pos + 100 - from));
        }
        column(pos, bias = 1) {
          let { text: text2, from } = this.lineAt(pos, bias);
          let result = this.countColumn(text2, pos - from);
          let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
          if (override > -1)
            result += override - this.countColumn(text2, text2.search(/\S|$/));
          return result;
        }
        countColumn(line, pos = line.length) {
          return text.countColumn(line, this.state.tabSize, pos);
        }
        lineIndent(pos, bias = 1) {
          let { text: text2, from } = this.lineAt(pos, bias);
          let override = this.options.overrideIndentation;
          if (override) {
            let overriden = override(from);
            if (overriden > -1)
              return overriden;
          }
          return this.countColumn(text2, text2.search(/\S|$/));
        }
        get simulatedBreak() {
          return this.options.simulateBreak || null;
        }
      };
      var indentNodeProp = new common.NodeProp();
      function syntaxIndentation(cx, ast, pos) {
        return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
      }
      function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
      }
      function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
          return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(common.NodeProp.closedBy))) {
          let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
          return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last.from : void 0);
        }
        return tree.parent == null ? topIndent : null;
      }
      function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
          let strategy = indentStrategy(node);
          if (strategy)
            return strategy(new TreeIndentContext(base, pos, node));
        }
        return null;
      }
      function topIndent() {
        return 0;
      }
      var TreeIndentContext = class extends IndentContext {
        constructor(base, pos, node) {
          super(base.state, base.options);
          this.base = base;
          this.pos = pos;
          this.node = node;
        }
        get textAfter() {
          return this.textAfterPos(this.pos);
        }
        get baseIndent() {
          let line = this.state.doc.lineAt(this.node.from);
          for (; ; ) {
            let atBreak = this.node.resolve(line.from);
            while (atBreak.parent && atBreak.parent.from == atBreak.from)
              atBreak = atBreak.parent;
            if (isParent(atBreak, this.node))
              break;
            line = this.state.doc.lineAt(atBreak.from);
          }
          return this.lineIndent(line.from);
        }
        continue() {
          let parent = this.node.parent;
          return parent ? indentFrom(parent, this.pos, this.base) : 0;
        }
      };
      function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
          if (parent == cur)
            return true;
        return false;
      }
      function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
          return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to; ; ) {
          let next = tree.childAfter(pos);
          if (!next || next == last)
            return null;
          if (!next.type.isSkipped)
            return next.from < lineEnd ? openToken : null;
          pos = next.to;
        }
      }
      function delimitedIndent({ closing, align = true, units = 1 }) {
        return (context) => delimitedStrategy(context, align, units, closing);
      }
      function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
          return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
      }
      var flatIndent = (context) => context.baseIndent;
      function continuedIndent({ except, units = 1 } = {}) {
        return (context) => {
          let matchExcept = except && except.test(context.textAfter);
          return context.baseIndent + (matchExcept ? 0 : units * context.unit);
        };
      }
      var DontIndentBeyond = 200;
      function indentOnInput() {
        return state.EditorState.transactionFilter.of((tr) => {
          if (!tr.docChanged || !tr.isUserEvent("input.type"))
            return tr;
          let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
          if (!rules.length)
            return tr;
          let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
          if (head > line.from + DontIndentBeyond)
            return tr;
          let lineStart = doc.sliceString(line.from, head);
          if (!rules.some((r) => r.test(lineStart)))
            return tr;
          let { state: state2 } = tr, last = -1, changes = [];
          for (let { head: head2 } of state2.selection.ranges) {
            let line2 = state2.doc.lineAt(head2);
            if (line2.from == last)
              continue;
            last = line2.from;
            let indent = getIndentation(state2, line2.from);
            if (indent == null)
              continue;
            let cur = /^\s*/.exec(line2.text)[0];
            let norm = indentString(state2, indent);
            if (cur != norm)
              changes.push({ from: line2.from, to: line2.from + cur.length, insert: norm });
          }
          return changes.length ? [tr, { changes, sequential: true }] : tr;
        });
      }
      var foldService = state.Facet.define();
      var foldNodeProp = new common.NodeProp();
      function foldInside(node) {
        let first = node.firstChild, last = node.lastChild;
        return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
      }
      function syntaxFolding(state2, start, end) {
        let tree = syntaxTree(state2);
        if (tree.length == 0)
          return null;
        let inner = tree.resolveInner(end);
        let found = null;
        for (let cur = inner; cur; cur = cur.parent) {
          if (cur.to <= end || cur.from > end)
            continue;
          if (found && cur.from < start)
            break;
          let prop = cur.type.prop(foldNodeProp);
          if (prop) {
            let value = prop(cur, state2);
            if (value && value.from <= end && value.from >= start && value.to > end)
              found = value;
          }
        }
        return found;
      }
      function foldable(state2, lineStart, lineEnd) {
        for (let service of state2.facet(foldService)) {
          let result = service(state2, lineStart, lineEnd);
          if (result)
            return result;
        }
        return syntaxFolding(state2, lineStart, lineEnd);
      }
      exports.IndentContext = IndentContext;
      exports.LRLanguage = LRLanguage;
      exports.Language = Language;
      exports.LanguageDescription = LanguageDescription;
      exports.LanguageSupport = LanguageSupport;
      exports.ParseContext = ParseContext;
      exports.TreeIndentContext = TreeIndentContext;
      exports.continuedIndent = continuedIndent;
      exports.defineLanguageFacet = defineLanguageFacet;
      exports.delimitedIndent = delimitedIndent;
      exports.ensureSyntaxTree = ensureSyntaxTree;
      exports.flatIndent = flatIndent;
      exports.foldInside = foldInside;
      exports.foldNodeProp = foldNodeProp;
      exports.foldService = foldService;
      exports.foldable = foldable;
      exports.getIndentUnit = getIndentUnit;
      exports.getIndentation = getIndentation;
      exports.indentNodeProp = indentNodeProp;
      exports.indentOnInput = indentOnInput;
      exports.indentService = indentService;
      exports.indentString = indentString;
      exports.indentUnit = indentUnit;
      exports.language = language;
      exports.languageDataProp = languageDataProp;
      exports.syntaxParserRunning = syntaxParserRunning;
      exports.syntaxTree = syntaxTree;
      exports.syntaxTreeAvailable = syntaxTreeAvailable;
    }
  });

  // ../../../node_modules/@codemirror/gutter/dist/index.cjs
  var require_dist8 = __commonJS({
    "../../../node_modules/@codemirror/gutter/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var rangeset = require_dist3();
      var state = require_dist2();
      var GutterMarker = class extends rangeset.RangeValue {
        compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
        }
        eq(other) {
          return false;
        }
        destroy(dom) {
        }
      };
      GutterMarker.prototype.elementClass = "";
      GutterMarker.prototype.toDOM = void 0;
      GutterMarker.prototype.mapMode = state.MapMode.TrackBefore;
      GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
      GutterMarker.prototype.point = true;
      var gutterLineClass = state.Facet.define();
      var defaults = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => rangeset.RangeSet.empty,
        lineMarker: () => null,
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
      };
      var activeGutters = state.Facet.define();
      function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
      }
      var baseTheme = view.EditorView.baseTheme({
        ".cm-gutters": {
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          left: 0,
          zIndex: 200
        },
        "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#999",
          borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
        },
        ".cm-gutter": {
          display: "flex !important",
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
        },
        ".cm-gutterElement": {
          boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
        }
      });
      var unfixGutters = state.Facet.define({
        combine: (values) => values.some((x) => x)
      });
      function gutters(config) {
        let result = [
          gutterView,
          baseTheme
        ];
        if (config && config.fixed === false)
          result.push(unfixGutters.of(true));
        return result;
      }
      var gutterView = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.view = view2;
          this.prevViewport = view2.viewport;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutters";
          this.dom.setAttribute("aria-hidden", "true");
          this.dom.style.minHeight = this.view.contentHeight + "px";
          this.gutters = view2.state.facet(activeGutters).map((conf) => new SingleGutterView(view2, conf));
          for (let gutter2 of this.gutters)
            this.dom.appendChild(gutter2.dom);
          this.fixed = !view2.state.facet(unfixGutters);
          if (this.fixed) {
            this.dom.style.position = "sticky";
          }
          this.syncGutters(false);
          view2.scrollDOM.insertBefore(this.dom, view2.contentDOM);
        }
        update(update) {
          if (this.updateGutters(update)) {
            let vpA = this.prevViewport, vpB = update.view.viewport;
            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
          }
          if (update.geometryChanged)
            this.dom.style.minHeight = this.view.contentHeight + "px";
          if (this.view.state.facet(unfixGutters) != !this.fixed) {
            this.fixed = !this.fixed;
            this.dom.style.position = this.fixed ? "sticky" : "";
          }
          this.prevViewport = update.view.viewport;
        }
        syncGutters(detach) {
          let after = this.dom.nextSibling;
          if (detach)
            this.dom.remove();
          let lineClasses = rangeset.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
          let classSet = [];
          let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
          for (let line of this.view.viewportLineBlocks) {
            let text;
            if (Array.isArray(line.type)) {
              for (let b of line.type)
                if (b.type == view.BlockType.Text) {
                  text = b;
                  break;
                }
            } else {
              text = line.type == view.BlockType.Text ? line : void 0;
            }
            if (!text)
              continue;
            if (classSet.length)
              classSet = [];
            advanceCursor(lineClasses, classSet, line.from);
            for (let cx of contexts)
              cx.line(this.view, text, classSet);
          }
          for (let cx of contexts)
            cx.finish();
          if (detach)
            this.view.scrollDOM.insertBefore(this.dom, after);
        }
        updateGutters(update) {
          let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
          let change = update.docChanged || update.heightChanged || update.viewportChanged || !rangeset.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
          if (prev == cur) {
            for (let gutter2 of this.gutters)
              if (gutter2.update(update))
                change = true;
          } else {
            change = true;
            let gutters2 = [];
            for (let conf of cur) {
              let known = prev.indexOf(conf);
              if (known < 0) {
                gutters2.push(new SingleGutterView(this.view, conf));
              } else {
                this.gutters[known].update(update);
                gutters2.push(this.gutters[known]);
              }
            }
            for (let g of this.gutters) {
              g.dom.remove();
              if (gutters2.indexOf(g) < 0)
                g.destroy();
            }
            for (let g of gutters2)
              this.dom.appendChild(g.dom);
            this.gutters = gutters2;
          }
          return change;
        }
        destroy() {
          for (let view2 of this.gutters)
            view2.destroy();
          this.dom.remove();
        }
      }, {
        provide: view.PluginField.scrollMargins.from((value) => {
          if (value.gutters.length == 0 || !value.fixed)
            return null;
          return value.view.textDirection == view.Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
        })
      });
      function asArray(val) {
        return Array.isArray(val) ? val : [val];
      }
      function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
          if (cursor.from == pos)
            collect.push(cursor.value);
          cursor.next();
        }
      }
      var UpdateContext = class {
        constructor(gutter2, viewport, height) {
          this.gutter = gutter2;
          this.height = height;
          this.localMarkers = [];
          this.i = 0;
          this.cursor = rangeset.RangeSet.iter(gutter2.markers, viewport.from);
        }
        line(view2, line, extraMarkers) {
          if (this.localMarkers.length)
            this.localMarkers = [];
          advanceCursor(this.cursor, this.localMarkers, line.from);
          let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
          let forLine = this.gutter.config.lineMarker(view2, line, localMarkers);
          if (forLine)
            localMarkers.unshift(forLine);
          let gutter2 = this.gutter;
          if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
            return;
          let above = line.top - this.height;
          if (this.i == gutter2.elements.length) {
            let newElt = new GutterElement(view2, line.height, above, localMarkers);
            gutter2.elements.push(newElt);
            gutter2.dom.appendChild(newElt.dom);
          } else {
            gutter2.elements[this.i].update(view2, line.height, above, localMarkers);
          }
          this.height = line.bottom;
          this.i++;
        }
        finish() {
          let gutter2 = this.gutter;
          while (gutter2.elements.length > this.i) {
            let last = gutter2.elements.pop();
            gutter2.dom.removeChild(last.dom);
            last.destroy();
          }
        }
      };
      var SingleGutterView = class {
        constructor(view2, config) {
          this.view = view2;
          this.config = config;
          this.elements = [];
          this.spacer = null;
          this.dom = document.createElement("div");
          this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
          for (let prop in config.domEventHandlers) {
            this.dom.addEventListener(prop, (event) => {
              let line = view2.lineBlockAtHeight(event.clientY - view2.documentTop);
              if (config.domEventHandlers[prop](view2, line, event))
                event.preventDefault();
            });
          }
          this.markers = asArray(config.markers(view2));
          if (config.initialSpacer) {
            this.spacer = new GutterElement(view2, 0, 0, [config.initialSpacer(view2)]);
            this.dom.appendChild(this.spacer.dom);
            this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
          }
        }
        update(update) {
          let prevMarkers = this.markers;
          this.markers = asArray(this.config.markers(update.view));
          if (this.spacer && this.config.updateSpacer) {
            let updated = this.config.updateSpacer(this.spacer.markers[0], update);
            if (updated != this.spacer.markers[0])
              this.spacer.update(update.view, 0, 0, [updated]);
          }
          let vp = update.view.viewport;
          return !rangeset.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
        }
        destroy() {
          for (let elt of this.elements)
            elt.destroy();
        }
      };
      var GutterElement = class {
        constructor(view2, height, above, markers) {
          this.height = -1;
          this.above = 0;
          this.markers = [];
          this.dom = document.createElement("div");
          this.update(view2, height, above, markers);
        }
        update(view2, height, above, markers) {
          if (this.height != height)
            this.dom.style.height = (this.height = height) + "px";
          if (this.above != above)
            this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
          if (!sameMarkers(this.markers, markers))
            this.setMarkers(view2, markers);
        }
        setMarkers(view2, markers) {
          let cls = "cm-gutterElement", domPos = this.dom.firstChild;
          for (let iNew = 0, iOld = 0; ; ) {
            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
            if (marker) {
              let c = marker.elementClass;
              if (c)
                cls += " " + c;
              for (let i = iOld; i < this.markers.length; i++)
                if (this.markers[i].compare(marker)) {
                  skipTo = i;
                  matched = true;
                  break;
                }
            } else {
              skipTo = this.markers.length;
            }
            while (iOld < skipTo) {
              let next = this.markers[iOld++];
              if (next.toDOM) {
                next.destroy(domPos);
                let after = domPos.nextSibling;
                domPos.remove();
                domPos = after;
              }
            }
            if (!marker)
              break;
            if (marker.toDOM) {
              if (matched)
                domPos = domPos.nextSibling;
              else
                this.dom.insertBefore(marker.toDOM(view2), domPos);
            }
            if (matched)
              iOld++;
          }
          this.dom.className = cls;
          this.markers = markers;
        }
        destroy() {
          this.setMarkers(null, []);
        }
      };
      function sameMarkers(a, b) {
        if (a.length != b.length)
          return false;
        for (let i = 0; i < a.length; i++)
          if (!a[i].compare(b[i]))
            return false;
        return true;
      }
      var lineNumberMarkers = state.Facet.define();
      var lineNumberConfig = state.Facet.define({
        combine(values) {
          return state.combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
            domEventHandlers(a, b) {
              let result = Object.assign({}, a);
              for (let event in b) {
                let exists = result[event], add = b[event];
                result[event] = exists ? (view2, line, event2) => exists(view2, line, event2) || add(view2, line, event2) : add;
              }
              return result;
            }
          });
        }
      });
      var NumberMarker = class extends GutterMarker {
        constructor(number) {
          super();
          this.number = number;
        }
        eq(other) {
          return this.number == other.number;
        }
        toDOM() {
          return document.createTextNode(this.number);
        }
      };
      function formatNumber(view2, number) {
        return view2.state.facet(lineNumberConfig).formatNumber(number, view2.state);
      }
      var lineNumberGutter = activeGutters.compute([lineNumberConfig], (state2) => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view2) {
          return view2.state.facet(lineNumberMarkers);
        },
        lineMarker(view2, line, others) {
          if (others.some((m) => m.toDOM))
            return null;
          return new NumberMarker(formatNumber(view2, view2.state.doc.lineAt(line.from).number));
        },
        lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
        initialSpacer(view2) {
          return new NumberMarker(formatNumber(view2, maxLineNumber(view2.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
          let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
          return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state2.facet(lineNumberConfig).domEventHandlers
      }));
      function lineNumbers(config = {}) {
        return [
          lineNumberConfig.of(config),
          gutters(),
          lineNumberGutter
        ];
      }
      function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
          last = last * 10 + 9;
        return last;
      }
      var activeLineGutterMarker = new class extends GutterMarker {
        constructor() {
          super(...arguments);
          this.elementClass = "cm-activeLineGutter";
        }
      }();
      var activeLineGutterHighlighter = gutterLineClass.compute(["selection"], (state2) => {
        let marks = [], last = -1;
        for (let range of state2.selection.ranges)
          if (range.empty) {
            let linePos = state2.doc.lineAt(range.head).from;
            if (linePos > last) {
              last = linePos;
              marks.push(activeLineGutterMarker.range(linePos));
            }
          }
        return rangeset.RangeSet.of(marks);
      });
      function highlightActiveLineGutter() {
        return activeLineGutterHighlighter;
      }
      exports.GutterMarker = GutterMarker;
      exports.gutter = gutter;
      exports.gutterLineClass = gutterLineClass;
      exports.gutters = gutters;
      exports.highlightActiveLineGutter = highlightActiveLineGutter;
      exports.lineNumberMarkers = lineNumberMarkers;
      exports.lineNumbers = lineNumbers;
    }
  });

  // ../../../node_modules/@codemirror/fold/dist/index.cjs
  var require_dist9 = __commonJS({
    "../../../node_modules/@codemirror/fold/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var view = require_dist4();
      var language = require_dist7();
      var gutter = require_dist8();
      var rangeset = require_dist3();
      function mapRange(range, mapping) {
        let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
        return from >= to ? void 0 : { from, to };
      }
      var foldEffect = state.StateEffect.define({ map: mapRange });
      var unfoldEffect = state.StateEffect.define({ map: mapRange });
      function selectedLines(view2) {
        let lines = [];
        for (let { head } of view2.state.selection.ranges) {
          if (lines.some((l) => l.from <= head && l.to >= head))
            continue;
          lines.push(view2.lineBlockAt(head));
        }
        return lines;
      }
      var foldState = state.StateField.define({
        create() {
          return view.Decoration.none;
        },
        update(folded, tr) {
          folded = folded.map(tr.changes);
          for (let e of tr.effects) {
            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
              folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
            else if (e.is(unfoldEffect))
              folded = folded.update({
                filter: (from, to) => e.value.from != from || e.value.to != to,
                filterFrom: e.value.from,
                filterTo: e.value.to
              });
          }
          if (tr.selection) {
            let onSelection = false, { head } = tr.selection.main;
            folded.between(head, head, (a, b) => {
              if (a < head && b > head)
                onSelection = true;
            });
            if (onSelection)
              folded = folded.update({
                filterFrom: head,
                filterTo: head,
                filter: (a, b) => b <= head || a >= head
              });
          }
          return folded;
        },
        provide: (f) => view.EditorView.decorations.from(f)
      });
      function foldedRanges(state2) {
        return state2.field(foldState, false) || rangeset.RangeSet.empty;
      }
      function foldInside(state2, from, to) {
        var _a;
        let found = null;
        (_a = state2.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from2, to2) => {
          if (!found || found.from > from2)
            found = { from: from2, to: to2 };
        });
        return found;
      }
      function foldExists(folded, from, to) {
        let found = false;
        folded.between(from, from, (a, b) => {
          if (a == from && b == to)
            found = true;
        });
        return found;
      }
      function maybeEnable(state$1, other) {
        return state$1.field(foldState, false) ? other : other.concat(state.StateEffect.appendConfig.of(codeFolding()));
      }
      var foldCode = (view2) => {
        for (let line of selectedLines(view2)) {
          let range = language.foldable(view2.state, line.from, line.to);
          if (range) {
            view2.dispatch({ effects: maybeEnable(view2.state, [foldEffect.of(range), announceFold(view2, range)]) });
            return true;
          }
        }
        return false;
      };
      var unfoldCode = (view2) => {
        if (!view2.state.field(foldState, false))
          return false;
        let effects = [];
        for (let line of selectedLines(view2)) {
          let folded = foldInside(view2.state, line.from, line.to);
          if (folded)
            effects.push(unfoldEffect.of(folded), announceFold(view2, folded, false));
        }
        if (effects.length)
          view2.dispatch({ effects });
        return effects.length > 0;
      };
      function announceFold(view$1, range, fold = true) {
        let lineFrom = view$1.state.doc.lineAt(range.from).number, lineTo = view$1.state.doc.lineAt(range.to).number;
        return view.EditorView.announce.of(`${view$1.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view$1.state.phrase("to")} ${lineTo}.`);
      }
      var foldAll = (view2) => {
        let { state: state2 } = view2, effects = [];
        for (let pos = 0; pos < state2.doc.length; ) {
          let line = view2.lineBlockAt(pos), range = language.foldable(state2, line.from, line.to);
          if (range)
            effects.push(foldEffect.of(range));
          pos = (range ? view2.lineBlockAt(range.to) : line).to + 1;
        }
        if (effects.length)
          view2.dispatch({ effects: maybeEnable(view2.state, effects) });
        return !!effects.length;
      };
      var unfoldAll = (view2) => {
        let field = view2.state.field(foldState, false);
        if (!field || !field.size)
          return false;
        let effects = [];
        field.between(0, view2.state.doc.length, (from, to) => {
          effects.push(unfoldEffect.of({ from, to }));
        });
        view2.dispatch({ effects });
        return true;
      };
      var foldKeymap = [
        { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
        { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
        { key: "Ctrl-Alt-[", run: foldAll },
        { key: "Ctrl-Alt-]", run: unfoldAll }
      ];
      var defaultConfig = {
        placeholderDOM: null,
        placeholderText: "\u2026"
      };
      var foldConfig = state.Facet.define({
        combine(values) {
          return state.combineConfig(values, defaultConfig);
        }
      });
      function codeFolding(config) {
        let result = [foldState, baseTheme];
        if (config)
          result.push(foldConfig.of(config));
        return result;
      }
      var foldWidget = view.Decoration.replace({ widget: new class extends view.WidgetType {
        ignoreEvents() {
          return false;
        }
        toDOM(view2) {
          let { state: state2 } = view2, conf = state2.facet(foldConfig);
          let onclick = (event) => {
            let line = view2.lineBlockAt(view2.posAtDOM(event.target));
            let folded = foldInside(view2.state, line.from, line.to);
            if (folded)
              view2.dispatch({ effects: unfoldEffect.of(folded) });
            event.preventDefault();
          };
          if (conf.placeholderDOM)
            return conf.placeholderDOM(view2, onclick);
          let element = document.createElement("span");
          element.textContent = conf.placeholderText;
          element.setAttribute("aria-label", state2.phrase("folded code"));
          element.title = state2.phrase("unfold");
          element.className = "cm-foldPlaceholder";
          element.onclick = onclick;
          return element;
        }
      }() });
      var foldGutterDefaults = {
        openText: "\u2304",
        closedText: "\u203A",
        markerDOM: null
      };
      var FoldMarker = class extends gutter.GutterMarker {
        constructor(config, open) {
          super();
          this.config = config;
          this.open = open;
        }
        eq(other) {
          return this.config == other.config && this.open == other.open;
        }
        toDOM(view2) {
          if (this.config.markerDOM)
            return this.config.markerDOM(this.open);
          let span = document.createElement("span");
          span.textContent = this.open ? this.config.openText : this.config.closedText;
          span.title = view2.state.phrase(this.open ? "Fold line" : "Unfold line");
          return span;
        }
      };
      function foldGutter(config = {}) {
        let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
        let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
        let markers = view.ViewPlugin.fromClass(class {
          constructor(view2) {
            this.from = view2.viewport.from;
            this.markers = this.buildMarkers(view2);
          }
          update(update) {
            if (update.docChanged || update.viewportChanged || update.startState.facet(language.language) != update.state.facet(language.language) || update.startState.field(foldState, false) != update.state.field(foldState, false))
              this.markers = this.buildMarkers(update.view);
          }
          buildMarkers(view2) {
            let builder = new rangeset.RangeSetBuilder();
            for (let line of view2.viewportLineBlocks) {
              let mark = foldInside(view2.state, line.from, line.to) ? canUnfold : language.foldable(view2.state, line.from, line.to) ? canFold : null;
              if (mark)
                builder.add(line.from, line.from, mark);
            }
            return builder.finish();
          }
        });
        return [
          markers,
          gutter.gutter({
            class: "cm-foldGutter",
            markers(view2) {
              var _a;
              return ((_a = view2.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || rangeset.RangeSet.empty;
            },
            initialSpacer() {
              return new FoldMarker(fullConfig, false);
            },
            domEventHandlers: {
              click: (view2, line) => {
                let folded = foldInside(view2.state, line.from, line.to);
                if (folded) {
                  view2.dispatch({ effects: unfoldEffect.of(folded) });
                  return true;
                }
                let range = language.foldable(view2.state, line.from, line.to);
                if (range) {
                  view2.dispatch({ effects: foldEffect.of(range) });
                  return true;
                }
                return false;
              }
            }
          }),
          codeFolding()
        ];
      }
      var baseTheme = view.EditorView.baseTheme({
        ".cm-foldPlaceholder": {
          backgroundColor: "#eee",
          border: "1px solid #ddd",
          color: "#888",
          borderRadius: ".2em",
          margin: "0 1px",
          padding: "0 1px",
          cursor: "pointer"
        },
        ".cm-foldGutter span": {
          padding: "0 1px",
          cursor: "pointer"
        }
      });
      exports.codeFolding = codeFolding;
      exports.foldAll = foldAll;
      exports.foldCode = foldCode;
      exports.foldEffect = foldEffect;
      exports.foldGutter = foldGutter;
      exports.foldKeymap = foldKeymap;
      exports.foldedRanges = foldedRanges;
      exports.unfoldAll = unfoldAll;
      exports.unfoldCode = unfoldCode;
      exports.unfoldEffect = unfoldEffect;
    }
  });

  // ../../../node_modules/@codemirror/matchbrackets/dist/index.cjs
  var require_dist10 = __commonJS({
    "../../../node_modules/@codemirror/matchbrackets/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var language = require_dist7();
      var view = require_dist4();
      var common = require_dist6();
      var baseTheme = view.EditorView.baseTheme({
        ".cm-matchingBracket": { backgroundColor: "#328c8252" },
        ".cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
      });
      var DefaultScanDist = 1e4;
      var DefaultBrackets = "()[]{}";
      var bracketMatchingConfig = state.Facet.define({
        combine(configs) {
          return state.combineConfig(configs, {
            afterCursor: true,
            brackets: DefaultBrackets,
            maxScanDistance: DefaultScanDist
          });
        }
      });
      var matchingMark = view.Decoration.mark({ class: "cm-matchingBracket" });
      var nonmatchingMark = view.Decoration.mark({ class: "cm-nonmatchingBracket" });
      var bracketMatchingState = state.StateField.define({
        create() {
          return view.Decoration.none;
        },
        update(deco, tr) {
          if (!tr.docChanged && !tr.selection)
            return deco;
          let decorations = [];
          let config = tr.state.facet(bracketMatchingConfig);
          for (let range of tr.state.selection.ranges) {
            if (!range.empty)
              continue;
            let match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
            if (!match)
              continue;
            let mark = match.matched ? matchingMark : nonmatchingMark;
            decorations.push(mark.range(match.start.from, match.start.to));
            if (match.end)
              decorations.push(mark.range(match.end.from, match.end.to));
          }
          return view.Decoration.set(decorations, true);
        },
        provide: (f) => view.EditorView.decorations.from(f)
      });
      var bracketMatchingUnique = [
        bracketMatchingState,
        baseTheme
      ];
      function bracketMatching(config = {}) {
        return [bracketMatchingConfig.of(config), bracketMatchingUnique];
      }
      function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? common.NodeProp.openedBy : common.NodeProp.closedBy);
        if (byProp)
          return byProp;
        if (node.name.length == 1) {
          let index = brackets.indexOf(node.name);
          if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
            return [brackets[index + dir]];
        }
        return null;
      }
      function matchBrackets(state2, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = language.syntaxTree(state2), node = tree.resolveInner(pos, dir);
        for (let cur = node; cur; cur = cur.parent) {
          let matches = matchingNodes(cur.type, dir, brackets);
          if (matches && cur.from < cur.to)
            return matchMarkedBrackets(state2, pos, dir, cur, matches, brackets);
        }
        return matchPlainBrackets(state2, pos, dir, tree, node.type, maxScanDistance, brackets);
      }
      function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
        let parent = token.parent, firstToken = { from: token.from, to: token.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
          do {
            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
              if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
              } else if (matchingNodes(cursor.type, dir, brackets)) {
                depth++;
              } else if (matchingNodes(cursor.type, -dir, brackets)) {
                depth--;
                if (depth == 0)
                  return {
                    start: firstToken,
                    end: cursor.from == cursor.to ? void 0 : { from: cursor.from, to: cursor.to },
                    matched: false
                  };
              }
            }
          } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
      }
      function matchPlainBrackets(state2, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state2.sliceDoc(pos - 1, pos) : state2.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || bracket % 2 == 0 != dir > 0)
          return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state2.doc.iterRange(pos, dir > 0 ? state2.doc.length : 0), depth = 0;
        for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
          let text = iter.value;
          if (dir < 0)
            distance += text.length;
          let basePos = pos + distance * dir;
          for (let pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos2 != end; pos2 += dir) {
            let found = brackets.indexOf(text[pos2]);
            if (found < 0 || tree.resolve(basePos + pos2, 1).type != tokenType)
              continue;
            if (found % 2 == 0 == dir > 0) {
              depth++;
            } else if (depth == 1) {
              return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket >> 1 };
            } else {
              depth--;
            }
          }
          if (dir > 0)
            distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
      }
      exports.bracketMatching = bracketMatching;
      exports.matchBrackets = matchBrackets;
    }
  });

  // ../../../node_modules/@codemirror/commands/dist/index.cjs
  var require_dist11 = __commonJS({
    "../../../node_modules/@codemirror/commands/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var text = require_dist();
      var view = require_dist4();
      var matchbrackets = require_dist10();
      var language = require_dist7();
      var common = require_dist6();
      function updateSel(sel, by) {
        return state.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
      }
      function setSel(state2, selection) {
        return state2.update({ selection, scrollIntoView: true, userEvent: "select" });
      }
      function moveSel({ state: state2, dispatch }, how) {
        let selection = updateSel(state2.selection, how);
        if (selection.eq(state2.selection))
          return false;
        dispatch(setSel(state2, selection));
        return true;
      }
      function rangeEnd(range, forward) {
        return state.EditorSelection.cursor(forward ? range.to : range.from);
      }
      function cursorByChar(view2, forward) {
        return moveSel(view2, (range) => range.empty ? view2.moveByChar(range, forward) : rangeEnd(range, forward));
      }
      var cursorCharLeft = (view$1) => cursorByChar(view$1, view$1.textDirection != view.Direction.LTR);
      var cursorCharRight = (view$1) => cursorByChar(view$1, view$1.textDirection == view.Direction.LTR);
      var cursorCharForward = (view2) => cursorByChar(view2, true);
      var cursorCharBackward = (view2) => cursorByChar(view2, false);
      function cursorByGroup(view2, forward) {
        return moveSel(view2, (range) => range.empty ? view2.moveByGroup(range, forward) : rangeEnd(range, forward));
      }
      var cursorGroupLeft = (view$1) => cursorByGroup(view$1, view$1.textDirection != view.Direction.LTR);
      var cursorGroupRight = (view$1) => cursorByGroup(view$1, view$1.textDirection == view.Direction.LTR);
      var cursorGroupForward = (view2) => cursorByGroup(view2, true);
      var cursorGroupBackward = (view2) => cursorByGroup(view2, false);
      function moveBySubword(view2, range, forward) {
        let categorize = view2.state.charCategorizer(range.from);
        return view2.moveByChar(range, forward, (start) => {
          let cat = state.CharCategory.Space, pos = range.from;
          let done = false, sawUpper = false, sawLower = false;
          let step = (next) => {
            if (done)
              return false;
            pos += forward ? next.length : -next.length;
            let nextCat = categorize(next), ahead;
            if (cat == state.CharCategory.Space)
              cat = nextCat;
            if (cat != nextCat)
              return false;
            if (cat == state.CharCategory.Word) {
              if (next.toLowerCase() == next) {
                if (!forward && sawUpper)
                  return false;
                sawLower = true;
              } else if (sawLower) {
                if (forward)
                  return false;
                done = true;
              } else {
                if (sawUpper && forward && categorize(ahead = view2.state.sliceDoc(pos, pos + 1)) == state.CharCategory.Word && ahead.toLowerCase() == ahead)
                  return false;
                sawUpper = true;
              }
            }
            return true;
          };
          step(start);
          return step;
        });
      }
      function cursorBySubword(view2, forward) {
        return moveSel(view2, (range) => range.empty ? moveBySubword(view2, range, forward) : rangeEnd(range, forward));
      }
      var cursorSubwordForward = (view2) => cursorBySubword(view2, true);
      var cursorSubwordBackward = (view2) => cursorBySubword(view2, false);
      function interestingNode(state2, node, bracketProp) {
        if (node.type.prop(bracketProp))
          return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state2.sliceDoc(node.from, node.to))) || node.firstChild;
      }
      function moveBySyntax(state$1, start, forward) {
        let pos = language.syntaxTree(state$1).resolveInner(start.head);
        let bracketProp = forward ? common.NodeProp.closedBy : common.NodeProp.openedBy;
        for (let at = start.head; ; ) {
          let next = forward ? pos.childAfter(at) : pos.childBefore(at);
          if (!next)
            break;
          if (interestingNode(state$1, next, bracketProp))
            pos = next;
          else
            at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchbrackets.matchBrackets(state$1, pos.from, 1) : matchbrackets.matchBrackets(state$1, pos.to, -1)) && match.matched)
          newPos = forward ? match.end.to : match.end.from;
        else
          newPos = forward ? pos.to : pos.from;
        return state.EditorSelection.cursor(newPos, forward ? -1 : 1);
      }
      var cursorSyntaxLeft = (view$1) => moveSel(view$1, (range) => moveBySyntax(view$1.state, range, view$1.textDirection != view.Direction.LTR));
      var cursorSyntaxRight = (view$1) => moveSel(view$1, (range) => moveBySyntax(view$1.state, range, view$1.textDirection == view.Direction.LTR));
      function cursorByLine(view2, forward) {
        return moveSel(view2, (range) => {
          if (!range.empty)
            return rangeEnd(range, forward);
          let moved = view2.moveVertically(range, forward);
          return moved.head != range.head ? moved : view2.moveToLineBoundary(range, forward);
        });
      }
      var cursorLineUp = (view2) => cursorByLine(view2, false);
      var cursorLineDown = (view2) => cursorByLine(view2, true);
      function cursorByPage(view2, forward) {
        return moveSel(view2, (range) => range.empty ? view2.moveVertically(range, forward, view2.dom.clientHeight) : rangeEnd(range, forward));
      }
      var cursorPageUp = (view2) => cursorByPage(view2, false);
      var cursorPageDown = (view2) => cursorByPage(view2, true);
      function moveByLineBoundary(view2, start, forward) {
        let line = view2.lineBlockAt(start.head), moved = view2.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
          moved = view2.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
          let space = /^\s*/.exec(view2.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
          if (space && start.head != line.from + space)
            moved = state.EditorSelection.cursor(line.from + space);
        }
        return moved;
      }
      var cursorLineBoundaryForward = (view2) => moveSel(view2, (range) => moveByLineBoundary(view2, range, true));
      var cursorLineBoundaryBackward = (view2) => moveSel(view2, (range) => moveByLineBoundary(view2, range, false));
      var cursorLineStart = (view2) => moveSel(view2, (range) => state.EditorSelection.cursor(view2.lineBlockAt(range.head).from, 1));
      var cursorLineEnd = (view2) => moveSel(view2, (range) => state.EditorSelection.cursor(view2.lineBlockAt(range.head).to, -1));
      function toMatchingBracket(state$1, dispatch, extend) {
        let found = false, selection = updateSel(state$1.selection, (range) => {
          let matching = matchbrackets.matchBrackets(state$1, range.head, -1) || matchbrackets.matchBrackets(state$1, range.head, 1) || range.head > 0 && matchbrackets.matchBrackets(state$1, range.head - 1, 1) || range.head < state$1.doc.length && matchbrackets.matchBrackets(state$1, range.head + 1, -1);
          if (!matching || !matching.end)
            return range;
          found = true;
          let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
          return extend ? state.EditorSelection.range(range.anchor, head) : state.EditorSelection.cursor(head);
        });
        if (!found)
          return false;
        dispatch(setSel(state$1, selection));
        return true;
      }
      var cursorMatchingBracket = ({ state: state2, dispatch }) => toMatchingBracket(state2, dispatch, false);
      var selectMatchingBracket = ({ state: state2, dispatch }) => toMatchingBracket(state2, dispatch, true);
      function extendSel(view2, how) {
        let selection = updateSel(view2.state.selection, (range) => {
          let head = how(range);
          return state.EditorSelection.range(range.anchor, head.head, head.goalColumn);
        });
        if (selection.eq(view2.state.selection))
          return false;
        view2.dispatch(setSel(view2.state, selection));
        return true;
      }
      function selectByChar(view2, forward) {
        return extendSel(view2, (range) => view2.moveByChar(range, forward));
      }
      var selectCharLeft = (view$1) => selectByChar(view$1, view$1.textDirection != view.Direction.LTR);
      var selectCharRight = (view$1) => selectByChar(view$1, view$1.textDirection == view.Direction.LTR);
      var selectCharForward = (view2) => selectByChar(view2, true);
      var selectCharBackward = (view2) => selectByChar(view2, false);
      function selectByGroup(view2, forward) {
        return extendSel(view2, (range) => view2.moveByGroup(range, forward));
      }
      var selectGroupLeft = (view$1) => selectByGroup(view$1, view$1.textDirection != view.Direction.LTR);
      var selectGroupRight = (view$1) => selectByGroup(view$1, view$1.textDirection == view.Direction.LTR);
      var selectGroupForward = (view2) => selectByGroup(view2, true);
      var selectGroupBackward = (view2) => selectByGroup(view2, false);
      function selectBySubword(view2, forward) {
        return extendSel(view2, (range) => moveBySubword(view2, range, forward));
      }
      var selectSubwordForward = (view2) => selectBySubword(view2, true);
      var selectSubwordBackward = (view2) => selectBySubword(view2, false);
      var selectSyntaxLeft = (view$1) => extendSel(view$1, (range) => moveBySyntax(view$1.state, range, view$1.textDirection != view.Direction.LTR));
      var selectSyntaxRight = (view$1) => extendSel(view$1, (range) => moveBySyntax(view$1.state, range, view$1.textDirection == view.Direction.LTR));
      function selectByLine(view2, forward) {
        return extendSel(view2, (range) => view2.moveVertically(range, forward));
      }
      var selectLineUp = (view2) => selectByLine(view2, false);
      var selectLineDown = (view2) => selectByLine(view2, true);
      function selectByPage(view2, forward) {
        return extendSel(view2, (range) => view2.moveVertically(range, forward, view2.dom.clientHeight));
      }
      var selectPageUp = (view2) => selectByPage(view2, false);
      var selectPageDown = (view2) => selectByPage(view2, true);
      var selectLineBoundaryForward = (view2) => extendSel(view2, (range) => moveByLineBoundary(view2, range, true));
      var selectLineBoundaryBackward = (view2) => extendSel(view2, (range) => moveByLineBoundary(view2, range, false));
      var selectLineStart = (view2) => extendSel(view2, (range) => state.EditorSelection.cursor(view2.lineBlockAt(range.head).from));
      var selectLineEnd = (view2) => extendSel(view2, (range) => state.EditorSelection.cursor(view2.lineBlockAt(range.head).to));
      var cursorDocStart = ({ state: state2, dispatch }) => {
        dispatch(setSel(state2, { anchor: 0 }));
        return true;
      };
      var cursorDocEnd = ({ state: state2, dispatch }) => {
        dispatch(setSel(state2, { anchor: state2.doc.length }));
        return true;
      };
      var selectDocStart = ({ state: state2, dispatch }) => {
        dispatch(setSel(state2, { anchor: state2.selection.main.anchor, head: 0 }));
        return true;
      };
      var selectDocEnd = ({ state: state2, dispatch }) => {
        dispatch(setSel(state2, { anchor: state2.selection.main.anchor, head: state2.doc.length }));
        return true;
      };
      var selectAll = ({ state: state2, dispatch }) => {
        dispatch(state2.update({ selection: { anchor: 0, head: state2.doc.length }, userEvent: "select" }));
        return true;
      };
      var selectLine = ({ state: state$1, dispatch }) => {
        let ranges = selectedLineBlocks(state$1).map(({ from, to }) => state.EditorSelection.range(from, Math.min(to + 1, state$1.doc.length)));
        dispatch(state$1.update({ selection: state.EditorSelection.create(ranges), userEvent: "select" }));
        return true;
      };
      var selectParentSyntax = ({ state: state$1, dispatch }) => {
        let selection = updateSel(state$1.selection, (range) => {
          var _a;
          let context = language.syntaxTree(state$1).resolveInner(range.head, 1);
          while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
            context = context.parent;
          return state.EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state$1, selection));
        return true;
      };
      var simplifySelection = ({ state: state$1, dispatch }) => {
        let cur = state$1.selection, selection = null;
        if (cur.ranges.length > 1)
          selection = state.EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
          selection = state.EditorSelection.create([state.EditorSelection.cursor(cur.main.head)]);
        if (!selection)
          return false;
        dispatch(setSel(state$1, selection));
        return true;
      };
      function deleteBy({ state: state$1, dispatch }, by) {
        if (state$1.readOnly)
          return false;
        let event = "delete.selection";
        let changes = state$1.changeByRange((range) => {
          let { from, to } = range;
          if (from == to) {
            let towards = by(from);
            if (towards < from)
              event = "delete.backward";
            else if (towards > from)
              event = "delete.forward";
            from = Math.min(from, towards);
            to = Math.max(to, towards);
          }
          return from == to ? { range } : { changes: { from, to }, range: state.EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
          return false;
        dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: event }));
        return true;
      }
      function skipAtomic(target, pos, forward) {
        if (target instanceof view.EditorView)
          for (let ranges of target.pluginField(view.PluginField.atomicRanges))
            ranges.between(pos, pos, (from, to) => {
              if (from < pos && to > pos)
                pos = forward ? to : from;
            });
        return pos;
      }
      var deleteByChar = (target, forward) => deleteBy(target, (pos) => {
        let { state: state2 } = target, line = state2.doc.lineAt(pos), before, targetPos;
        if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
          if (before[before.length - 1] == "	")
            return pos - 1;
          let col = text.countColumn(before, state2.tabSize), drop = col % language.getIndentUnit(state2) || language.getIndentUnit(state2);
          for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
            pos--;
          targetPos = pos;
        } else {
          targetPos = text.findClusterBreak(line.text, pos - line.from, forward) + line.from;
          if (targetPos == pos && line.number != (forward ? state2.doc.lines : 1))
            targetPos += forward ? 1 : -1;
        }
        return skipAtomic(target, targetPos, forward);
      });
      var deleteCharBackward = (view2) => deleteByChar(view2, false);
      var deleteCharForward = (view2) => deleteByChar(view2, true);
      var deleteByGroup = (target, forward) => deleteBy(target, (start) => {
        let pos = start, { state: state2 } = target, line = state2.doc.lineAt(pos);
        let categorize = state2.charCategorizer(pos);
        for (let cat = null; ; ) {
          if (pos == (forward ? line.to : line.from)) {
            if (pos == start && line.number != (forward ? state2.doc.lines : 1))
              pos += forward ? 1 : -1;
            break;
          }
          let next = text.findClusterBreak(line.text, pos - line.from, forward) + line.from;
          let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
          let nextCat = categorize(nextChar);
          if (cat != null && nextCat != cat)
            break;
          if (nextChar != " " || pos != start)
            cat = nextCat;
          pos = next;
        }
        return skipAtomic(target, pos, forward);
      });
      var deleteGroupBackward = (target) => deleteByGroup(target, false);
      var deleteGroupForward = (target) => deleteByGroup(target, true);
      var deleteToLineEnd = (view2) => deleteBy(view2, (pos) => {
        let lineEnd = view2.lineBlockAt(pos).to;
        return skipAtomic(view2, pos < lineEnd ? lineEnd : Math.min(view2.state.doc.length, pos + 1), true);
      });
      var deleteToLineStart = (view2) => deleteBy(view2, (pos) => {
        let lineStart = view2.lineBlockAt(pos).from;
        return skipAtomic(view2, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
      });
      var deleteTrailingWhitespace = ({ state: state2, dispatch }) => {
        if (state2.readOnly)
          return false;
        let changes = [];
        for (let pos = 0, prev = "", iter = state2.doc.iter(); ; ) {
          iter.next();
          if (iter.lineBreak || iter.done) {
            let trailing = prev.search(/\s+$/);
            if (trailing > -1)
              changes.push({ from: pos - (prev.length - trailing), to: pos });
            if (iter.done)
              break;
            prev = "";
          } else {
            prev = iter.value;
          }
          pos += iter.value.length;
        }
        if (!changes.length)
          return false;
        dispatch(state2.update({ changes, userEvent: "delete" }));
        return true;
      };
      var splitLine = ({ state: state$1, dispatch }) => {
        if (state$1.readOnly)
          return false;
        let changes = state$1.changeByRange((range) => {
          return {
            changes: { from: range.from, to: range.to, insert: text.Text.of(["", ""]) },
            range: state.EditorSelection.cursor(range.from)
          };
        });
        dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
      };
      var transposeChars = ({ state: state$1, dispatch }) => {
        if (state$1.readOnly)
          return false;
        let changes = state$1.changeByRange((range) => {
          if (!range.empty || range.from == 0 || range.from == state$1.doc.length)
            return { range };
          let pos = range.from, line = state$1.doc.lineAt(pos);
          let from = pos == line.from ? pos - 1 : text.findClusterBreak(line.text, pos - line.from, false) + line.from;
          let to = pos == line.to ? pos + 1 : text.findClusterBreak(line.text, pos - line.from, true) + line.from;
          return {
            changes: { from, to, insert: state$1.doc.slice(pos, to).append(state$1.doc.slice(from, pos)) },
            range: state.EditorSelection.cursor(to)
          };
        });
        if (changes.changes.empty)
          return false;
        dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
      };
      function selectedLineBlocks(state2) {
        let blocks = [], upto = -1;
        for (let range of state2.selection.ranges) {
          let startLine = state2.doc.lineAt(range.from), endLine = state2.doc.lineAt(range.to);
          if (!range.empty && range.to == endLine.from)
            endLine = state2.doc.lineAt(range.to - 1);
          if (upto >= startLine.number) {
            let prev = blocks[blocks.length - 1];
            prev.to = endLine.to;
            prev.ranges.push(range);
          } else {
            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
          }
          upto = endLine.number + 1;
        }
        return blocks;
      }
      function moveLine(state$1, dispatch, forward) {
        if (state$1.readOnly)
          return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state$1)) {
          if (forward ? block.to == state$1.doc.length : block.from == 0)
            continue;
          let nextLine = state$1.doc.lineAt(forward ? block.to + 1 : block.from - 1);
          let size = nextLine.length + 1;
          if (forward) {
            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state$1.lineBreak });
            for (let r of block.ranges)
              ranges.push(state.EditorSelection.range(Math.min(state$1.doc.length, r.anchor + size), Math.min(state$1.doc.length, r.head + size)));
          } else {
            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state$1.lineBreak + nextLine.text });
            for (let r of block.ranges)
              ranges.push(state.EditorSelection.range(r.anchor - size, r.head - size));
          }
        }
        if (!changes.length)
          return false;
        dispatch(state$1.update({
          changes,
          scrollIntoView: true,
          selection: state.EditorSelection.create(ranges, state$1.selection.mainIndex),
          userEvent: "move.line"
        }));
        return true;
      }
      var moveLineUp = ({ state: state2, dispatch }) => moveLine(state2, dispatch, false);
      var moveLineDown = ({ state: state2, dispatch }) => moveLine(state2, dispatch, true);
      function copyLine(state2, dispatch, forward) {
        if (state2.readOnly)
          return false;
        let changes = [];
        for (let block of selectedLineBlocks(state2)) {
          if (forward)
            changes.push({ from: block.from, insert: state2.doc.slice(block.from, block.to) + state2.lineBreak });
          else
            changes.push({ from: block.to, insert: state2.lineBreak + state2.doc.slice(block.from, block.to) });
        }
        dispatch(state2.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
      }
      var copyLineUp = ({ state: state2, dispatch }) => copyLine(state2, dispatch, false);
      var copyLineDown = ({ state: state2, dispatch }) => copyLine(state2, dispatch, true);
      var deleteLine = (view2) => {
        if (view2.state.readOnly)
          return false;
        let { state: state2 } = view2, changes = state2.changes(selectedLineBlocks(state2).map(({ from, to }) => {
          if (from > 0)
            from--;
          else if (to < state2.doc.length)
            to++;
          return { from, to };
        }));
        let selection = updateSel(state2.selection, (range) => view2.moveVertically(range, true)).map(changes);
        view2.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
      };
      var insertNewline = ({ state: state2, dispatch }) => {
        dispatch(state2.update(state2.replaceSelection(state2.lineBreak), { scrollIntoView: true, userEvent: "input" }));
        return true;
      };
      function isBetweenBrackets(state2, pos) {
        if (/\(\)|\[\]|\{\}/.test(state2.sliceDoc(pos - 1, pos + 1)))
          return { from: pos, to: pos };
        let context = language.syntaxTree(state2).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(common.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state2.doc.lineAt(before.to).from == state2.doc.lineAt(after.from).from)
          return { from: before.to, to: after.from };
        return null;
      }
      var insertNewlineAndIndent = newlineAndIndent(false);
      var insertBlankLine = newlineAndIndent(true);
      function newlineAndIndent(atEof) {
        return ({ state: state$1, dispatch }) => {
          if (state$1.readOnly)
            return false;
          let changes = state$1.changeByRange((range) => {
            let { from, to } = range, line = state$1.doc.lineAt(from);
            let explode = !atEof && from == to && isBetweenBrackets(state$1, from);
            if (atEof)
              from = to = (to <= line.to ? line : state$1.doc.lineAt(to)).to;
            let cx = new language.IndentContext(state$1, { simulateBreak: from, simulateDoubleBreak: !!explode });
            let indent = language.getIndentation(cx, from);
            if (indent == null)
              indent = /^\s*/.exec(state$1.doc.lineAt(from).text)[0].length;
            while (to < line.to && /\s/.test(line.text[to - line.from]))
              to++;
            if (explode)
              ({ from, to } = explode);
            else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
              from = line.from;
            let insert = ["", language.indentString(state$1, indent)];
            if (explode)
              insert.push(language.indentString(state$1, cx.lineIndent(line.from, -1)));
            return {
              changes: { from, to, insert: text.Text.of(insert) },
              range: state.EditorSelection.cursor(from + 1 + insert[1].length)
            };
          });
          dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
          return true;
        };
      }
      function changeBySelectedLine(state$1, f) {
        let atLine = -1;
        return state$1.changeByRange((range) => {
          let changes = [];
          for (let pos = range.from; pos <= range.to; ) {
            let line = state$1.doc.lineAt(pos);
            if (line.number > atLine && (range.empty || range.to > line.from)) {
              f(line, changes, range);
              atLine = line.number;
            }
            pos = line.to + 1;
          }
          let changeSet = state$1.changes(changes);
          return {
            changes,
            range: state.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
          };
        });
      }
      var indentSelection = ({ state: state2, dispatch }) => {
        if (state2.readOnly)
          return false;
        let updated = Object.create(null);
        let context = new language.IndentContext(state2, { overrideIndentation: (start) => {
          let found = updated[start];
          return found == null ? -1 : found;
        } });
        let changes = changeBySelectedLine(state2, (line, changes2, range) => {
          let indent = language.getIndentation(context, line.from);
          if (indent == null)
            return;
          if (!/\S/.test(line.text))
            indent = 0;
          let cur = /^\s*/.exec(line.text)[0];
          let norm = language.indentString(state2, indent);
          if (cur != norm || range.from < line.from + cur.length) {
            updated[line.from] = indent;
            changes2.push({ from: line.from, to: line.from + cur.length, insert: norm });
          }
        });
        if (!changes.changes.empty)
          dispatch(state2.update(changes, { userEvent: "indent" }));
        return true;
      };
      var indentMore = ({ state: state2, dispatch }) => {
        if (state2.readOnly)
          return false;
        dispatch(state2.update(changeBySelectedLine(state2, (line, changes) => {
          changes.push({ from: line.from, insert: state2.facet(language.indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
      };
      var indentLess = ({ state: state2, dispatch }) => {
        if (state2.readOnly)
          return false;
        dispatch(state2.update(changeBySelectedLine(state2, (line, changes) => {
          let space = /^\s*/.exec(line.text)[0];
          if (!space)
            return;
          let col = text.countColumn(space, state2.tabSize), keep = 0;
          let insert = language.indentString(state2, Math.max(0, col - language.getIndentUnit(state2)));
          while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
            keep++;
          changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
      };
      var insertTab = ({ state: state2, dispatch }) => {
        if (state2.selection.ranges.some((r) => !r.empty))
          return indentMore({ state: state2, dispatch });
        dispatch(state2.update(state2.replaceSelection("	"), { scrollIntoView: true, userEvent: "input" }));
        return true;
      };
      var emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Alt-<", run: cursorDocStart },
        { key: "Alt->", run: cursorDocEnd },
        { key: "Ctrl-v", run: cursorPageDown },
        { key: "Alt-v", run: cursorPageUp }
      ];
      var standardKeymap = [
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteToLineStart },
        { mac: "Mod-Delete", run: deleteToLineEnd }
      ].concat(emacsStyleKeymap.map((b) => ({ mac: b.key, run: b.run, shift: b.shift })));
      var defaultKeymap = [
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-Enter", run: insertBlankLine },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket }
      ].concat(standardKeymap);
      var indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };
      exports.copyLineDown = copyLineDown;
      exports.copyLineUp = copyLineUp;
      exports.cursorCharBackward = cursorCharBackward;
      exports.cursorCharForward = cursorCharForward;
      exports.cursorCharLeft = cursorCharLeft;
      exports.cursorCharRight = cursorCharRight;
      exports.cursorDocEnd = cursorDocEnd;
      exports.cursorDocStart = cursorDocStart;
      exports.cursorGroupBackward = cursorGroupBackward;
      exports.cursorGroupForward = cursorGroupForward;
      exports.cursorGroupLeft = cursorGroupLeft;
      exports.cursorGroupRight = cursorGroupRight;
      exports.cursorLineBoundaryBackward = cursorLineBoundaryBackward;
      exports.cursorLineBoundaryForward = cursorLineBoundaryForward;
      exports.cursorLineDown = cursorLineDown;
      exports.cursorLineEnd = cursorLineEnd;
      exports.cursorLineStart = cursorLineStart;
      exports.cursorLineUp = cursorLineUp;
      exports.cursorMatchingBracket = cursorMatchingBracket;
      exports.cursorPageDown = cursorPageDown;
      exports.cursorPageUp = cursorPageUp;
      exports.cursorSubwordBackward = cursorSubwordBackward;
      exports.cursorSubwordForward = cursorSubwordForward;
      exports.cursorSyntaxLeft = cursorSyntaxLeft;
      exports.cursorSyntaxRight = cursorSyntaxRight;
      exports.defaultKeymap = defaultKeymap;
      exports.deleteCharBackward = deleteCharBackward;
      exports.deleteCharForward = deleteCharForward;
      exports.deleteGroupBackward = deleteGroupBackward;
      exports.deleteGroupForward = deleteGroupForward;
      exports.deleteLine = deleteLine;
      exports.deleteToLineEnd = deleteToLineEnd;
      exports.deleteToLineStart = deleteToLineStart;
      exports.deleteTrailingWhitespace = deleteTrailingWhitespace;
      exports.emacsStyleKeymap = emacsStyleKeymap;
      exports.indentLess = indentLess;
      exports.indentMore = indentMore;
      exports.indentSelection = indentSelection;
      exports.indentWithTab = indentWithTab;
      exports.insertBlankLine = insertBlankLine;
      exports.insertNewline = insertNewline;
      exports.insertNewlineAndIndent = insertNewlineAndIndent;
      exports.insertTab = insertTab;
      exports.moveLineDown = moveLineDown;
      exports.moveLineUp = moveLineUp;
      exports.selectAll = selectAll;
      exports.selectCharBackward = selectCharBackward;
      exports.selectCharForward = selectCharForward;
      exports.selectCharLeft = selectCharLeft;
      exports.selectCharRight = selectCharRight;
      exports.selectDocEnd = selectDocEnd;
      exports.selectDocStart = selectDocStart;
      exports.selectGroupBackward = selectGroupBackward;
      exports.selectGroupForward = selectGroupForward;
      exports.selectGroupLeft = selectGroupLeft;
      exports.selectGroupRight = selectGroupRight;
      exports.selectLine = selectLine;
      exports.selectLineBoundaryBackward = selectLineBoundaryBackward;
      exports.selectLineBoundaryForward = selectLineBoundaryForward;
      exports.selectLineDown = selectLineDown;
      exports.selectLineEnd = selectLineEnd;
      exports.selectLineStart = selectLineStart;
      exports.selectLineUp = selectLineUp;
      exports.selectMatchingBracket = selectMatchingBracket;
      exports.selectPageDown = selectPageDown;
      exports.selectPageUp = selectPageUp;
      exports.selectParentSyntax = selectParentSyntax;
      exports.selectSubwordBackward = selectSubwordBackward;
      exports.selectSubwordForward = selectSubwordForward;
      exports.selectSyntaxLeft = selectSyntaxLeft;
      exports.selectSyntaxRight = selectSyntaxRight;
      exports.simplifySelection = simplifySelection;
      exports.splitLine = splitLine;
      exports.standardKeymap = standardKeymap;
      exports.transposeChars = transposeChars;
    }
  });

  // ../../../node_modules/@codemirror/closebrackets/dist/index.cjs
  var require_dist12 = __commonJS({
    "../../../node_modules/@codemirror/closebrackets/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var state = require_dist2();
      var rangeset = require_dist3();
      var text = require_dist();
      var language = require_dist7();
      var defaults = {
        brackets: ["(", "[", "{", "'", '"'],
        before: `)]}'":;>`
      };
      var closeBracketEffect = state.StateEffect.define({
        map(value, mapping) {
          let mapped = mapping.mapPos(value, -1, state.MapMode.TrackAfter);
          return mapped == null ? void 0 : mapped;
        }
      });
      var skipBracketEffect = state.StateEffect.define({
        map(value, mapping) {
          return mapping.mapPos(value);
        }
      });
      var closedBracket = new class extends rangeset.RangeValue {
      }();
      closedBracket.startSide = 1;
      closedBracket.endSide = -1;
      var bracketState = state.StateField.define({
        create() {
          return rangeset.RangeSet.empty;
        },
        update(value, tr) {
          if (tr.selection) {
            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
            if (lineStart != tr.changes.mapPos(prevLineStart, -1))
              value = rangeset.RangeSet.empty;
          }
          value = value.map(tr.changes);
          for (let effect of tr.effects) {
            if (effect.is(closeBracketEffect))
              value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
            else if (effect.is(skipBracketEffect))
              value = value.update({ filter: (from) => from != effect.value });
          }
          return value;
        }
      });
      function closeBrackets() {
        return [view.EditorView.inputHandler.of(handleInput), bracketState];
      }
      var definedClosing = "()[]{}<>";
      function closing(ch) {
        for (let i = 0; i < definedClosing.length; i += 2)
          if (definedClosing.charCodeAt(i) == ch)
            return definedClosing.charAt(i + 1);
        return text.fromCodePoint(ch < 128 ? ch : ch + 1);
      }
      function config(state2, pos) {
        return state2.languageDataAt("closeBrackets", pos)[0] || defaults;
      }
      function handleInput(view2, from, to, insert) {
        if (view2.composing)
          return false;
        let sel = view2.state.selection.main;
        if (insert.length > 2 || insert.length == 2 && text.codePointSize(text.codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to)
          return false;
        let tr = insertBracket(view2.state, insert);
        if (!tr)
          return false;
        view2.dispatch(tr);
        return true;
      }
      var deleteBracketPair = ({ state: state$1, dispatch }) => {
        let conf = config(state$1, state$1.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        let dont = null, changes = state$1.changeByRange((range) => {
          if (range.empty) {
            let before = prevChar(state$1.doc, range.head);
            for (let token of tokens) {
              if (token == before && nextChar(state$1.doc, range.head) == closing(text.codePointAt(token, 0)))
                return {
                  changes: { from: range.head - token.length, to: range.head + token.length },
                  range: state.EditorSelection.cursor(range.head - token.length),
                  userEvent: "delete.backward"
                };
            }
          }
          return { range: dont = range };
        });
        if (!dont)
          dispatch(state$1.update(changes, { scrollIntoView: true }));
        return !dont;
      };
      var closeBracketsKeymap = [
        { key: "Backspace", run: deleteBracketPair }
      ];
      function insertBracket(state2, bracket) {
        let conf = config(state2, state2.selection.main.head);
        let tokens = conf.brackets || defaults.brackets;
        for (let tok of tokens) {
          let closed = closing(text.codePointAt(tok, 0));
          if (bracket == tok)
            return closed == tok ? handleSame(state2, tok, tokens.indexOf(tok + tok + tok) > -1) : handleOpen(state2, tok, closed, conf.before || defaults.before);
          if (bracket == closed && closedBracketAt(state2, state2.selection.main.from))
            return handleClose(state2, tok, closed);
        }
        return null;
      }
      function closedBracketAt(state2, pos) {
        let found = false;
        state2.field(bracketState).between(0, state2.doc.length, (from) => {
          if (from == pos)
            found = true;
        });
        return found;
      }
      function nextChar(doc, pos) {
        let next = doc.sliceString(pos, pos + 2);
        return next.slice(0, text.codePointSize(text.codePointAt(next, 0)));
      }
      function prevChar(doc, pos) {
        let prev = doc.sliceString(pos - 2, pos);
        return text.codePointSize(text.codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
      }
      function handleOpen(state$1, open, close, closeBefore) {
        let dont = null, changes = state$1.changeByRange((range) => {
          if (!range.empty)
            return {
              changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
              effects: closeBracketEffect.of(range.to + open.length),
              range: state.EditorSelection.range(range.anchor + open.length, range.head + open.length)
            };
          let next = nextChar(state$1.doc, range.head);
          if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
            return {
              changes: { insert: open + close, from: range.head },
              effects: closeBracketEffect.of(range.head + open.length),
              range: state.EditorSelection.cursor(range.head + open.length)
            };
          return { range: dont = range };
        });
        return dont ? null : state$1.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
        });
      }
      function handleClose(state$1, _open, close) {
        let dont = null, moved = state$1.selection.ranges.map((range) => {
          if (range.empty && nextChar(state$1.doc, range.head) == close)
            return state.EditorSelection.cursor(range.head + close.length);
          return dont = range;
        });
        return dont ? null : state$1.update({
          selection: state.EditorSelection.create(moved, state$1.selection.mainIndex),
          scrollIntoView: true,
          effects: state$1.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
        });
      }
      function handleSame(state$1, token, allowTriple) {
        let dont = null, changes = state$1.changeByRange((range) => {
          if (!range.empty)
            return {
              changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
              effects: closeBracketEffect.of(range.to + token.length),
              range: state.EditorSelection.range(range.anchor + token.length, range.head + token.length)
            };
          let pos = range.head, next = nextChar(state$1.doc, pos);
          if (next == token) {
            if (nodeStart(state$1, pos)) {
              return {
                changes: { insert: token + token, from: pos },
                effects: closeBracketEffect.of(pos + token.length),
                range: state.EditorSelection.cursor(pos + token.length)
              };
            } else if (closedBracketAt(state$1, pos)) {
              let isTriple = allowTriple && state$1.sliceDoc(pos, pos + token.length * 3) == token + token + token;
              return {
                range: state.EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
                effects: skipBracketEffect.of(pos)
              };
            }
          } else if (allowTriple && state$1.sliceDoc(pos - 2 * token.length, pos) == token + token && nodeStart(state$1, pos - 2 * token.length)) {
            return {
              changes: { insert: token + token + token + token, from: pos },
              effects: closeBracketEffect.of(pos + token.length),
              range: state.EditorSelection.cursor(pos + token.length)
            };
          } else if (state$1.charCategorizer(pos)(next) != state.CharCategory.Word) {
            let prev = state$1.sliceDoc(pos - 1, pos);
            if (prev != token && state$1.charCategorizer(pos)(prev) != state.CharCategory.Word)
              return {
                changes: { insert: token + token, from: pos },
                effects: closeBracketEffect.of(pos + token.length),
                range: state.EditorSelection.cursor(pos + token.length)
              };
          }
          return { range: dont = range };
        });
        return dont ? null : state$1.update(changes, {
          scrollIntoView: true,
          userEvent: "input.type"
        });
      }
      function nodeStart(state2, pos) {
        let tree = language.syntaxTree(state2).resolveInner(pos + 1);
        return tree.parent && tree.from == pos;
      }
      exports.closeBrackets = closeBrackets;
      exports.closeBracketsKeymap = closeBracketsKeymap;
      exports.deleteBracketPair = deleteBracketPair;
      exports.insertBracket = insertBracket;
    }
  });

  // ../../../node_modules/@codemirror/panel/dist/index.cjs
  var require_dist13 = __commonJS({
    "../../../node_modules/@codemirror/panel/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var state = require_dist2();
      var panelConfig = state.Facet.define({
        combine(configs) {
          let topContainer, bottomContainer;
          for (let c of configs) {
            topContainer = topContainer || c.topContainer;
            bottomContainer = bottomContainer || c.bottomContainer;
          }
          return { topContainer, bottomContainer };
        }
      });
      function panels(config) {
        return config ? [panelConfig.of(config)] : [];
      }
      function getPanel(view2, panel) {
        let plugin = view2.plugin(panelPlugin);
        let index = plugin ? plugin.specs.indexOf(panel) : -1;
        return index > -1 ? plugin.panels[index] : null;
      }
      var panelPlugin = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.input = view2.state.facet(showPanel);
          this.specs = this.input.filter((s) => s);
          this.panels = this.specs.map((spec) => spec(view2));
          let conf = view2.state.facet(panelConfig);
          this.top = new PanelGroup(view2, true, conf.topContainer);
          this.bottom = new PanelGroup(view2, false, conf.bottomContainer);
          this.top.sync(this.panels.filter((p) => p.top));
          this.bottom.sync(this.panels.filter((p) => !p.top));
          for (let p of this.panels) {
            p.dom.classList.add("cm-panel");
            if (p.mount)
              p.mount();
          }
        }
        update(update) {
          let conf = update.state.facet(panelConfig);
          if (this.top.container != conf.topContainer) {
            this.top.sync([]);
            this.top = new PanelGroup(update.view, true, conf.topContainer);
          }
          if (this.bottom.container != conf.bottomContainer) {
            this.bottom.sync([]);
            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
          }
          this.top.syncClasses();
          this.bottom.syncClasses();
          let input = update.state.facet(showPanel);
          if (input != this.input) {
            let specs = input.filter((x) => x);
            let panels2 = [], top = [], bottom = [], mount = [];
            for (let spec of specs) {
              let known = this.specs.indexOf(spec), panel;
              if (known < 0) {
                panel = spec(update.view);
                mount.push(panel);
              } else {
                panel = this.panels[known];
                if (panel.update)
                  panel.update(update);
              }
              panels2.push(panel);
              (panel.top ? top : bottom).push(panel);
            }
            this.specs = specs;
            this.panels = panels2;
            this.top.sync(top);
            this.bottom.sync(bottom);
            for (let p of mount) {
              p.dom.classList.add("cm-panel");
              if (p.mount)
                p.mount();
            }
          } else {
            for (let p of this.panels)
              if (p.update)
                p.update(update);
          }
        }
        destroy() {
          this.top.sync([]);
          this.bottom.sync([]);
        }
      }, {
        provide: view.PluginField.scrollMargins.from((value) => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }))
      });
      var PanelGroup = class {
        constructor(view2, top, container) {
          this.view = view2;
          this.top = top;
          this.container = container;
          this.dom = void 0;
          this.classes = "";
          this.panels = [];
          this.syncClasses();
        }
        sync(panels2) {
          this.panels = panels2;
          this.syncDOM();
        }
        syncDOM() {
          if (this.panels.length == 0) {
            if (this.dom) {
              this.dom.remove();
              this.dom = void 0;
            }
            return;
          }
          if (!this.dom) {
            this.dom = document.createElement("div");
            this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
            this.dom.style[this.top ? "top" : "bottom"] = "0";
            let parent = this.container || this.view.dom;
            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
          }
          let curDOM = this.dom.firstChild;
          for (let panel of this.panels) {
            if (panel.dom.parentNode == this.dom) {
              while (curDOM != panel.dom)
                curDOM = rm(curDOM);
              curDOM = curDOM.nextSibling;
            } else {
              this.dom.insertBefore(panel.dom, curDOM);
            }
          }
          while (curDOM)
            curDOM = rm(curDOM);
        }
        scrollMargin() {
          return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
        }
        syncClasses() {
          if (!this.container || this.classes == this.view.themeClasses)
            return;
          for (let cls of this.classes.split(" "))
            if (cls)
              this.container.classList.remove(cls);
          for (let cls of (this.classes = this.view.themeClasses).split(" "))
            if (cls)
              this.container.classList.add(cls);
        }
      };
      function rm(node) {
        let next = node.nextSibling;
        node.remove();
        return next;
      }
      var baseTheme = view.EditorView.baseTheme({
        ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0
        },
        "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
        },
        "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
        }
      });
      var showPanel = state.Facet.define({
        enables: [panelPlugin, baseTheme]
      });
      exports.getPanel = getPanel;
      exports.panels = panels;
      exports.showPanel = showPanel;
    }
  });

  // ../../../node_modules/crelt/dist/index.cjs
  var require_dist14 = __commonJS({
    "../../../node_modules/crelt/dist/index.cjs"(exports, module) {
      "use strict";
      function crelt() {
        var elt = arguments[0];
        if (typeof elt == "string")
          elt = document.createElement(elt);
        var i = 1, next = arguments[1];
        if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
          for (var name in next)
            if (Object.prototype.hasOwnProperty.call(next, name)) {
              var value = next[name];
              if (typeof value == "string")
                elt.setAttribute(name, value);
              else if (value != null)
                elt[name] = value;
            }
          i++;
        }
        for (; i < arguments.length; i++)
          add(elt, arguments[i]);
        return elt;
      }
      function add(elt, child) {
        if (typeof child == "string") {
          elt.appendChild(document.createTextNode(child));
        } else if (child == null)
          ;
        else if (child.nodeType != null) {
          elt.appendChild(child);
        } else if (Array.isArray(child)) {
          for (var i = 0; i < child.length; i++)
            add(elt, child[i]);
        } else {
          throw new RangeError("Unsupported child node: " + child);
        }
      }
      module.exports = crelt;
    }
  });

  // ../../../node_modules/@codemirror/search/dist/index.cjs
  var require_dist15 = __commonJS({
    "../../../node_modules/@codemirror/search/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var state = require_dist2();
      var panel = require_dist13();
      var rangeset = require_dist3();
      var elt = require_dist14();
      var text = require_dist();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var elt__default = /* @__PURE__ */ _interopDefaultLegacy(elt);
      var basicNormalize = typeof String.prototype.normalize == "function" ? (x) => x.normalize("NFKD") : (x) => x;
      var SearchCursor = class {
        constructor(text2, query, from = 0, to = text2.length, normalize) {
          this.value = { from: 0, to: 0 };
          this.done = false;
          this.matches = [];
          this.buffer = "";
          this.bufferPos = 0;
          this.iter = text2.iterRange(from, to);
          this.bufferStart = from;
          this.normalize = normalize ? (x) => normalize(basicNormalize(x)) : basicNormalize;
          this.query = this.normalize(query);
        }
        peek() {
          if (this.bufferPos == this.buffer.length) {
            this.bufferStart += this.buffer.length;
            this.iter.next();
            if (this.iter.done)
              return -1;
            this.bufferPos = 0;
            this.buffer = this.iter.value;
          }
          return text.codePointAt(this.buffer, this.bufferPos);
        }
        next() {
          while (this.matches.length)
            this.matches.pop();
          return this.nextOverlapping();
        }
        nextOverlapping() {
          for (; ; ) {
            let next = this.peek();
            if (next < 0) {
              this.done = true;
              return this;
            }
            let str = text.fromCodePoint(next), start = this.bufferStart + this.bufferPos;
            this.bufferPos += text.codePointSize(next);
            let norm = this.normalize(str);
            for (let i = 0, pos = start; ; i++) {
              let code = norm.charCodeAt(i);
              let match = this.match(code, pos);
              if (match) {
                this.value = match;
                return this;
              }
              if (i == norm.length - 1)
                break;
              if (pos == start && i < str.length && str.charCodeAt(i) == code)
                pos++;
            }
          }
        }
        match(code, pos) {
          let match = null;
          for (let i = 0; i < this.matches.length; i += 2) {
            let index = this.matches[i], keep = false;
            if (this.query.charCodeAt(index) == code) {
              if (index == this.query.length - 1) {
                match = { from: this.matches[i + 1], to: pos + 1 };
              } else {
                this.matches[i]++;
                keep = true;
              }
            }
            if (!keep) {
              this.matches.splice(i, 2);
              i -= 2;
            }
          }
          if (this.query.charCodeAt(0) == code) {
            if (this.query.length == 1)
              match = { from: pos, to: pos + 1 };
            else
              this.matches.push(1, pos);
          }
          return match;
        }
      };
      if (typeof Symbol != "undefined")
        SearchCursor.prototype[Symbol.iterator] = function() {
          return this;
        };
      var empty = { from: -1, to: -1, match: /.*/.exec("") };
      var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
      var RegExpCursor = class {
        constructor(text2, query, options, from = 0, to = text2.length) {
          this.to = to;
          this.curLine = "";
          this.done = false;
          this.value = empty;
          if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
            return new MultilineRegExpCursor(text2, query, options, from, to);
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.iter = text2.iter();
          let startLine = text2.lineAt(from);
          this.curLineStart = startLine.from;
          this.matchPos = from;
          this.getLine(this.curLineStart);
        }
        getLine(skip) {
          this.iter.next(skip);
          if (this.iter.lineBreak) {
            this.curLine = "";
          } else {
            this.curLine = this.iter.value;
            if (this.curLineStart + this.curLine.length > this.to)
              this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
            this.iter.next();
          }
        }
        nextLine() {
          this.curLineStart = this.curLineStart + this.curLine.length + 1;
          if (this.curLineStart > this.to)
            this.curLine = "";
          else
            this.getLine(0);
        }
        next() {
          for (let off = this.matchPos - this.curLineStart; ; ) {
            this.re.lastIndex = off;
            let match = this.matchPos <= this.to && this.re.exec(this.curLine);
            if (match) {
              let from = this.curLineStart + match.index, to = from + match[0].length;
              this.matchPos = to + (from == to ? 1 : 0);
              if (from == this.curLine.length)
                this.nextLine();
              if (from < to || from > this.value.to) {
                this.value = { from, to, match };
                return this;
              }
              off = this.matchPos - this.curLineStart;
            } else if (this.curLineStart + this.curLine.length < this.to) {
              this.nextLine();
              off = 0;
            } else {
              this.done = true;
              return this;
            }
          }
        }
      };
      var flattened = new WeakMap();
      var FlattenedDoc = class {
        constructor(from, text2) {
          this.from = from;
          this.text = text2;
        }
        get to() {
          return this.from + this.text.length;
        }
        static get(doc, from, to) {
          let cached = flattened.get(doc);
          if (!cached || cached.from >= to || cached.to <= from) {
            let flat = new FlattenedDoc(from, doc.sliceString(from, to));
            flattened.set(doc, flat);
            return flat;
          }
          if (cached.from == from && cached.to == to)
            return cached;
          let { text: text2, from: cachedFrom } = cached;
          if (cachedFrom > from) {
            text2 = doc.sliceString(from, cachedFrom) + text2;
            cachedFrom = from;
          }
          if (cached.to < to)
            text2 += doc.sliceString(cached.to, to);
          flattened.set(doc, new FlattenedDoc(cachedFrom, text2));
          return new FlattenedDoc(from, text2.slice(from - cachedFrom, to - cachedFrom));
        }
      };
      var MultilineRegExpCursor = class {
        constructor(text2, query, options, from, to) {
          this.text = text2;
          this.to = to;
          this.done = false;
          this.value = empty;
          this.matchPos = from;
          this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
          this.flat = FlattenedDoc.get(text2, from, this.chunkEnd(from + 5e3));
        }
        chunkEnd(pos) {
          return pos >= this.to ? this.to : this.text.lineAt(pos).to;
        }
        next() {
          for (; ; ) {
            let off = this.re.lastIndex = this.matchPos - this.flat.from;
            let match = this.re.exec(this.flat.text);
            if (match && !match[0] && match.index == off) {
              this.re.lastIndex = off + 1;
              match = this.re.exec(this.flat.text);
            }
            if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)
              match = null;
            if (match) {
              let from = this.flat.from + match.index, to = from + match[0].length;
              this.value = { from, to, match };
              this.matchPos = to + (from == to ? 1 : 0);
              return this;
            } else {
              if (this.flat.to == this.to) {
                this.done = true;
                return this;
              }
              this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
            }
          }
        }
      };
      if (typeof Symbol != "undefined") {
        RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
          return this;
        };
      }
      function validRegExp(source) {
        try {
          new RegExp(source, baseFlags);
          return true;
        } catch (_a) {
          return false;
        }
      }
      function createLineDialog(view2) {
        let input = elt__default["default"]("input", { class: "cm-textfield", name: "line" });
        let dom = elt__default["default"]("form", {
          class: "cm-gotoLine",
          onkeydown: (event) => {
            if (event.keyCode == 27) {
              event.preventDefault();
              view2.dispatch({ effects: dialogEffect.of(false) });
              view2.focus();
            } else if (event.keyCode == 13) {
              event.preventDefault();
              go();
            }
          },
          onsubmit: (event) => {
            event.preventDefault();
            go();
          }
        }, elt__default["default"]("label", view2.state.phrase("Go to line"), ": ", input), " ", elt__default["default"]("button", { class: "cm-button", type: "submit" }, view2.state.phrase("go")));
        function go() {
          let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
          if (!match)
            return;
          let { state: state$1 } = view2, startLine = state$1.doc.lineAt(state$1.selection.main.head);
          let [, sign, ln, cl, percent] = match;
          let col = cl ? +cl.slice(1) : 0;
          let line = ln ? +ln : startLine.number;
          if (ln && percent) {
            let pc = line / 100;
            if (sign)
              pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state$1.doc.lines;
            line = Math.round(state$1.doc.lines * pc);
          } else if (ln && sign) {
            line = line * (sign == "-" ? -1 : 1) + startLine.number;
          }
          let docLine = state$1.doc.line(Math.max(1, Math.min(state$1.doc.lines, line)));
          view2.dispatch({
            effects: dialogEffect.of(false),
            selection: state.EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
            scrollIntoView: true
          });
          view2.focus();
        }
        return { dom, pos: -10 };
      }
      var dialogEffect = state.StateEffect.define();
      var dialogField = state.StateField.define({
        create() {
          return true;
        },
        update(value, tr) {
          for (let e of tr.effects)
            if (e.is(dialogEffect))
              value = e.value;
          return value;
        },
        provide: (f) => panel.showPanel.from(f, (val) => val ? createLineDialog : null)
      });
      var gotoLine = (view2) => {
        let panel$1 = panel.getPanel(view2, createLineDialog);
        if (!panel$1) {
          let effects = [dialogEffect.of(true)];
          if (view2.state.field(dialogField, false) == null)
            effects.push(state.StateEffect.appendConfig.of([dialogField, baseTheme$1]));
          view2.dispatch({ effects });
          panel$1 = panel.getPanel(view2, createLineDialog);
        }
        if (panel$1)
          panel$1.dom.querySelector("input").focus();
        return true;
      };
      var baseTheme$1 = view.EditorView.baseTheme({
        ".cm-panel.cm-gotoLine": {
          padding: "2px 6px 4px",
          "& label": { fontSize: "80%" }
        }
      });
      var defaultHighlightOptions = {
        highlightWordAroundCursor: false,
        minSelectionLength: 1,
        maxMatches: 100
      };
      var highlightConfig = state.Facet.define({
        combine(options) {
          return state.combineConfig(options, defaultHighlightOptions, {
            highlightWordAroundCursor: (a, b) => a || b,
            minSelectionLength: Math.min,
            maxMatches: Math.min
          });
        }
      });
      function highlightSelectionMatches(options) {
        let ext = [defaultTheme, matchHighlighter];
        if (options)
          ext.push(highlightConfig.of(options));
        return ext;
      }
      var matchDeco = view.Decoration.mark({ class: "cm-selectionMatch" });
      var mainMatchDeco = view.Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
      var matchHighlighter = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.decorations = this.getDeco(view2);
        }
        update(update) {
          if (update.selectionSet || update.docChanged || update.viewportChanged)
            this.decorations = this.getDeco(update.view);
        }
        getDeco(view$1) {
          let conf = view$1.state.facet(highlightConfig);
          let { state: state$1 } = view$1, sel = state$1.selection;
          if (sel.ranges.length > 1)
            return view.Decoration.none;
          let range = sel.main, query, check = null;
          if (range.empty) {
            if (!conf.highlightWordAroundCursor)
              return view.Decoration.none;
            let word = state$1.wordAt(range.head);
            if (!word)
              return view.Decoration.none;
            check = state$1.charCategorizer(range.head);
            query = state$1.sliceDoc(word.from, word.to);
          } else {
            let len = range.to - range.from;
            if (len < conf.minSelectionLength || len > 200)
              return view.Decoration.none;
            query = state$1.sliceDoc(range.from, range.to).trim();
            if (!query)
              return view.Decoration.none;
          }
          let deco = [];
          for (let part of view$1.visibleRanges) {
            let cursor = new SearchCursor(state$1.doc, query, part.from, part.to);
            while (!cursor.next().done) {
              let { from, to } = cursor.value;
              if (!check || (from == 0 || check(state$1.sliceDoc(from - 1, from)) != state.CharCategory.Word) && (to == state$1.doc.length || check(state$1.sliceDoc(to, to + 1)) != state.CharCategory.Word)) {
                if (check && from <= range.from && to >= range.to)
                  deco.push(mainMatchDeco.range(from, to));
                else if (from >= range.to || to <= range.from)
                  deco.push(matchDeco.range(from, to));
                if (deco.length > conf.maxMatches)
                  return view.Decoration.none;
              }
            }
          }
          return view.Decoration.set(deco);
        }
      }, {
        decorations: (v) => v.decorations
      });
      var defaultTheme = view.EditorView.baseTheme({
        ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
        ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
      });
      var selectWord = ({ state: state$1, dispatch }) => {
        let { selection } = state$1;
        let newSel = state.EditorSelection.create(selection.ranges.map((range) => state$1.wordAt(range.head) || state.EditorSelection.cursor(range.head)), selection.mainIndex);
        if (newSel.eq(selection))
          return false;
        dispatch(state$1.update({ selection: newSel }));
        return true;
      };
      function findNextOccurrence(state2, query) {
        let { main, ranges } = state2.selection;
        let word = state2.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
        for (let cycled = false, cursor = new SearchCursor(state2.doc, query, ranges[ranges.length - 1].to); ; ) {
          cursor.next();
          if (cursor.done) {
            if (cycled)
              return null;
            cursor = new SearchCursor(state2.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
            cycled = true;
          } else {
            if (cycled && ranges.some((r) => r.from == cursor.value.from))
              continue;
            if (fullWord) {
              let word2 = state2.wordAt(cursor.value.from);
              if (!word2 || word2.from != cursor.value.from || word2.to != cursor.value.to)
                continue;
            }
            return cursor.value;
          }
        }
      }
      var selectNextOccurrence = ({ state: state$1, dispatch }) => {
        let { ranges } = state$1.selection;
        if (ranges.some((sel) => sel.from === sel.to))
          return selectWord({ state: state$1, dispatch });
        let searchedText = state$1.sliceDoc(ranges[0].from, ranges[0].to);
        if (state$1.selection.ranges.some((r) => state$1.sliceDoc(r.from, r.to) != searchedText))
          return false;
        let range = findNextOccurrence(state$1, searchedText);
        if (!range)
          return false;
        dispatch(state$1.update({
          selection: state$1.selection.addRange(state.EditorSelection.range(range.from, range.to), false),
          scrollIntoView: true
        }));
        return true;
      };
      var searchConfigFacet = state.Facet.define({
        combine(configs) {
          let matchCase = configs.some((c) => c.matchCase);
          return {
            top: configs.some((c) => c.top),
            matchCase: matchCase === void 0 ? true : matchCase
          };
        }
      });
      function searchConfig(config) {
        return searchConfigFacet.of(config);
      }
      var Query = class {
        constructor(search, replace, caseInsensitive) {
          this.search = search;
          this.replace = replace;
          this.caseInsensitive = caseInsensitive;
        }
        eq(other) {
          return this.search == other.search && this.replace == other.replace && this.caseInsensitive == other.caseInsensitive && this.constructor == other.constructor;
        }
      };
      var StringQuery = class extends Query {
        constructor(search, replace, caseInsensitive) {
          super(search, replace, caseInsensitive);
          this.unquoted = search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "	" : "\\");
        }
        cursor(doc, from = 0, to = doc.length) {
          return new SearchCursor(doc, this.unquoted, from, to, this.caseInsensitive ? (x) => x.toLowerCase() : void 0);
        }
        nextMatch(doc, curFrom, curTo) {
          let cursor = this.cursor(doc, curTo).nextOverlapping();
          if (cursor.done)
            cursor = this.cursor(doc, 0, curFrom).nextOverlapping();
          return cursor.done ? null : cursor.value;
        }
        prevMatchInRange(doc, from, to) {
          for (let pos = to; ; ) {
            let start = Math.max(from, pos - 1e4 - this.unquoted.length);
            let cursor = this.cursor(doc, start, pos), range = null;
            while (!cursor.nextOverlapping().done)
              range = cursor.value;
            if (range)
              return range;
            if (start == from)
              return null;
            pos -= 1e4;
          }
        }
        prevMatch(doc, curFrom, curTo) {
          return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(_result) {
          return this.replace;
        }
        matchAll(doc, limit) {
          let cursor = this.cursor(doc), ranges = [];
          while (!cursor.next().done) {
            if (ranges.length >= limit)
              return null;
            ranges.push(cursor.value);
          }
          return ranges;
        }
        highlight(doc, from, to, add) {
          let cursor = this.cursor(doc, Math.max(0, from - this.unquoted.length), Math.min(to + this.unquoted.length, doc.length));
          while (!cursor.next().done)
            add(cursor.value.from, cursor.value.to);
        }
        get valid() {
          return !!this.search;
        }
      };
      var RegExpQuery = class extends Query {
        constructor(search, replace, caseInsensitive) {
          super(search, replace, caseInsensitive);
          this.valid = !!search && validRegExp(search);
        }
        cursor(doc, from = 0, to = doc.length) {
          return new RegExpCursor(doc, this.search, this.caseInsensitive ? { ignoreCase: true } : void 0, from, to);
        }
        nextMatch(doc, curFrom, curTo) {
          let cursor = this.cursor(doc, curTo).next();
          if (cursor.done)
            cursor = this.cursor(doc, 0, curFrom).next();
          return cursor.done ? null : cursor.value;
        }
        prevMatchInRange(doc, from, to) {
          for (let size = 1; ; size++) {
            let start = Math.max(from, to - size * 1e4);
            let cursor = this.cursor(doc, start, to), range = null;
            while (!cursor.next().done)
              range = cursor.value;
            if (range && (start == from || range.from > start + 10))
              return range;
            if (start == from)
              return null;
          }
        }
        prevMatch(doc, curFrom, curTo) {
          return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
        }
        getReplacement(result) {
          return this.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$" : i == "&" ? result.match[0] : i != "0" && +i < result.match.length ? result.match[i] : m);
        }
        matchAll(doc, limit) {
          let cursor = this.cursor(doc), ranges = [];
          while (!cursor.next().done) {
            if (ranges.length >= limit)
              return null;
            ranges.push(cursor.value);
          }
          return ranges;
        }
        highlight(doc, from, to, add) {
          let cursor = this.cursor(doc, Math.max(0, from - 250), Math.min(to + 250, doc.length));
          while (!cursor.next().done)
            add(cursor.value.from, cursor.value.to);
        }
      };
      var setQuery = state.StateEffect.define();
      var togglePanel = state.StateEffect.define();
      var searchState = state.StateField.define({
        create(state2) {
          return new SearchState(defaultQuery(state2), createSearchPanel);
        },
        update(value, tr) {
          for (let effect of tr.effects) {
            if (effect.is(setQuery))
              value = new SearchState(effect.value, value.panel);
            else if (effect.is(togglePanel))
              value = new SearchState(value.query, effect.value ? createSearchPanel : null);
          }
          return value;
        },
        provide: (f) => panel.showPanel.from(f, (val) => val.panel)
      });
      var SearchState = class {
        constructor(query, panel2) {
          this.query = query;
          this.panel = panel2;
        }
      };
      var matchMark = view.Decoration.mark({ class: "cm-searchMatch" });
      var selectedMatchMark = view.Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
      var searchHighlighter = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.view = view2;
          this.decorations = this.highlight(view2.state.field(searchState));
        }
        update(update) {
          let state2 = update.state.field(searchState);
          if (state2 != update.startState.field(searchState) || update.docChanged || update.selectionSet)
            this.decorations = this.highlight(state2);
        }
        highlight({ query, panel: panel2 }) {
          if (!panel2 || !query.valid)
            return view.Decoration.none;
          let { view: view$1 } = this;
          let builder = new rangeset.RangeSetBuilder();
          for (let i = 0, ranges = view$1.visibleRanges, l = ranges.length; i < l; i++) {
            let { from, to } = ranges[i];
            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250)
              to = ranges[++i].to;
            query.highlight(view$1.state.doc, from, to, (from2, to2) => {
              let selected = view$1.state.selection.ranges.some((r) => r.from == from2 && r.to == to2);
              builder.add(from2, to2, selected ? selectedMatchMark : matchMark);
            });
          }
          return builder.finish();
        }
      }, {
        decorations: (v) => v.decorations
      });
      function searchCommand(f) {
        return (view2) => {
          let state2 = view2.state.field(searchState, false);
          return state2 && state2.query.valid ? f(view2, state2) : openSearchPanel(view2);
        };
      }
      var findNext = searchCommand((view2, { query }) => {
        let { from, to } = view2.state.selection.main;
        let next = query.nextMatch(view2.state.doc, from, to);
        if (!next || next.from == from && next.to == to)
          return false;
        view2.dispatch({
          selection: { anchor: next.from, head: next.to },
          scrollIntoView: true,
          effects: announceMatch(view2, next),
          userEvent: "select.search"
        });
        return true;
      });
      var findPrevious = searchCommand((view2, { query }) => {
        let { state: state2 } = view2, { from, to } = state2.selection.main;
        let range = query.prevMatch(state2.doc, from, to);
        if (!range)
          return false;
        view2.dispatch({
          selection: { anchor: range.from, head: range.to },
          scrollIntoView: true,
          effects: announceMatch(view2, range),
          userEvent: "select.search"
        });
        return true;
      });
      var selectMatches = searchCommand((view2, { query }) => {
        let ranges = query.matchAll(view2.state.doc, 1e3);
        if (!ranges || !ranges.length)
          return false;
        view2.dispatch({
          selection: state.EditorSelection.create(ranges.map((r) => state.EditorSelection.range(r.from, r.to))),
          userEvent: "select.search.matches"
        });
        return true;
      });
      var selectSelectionMatches = ({ state: state$1, dispatch }) => {
        let sel = state$1.selection;
        if (sel.ranges.length > 1 || sel.main.empty)
          return false;
        let { from, to } = sel.main;
        let ranges = [], main = 0;
        for (let cur = new SearchCursor(state$1.doc, state$1.sliceDoc(from, to)); !cur.next().done; ) {
          if (ranges.length > 1e3)
            return false;
          if (cur.value.from == from)
            main = ranges.length;
          ranges.push(state.EditorSelection.range(cur.value.from, cur.value.to));
        }
        dispatch(state$1.update({
          selection: state.EditorSelection.create(ranges, main),
          userEvent: "select.search.matches"
        }));
        return true;
      };
      var replaceNext = searchCommand((view2, { query }) => {
        let { state: state2 } = view2, { from, to } = state2.selection.main;
        if (state2.readOnly)
          return false;
        let next = query.nextMatch(state2.doc, from, from);
        if (!next)
          return false;
        let changes = [], selection, replacement;
        if (next.from == from && next.to == to) {
          replacement = state2.toText(query.getReplacement(next));
          changes.push({ from: next.from, to: next.to, insert: replacement });
          next = query.nextMatch(state2.doc, next.from, next.to);
        }
        if (next) {
          let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
          selection = { anchor: next.from - off, head: next.to - off };
        }
        view2.dispatch({
          changes,
          selection,
          scrollIntoView: !!selection,
          effects: next ? announceMatch(view2, next) : void 0,
          userEvent: "input.replace"
        });
        return true;
      });
      var replaceAll = searchCommand((view2, { query }) => {
        if (view2.state.readOnly)
          return false;
        let changes = query.matchAll(view2.state.doc, 1e9).map((match) => {
          let { from, to } = match;
          return { from, to, insert: query.getReplacement(match) };
        });
        if (!changes.length)
          return false;
        view2.dispatch({
          changes,
          userEvent: "input.replace.all"
        });
        return true;
      });
      function createSearchPanel(view2) {
        let { query } = view2.state.field(searchState);
        return {
          dom: buildPanel({
            view: view2,
            query,
            updateQuery(q) {
              if (!query.eq(q)) {
                query = q;
                view2.dispatch({ effects: setQuery.of(query) });
              }
            }
          }),
          mount() {
            this.dom.querySelector("[name=search]").select();
          },
          pos: 80,
          top: view2.state.facet(searchConfigFacet).top
        };
      }
      function defaultQuery(state2, fallback) {
        var _a;
        let sel = state2.selection.main;
        let selText = sel.empty || sel.to > sel.from + 100 ? "" : state2.sliceDoc(sel.from, sel.to);
        let caseInsensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseInsensitive) !== null && _a !== void 0 ? _a : !state2.facet(searchConfigFacet).matchCase;
        return fallback && !selText ? fallback : new StringQuery(selText.replace(/\n/g, "\\n"), "", caseInsensitive);
      }
      var openSearchPanel = (view2) => {
        let state$1 = view2.state.field(searchState, false);
        if (state$1 && state$1.panel) {
          let panel$1 = panel.getPanel(view2, createSearchPanel);
          if (!panel$1)
            return false;
          let searchInput = panel$1.dom.querySelector("[name=search]");
          searchInput.focus();
          searchInput.select();
        } else {
          view2.dispatch({ effects: [
            togglePanel.of(true),
            state$1 ? setQuery.of(defaultQuery(view2.state, state$1.query)) : state.StateEffect.appendConfig.of(searchExtensions)
          ] });
        }
        return true;
      };
      var closeSearchPanel = (view2) => {
        let state2 = view2.state.field(searchState, false);
        if (!state2 || !state2.panel)
          return false;
        let panel$1 = panel.getPanel(view2, createSearchPanel);
        if (panel$1 && panel$1.dom.contains(view2.root.activeElement))
          view2.focus();
        view2.dispatch({ effects: togglePanel.of(false) });
        return true;
      };
      var searchKeymap = [
        { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
        { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
        { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
        { key: "Mod-Shift-l", run: selectSelectionMatches },
        { key: "Alt-g", run: gotoLine },
        { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
      ];
      function buildPanel(conf) {
        function phrase(phrase2) {
          return conf.view.state.phrase(phrase2);
        }
        let searchField = elt__default["default"]("input", {
          value: conf.query.search,
          placeholder: phrase("Find"),
          "aria-label": phrase("Find"),
          class: "cm-textfield",
          name: "search",
          onchange: update,
          onkeyup: update
        });
        let replaceField = elt__default["default"]("input", {
          value: conf.query.replace,
          placeholder: phrase("Replace"),
          "aria-label": phrase("Replace"),
          class: "cm-textfield",
          name: "replace",
          onchange: update,
          onkeyup: update
        });
        let caseField = elt__default["default"]("input", {
          type: "checkbox",
          name: "case",
          checked: !conf.query.caseInsensitive,
          onchange: update
        });
        let reField = elt__default["default"]("input", {
          type: "checkbox",
          name: "re",
          checked: conf.query instanceof RegExpQuery,
          onchange: update
        });
        function update() {
          conf.updateQuery(new (reField.checked ? RegExpQuery : StringQuery)(searchField.value, replaceField.value, !caseField.checked));
        }
        function keydown(e) {
          if (view.runScopeHandlers(conf.view, e, "search-panel")) {
            e.preventDefault();
          } else if (e.keyCode == 13 && e.target == searchField) {
            e.preventDefault();
            (e.shiftKey ? findPrevious : findNext)(conf.view);
          } else if (e.keyCode == 13 && e.target == replaceField) {
            e.preventDefault();
            replaceNext(conf.view);
          }
        }
        function button(name, onclick, content) {
          return elt__default["default"]("button", { class: "cm-button", name, onclick, type: "button" }, content);
        }
        let panel2 = elt__default["default"]("div", { onkeydown: keydown, class: "cm-search" }, [
          searchField,
          button("next", () => findNext(conf.view), [phrase("next")]),
          button("prev", () => findPrevious(conf.view), [phrase("previous")]),
          button("select", () => selectMatches(conf.view), [phrase("all")]),
          elt__default["default"]("label", null, [caseField, phrase("match case")]),
          elt__default["default"]("label", null, [reField, phrase("regexp")]),
          ...conf.view.state.readOnly ? [] : [
            elt__default["default"]("br"),
            replaceField,
            button("replace", () => replaceNext(conf.view), [phrase("replace")]),
            button("replaceAll", () => replaceAll(conf.view), [phrase("replace all")]),
            elt__default["default"]("button", { name: "close", onclick: () => closeSearchPanel(conf.view), "aria-label": phrase("close"), type: "button" }, ["\xD7"])
          ]
        ]);
        return panel2;
      }
      var AnnounceMargin = 30;
      var Break = /[\s\.,:;?!]/;
      function announceMatch(view$1, { from, to }) {
        let lineStart = view$1.state.doc.lineAt(from).from, lineEnd = view$1.state.doc.lineAt(to).to;
        let start = Math.max(lineStart, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
        let text2 = view$1.state.sliceDoc(start, end);
        if (start != lineStart) {
          for (let i = 0; i < AnnounceMargin; i++)
            if (!Break.test(text2[i + 1]) && Break.test(text2[i])) {
              text2 = text2.slice(i);
              break;
            }
        }
        if (end != lineEnd) {
          for (let i = text2.length - 1; i > text2.length - AnnounceMargin; i--)
            if (!Break.test(text2[i - 1]) && Break.test(text2[i])) {
              text2 = text2.slice(0, i);
              break;
            }
        }
        return view.EditorView.announce.of(`${view$1.state.phrase("current match")}. ${text2} ${view$1.state.phrase("on line")} ${view$1.state.doc.lineAt(from).number}`);
      }
      var baseTheme = view.EditorView.baseTheme({
        ".cm-panel.cm-search": {
          padding: "2px 6px 4px",
          position: "relative",
          "& [name=close]": {
            position: "absolute",
            top: "0",
            right: "4px",
            backgroundColor: "inherit",
            border: "none",
            font: "inherit",
            padding: 0,
            margin: 0
          },
          "& input, & button, & label": {
            margin: ".2em .6em .2em 0"
          },
          "& input[type=checkbox]": {
            marginRight: ".2em"
          },
          "& label": {
            fontSize: "80%",
            whiteSpace: "pre"
          }
        },
        "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
        "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
        "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
        "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
      });
      var searchExtensions = [
        searchState,
        state.Prec.lowest(searchHighlighter),
        baseTheme
      ];
      exports.RegExpCursor = RegExpCursor;
      exports.SearchCursor = SearchCursor;
      exports.closeSearchPanel = closeSearchPanel;
      exports.findNext = findNext;
      exports.findPrevious = findPrevious;
      exports.gotoLine = gotoLine;
      exports.highlightSelectionMatches = highlightSelectionMatches;
      exports.openSearchPanel = openSearchPanel;
      exports.replaceAll = replaceAll;
      exports.replaceNext = replaceNext;
      exports.searchConfig = searchConfig;
      exports.searchKeymap = searchKeymap;
      exports.selectMatches = selectMatches;
      exports.selectNextOccurrence = selectNextOccurrence;
      exports.selectSelectionMatches = selectSelectionMatches;
    }
  });

  // ../../../node_modules/@codemirror/tooltip/dist/index.cjs
  var require_dist16 = __commonJS({
    "../../../node_modules/@codemirror/tooltip/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var state = require_dist2();
      var ios = typeof navigator != "undefined" && !/Edge\/(\d+)/.exec(navigator.userAgent) && /Apple Computer/.test(navigator.vendor) && (/Mobile\/\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2);
      var Outside = "-10000px";
      var TooltipViewManager = class {
        constructor(view2, facet, createTooltipView) {
          this.facet = facet;
          this.createTooltipView = createTooltipView;
          this.input = view2.state.facet(facet);
          this.tooltips = this.input.filter((t) => t);
          this.tooltipViews = this.tooltips.map(createTooltipView);
        }
        update(update) {
          let input = update.state.facet(this.facet);
          let tooltips2 = input.filter((x) => x);
          if (input === this.input) {
            for (let t of this.tooltipViews)
              if (t.update)
                t.update(update);
            return false;
          }
          let tooltipViews = [];
          for (let i = 0; i < tooltips2.length; i++) {
            let tip = tooltips2[i], known = -1;
            if (!tip)
              continue;
            for (let i2 = 0; i2 < this.tooltips.length; i2++) {
              let other = this.tooltips[i2];
              if (other && other.create == tip.create)
                known = i2;
            }
            if (known < 0) {
              tooltipViews[i] = this.createTooltipView(tip);
            } else {
              let tooltipView = tooltipViews[i] = this.tooltipViews[known];
              if (tooltipView.update)
                tooltipView.update(update);
            }
          }
          for (let t of this.tooltipViews)
            if (tooltipViews.indexOf(t) < 0)
              t.dom.remove();
          this.input = input;
          this.tooltips = tooltips2;
          this.tooltipViews = tooltipViews;
          return true;
        }
      };
      function tooltips(config = {}) {
        return tooltipConfig.of(config);
      }
      function windowSpace() {
        return { top: 0, left: 0, bottom: innerHeight, right: innerWidth };
      }
      var tooltipConfig = state.Facet.define({
        combine: (values) => {
          var _a, _b, _c;
          return {
            position: ios ? "absolute" : ((_a = values.find((conf) => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
            parent: ((_b = values.find((conf) => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
            tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
          };
        }
      });
      var tooltipPlugin = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.view = view2;
          this.inView = true;
          this.lastTransaction = 0;
          this.intersectionTimeout = -1;
          let config = view2.state.facet(tooltipConfig);
          this.position = config.position;
          this.parent = config.parent;
          this.classes = view2.themeClasses;
          this.createContainer();
          this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
          this.manager = new TooltipViewManager(view2, showTooltip, (t) => this.createTooltip(t));
          this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
            if (this.intersectionTimeout < 0 && Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
              this.intersectionTimeout = setTimeout(() => {
                this.intersectionTimeout = -1;
                this.maybeMeasure();
              }, 50);
          }, { threshold: [1] }) : null;
          this.observeIntersection();
          this.maybeMeasure();
        }
        createContainer() {
          if (this.parent) {
            this.container = document.createElement("div");
            this.container.style.position = "relative";
            this.container.className = this.view.themeClasses;
            this.parent.appendChild(this.container);
          } else {
            this.container = this.view.dom;
          }
        }
        observeIntersection() {
          if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
            for (let tooltip of this.manager.tooltipViews)
              this.intersectionObserver.observe(tooltip.dom);
          }
        }
        update(update) {
          if (update.transactions.length)
            this.lastTransaction = Date.now();
          let updated = this.manager.update(update);
          if (updated)
            this.observeIntersection();
          let shouldMeasure = updated || update.geometryChanged;
          let newConfig = update.state.facet(tooltipConfig);
          if (newConfig.position != this.position) {
            this.position = newConfig.position;
            for (let t of this.manager.tooltipViews)
              t.dom.style.position = this.position;
            shouldMeasure = true;
          }
          if (newConfig.parent != this.parent) {
            if (this.parent)
              this.container.remove();
            this.parent = newConfig.parent;
            this.createContainer();
            for (let t of this.manager.tooltipViews)
              this.container.appendChild(t.dom);
            shouldMeasure = true;
          } else if (this.parent && this.view.themeClasses != this.classes) {
            this.classes = this.container.className = this.view.themeClasses;
          }
          if (shouldMeasure)
            this.maybeMeasure();
        }
        createTooltip(tooltip) {
          let tooltipView = tooltip.create(this.view);
          tooltipView.dom.classList.add("cm-tooltip");
          if (tooltip.arrow && !tooltipView.dom.querySelector("cm-tooltip > cm-tooltip-arrow")) {
            let arrow = document.createElement("div");
            arrow.className = "cm-tooltip-arrow";
            tooltipView.dom.appendChild(arrow);
          }
          tooltipView.dom.style.position = this.position;
          tooltipView.dom.style.top = Outside;
          this.container.appendChild(tooltipView.dom);
          if (tooltipView.mount)
            tooltipView.mount(this.view);
          return tooltipView;
        }
        destroy() {
          var _a;
          for (let { dom } of this.manager.tooltipViews)
            dom.remove();
          (_a = this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
          clearTimeout(this.intersectionTimeout);
        }
        readMeasure() {
          let editor = this.view.dom.getBoundingClientRect();
          return {
            editor,
            parent: this.parent ? this.container.getBoundingClientRect() : editor,
            pos: this.manager.tooltips.map((t) => this.view.coordsAtPos(t.pos)),
            size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
            space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view)
          };
        }
        writeMeasure(measured) {
          let { editor, space } = measured;
          let others = [];
          for (let i = 0; i < this.manager.tooltips.length; i++) {
            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
            let pos = measured.pos[i], size = measured.size[i];
            if (!pos || pos.bottom <= Math.max(editor.top, space.top) || pos.top >= Math.min(editor.bottom, space.bottom) || pos.right <= Math.max(editor.left, space.left) || pos.left >= Math.min(editor.right, space.right)) {
              dom.style.top = Outside;
              continue;
            }
            let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
            let arrowHeight = arrow ? 7 : 0;
            let width = size.right - size.left, height = size.bottom - size.top;
            let offset = tView.offset || noOffset, ltr = this.view.textDirection == view.Direction.LTR;
            let left = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space.right - width) : Math.max(space.left, pos.left - width + (arrow ? 14 : 0) - offset.x);
            let above = !!tooltip.above;
            if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) - offset.y < space.top : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) && above == space.bottom - pos.bottom > pos.top - space.top)
              above = !above;
            let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
            let right = left + width;
            for (let r of others)
              if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
            if (this.position == "absolute") {
              dom.style.top = top - measured.parent.top + "px";
              dom.style.left = left - measured.parent.left + "px";
            } else {
              dom.style.top = top + "px";
              dom.style.left = left + "px";
            }
            if (arrow)
              arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7)}px`;
            others.push({ left, top, right, bottom: top + height });
            dom.classList.toggle("cm-tooltip-above", above);
            dom.classList.toggle("cm-tooltip-below", !above);
            if (tView.positioned)
              tView.positioned();
          }
        }
        maybeMeasure() {
          if (this.manager.tooltips.length) {
            if (this.view.inView)
              this.view.requestMeasure(this.measureReq);
            if (this.inView != this.view.inView) {
              this.inView = this.view.inView;
              if (!this.inView)
                for (let tv of this.manager.tooltipViews)
                  tv.dom.style.top = Outside;
            }
          }
        }
      }, {
        eventHandlers: {
          scroll() {
            this.maybeMeasure();
          }
        }
      });
      var baseTheme = view.EditorView.baseTheme({
        ".cm-tooltip": {
          zIndex: 100
        },
        "&light .cm-tooltip": {
          border: "1px solid #bbb",
          backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
          borderTop: "1px solid #bbb"
        },
        "&dark .cm-tooltip": {
          backgroundColor: "#333338",
          color: "white"
        },
        ".cm-tooltip-arrow": {
          height: `${7}px`,
          width: `${7 * 2}px`,
          position: "absolute",
          zIndex: -1,
          overflow: "hidden",
          "&:before, &:after": {
            content: "''",
            position: "absolute",
            width: 0,
            height: 0,
            borderLeft: `${7}px solid transparent`,
            borderRight: `${7}px solid transparent`
          },
          ".cm-tooltip-above &": {
            bottom: `-${7}px`,
            "&:before": {
              borderTop: `${7}px solid #bbb`
            },
            "&:after": {
              borderTop: `${7}px solid #f5f5f5`,
              bottom: "1px"
            }
          },
          ".cm-tooltip-below &": {
            top: `-${7}px`,
            "&:before": {
              borderBottom: `${7}px solid #bbb`
            },
            "&:after": {
              borderBottom: `${7}px solid #f5f5f5`,
              top: "1px"
            }
          }
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
          "&:before": {
            borderTopColor: "#333338",
            borderBottomColor: "#333338"
          },
          "&:after": {
            borderTopColor: "transparent",
            borderBottomColor: "transparent"
          }
        }
      });
      var noOffset = { x: 0, y: 0 };
      var showTooltip = state.Facet.define({
        enables: [tooltipPlugin, baseTheme]
      });
      var showHoverTooltip = state.Facet.define();
      var HoverTooltipHost = class {
        constructor(view2) {
          this.view = view2;
          this.mounted = false;
          this.dom = document.createElement("div");
          this.dom.classList.add("cm-tooltip-hover");
          this.manager = new TooltipViewManager(view2, showHoverTooltip, (t) => this.createHostedView(t));
        }
        static create(view2) {
          return new HoverTooltipHost(view2);
        }
        createHostedView(tooltip) {
          let hostedView = tooltip.create(this.view);
          hostedView.dom.classList.add("cm-tooltip-section");
          this.dom.appendChild(hostedView.dom);
          if (this.mounted && hostedView.mount)
            hostedView.mount(this.view);
          return hostedView;
        }
        mount(view2) {
          for (let hostedView of this.manager.tooltipViews) {
            if (hostedView.mount)
              hostedView.mount(view2);
          }
          this.mounted = true;
        }
        positioned() {
          for (let hostedView of this.manager.tooltipViews) {
            if (hostedView.positioned)
              hostedView.positioned();
          }
        }
        update(update) {
          this.manager.update(update);
        }
      };
      var showHoverTooltipHost = showTooltip.compute([showHoverTooltip], (state2) => {
        let tooltips2 = state2.facet(showHoverTooltip).filter((t) => t);
        if (tooltips2.length === 0)
          return null;
        return {
          pos: Math.min(...tooltips2.map((t) => t.pos)),
          end: Math.max(...tooltips2.filter((t) => t.end != null).map((t) => t.end)),
          create: HoverTooltipHost.create,
          above: tooltips2[0].above,
          arrow: tooltips2.some((t) => t.arrow)
        };
      });
      var HoverPlugin = class {
        constructor(view2, source, field, setHover, hoverTime) {
          this.view = view2;
          this.source = source;
          this.field = field;
          this.setHover = setHover;
          this.hoverTime = hoverTime;
          this.hoverTimeout = -1;
          this.restartTimeout = -1;
          this.pending = null;
          this.lastMove = { x: 0, y: 0, target: view2.dom, time: 0 };
          this.checkHover = this.checkHover.bind(this);
          view2.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
          view2.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
        }
        update() {
          if (this.pending) {
            this.pending = null;
            clearTimeout(this.restartTimeout);
            this.restartTimeout = setTimeout(() => this.startHover(), 20);
          }
        }
        get active() {
          return this.view.state.field(this.field);
        }
        checkHover() {
          this.hoverTimeout = -1;
          if (this.active)
            return;
          let hovered = Date.now() - this.lastMove.time;
          if (hovered < this.hoverTime)
            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
          else
            this.startHover();
        }
        startHover() {
          var _a;
          clearTimeout(this.restartTimeout);
          let { lastMove } = this;
          let pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(lastMove) : null;
          if (pos == null)
            return;
          let posCoords = this.view.coordsAtPos(pos);
          if (posCoords == null || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - this.view.defaultCharacterWidth || lastMove.x > posCoords.right + this.view.defaultCharacterWidth)
            return;
          let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find((s) => s.from <= pos && s.to >= pos);
          let rtl = bidi && bidi.dir == view.Direction.RTL ? -1 : 1;
          let open = this.source(this.view, pos, lastMove.x < posCoords.left ? -rtl : rtl);
          if ((_a = open) === null || _a === void 0 ? void 0 : _a.then) {
            let pending = this.pending = { pos };
            open.then((result) => {
              if (this.pending == pending) {
                this.pending = null;
                if (result)
                  this.view.dispatch({ effects: this.setHover.of(result) });
              }
            }, (e) => view.logException(this.view.state, e, "hover tooltip"));
          } else if (open) {
            this.view.dispatch({ effects: this.setHover.of(open) });
          }
        }
        mousemove(event) {
          var _a;
          this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
          if (this.hoverTimeout < 0)
            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
          let tooltip = this.active;
          if (tooltip && !isInTooltip(this.lastMove.target) || this.pending) {
            let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
            if (pos == end ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6)) {
              this.view.dispatch({ effects: this.setHover.of(null) });
              this.pending = null;
            }
          }
        }
        mouseleave() {
          clearTimeout(this.hoverTimeout);
          this.hoverTimeout = -1;
          if (this.active)
            this.view.dispatch({ effects: this.setHover.of(null) });
        }
        destroy() {
          clearTimeout(this.hoverTimeout);
          this.view.dom.removeEventListener("mouseleave", this.mouseleave);
          this.view.dom.removeEventListener("mousemove", this.mousemove);
        }
      };
      function isInTooltip(elt) {
        for (let cur = elt; cur; cur = cur.parentNode)
          if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
            return true;
        return false;
      }
      function isOverRange(view2, from, to, x, y, margin) {
        let range = document.createRange();
        let fromDOM = view2.domAtPos(from), toDOM = view2.domAtPos(to);
        range.setEnd(toDOM.node, toDOM.offset);
        range.setStart(fromDOM.node, fromDOM.offset);
        let rects = range.getClientRects();
        range.detach();
        for (let i = 0; i < rects.length; i++) {
          let rect = rects[i];
          let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
          if (dist <= margin)
            return true;
        }
        return false;
      }
      function hoverTooltip(source, options = {}) {
        let setHover = state.StateEffect.define();
        let hoverState = state.StateField.define({
          create() {
            return null;
          },
          update(value, tr) {
            if (value && (options.hideOnChange && (tr.docChanged || tr.selection)))
              return null;
            for (let effect of tr.effects) {
              if (effect.is(setHover))
                return effect.value;
              if (effect.is(closeHoverTooltipEffect))
                return null;
            }
            if (value && tr.docChanged) {
              let newPos = tr.changes.mapPos(value.pos, -1, state.MapMode.TrackDel);
              if (newPos == null)
                return null;
              let copy = Object.assign(Object.create(null), value);
              copy.pos = newPos;
              if (value.end != null)
                copy.end = tr.changes.mapPos(value.end);
              return copy;
            }
            return value;
          },
          provide: (f) => showHoverTooltip.from(f)
        });
        let hoverTime = options.hoverTime || 600;
        return [
          hoverState,
          view.ViewPlugin.define((view2) => new HoverPlugin(view2, source, hoverState, setHover, hoverTime)),
          showHoverTooltipHost
        ];
      }
      function hasHoverTooltips(state2) {
        return state2.facet(showHoverTooltip).some((x) => x);
      }
      var closeHoverTooltipEffect = state.StateEffect.define();
      var closeHoverTooltips = closeHoverTooltipEffect.of(null);
      function repositionTooltips(view2) {
        var _a;
        (_a = view2.plugin(tooltipPlugin)) === null || _a === void 0 ? void 0 : _a.maybeMeasure();
      }
      exports.closeHoverTooltips = closeHoverTooltips;
      exports.hasHoverTooltips = hasHoverTooltips;
      exports.hoverTooltip = hoverTooltip;
      exports.repositionTooltips = repositionTooltips;
      exports.showTooltip = showTooltip;
      exports.tooltips = tooltips;
    }
  });

  // ../../../node_modules/@codemirror/autocomplete/dist/index.cjs
  var require_dist17 = __commonJS({
    "../../../node_modules/@codemirror/autocomplete/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var view = require_dist4();
      var tooltip = require_dist16();
      var language = require_dist7();
      var text = require_dist();
      var CompletionContext = class {
        constructor(state2, pos, explicit) {
          this.state = state2;
          this.pos = pos;
          this.explicit = explicit;
          this.abortListeners = [];
        }
        tokenBefore(types) {
          let token = language.syntaxTree(this.state).resolveInner(this.pos, -1);
          while (token && types.indexOf(token.name) < 0)
            token = token.parent;
          return token ? {
            from: token.from,
            to: this.pos,
            text: this.state.sliceDoc(token.from, this.pos),
            type: token.type
          } : null;
        }
        matchBefore(expr) {
          let line = this.state.doc.lineAt(this.pos);
          let start = Math.max(line.from, this.pos - 250);
          let str = line.text.slice(start - line.from, this.pos - line.from);
          let found = str.search(ensureAnchor(expr, false));
          return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
        }
        get aborted() {
          return this.abortListeners == null;
        }
        addEventListener(type, listener) {
          if (type == "abort" && this.abortListeners)
            this.abortListeners.push(listener);
        }
      };
      function toSet(chars) {
        let flat = Object.keys(chars).join("");
        let words = /\w/.test(flat);
        if (words)
          flat = flat.replace(/\w/g, "");
        return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
      }
      function prefixMatch(options) {
        let first = Object.create(null), rest = Object.create(null);
        for (let { label } of options) {
          first[label[0]] = true;
          for (let i = 1; i < label.length; i++)
            rest[label[i]] = true;
        }
        let source = toSet(first) + toSet(rest) + "*$";
        return [new RegExp("^" + source), new RegExp(source)];
      }
      function completeFromList(list) {
        let options = list.map((o) => typeof o == "string" ? { label: o } : o);
        let [span, match] = options.every((o) => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
        return (context) => {
          let token = context.matchBefore(match);
          return token || context.explicit ? { from: token ? token.from : context.pos, options, span } : null;
        };
      }
      function ifIn(nodes, source) {
        return (context) => {
          for (let pos = language.syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)
            if (nodes.indexOf(pos.name) > -1)
              return source(context);
          return null;
        };
      }
      function ifNotIn(nodes, source) {
        return (context) => {
          for (let pos = language.syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)
            if (nodes.indexOf(pos.name) > -1)
              return null;
          return source(context);
        };
      }
      var Option = class {
        constructor(completion, source, match) {
          this.completion = completion;
          this.source = source;
          this.match = match;
        }
      };
      function cur(state2) {
        return state2.selection.main.head;
      }
      function ensureAnchor(expr, start) {
        var _a;
        let { source } = expr;
        let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
        if (!addStart && !addEnd)
          return expr;
        return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
      }
      var pickedCompletion = state.Annotation.define();
      function applyCompletion(view2, option) {
        let apply = option.completion.apply || option.completion.label;
        let result = option.source;
        if (typeof apply == "string") {
          view2.dispatch({
            changes: { from: result.from, to: result.to, insert: apply },
            selection: { anchor: result.from + apply.length },
            userEvent: "input.complete",
            annotations: pickedCompletion.of(option.completion)
          });
        } else {
          apply(view2, option.completion, result.from, result.to);
        }
      }
      var SourceCache = new WeakMap();
      function asSource(source) {
        if (!Array.isArray(source))
          return source;
        let known = SourceCache.get(source);
        if (!known)
          SourceCache.set(source, known = completeFromList(source));
        return known;
      }
      var FuzzyMatcher = class {
        constructor(pattern) {
          this.pattern = pattern;
          this.chars = [];
          this.folded = [];
          this.any = [];
          this.precise = [];
          this.byWord = [];
          for (let p = 0; p < pattern.length; ) {
            let char = text.codePointAt(pattern, p), size = text.codePointSize(char);
            this.chars.push(char);
            let part = pattern.slice(p, p + size), upper = part.toUpperCase();
            this.folded.push(text.codePointAt(upper == part ? part.toLowerCase() : upper, 0));
            p += size;
          }
          this.astral = pattern.length != this.chars.length;
        }
        match(word) {
          if (this.pattern.length == 0)
            return [0];
          if (word.length < this.pattern.length)
            return null;
          let { chars, folded, any, precise, byWord } = this;
          if (chars.length == 1) {
            let first = text.codePointAt(word, 0);
            return first == chars[0] ? [0, 0, text.codePointSize(first)] : first == folded[0] ? [-200, 0, text.codePointSize(first)] : null;
          }
          let direct = word.indexOf(this.pattern);
          if (direct == 0)
            return [0, 0, this.pattern.length];
          let len = chars.length, anyTo = 0;
          if (direct < 0) {
            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len; ) {
              let next = text.codePointAt(word, i);
              if (next == chars[anyTo] || next == folded[anyTo])
                any[anyTo++] = i;
              i += text.codePointSize(next);
            }
            if (anyTo < len)
              return null;
          }
          let preciseTo = 0;
          let byWordTo = 0, byWordFolded = false;
          let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
          let hasLower = /[a-z]/.test(word);
          for (let i = 0, e = Math.min(word.length, 200), prevType = 0; i < e && byWordTo < len; ) {
            let next = text.codePointAt(word, i);
            if (direct < 0) {
              if (preciseTo < len && next == chars[preciseTo])
                precise[preciseTo++] = i;
              if (adjacentTo < len) {
                if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                  if (adjacentTo == 0)
                    adjacentStart = i;
                  adjacentEnd = i + 1;
                  adjacentTo++;
                } else {
                  adjacentTo = 0;
                }
              }
            }
            let ch, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch = text.fromCodePoint(next)) != ch.toLowerCase() ? 1 : ch != ch.toUpperCase() ? 2 : 0;
            if ((type == 1 && hasLower || prevType == 0 && type != 0) && (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true)))
              byWord[byWordTo++] = i;
            prevType = type;
            i += text.codePointSize(next);
          }
          if (byWordTo == len && byWord[0] == 0)
            return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
          if (adjacentTo == len && adjacentStart == 0)
            return [-200, 0, adjacentEnd];
          if (direct > -1)
            return [-700, direct, direct + this.pattern.length];
          if (adjacentTo == len)
            return [-200 + -700, adjacentStart, adjacentEnd];
          if (byWordTo == len)
            return this.result(-100 + (byWordFolded ? -200 : 0) + -700, byWord, word);
          return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
        }
        result(score2, positions, word) {
          let result = [score2], i = 1;
          for (let pos of positions) {
            let to = pos + (this.astral ? text.codePointSize(text.codePointAt(word, pos)) : 1);
            if (i > 1 && result[i - 1] == pos)
              result[i - 1] = to;
            else {
              result[i++] = pos;
              result[i++] = to;
            }
          }
          return result;
        }
      };
      var completionConfig = state.Facet.define({
        combine(configs) {
          return state.combineConfig(configs, {
            activateOnTyping: true,
            override: null,
            maxRenderedOptions: 100,
            defaultKeymap: true,
            optionClass: () => "",
            aboveCursor: false,
            icons: true,
            addToOptions: []
          }, {
            defaultKeymap: (a, b) => a && b,
            icons: (a, b) => a && b,
            optionClass: (a, b) => (c) => joinClass(a(c), b(c)),
            addToOptions: (a, b) => a.concat(b)
          });
        }
      });
      function joinClass(a, b) {
        return a ? b ? a + " " + b : a : b;
      }
      function optionContent(config) {
        let content = config.addToOptions.slice();
        if (config.icons)
          content.push({
            render(completion) {
              let icon = document.createElement("div");
              icon.classList.add("cm-completionIcon");
              if (completion.type)
                icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
              icon.setAttribute("aria-hidden", "true");
              return icon;
            },
            position: 20
          });
        content.push({
          render(completion, _s, match) {
            let labelElt = document.createElement("span");
            labelElt.className = "cm-completionLabel";
            let { label } = completion, off = 0;
            for (let j = 1; j < match.length; ) {
              let from = match[j++], to = match[j++];
              if (from > off)
                labelElt.appendChild(document.createTextNode(label.slice(off, from)));
              let span = labelElt.appendChild(document.createElement("span"));
              span.appendChild(document.createTextNode(label.slice(from, to)));
              span.className = "cm-completionMatchedText";
              off = to;
            }
            if (off < label.length)
              labelElt.appendChild(document.createTextNode(label.slice(off)));
            return labelElt;
          },
          position: 50
        }, {
          render(completion) {
            if (!completion.detail)
              return null;
            let detailElt = document.createElement("span");
            detailElt.className = "cm-completionDetail";
            detailElt.textContent = completion.detail;
            return detailElt;
          },
          position: 80
        });
        return content.sort((a, b) => a.position - b.position).map((a) => a.render);
      }
      function createInfoDialog(option, view$1) {
        let dom = document.createElement("div");
        dom.className = "cm-tooltip cm-completionInfo";
        let { info } = option.completion;
        if (typeof info == "string") {
          dom.textContent = info;
        } else {
          let content = info(option.completion);
          if (content.then)
            content.then((node) => dom.appendChild(node), (e) => view.logException(view$1.state, e, "completion info"));
          else
            dom.appendChild(content);
        }
        return dom;
      }
      function rangeAroundSelected(total, selected, max) {
        if (total <= max)
          return { from: 0, to: total };
        if (selected <= total >> 1) {
          let off2 = Math.floor(selected / max);
          return { from: off2 * max, to: (off2 + 1) * max };
        }
        let off = Math.floor((total - selected) / max);
        return { from: total - (off + 1) * max, to: total - off * max };
      }
      var CompletionTooltip = class {
        constructor(view2, stateField) {
          this.view = view2;
          this.stateField = stateField;
          this.info = null;
          this.placeInfo = {
            read: () => this.measureInfo(),
            write: (pos) => this.positionInfo(pos),
            key: this
          };
          let cState = view2.state.field(stateField);
          let { options, selected } = cState.open;
          let config = view2.state.facet(completionConfig);
          this.optionContent = optionContent(config);
          this.optionClass = config.optionClass;
          this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
          this.dom = document.createElement("div");
          this.dom.className = "cm-tooltip-autocomplete";
          this.dom.addEventListener("mousedown", (e) => {
            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
              if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                applyCompletion(view2, options[+match[1]]);
                e.preventDefault();
                return;
              }
            }
          });
          this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
          this.list.addEventListener("scroll", () => {
            if (this.info)
              this.view.requestMeasure(this.placeInfo);
          });
        }
        mount() {
          this.updateSel();
        }
        update(update) {
          if (update.state.field(this.stateField) != update.startState.field(this.stateField))
            this.updateSel();
        }
        positioned() {
          if (this.info)
            this.view.requestMeasure(this.placeInfo);
        }
        updateSel() {
          let cState = this.view.state.field(this.stateField), open = cState.open;
          if (open.selected < this.range.from || open.selected >= this.range.to) {
            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
            this.list.remove();
            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
            this.list.addEventListener("scroll", () => {
              if (this.info)
                this.view.requestMeasure(this.placeInfo);
            });
          }
          if (this.updateSelectedOption(open.selected)) {
            if (this.info) {
              this.info.remove();
              this.info = null;
            }
            let option = open.options[open.selected];
            if (option.completion.info) {
              this.info = this.dom.appendChild(createInfoDialog(option, this.view));
              this.view.requestMeasure(this.placeInfo);
            }
          }
        }
        updateSelectedOption(selected) {
          let set = null;
          for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
            if (i == selected) {
              if (!opt.hasAttribute("aria-selected")) {
                opt.setAttribute("aria-selected", "true");
                set = opt;
              }
            } else {
              if (opt.hasAttribute("aria-selected"))
                opt.removeAttribute("aria-selected");
            }
          }
          if (set)
            scrollIntoView(this.list, set);
          return set;
        }
        measureInfo() {
          let sel = this.dom.querySelector("[aria-selected]");
          if (!sel || !this.info)
            return null;
          let rect = this.dom.getBoundingClientRect(), infoRect = this.info.getBoundingClientRect();
          if (rect.top > innerHeight - 10 || rect.bottom < 10)
            return null;
          let top = Math.max(0, Math.min(sel.getBoundingClientRect().top, innerHeight - infoRect.height)) - rect.top;
          let left = this.view.textDirection == view.Direction.RTL;
          let spaceLeft = rect.left, spaceRight = innerWidth - rect.right;
          if (left && spaceLeft < Math.min(infoRect.width, spaceRight))
            left = false;
          else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))
            left = true;
          return { top, left };
        }
        positionInfo(pos) {
          if (this.info) {
            this.info.style.top = (pos ? pos.top : -1e6) + "px";
            if (pos) {
              this.info.classList.toggle("cm-completionInfo-left", pos.left);
              this.info.classList.toggle("cm-completionInfo-right", !pos.left);
            }
          }
        }
        createListBox(options, id, range) {
          const ul = document.createElement("ul");
          ul.id = id;
          ul.setAttribute("role", "listbox");
          for (let i = range.from; i < range.to; i++) {
            let { completion, match } = options[i];
            const li = ul.appendChild(document.createElement("li"));
            li.id = id + "-" + i;
            li.setAttribute("role", "option");
            let cls = this.optionClass(completion);
            if (cls)
              li.className = cls;
            for (let source of this.optionContent) {
              let node = source(completion, this.view.state, match);
              if (node)
                li.appendChild(node);
            }
          }
          if (range.from)
            ul.classList.add("cm-completionListIncompleteTop");
          if (range.to < options.length)
            ul.classList.add("cm-completionListIncompleteBottom");
          return ul;
        }
      };
      function completionTooltip(stateField) {
        return (view2) => new CompletionTooltip(view2, stateField);
      }
      function scrollIntoView(container, element) {
        let parent = container.getBoundingClientRect();
        let self = element.getBoundingClientRect();
        if (self.top < parent.top)
          container.scrollTop -= parent.top - self.top;
        else if (self.bottom > parent.bottom)
          container.scrollTop += self.bottom - parent.bottom;
      }
      var MaxOptions = 300;
      function score(option) {
        return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
      }
      function sortOptions(active, state2) {
        let options = [], i = 0;
        for (let a of active)
          if (a.hasResult()) {
            if (a.result.filter === false) {
              for (let option of a.result.options)
                options.push(new Option(option, a, [1e9 - i++]));
            } else {
              let matcher = new FuzzyMatcher(state2.sliceDoc(a.from, a.to)), match;
              for (let option of a.result.options)
                if (match = matcher.match(option.label)) {
                  if (option.boost != null)
                    match[0] += option.boost;
                  options.push(new Option(option, a, match));
                }
            }
          }
        options.sort(cmpOption);
        let result = [], prev = null;
        for (let opt of options.sort(cmpOption)) {
          if (result.length == MaxOptions)
            break;
          if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail || prev.type != opt.completion.type || prev.apply != opt.completion.apply)
            result.push(opt);
          else if (score(opt.completion) > score(prev))
            result[result.length - 1] = opt;
          prev = opt.completion;
        }
        return result;
      }
      var CompletionDialog = class {
        constructor(options, attrs, tooltip2, timestamp, selected) {
          this.options = options;
          this.attrs = attrs;
          this.tooltip = tooltip2;
          this.timestamp = timestamp;
          this.selected = selected;
        }
        setSelected(selected, id) {
          return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
        }
        static build(active, state2, id, prev, conf) {
          let options = sortOptions(active, state2);
          if (!options.length)
            return null;
          let selected = 0;
          if (prev && prev.selected) {
            let selectedValue = prev.options[prev.selected].completion;
            for (let i = 0; i < options.length && !selected; i++) {
              if (options[i].completion == selectedValue)
                selected = i;
            }
          }
          return new CompletionDialog(options, makeAttrs(id, selected), {
            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
            create: completionTooltip(completionState),
            above: conf.aboveCursor
          }, prev ? prev.timestamp : Date.now(), selected);
        }
        map(changes) {
          return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);
        }
      };
      var CompletionState = class {
        constructor(active, id, open) {
          this.active = active;
          this.id = id;
          this.open = open;
        }
        static start() {
          return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
        }
        update(tr) {
          let { state: state2 } = tr, conf = state2.facet(completionConfig);
          let sources = conf.override || state2.languageDataAt("autocomplete", cur(state2)).map(asSource);
          let active = sources.map((source) => {
            let value = this.active.find((s) => s.source == source) || new ActiveSource(source, this.active.some((a) => a.state != 0) ? 1 : 0);
            return value.update(tr, conf);
          });
          if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
            active = this.active;
          let open = tr.selection || active.some((a) => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active) ? CompletionDialog.build(active, state2, this.id, this.open, conf) : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
          if (!open && active.every((a) => a.state != 1) && active.some((a) => a.hasResult()))
            active = active.map((a) => a.hasResult() ? new ActiveSource(a.source, 0) : a);
          for (let effect of tr.effects)
            if (effect.is(setSelectedEffect))
              open = open && open.setSelected(effect.value, this.id);
          return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
        }
        get tooltip() {
          return this.open ? this.open.tooltip : null;
        }
        get attrs() {
          return this.open ? this.open.attrs : baseAttrs;
        }
      };
      function sameResults(a, b) {
        if (a == b)
          return true;
        for (let iA = 0, iB = 0; ; ) {
          while (iA < a.length && !a[iA].hasResult)
            iA++;
          while (iB < b.length && !b[iB].hasResult)
            iB++;
          let endA = iA == a.length, endB = iB == b.length;
          if (endA || endB)
            return endA == endB;
          if (a[iA++].result != b[iB++].result)
            return false;
        }
      }
      var baseAttrs = {
        "aria-autocomplete": "list",
        "aria-expanded": "false"
      };
      function makeAttrs(id, selected) {
        return {
          "aria-autocomplete": "list",
          "aria-expanded": "true",
          "aria-activedescendant": id + "-" + selected,
          "aria-controls": id
        };
      }
      var none = [];
      function cmpOption(a, b) {
        let dScore = b.match[0] - a.match[0];
        if (dScore)
          return dScore;
        return a.completion.label.localeCompare(b.completion.label);
      }
      function getUserEvent(tr) {
        return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
      }
      var ActiveSource = class {
        constructor(source, state2, explicitPos = -1) {
          this.source = source;
          this.state = state2;
          this.explicitPos = explicitPos;
        }
        hasResult() {
          return false;
        }
        update(tr, conf) {
          let event = getUserEvent(tr), value = this;
          if (event)
            value = value.handleUserEvent(tr, event, conf);
          else if (tr.docChanged)
            value = value.handleChange(tr);
          else if (tr.selection && value.state != 0)
            value = new ActiveSource(value.source, 0);
          for (let effect of tr.effects) {
            if (effect.is(startCompletionEffect))
              value = new ActiveSource(value.source, 1, effect.value ? cur(tr.state) : -1);
            else if (effect.is(closeCompletionEffect))
              value = new ActiveSource(value.source, 0);
            else if (effect.is(setActiveEffect)) {
              for (let active of effect.value)
                if (active.source == value.source)
                  value = active;
            }
          }
          return value;
        }
        handleUserEvent(tr, type, conf) {
          return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1);
        }
        handleChange(tr) {
          return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0) : this.map(tr.changes);
        }
        map(changes) {
          return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
        }
      };
      var ActiveResult = class extends ActiveSource {
        constructor(source, explicitPos, result, from, to, span) {
          super(source, 2, explicitPos);
          this.result = result;
          this.from = from;
          this.to = to;
          this.span = span;
        }
        hasResult() {
          return true;
        }
        handleUserEvent(tr, type, conf) {
          let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
          let pos = cur(tr.state);
          if ((this.explicitPos > -1 ? pos < from : pos <= from) || pos > to)
            return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 : 0);
          let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);
          if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to))))
            return new ActiveResult(this.source, explicitPos, this.result, from, to, this.span);
          return new ActiveSource(this.source, 1, explicitPos);
        }
        handleChange(tr) {
          return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0) : this.map(tr.changes);
        }
        map(mapping) {
          return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
        }
      };
      var startCompletionEffect = state.StateEffect.define();
      var closeCompletionEffect = state.StateEffect.define();
      var setActiveEffect = state.StateEffect.define({
        map(sources, mapping) {
          return sources.map((s) => s.map(mapping));
        }
      });
      var setSelectedEffect = state.StateEffect.define();
      var completionState = state.StateField.define({
        create() {
          return CompletionState.start();
        },
        update(value, tr) {
          return value.update(tr);
        },
        provide: (f) => [
          tooltip.showTooltip.from(f, (val) => val.tooltip),
          view.EditorView.contentAttributes.from(f, (state2) => state2.attrs)
        ]
      });
      var CompletionInteractMargin = 75;
      function moveCompletionSelection(forward, by = "option") {
        return (view2) => {
          let cState = view2.state.field(completionState, false);
          if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
            return false;
          let step = 1, tooltip2;
          if (by == "page" && (tooltip2 = view2.dom.querySelector(".cm-tooltip-autocomplete")))
            step = Math.max(2, Math.floor(tooltip2.offsetHeight / tooltip2.firstChild.offsetHeight));
          let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
          if (selected < 0)
            selected = by == "page" ? 0 : length - 1;
          else if (selected >= length)
            selected = by == "page" ? length - 1 : 0;
          view2.dispatch({ effects: setSelectedEffect.of(selected) });
          return true;
        };
      }
      var acceptCompletion = (view2) => {
        let cState = view2.state.field(completionState, false);
        if (view2.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
          return false;
        applyCompletion(view2, cState.open.options[cState.open.selected]);
        return true;
      };
      var startCompletion = (view2) => {
        let cState = view2.state.field(completionState, false);
        if (!cState)
          return false;
        view2.dispatch({ effects: startCompletionEffect.of(true) });
        return true;
      };
      var closeCompletion = (view2) => {
        let cState = view2.state.field(completionState, false);
        if (!cState || !cState.active.some((a) => a.state != 0))
          return false;
        view2.dispatch({ effects: closeCompletionEffect.of(null) });
        return true;
      };
      var RunningQuery = class {
        constructor(active, context) {
          this.active = active;
          this.context = context;
          this.time = Date.now();
          this.updates = [];
          this.done = void 0;
        }
      };
      var DebounceTime = 50;
      var MaxUpdateCount = 50;
      var MinAbortTime = 1e3;
      var completionPlugin = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.view = view2;
          this.debounceUpdate = -1;
          this.running = [];
          this.debounceAccept = -1;
          this.composing = 0;
          for (let active of view2.state.field(completionState).active)
            if (active.state == 1)
              this.startQuery(active);
        }
        update(update) {
          let cState = update.state.field(completionState);
          if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
            return;
          let doesReset = update.transactions.some((tr) => {
            return (tr.selection || tr.docChanged) && !getUserEvent(tr);
          });
          for (let i = 0; i < this.running.length; i++) {
            let query = this.running[i];
            if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && query.time - Date.now() > MinAbortTime) {
              for (let handler of query.context.abortListeners) {
                try {
                  handler();
                } catch (e) {
                  view.logException(this.view.state, e);
                }
              }
              query.context.abortListeners = null;
              this.running.splice(i--, 1);
            } else {
              query.updates.push(...update.transactions);
            }
          }
          if (this.debounceUpdate > -1)
            clearTimeout(this.debounceUpdate);
          this.debounceUpdate = cState.active.some((a) => a.state == 1 && !this.running.some((q) => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
          if (this.composing != 0)
            for (let tr of update.transactions) {
              if (getUserEvent(tr) == "input")
                this.composing = 2;
              else if (this.composing == 2 && tr.selection)
                this.composing = 3;
            }
        }
        startUpdate() {
          this.debounceUpdate = -1;
          let { state: state2 } = this.view, cState = state2.field(completionState);
          for (let active of cState.active) {
            if (active.state == 1 && !this.running.some((r) => r.active.source == active.source))
              this.startQuery(active);
          }
        }
        startQuery(active) {
          let { state: state2 } = this.view, pos = cur(state2);
          let context = new CompletionContext(state2, pos, active.explicitPos == pos);
          let pending = new RunningQuery(active, context);
          this.running.push(pending);
          Promise.resolve(active.source(context)).then((result) => {
            if (!pending.context.aborted) {
              pending.done = result || null;
              this.scheduleAccept();
            }
          }, (err) => {
            this.view.dispatch({ effects: closeCompletionEffect.of(null) });
            view.logException(this.view.state, err);
          });
        }
        scheduleAccept() {
          if (this.running.every((q) => q.done !== void 0))
            this.accept();
          else if (this.debounceAccept < 0)
            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
        }
        accept() {
          var _a;
          if (this.debounceAccept > -1)
            clearTimeout(this.debounceAccept);
          this.debounceAccept = -1;
          let updated = [];
          let conf = this.view.state.facet(completionConfig);
          for (let i = 0; i < this.running.length; i++) {
            let query = this.running[i];
            if (query.done === void 0)
              continue;
            this.running.splice(i--, 1);
            if (query.done) {
              let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state), query.done.span && query.done.filter !== false ? ensureAnchor(query.done.span, true) : null);
              for (let tr of query.updates)
                active = active.update(tr, conf);
              if (active.hasResult()) {
                updated.push(active);
                continue;
              }
            }
            let current = this.view.state.field(completionState).active.find((a) => a.source == query.active.source);
            if (current && current.state == 1) {
              if (query.done == null) {
                let active = new ActiveSource(query.active.source, 0);
                for (let tr of query.updates)
                  active = active.update(tr, conf);
                if (active.state != 1)
                  updated.push(active);
              } else {
                this.startQuery(current);
              }
            }
          }
          if (updated.length)
            this.view.dispatch({ effects: setActiveEffect.of(updated) });
        }
      }, {
        eventHandlers: {
          compositionstart() {
            this.composing = 1;
          },
          compositionend() {
            if (this.composing == 3) {
              setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
            }
            this.composing = 0;
          }
        }
      });
      var baseTheme = view.EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
          "& > ul": {
            fontFamily: "monospace",
            whiteSpace: "nowrap",
            overflow: "hidden auto",
            maxWidth_fallback: "700px",
            maxWidth: "min(700px, 95vw)",
            minWidth: "250px",
            maxHeight: "10em",
            listStyle: "none",
            margin: 0,
            padding: 0,
            "& > li": {
              overflowX: "hidden",
              textOverflow: "ellipsis",
              cursor: "pointer",
              padding: "1px 3px",
              lineHeight: 1.2
            }
          }
        },
        "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#39e",
          color: "white"
        },
        "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#347",
          color: "white"
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
          content: '"\xB7\xB7\xB7"',
          opacity: 0.5,
          display: "block",
          textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
          position: "absolute",
          padding: "3px 9px",
          width: "max-content",
          maxWidth: "300px"
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
          verticalAlign: "text-top",
          width: 0,
          height: "1.15em",
          margin: "0 -0.7px -.7em",
          borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
          textDecoration: "underline"
        },
        ".cm-completionDetail": {
          marginLeft: "0.5em",
          fontStyle: "italic"
        },
        ".cm-completionIcon": {
          fontSize: "90%",
          width: ".8em",
          display: "inline-block",
          textAlign: "center",
          paddingRight: ".6em",
          opacity: "0.6"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
          "&:after": { content: "'\u0192'" }
        },
        ".cm-completionIcon-class": {
          "&:after": { content: "'\u25CB'" }
        },
        ".cm-completionIcon-interface": {
          "&:after": { content: "'\u25CC'" }
        },
        ".cm-completionIcon-variable": {
          "&:after": { content: "'\u{1D465}'" }
        },
        ".cm-completionIcon-constant": {
          "&:after": { content: "'\u{1D436}'" }
        },
        ".cm-completionIcon-type": {
          "&:after": { content: "'\u{1D461}'" }
        },
        ".cm-completionIcon-enum": {
          "&:after": { content: "'\u222A'" }
        },
        ".cm-completionIcon-property": {
          "&:after": { content: "'\u25A1'" }
        },
        ".cm-completionIcon-keyword": {
          "&:after": { content: "'\u{1F511}\uFE0E'" }
        },
        ".cm-completionIcon-namespace": {
          "&:after": { content: "'\u25A2'" }
        },
        ".cm-completionIcon-text": {
          "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
      });
      var FieldPos = class {
        constructor(field, line, from, to) {
          this.field = field;
          this.line = line;
          this.from = from;
          this.to = to;
        }
      };
      var FieldRange = class {
        constructor(field, from, to) {
          this.field = field;
          this.from = from;
          this.to = to;
        }
        map(changes) {
          return new FieldRange(this.field, changes.mapPos(this.from, -1), changes.mapPos(this.to, 1));
        }
      };
      var Snippet = class {
        constructor(lines, fieldPositions) {
          this.lines = lines;
          this.fieldPositions = fieldPositions;
        }
        instantiate(state2, pos) {
          let text2 = [], lineStart = [pos];
          let lineObj = state2.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
          for (let line of this.lines) {
            if (text2.length) {
              let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
              for (let i = 0; i < tabs; i++)
                indent += state2.facet(language.indentUnit);
              lineStart.push(pos + indent.length - tabs);
              line = indent + line.slice(tabs);
            }
            text2.push(line);
            pos += line.length + 1;
          }
          let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
          return { text: text2, ranges };
        }
        static parse(template) {
          let fields = [];
          let lines = [], positions = [], m;
          for (let line of template.split(/\r\n?|\n/)) {
            while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
              let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || "", found = -1;
              for (let i = 0; i < fields.length; i++) {
                if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                  found = i;
              }
              if (found < 0) {
                let i = 0;
                while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq))
                  i++;
                fields.splice(i, 0, { seq, name });
                found = i;
                for (let pos of positions)
                  if (pos.field >= found)
                    pos.field++;
              }
              positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
              line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
            }
            lines.push(line);
          }
          return new Snippet(lines, positions);
        }
      };
      var fieldMarker = view.Decoration.widget({ widget: new class extends view.WidgetType {
        toDOM() {
          let span = document.createElement("span");
          span.className = "cm-snippetFieldPosition";
          return span;
        }
        ignoreEvent() {
          return false;
        }
      }() });
      var fieldRange = view.Decoration.mark({ class: "cm-snippetField" });
      var ActiveSnippet = class {
        constructor(ranges, active) {
          this.ranges = ranges;
          this.active = active;
          this.deco = view.Decoration.set(ranges.map((r) => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
        }
        map(changes) {
          return new ActiveSnippet(this.ranges.map((r) => r.map(changes)), this.active);
        }
        selectionInsideField(sel) {
          return sel.ranges.every((range) => this.ranges.some((r) => r.field == this.active && r.from <= range.from && r.to >= range.to));
        }
      };
      var setActive = state.StateEffect.define({
        map(value, changes) {
          return value && value.map(changes);
        }
      });
      var moveToField = state.StateEffect.define();
      var snippetState = state.StateField.define({
        create() {
          return null;
        },
        update(value, tr) {
          for (let effect of tr.effects) {
            if (effect.is(setActive))
              return effect.value;
            if (effect.is(moveToField) && value)
              return new ActiveSnippet(value.ranges, effect.value);
          }
          if (value && tr.docChanged)
            value = value.map(tr.changes);
          if (value && tr.selection && !value.selectionInsideField(tr.selection))
            value = null;
          return value;
        },
        provide: (f) => view.EditorView.decorations.from(f, (val) => val ? val.deco : view.Decoration.none)
      });
      function fieldSelection(ranges, field) {
        return state.EditorSelection.create(ranges.filter((r) => r.field == field).map((r) => state.EditorSelection.range(r.from, r.to)));
      }
      function snippet(template) {
        let snippet2 = Snippet.parse(template);
        return (editor, _completion, from, to) => {
          let { text: text2, ranges } = snippet2.instantiate(editor.state, from);
          let spec = { changes: { from, to, insert: state.Text.of(text2) } };
          if (ranges.length)
            spec.selection = fieldSelection(ranges, 0);
          if (ranges.length > 1) {
            let active = new ActiveSnippet(ranges, 0);
            let effects = spec.effects = [setActive.of(active)];
            if (editor.state.field(snippetState, false) === void 0)
              effects.push(state.StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));
          }
          editor.dispatch(editor.state.update(spec));
        };
      }
      function moveField(dir) {
        return ({ state: state2, dispatch }) => {
          let active = state2.field(snippetState, false);
          if (!active || dir < 0 && active.active == 0)
            return false;
          let next = active.active + dir, last = dir > 0 && !active.ranges.some((r) => r.field == next + dir);
          dispatch(state2.update({
            selection: fieldSelection(active.ranges, next),
            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
          }));
          return true;
        };
      }
      var clearSnippet = ({ state: state2, dispatch }) => {
        let active = state2.field(snippetState, false);
        if (!active)
          return false;
        dispatch(state2.update({ effects: setActive.of(null) }));
        return true;
      };
      var nextSnippetField = moveField(1);
      var prevSnippetField = moveField(-1);
      var defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
      ];
      var snippetKeymap = state.Facet.define({
        combine(maps) {
          return maps.length ? maps[0] : defaultSnippetKeymap;
        }
      });
      var addSnippetKeymap = state.Prec.highest(view.keymap.compute([snippetKeymap], (state2) => state2.facet(snippetKeymap)));
      function snippetCompletion(template, completion) {
        return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
      }
      var snippetPointerHandler = view.EditorView.domEventHandlers({
        mousedown(event, view2) {
          let active = view2.state.field(snippetState, false), pos;
          if (!active || (pos = view2.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
            return false;
          let match = active.ranges.find((r) => r.from <= pos && r.to >= pos);
          if (!match || match.field == active.active)
            return false;
          view2.dispatch({
            selection: fieldSelection(active.ranges, match.field),
            effects: setActive.of(active.ranges.some((r) => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
          });
          return true;
        }
      });
      function wordRE(wordChars) {
        let escaped = wordChars.replace(/[\\[.+*?(){|^$]/g, "\\$&");
        try {
          return new RegExp(`[\\p{Alphabetic}\\p{Number}_${escaped}]+`, "ug");
        } catch (_a) {
          return new RegExp(`[w${escaped}]`, "g");
        }
      }
      function mapRE(re, f) {
        return new RegExp(f(re.source), re.unicode ? "u" : "");
      }
      var wordCaches = Object.create(null);
      function wordCache(wordChars) {
        return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap());
      }
      function storeWords(doc, wordRE2, result, seen, ignoreAt) {
        for (let lines = doc.iterLines(), pos = 0; !lines.next().done; ) {
          let { value } = lines, m;
          wordRE2.lastIndex = 0;
          while (m = wordRE2.exec(value)) {
            if (!seen[m[0]] && pos + m.index != ignoreAt) {
              result.push({ type: "text", label: m[0] });
              seen[m[0]] = true;
              if (result.length >= 2e3)
                return;
            }
          }
          pos += value.length + 1;
        }
      }
      function collectWords(doc, cache, wordRE2, to, ignoreAt) {
        let big = doc.length >= 1e3;
        let cached = big && cache.get(doc);
        if (cached)
          return cached;
        let result = [], seen = Object.create(null);
        if (doc.children) {
          let pos = 0;
          for (let ch of doc.children) {
            if (ch.length >= 1e3) {
              for (let c of collectWords(ch, cache, wordRE2, to - pos, ignoreAt - pos)) {
                if (!seen[c.label]) {
                  seen[c.label] = true;
                  result.push(c);
                }
              }
            } else {
              storeWords(ch, wordRE2, result, seen, ignoreAt - pos);
            }
            pos += ch.length + 1;
          }
        } else {
          storeWords(doc, wordRE2, result, seen, ignoreAt);
        }
        if (big && result.length < 2e3)
          cache.set(doc, result);
        return result;
      }
      var completeAnyWord = (context) => {
        let wordChars = context.state.languageDataAt("wordChars", context.pos).join("");
        let re = wordRE(wordChars);
        let token = context.matchBefore(mapRE(re, (s) => s + "$"));
        if (!token && !context.explicit)
          return null;
        let from = token ? token.from : context.pos;
        let options = collectWords(context.state.doc, wordCache(wordChars), re, 5e4, from);
        return { from, options, span: mapRE(re, (s) => "^" + s) };
      };
      function autocompletion(config = {}) {
        return [
          completionState,
          completionConfig.of(config),
          completionPlugin,
          completionKeymapExt,
          baseTheme
        ];
      }
      var completionKeymap = [
        { key: "Ctrl-Space", run: startCompletion },
        { key: "Escape", run: closeCompletion },
        { key: "ArrowDown", run: moveCompletionSelection(true) },
        { key: "ArrowUp", run: moveCompletionSelection(false) },
        { key: "PageDown", run: moveCompletionSelection(true, "page") },
        { key: "PageUp", run: moveCompletionSelection(false, "page") },
        { key: "Enter", run: acceptCompletion }
      ];
      var completionKeymapExt = state.Prec.highest(view.keymap.computeN([completionConfig], (state2) => state2.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
      function completionStatus(state2) {
        let cState = state2.field(completionState, false);
        return cState && cState.active.some((a) => a.state == 1) ? "pending" : cState && cState.active.some((a) => a.state != 0) ? "active" : null;
      }
      function currentCompletions(state2) {
        var _a;
        let open = (_a = state2.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
        return open ? open.options.map((o) => o.completion) : [];
      }
      function selectedCompletion(state2) {
        var _a;
        let open = (_a = state2.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
        return open ? open.options[open.selected].completion : null;
      }
      exports.CompletionContext = CompletionContext;
      exports.acceptCompletion = acceptCompletion;
      exports.autocompletion = autocompletion;
      exports.clearSnippet = clearSnippet;
      exports.closeCompletion = closeCompletion;
      exports.completeAnyWord = completeAnyWord;
      exports.completeFromList = completeFromList;
      exports.completionKeymap = completionKeymap;
      exports.completionStatus = completionStatus;
      exports.currentCompletions = currentCompletions;
      exports.ifIn = ifIn;
      exports.ifNotIn = ifNotIn;
      exports.moveCompletionSelection = moveCompletionSelection;
      exports.nextSnippetField = nextSnippetField;
      exports.pickedCompletion = pickedCompletion;
      exports.prevSnippetField = prevSnippetField;
      exports.selectedCompletion = selectedCompletion;
      exports.snippet = snippet;
      exports.snippetCompletion = snippetCompletion;
      exports.snippetKeymap = snippetKeymap;
      exports.startCompletion = startCompletion;
    }
  });

  // ../../../node_modules/@codemirror/comment/dist/index.cjs
  var require_dist18 = __commonJS({
    "../../../node_modules/@codemirror/comment/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var toggleComment = (target) => {
        let config = getConfig(target.state);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;
      };
      function command(f, option) {
        return ({ state: state2, dispatch }) => {
          let tr = f(option, state2.selection.ranges, state2);
          if (!tr)
            return false;
          dispatch(state2.update(tr));
          return true;
        };
      }
      var toggleLineComment = command(changeLineComment, 0);
      var lineComment = command(changeLineComment, 1);
      var lineUncomment = command(changeLineComment, 2);
      var toggleBlockComment = command(changeBlockComment, 0);
      var blockComment = command(changeBlockComment, 1);
      var blockUncomment = command(changeBlockComment, 2);
      var commentKeymap = [
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment }
      ];
      function getConfig(state2, pos = state2.selection.main.head) {
        let data = state2.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
      }
      var SearchMargin = 50;
      function findBlockComment(state2, { open, close }, from, to) {
        let textBefore = state2.sliceDoc(from - SearchMargin, from);
        let textAfter = state2.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
          return {
            open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
            close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
          };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
          startText = endText = state2.sliceDoc(from, to);
        } else {
          startText = state2.sliceDoc(from, from + SearchMargin);
          endText = state2.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
          return {
            open: {
              pos: from + startSpace + open.length,
              margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
            },
            close: {
              pos: to - endSpace - close.length,
              margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
            }
          };
        }
        return null;
      }
      function changeBlockComment(option, ranges, state$1) {
        let tokens = ranges.map((r) => getConfig(state$1, r.from).block);
        if (!tokens.every((c) => c))
          return null;
        let comments = ranges.map((r, i) => findBlockComment(state$1, tokens[i], r.from, r.to));
        if (option != 2 && !comments.every((c) => c)) {
          let index = 0;
          return state$1.changeByRange((range) => {
            let { open, close } = tokens[index++];
            if (comments[index])
              return { range };
            let shift = open.length + 1;
            return {
              changes: [{ from: range.from, insert: open + " " }, { from: range.to, insert: " " + close }],
              range: state.EditorSelection.range(range.anchor + shift, range.head + shift)
            };
          });
        } else if (option != 1 && comments.some((c) => c)) {
          let changes = [];
          for (let i = 0, comment; i < comments.length; i++)
            if (comment = comments[i]) {
              let token = tokens[i], { open, close } = comment;
              changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
            }
          return { changes };
        }
        return null;
      }
      function changeLineComment(option, ranges, state2) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
          let startI = lines.length, minIndent = 1e9;
          for (let pos = from; pos <= to; ) {
            let line = state2.doc.lineAt(pos);
            if (line.from > prevLine && (from == to || to > line.from)) {
              prevLine = line.from;
              let token = getConfig(state2, pos).line;
              if (!token)
                continue;
              let indent = /^\s*/.exec(line.text)[0].length;
              let empty = indent == line.length;
              let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
              if (indent < line.text.length && indent < minIndent)
                minIndent = indent;
              lines.push({ line, comment, token, indent, empty, single: false });
            }
            pos = line.to + 1;
          }
          if (minIndent < 1e9) {
            for (let i = startI; i < lines.length; i++)
              if (lines[i].indent < lines[i].line.text.length)
                lines[i].indent = minIndent;
          }
          if (lines.length == startI + 1)
            lines[startI].single = true;
        }
        if (option != 2 && lines.some((l) => l.comment < 0 && (!l.empty || l.single))) {
          let changes = [];
          for (let { line, token, indent, empty, single } of lines)
            if (single || !empty)
              changes.push({ from: line.from + indent, insert: token + " " });
          let changeSet = state2.changes(changes);
          return { changes: changeSet, selection: state2.selection.map(changeSet, 1) };
        } else if (option != 1 && lines.some((l) => l.comment >= 0)) {
          let changes = [];
          for (let { line, comment, token } of lines)
            if (comment >= 0) {
              let from = line.from + comment, to = from + token.length;
              if (line.text[to - line.from] == " ")
                to++;
              changes.push({ from, to });
            }
          return { changes };
        }
        return null;
      }
      exports.blockComment = blockComment;
      exports.blockUncomment = blockUncomment;
      exports.commentKeymap = commentKeymap;
      exports.lineComment = lineComment;
      exports.lineUncomment = lineUncomment;
      exports.toggleBlockComment = toggleBlockComment;
      exports.toggleComment = toggleComment;
      exports.toggleLineComment = toggleLineComment;
    }
  });

  // ../../../node_modules/@codemirror/rectangular-selection/dist/index.cjs
  var require_dist19 = __commonJS({
    "../../../node_modules/@codemirror/rectangular-selection/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var view = require_dist4();
      var text = require_dist();
      var MaxOff = 2e3;
      function rectangleFor(state$1, a, b) {
        let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
        let ranges = [];
        if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
          let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
          for (let i = startLine; i <= endLine; i++) {
            let line = state$1.doc.line(i);
            if (line.length <= endOff)
              ranges.push(state.EditorSelection.range(line.from + startOff, line.to + endOff));
          }
        } else {
          let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
          for (let i = startLine; i <= endLine; i++) {
            let line = state$1.doc.line(i);
            let start = text.findColumn(line.text, startCol, state$1.tabSize, true);
            if (start > -1) {
              let end = text.findColumn(line.text, endCol, state$1.tabSize);
              ranges.push(state.EditorSelection.range(line.from + start, line.from + end));
            }
          }
        }
        return ranges;
      }
      function absoluteColumn(view2, x) {
        let ref = view2.coordsAtPos(view2.viewport.from);
        return ref ? Math.round(Math.abs((ref.left - x) / view2.defaultCharacterWidth)) : -1;
      }
      function getPos(view2, event) {
        let offset = view2.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let line = view2.state.doc.lineAt(offset), off = offset - line.from;
        let col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view2, event.clientX) : text.countColumn(line.text, view2.state.tabSize, offset - line.from);
        return { line: line.number, col, off };
      }
      function rectangleSelectionStyle(view2, event) {
        let start = getPos(view2, event), startSel = view2.state.selection;
        if (!start)
          return null;
        return {
          update(update) {
            if (update.docChanged) {
              let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
              let newLine = update.state.doc.lineAt(newStart);
              start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
              startSel = startSel.map(update.changes);
            }
          },
          get(event2, _extend, multiple) {
            let cur = getPos(view2, event2);
            if (!cur)
              return startSel;
            let ranges = rectangleFor(view2.state, start, cur);
            if (!ranges.length)
              return startSel;
            if (multiple)
              return state.EditorSelection.create(ranges.concat(startSel.ranges));
            else
              return state.EditorSelection.create(ranges);
          }
        };
      }
      function rectangularSelection(options) {
        let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e) => e.altKey && e.button == 0);
        return view.EditorView.mouseSelectionStyle.of((view2, event) => filter(event) ? rectangleSelectionStyle(view2, event) : null);
      }
      exports.rectangularSelection = rectangularSelection;
    }
  });

  // ../../../node_modules/@codemirror/highlight/dist/index.cjs
  var require_dist20 = __commonJS({
    "../../../node_modules/@codemirror/highlight/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var common = require_dist6();
      var styleMod = require_style_mod();
      var view = require_dist4();
      var state = require_dist2();
      var language = require_dist7();
      var rangeset = require_dist3();
      var nextTagID = 0;
      var Tag = class {
        constructor(set, base, modified) {
          this.set = set;
          this.base = base;
          this.modified = modified;
          this.id = nextTagID++;
        }
        static define(parent) {
          if (parent === null || parent === void 0 ? void 0 : parent.base)
            throw new Error("Can not derive from a modified tag");
          let tag = new Tag([], null, []);
          tag.set.push(tag);
          if (parent)
            for (let t2 of parent.set)
              tag.set.push(t2);
          return tag;
        }
        static defineModifier() {
          let mod = new Modifier();
          return (tag) => {
            if (tag.modified.indexOf(mod) > -1)
              return tag;
            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
          };
        }
      };
      var nextModifierID = 0;
      var Modifier = class {
        constructor() {
          this.instances = [];
          this.id = nextModifierID++;
        }
        static get(base, mods) {
          if (!mods.length)
            return base;
          let exists = mods[0].instances.find((t2) => t2.base == base && sameArray(mods, t2.modified));
          if (exists)
            return exists;
          let set = [], tag = new Tag(set, base, mods);
          for (let m of mods)
            m.instances.push(tag);
          let configs = permute(mods);
          for (let parent of base.set)
            for (let config of configs)
              set.push(Modifier.get(parent, config));
          return tag;
        }
      };
      function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
      }
      function permute(array) {
        let result = [array];
        for (let i = 0; i < array.length; i++) {
          for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
            result.push(a);
        }
        return result;
      }
      function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
          let tags2 = spec[prop];
          if (!Array.isArray(tags2))
            tags2 = [tags2];
          for (let part of prop.split(" "))
            if (part) {
              let pieces = [], mode = 2, rest = part;
              for (let pos = 0; ; ) {
                if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                  mode = 1;
                  break;
                }
                let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                if (!m)
                  throw new RangeError("Invalid path: " + part);
                pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                pos += m[0].length;
                if (pos == part.length)
                  break;
                let next = part[pos++];
                if (pos == part.length && next == "!") {
                  mode = 0;
                  break;
                }
                if (next != "/")
                  throw new RangeError("Invalid path: " + part);
                rest = part.slice(pos);
              }
              let last = pieces.length - 1, inner = pieces[last];
              if (!inner)
                throw new RangeError("Invalid path: " + part);
              let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
              byName[inner] = rule.sort(byName[inner]);
            }
        }
        return ruleNodeProp.add(byName);
      }
      var ruleNodeProp = new common.NodeProp();
      var highlightStyle = state.Facet.define({
        combine(stylings) {
          return stylings.length ? HighlightStyle.combinedMatch(stylings) : null;
        }
      });
      var fallbackHighlightStyle = state.Facet.define({
        combine(values) {
          return values.length ? values[0].match : null;
        }
      });
      function getHighlightStyle(state2) {
        return state2.facet(highlightStyle) || state2.facet(fallbackHighlightStyle);
      }
      var Rule = class {
        constructor(tags2, mode, context, next) {
          this.tags = tags2;
          this.mode = mode;
          this.context = context;
          this.next = next;
        }
        sort(other) {
          if (!other || other.depth < this.depth) {
            this.next = other;
            return this;
          }
          other.next = this.sort(other.next);
          return other;
        }
        get depth() {
          return this.context ? this.context.length : 0;
        }
      };
      var HighlightStyle = class {
        constructor(spec, options) {
          this.map = Object.create(null);
          let modSpec;
          function def(spec2) {
            let cls = styleMod.StyleModule.newName();
            (modSpec || (modSpec = Object.create(null)))["." + cls] = spec2;
            return cls;
          }
          this.all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : null;
          for (let style of spec) {
            let cls = (style.class || def(Object.assign({}, style, { tag: null }))) + (this.all ? " " + this.all : "");
            let tags2 = style.tag;
            if (!Array.isArray(tags2))
              this.map[tags2.id] = cls;
            else
              for (let tag of tags2)
                this.map[tag.id] = cls;
          }
          this.module = modSpec ? new styleMod.StyleModule(modSpec) : null;
          this.scope = options.scope || null;
          this.match = this.match.bind(this);
          let ext = [treeHighlighter];
          if (this.module)
            ext.push(view.EditorView.styleModule.of(this.module));
          this.extension = ext.concat(highlightStyle.of(this));
          this.fallback = ext.concat(fallbackHighlightStyle.of(this));
        }
        match(tag, scope) {
          if (this.scope && scope != this.scope)
            return null;
          for (let t2 of tag.set) {
            let match = this.map[t2.id];
            if (match !== void 0) {
              if (t2 != tag)
                this.map[tag.id] = match;
              return match;
            }
          }
          return this.map[tag.id] = this.all;
        }
        static combinedMatch(styles) {
          if (styles.length == 1)
            return styles[0].match;
          let cache = styles.some((s) => s.scope) ? void 0 : Object.create(null);
          return (tag, scope) => {
            let cached = cache && cache[tag.id];
            if (cached !== void 0)
              return cached;
            let result = null;
            for (let style of styles) {
              let value = style.match(tag, scope);
              if (value)
                result = result ? result + " " + value : value;
            }
            if (cache)
              cache[tag.id] = result;
            return result;
          };
        }
        static define(specs, options) {
          return new HighlightStyle(specs, options || {});
        }
        static get(state2, tag, scope) {
          let style = getHighlightStyle(state2);
          return style && style(tag, scope || common.NodeType.none);
        }
      };
      function highlightTree(tree, getStyle, putStyle, from = 0, to = tree.length) {
        highlightTreeRange(tree, from, to, getStyle, putStyle);
      }
      var TreeHighlighter = class {
        constructor(view2) {
          this.markCache = Object.create(null);
          this.tree = language.syntaxTree(view2.state);
          this.decorations = this.buildDeco(view2, getHighlightStyle(view2.state));
        }
        update(update) {
          let tree = language.syntaxTree(update.state), style = getHighlightStyle(update.state);
          let styleChange = style != update.startState.facet(highlightStyle);
          if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
            this.decorations = this.decorations.map(update.changes);
          } else if (tree != this.tree || update.viewportChanged || styleChange) {
            this.tree = tree;
            this.decorations = this.buildDeco(update.view, style);
          }
        }
        buildDeco(view$1, match) {
          if (!match || !this.tree.length)
            return view.Decoration.none;
          let builder = new rangeset.RangeSetBuilder();
          for (let { from, to } of view$1.visibleRanges) {
            highlightTreeRange(this.tree, from, to, match, (from2, to2, style) => {
              builder.add(from2, to2, this.markCache[style] || (this.markCache[style] = view.Decoration.mark({ class: style })));
            });
          }
          return builder.finish();
        }
      };
      var treeHighlighter = state.Prec.extend(view.ViewPlugin.fromClass(TreeHighlighter, {
        decorations: (v) => v.decorations
      }));
      var nodeStack = [""];
      var HighlightBuilder = class {
        constructor(at, style, span) {
          this.at = at;
          this.style = style;
          this.span = span;
          this.class = "";
        }
        startSpan(at, cls) {
          if (cls != this.class) {
            this.flush(at);
            if (at > this.at)
              this.at = at;
            this.class = cls;
          }
        }
        flush(to) {
          if (to > this.at && this.class)
            this.span(this.at, to, this.class);
        }
        highlightRange(cursor, from, to, inheritedClass, depth, scope) {
          let { type, from: start, to: end } = cursor;
          if (start >= to || end <= from)
            return;
          nodeStack[depth] = type.name;
          if (type.isTop)
            scope = type;
          let cls = inheritedClass;
          let rule = type.prop(ruleNodeProp), opaque = false;
          while (rule) {
            if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
              for (let tag of rule.tags) {
                let st = this.style(tag, scope);
                if (st) {
                  if (cls)
                    cls += " ";
                  cls += st;
                  if (rule.mode == 1)
                    inheritedClass += (inheritedClass ? " " : "") + st;
                  else if (rule.mode == 0)
                    opaque = true;
                }
              }
              break;
            }
            rule = rule.next;
          }
          this.startSpan(cursor.from, cls);
          if (opaque)
            return;
          let mounted = cursor.tree && cursor.tree.prop(common.NodeProp.mounted);
          if (mounted && mounted.overlay) {
            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
            let hasChild = cursor.firstChild();
            for (let i = 0, pos = start; ; i++) {
              let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
              let nextPos = next ? next.from + start : end;
              let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
              if (rangeFrom < rangeTo && hasChild) {
                while (cursor.from < rangeTo) {
                  this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, depth + 1, scope);
                  this.startSpan(Math.min(to, cursor.to), cls);
                  if (cursor.to >= nextPos || !cursor.nextSibling())
                    break;
                }
              }
              if (!next || nextPos > to)
                break;
              pos = next.to + start;
              if (pos > from) {
                this.highlightRange(inner.cursor, Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, depth, mounted.tree.type);
                this.startSpan(pos, cls);
              }
            }
            if (hasChild)
              cursor.parent();
          } else if (cursor.firstChild()) {
            do {
              if (cursor.to <= from)
                continue;
              if (cursor.from >= to)
                break;
              this.highlightRange(cursor, from, to, inheritedClass, depth + 1, scope);
              this.startSpan(Math.min(to, cursor.to), cls);
            } while (cursor.nextSibling());
            cursor.parent();
          }
        }
      };
      function highlightTreeRange(tree, from, to, style, span) {
        let builder = new HighlightBuilder(from, style, span);
        builder.highlightRange(tree.cursor(), from, to, "", 0, tree.type);
        builder.flush(to);
      }
      function matchContext(context, stack, depth) {
        if (context.length > depth - 1)
          return false;
        for (let d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {
          let check = context[i];
          if (check && check != stack[d])
            return false;
        }
        return true;
      }
      var t = Tag.define;
      var comment = t();
      var name = t();
      var typeName = t(name);
      var propertyName = t(name);
      var literal = t();
      var string = t(literal);
      var number = t(literal);
      var content = t();
      var heading = t(content);
      var keyword = t();
      var operator = t();
      var punctuation = t();
      var bracket = t(punctuation);
      var meta = t();
      var tags = {
        comment,
        lineComment: t(comment),
        blockComment: t(comment),
        docComment: t(comment),
        name,
        variableName: t(name),
        typeName,
        tagName: t(typeName),
        propertyName,
        attributeName: t(propertyName),
        className: t(name),
        labelName: t(name),
        namespace: t(name),
        macroName: t(name),
        literal,
        string,
        docString: t(string),
        character: t(string),
        attributeValue: t(string),
        number,
        integer: t(number),
        float: t(number),
        bool: t(literal),
        regexp: t(literal),
        escape: t(literal),
        color: t(literal),
        url: t(literal),
        keyword,
        self: t(keyword),
        null: t(keyword),
        atom: t(keyword),
        unit: t(keyword),
        modifier: t(keyword),
        operatorKeyword: t(keyword),
        controlKeyword: t(keyword),
        definitionKeyword: t(keyword),
        operator,
        derefOperator: t(operator),
        arithmeticOperator: t(operator),
        logicOperator: t(operator),
        bitwiseOperator: t(operator),
        compareOperator: t(operator),
        updateOperator: t(operator),
        definitionOperator: t(operator),
        typeOperator: t(operator),
        controlOperator: t(operator),
        punctuation,
        separator: t(punctuation),
        bracket,
        angleBracket: t(bracket),
        squareBracket: t(bracket),
        paren: t(bracket),
        brace: t(bracket),
        content,
        heading,
        heading1: t(heading),
        heading2: t(heading),
        heading3: t(heading),
        heading4: t(heading),
        heading5: t(heading),
        heading6: t(heading),
        contentSeparator: t(content),
        list: t(content),
        quote: t(content),
        emphasis: t(content),
        strong: t(content),
        link: t(content),
        monospace: t(content),
        strikethrough: t(content),
        inserted: t(),
        deleted: t(),
        changed: t(),
        invalid: t(),
        meta,
        documentMeta: t(meta),
        annotation: t(meta),
        processingInstruction: t(meta),
        definition: Tag.defineModifier(),
        constant: Tag.defineModifier(),
        function: Tag.defineModifier(),
        standard: Tag.defineModifier(),
        local: Tag.defineModifier(),
        special: Tag.defineModifier()
      };
      var defaultHighlightStyle = HighlightStyle.define([
        {
          tag: tags.link,
          textDecoration: "underline"
        },
        {
          tag: tags.heading,
          textDecoration: "underline",
          fontWeight: "bold"
        },
        {
          tag: tags.emphasis,
          fontStyle: "italic"
        },
        {
          tag: tags.strong,
          fontWeight: "bold"
        },
        {
          tag: tags.strikethrough,
          textDecoration: "line-through"
        },
        {
          tag: tags.keyword,
          color: "#708"
        },
        {
          tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
          color: "#219"
        },
        {
          tag: [tags.literal, tags.inserted],
          color: "#164"
        },
        {
          tag: [tags.string, tags.deleted],
          color: "#a11"
        },
        {
          tag: [tags.regexp, tags.escape, tags.special(tags.string)],
          color: "#e40"
        },
        {
          tag: tags.definition(tags.variableName),
          color: "#00f"
        },
        {
          tag: tags.local(tags.variableName),
          color: "#30a"
        },
        {
          tag: [tags.typeName, tags.namespace],
          color: "#085"
        },
        {
          tag: tags.className,
          color: "#167"
        },
        {
          tag: [tags.special(tags.variableName), tags.macroName],
          color: "#256"
        },
        {
          tag: tags.definition(tags.propertyName),
          color: "#00c"
        },
        {
          tag: tags.comment,
          color: "#940"
        },
        {
          tag: tags.meta,
          color: "#7a757a"
        },
        {
          tag: tags.invalid,
          color: "#f00"
        }
      ]);
      var classHighlightStyle = HighlightStyle.define([
        { tag: tags.link, class: "cmt-link" },
        { tag: tags.heading, class: "cmt-heading" },
        { tag: tags.emphasis, class: "cmt-emphasis" },
        { tag: tags.strong, class: "cmt-strong" },
        { tag: tags.keyword, class: "cmt-keyword" },
        { tag: tags.atom, class: "cmt-atom" },
        { tag: tags.bool, class: "cmt-bool" },
        { tag: tags.url, class: "cmt-url" },
        { tag: tags.labelName, class: "cmt-labelName" },
        { tag: tags.inserted, class: "cmt-inserted" },
        { tag: tags.deleted, class: "cmt-deleted" },
        { tag: tags.literal, class: "cmt-literal" },
        { tag: tags.string, class: "cmt-string" },
        { tag: tags.number, class: "cmt-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "cmt-string2" },
        { tag: tags.variableName, class: "cmt-variableName" },
        { tag: tags.local(tags.variableName), class: "cmt-variableName cmt-local" },
        { tag: tags.definition(tags.variableName), class: "cmt-variableName cmt-definition" },
        { tag: tags.special(tags.variableName), class: "cmt-variableName2" },
        { tag: tags.typeName, class: "cmt-typeName" },
        { tag: tags.namespace, class: "cmt-namespace" },
        { tag: tags.macroName, class: "cmt-macroName" },
        { tag: tags.propertyName, class: "cmt-propertyName" },
        { tag: tags.operator, class: "cmt-operator" },
        { tag: tags.comment, class: "cmt-comment" },
        { tag: tags.meta, class: "cmt-meta" },
        { tag: tags.invalid, class: "cmt-invalid" },
        { tag: tags.punctuation, class: "cmt-punctuation" }
      ]);
      exports.HighlightStyle = HighlightStyle;
      exports.Tag = Tag;
      exports.classHighlightStyle = classHighlightStyle;
      exports.defaultHighlightStyle = defaultHighlightStyle;
      exports.highlightTree = highlightTree;
      exports.styleTags = styleTags;
      exports.tags = tags;
    }
  });

  // ../../../node_modules/@codemirror/lint/dist/index.cjs
  var require_dist21 = __commonJS({
    "../../../node_modules/@codemirror/lint/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var state = require_dist2();
      var tooltip = require_dist16();
      var panel = require_dist13();
      var gutter = require_dist8();
      var rangeset = require_dist3();
      var elt = require_dist14();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var elt__default = /* @__PURE__ */ _interopDefaultLegacy(elt);
      var SelectedDiagnostic = class {
        constructor(from, to, diagnostic) {
          this.from = from;
          this.to = to;
          this.diagnostic = diagnostic;
        }
      };
      var LintState = class {
        constructor(diagnostics, panel2, selected) {
          this.diagnostics = diagnostics;
          this.panel = panel2;
          this.selected = selected;
        }
        static init(diagnostics, panel2, state2) {
          let ranges = view.Decoration.set(diagnostics.map((d) => {
            return d.from == d.to || d.from == d.to - 1 && state2.doc.lineAt(d.from).to == d.from ? view.Decoration.widget({
              widget: new DiagnosticWidget(d),
              diagnostic: d
            }).range(d.from) : view.Decoration.mark({
              attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
              diagnostic: d
            }).range(d.from, d.to);
          }), true);
          return new LintState(ranges, panel2, findDiagnostic(ranges));
        }
      };
      function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
        let found = null;
        diagnostics.between(after, 1e9, (from, to, { spec }) => {
          if (diagnostic && spec.diagnostic != diagnostic)
            return;
          found = new SelectedDiagnostic(from, to, spec.diagnostic);
          return false;
        });
        return found;
      }
      function maybeEnableLint(state$1, effects) {
        return state$1.field(lintState, false) ? effects : effects.concat(state.StateEffect.appendConfig.of([
          lintState,
          view.EditorView.decorations.compute([lintState], (state2) => {
            let { selected, panel: panel2 } = state2.field(lintState);
            return !selected || !panel2 || selected.from == selected.to ? view.Decoration.none : view.Decoration.set([
              activeMark.range(selected.from, selected.to)
            ]);
          }),
          tooltip.hoverTooltip(lintTooltip),
          baseTheme
        ]));
      }
      function setDiagnostics(state2, diagnostics) {
        return {
          effects: maybeEnableLint(state2, [setDiagnosticsEffect.of(diagnostics)])
        };
      }
      var setDiagnosticsEffect = state.StateEffect.define();
      var togglePanel = state.StateEffect.define();
      var movePanelSelection = state.StateEffect.define();
      var lintState = state.StateField.define({
        create() {
          return new LintState(view.Decoration.none, null, null);
        },
        update(value, tr) {
          if (tr.docChanged) {
            let mapped = value.diagnostics.map(tr.changes), selected = null;
            if (value.selected) {
              let selPos = tr.changes.mapPos(value.selected.from, 1);
              selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
            }
            value = new LintState(mapped, value.panel, selected);
          }
          for (let effect of tr.effects) {
            if (effect.is(setDiagnosticsEffect)) {
              value = LintState.init(effect.value, value.panel, tr.state);
            } else if (effect.is(togglePanel)) {
              value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
            } else if (effect.is(movePanelSelection)) {
              value = new LintState(value.diagnostics, value.panel, effect.value);
            }
          }
          return value;
        },
        provide: (f) => [
          panel.showPanel.from(f, (val) => val.panel),
          view.EditorView.decorations.from(f, (s) => s.diagnostics)
        ]
      });
      function diagnosticCount(state2) {
        let lint = state2.field(lintState, false);
        return lint ? lint.diagnostics.size : 0;
      }
      var activeMark = view.Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
      function lintTooltip(view2, pos, side) {
        let { diagnostics } = view2.state.field(lintState);
        let found = [], stackStart = 2e8, stackEnd = 0;
        diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
          if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
            found.push(spec.diagnostic);
            stackStart = Math.min(from, stackStart);
            stackEnd = Math.max(to, stackEnd);
          }
        });
        if (!found.length)
          return null;
        return {
          pos: stackStart,
          end: stackEnd,
          above: view2.state.doc.lineAt(stackStart).to < stackEnd,
          create() {
            return { dom: diagnosticsTooltip(view2, found) };
          }
        };
      }
      function diagnosticsTooltip(view2, diagnostics) {
        return elt__default["default"]("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d) => renderDiagnostic(view2, d, false)));
      }
      var openLintPanel = (view2) => {
        let field = view2.state.field(lintState, false);
        if (!field || !field.panel)
          view2.dispatch({ effects: maybeEnableLint(view2.state, [togglePanel.of(true)]) });
        let panel$1 = panel.getPanel(view2, LintPanel.open);
        if (panel$1)
          panel$1.dom.querySelector(".cm-panel-lint ul").focus();
        return true;
      };
      var closeLintPanel = (view2) => {
        let field = view2.state.field(lintState, false);
        if (!field || !field.panel)
          return false;
        view2.dispatch({ effects: togglePanel.of(false) });
        return true;
      };
      var nextDiagnostic = (view2) => {
        let field = view2.state.field(lintState, false);
        if (!field)
          return false;
        let sel = view2.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
        if (!next.value) {
          next = field.diagnostics.iter(0);
          if (!next.value || next.from == sel.from && next.to == sel.to)
            return false;
        }
        view2.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
        return true;
      };
      var lintKeymap = [
        { key: "Mod-Shift-m", run: openLintPanel },
        { key: "F8", run: nextDiagnostic }
      ];
      var lintPlugin = view.ViewPlugin.fromClass(class {
        constructor(view2) {
          this.view = view2;
          this.timeout = -1;
          this.set = true;
          let { delay } = view2.state.facet(lintSource);
          this.lintTime = Date.now() + delay;
          this.run = this.run.bind(this);
          this.timeout = setTimeout(this.run, delay);
        }
        run() {
          let now = Date.now();
          if (now < this.lintTime - 10) {
            setTimeout(this.run, this.lintTime - now);
          } else {
            this.set = false;
            let { state: state2 } = this.view, { sources } = state2.facet(lintSource);
            Promise.all(sources.map((source) => Promise.resolve(source(this.view)))).then((annotations) => {
              var _a, _b;
              let all = annotations.reduce((a, b) => a.concat(b));
              if (this.view.state.doc == state2.doc && (all.length || ((_b = (_a = this.view.state.field(lintState, false)) === null || _a === void 0 ? void 0 : _a.diagnostics) === null || _b === void 0 ? void 0 : _b.size)))
                this.view.dispatch(setDiagnostics(this.view.state, all));
            }, (error) => {
              view.logException(this.view.state, error);
            });
          }
        }
        update(update) {
          let source = update.state.facet(lintSource);
          if (update.docChanged || source != update.startState.facet(lintSource)) {
            this.lintTime = Date.now() + source.delay;
            if (!this.set) {
              this.set = true;
              this.timeout = setTimeout(this.run, source.delay);
            }
          }
        }
        force() {
          if (this.set) {
            this.lintTime = Date.now();
            this.run();
          }
        }
        destroy() {
          clearTimeout(this.timeout);
        }
      });
      var lintSource = state.Facet.define({
        combine(input) {
          return { sources: input.map((i) => i.source), delay: input.length ? Math.max(...input.map((i) => i.delay)) : 750 };
        },
        enables: lintPlugin
      });
      function linter(source, config = {}) {
        var _a;
        return lintSource.of({ source, delay: (_a = config.delay) !== null && _a !== void 0 ? _a : 750 });
      }
      function forceLinting(view2) {
        let plugin = view2.plugin(lintPlugin);
        if (plugin)
          plugin.force();
      }
      function assignKeys(actions) {
        let assigned = [];
        if (actions)
          actions:
            for (let { name } of actions) {
              for (let i = 0; i < name.length; i++) {
                let ch = name[i];
                if (/[a-zA-Z]/.test(ch) && !assigned.some((c) => c.toLowerCase() == ch.toLowerCase())) {
                  assigned.push(ch);
                  continue actions;
                }
              }
              assigned.push("");
            }
        return assigned;
      }
      function renderDiagnostic(view2, diagnostic, inPanel) {
        var _a;
        let keys = inPanel ? assignKeys(diagnostic.actions) : [];
        return elt__default["default"]("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, elt__default["default"]("span", { class: "cm-diagnosticText" }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
          let click = (e) => {
            e.preventDefault();
            let found = findDiagnostic(view2.state.field(lintState).diagnostics, diagnostic);
            if (found)
              action.apply(view2, found.from, found.to);
          };
          let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
          let nameElt = keyIndex < 0 ? name : [
            name.slice(0, keyIndex),
            elt__default["default"]("u", name.slice(keyIndex, keyIndex + 1)),
            name.slice(keyIndex + 1)
          ];
          return elt__default["default"]("button", {
            type: "button",
            class: "cm-diagnosticAction",
            onclick: click,
            onmousedown: click,
            "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
          }, nameElt);
        }), diagnostic.source && elt__default["default"]("div", { class: "cm-diagnosticSource" }, diagnostic.source));
      }
      var DiagnosticWidget = class extends view.WidgetType {
        constructor(diagnostic) {
          super();
          this.diagnostic = diagnostic;
        }
        eq(other) {
          return other.diagnostic == this.diagnostic;
        }
        toDOM() {
          return elt__default["default"]("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
        }
      };
      var PanelItem = class {
        constructor(view2, diagnostic) {
          this.diagnostic = diagnostic;
          this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
          this.dom = renderDiagnostic(view2, diagnostic, true);
          this.dom.id = this.id;
          this.dom.setAttribute("role", "option");
        }
      };
      var LintPanel = class {
        constructor(view2) {
          this.view = view2;
          this.items = [];
          let onkeydown = (event) => {
            if (event.keyCode == 27) {
              closeLintPanel(this.view);
              this.view.focus();
            } else if (event.keyCode == 38 || event.keyCode == 33) {
              this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
            } else if (event.keyCode == 40 || event.keyCode == 34) {
              this.moveSelection((this.selectedIndex + 1) % this.items.length);
            } else if (event.keyCode == 36) {
              this.moveSelection(0);
            } else if (event.keyCode == 35) {
              this.moveSelection(this.items.length - 1);
            } else if (event.keyCode == 13) {
              this.view.focus();
            } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
              let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
              for (let i = 0; i < keys.length; i++)
                if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
                  let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                  if (found)
                    diagnostic.actions[i].apply(view2, found.from, found.to);
                }
            } else {
              return;
            }
            event.preventDefault();
          };
          let onclick = (event) => {
            for (let i = 0; i < this.items.length; i++) {
              if (this.items[i].dom.contains(event.target))
                this.moveSelection(i);
            }
          };
          this.list = elt__default["default"]("ul", {
            tabIndex: 0,
            role: "listbox",
            "aria-label": this.view.state.phrase("Diagnostics"),
            onkeydown,
            onclick
          });
          this.dom = elt__default["default"]("div", { class: "cm-panel-lint" }, this.list, elt__default["default"]("button", {
            type: "button",
            name: "close",
            "aria-label": this.view.state.phrase("close"),
            onclick: () => closeLintPanel(this.view)
          }, "\xD7"));
          this.update();
        }
        get selectedIndex() {
          let selected = this.view.state.field(lintState).selected;
          if (!selected)
            return -1;
          for (let i = 0; i < this.items.length; i++)
            if (this.items[i].diagnostic == selected.diagnostic)
              return i;
          return -1;
        }
        update() {
          let { diagnostics, selected } = this.view.state.field(lintState);
          let i = 0, needsSync = false, newSelectedItem = null;
          diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
            let found = -1, item;
            for (let j = i; j < this.items.length; j++)
              if (this.items[j].diagnostic == spec.diagnostic) {
                found = j;
                break;
              }
            if (found < 0) {
              item = new PanelItem(this.view, spec.diagnostic);
              this.items.splice(i, 0, item);
              needsSync = true;
            } else {
              item = this.items[found];
              if (found > i) {
                this.items.splice(i, found - i);
                needsSync = true;
              }
            }
            if (selected && item.diagnostic == selected.diagnostic) {
              if (!item.dom.hasAttribute("aria-selected")) {
                item.dom.setAttribute("aria-selected", "true");
                newSelectedItem = item;
              }
            } else if (item.dom.hasAttribute("aria-selected")) {
              item.dom.removeAttribute("aria-selected");
            }
            i++;
          });
          while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
            needsSync = true;
            this.items.pop();
          }
          if (this.items.length == 0) {
            this.items.push(new PanelItem(this.view, {
              from: -1,
              to: -1,
              severity: "info",
              message: this.view.state.phrase("No diagnostics")
            }));
            needsSync = true;
          }
          if (newSelectedItem) {
            this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
            this.view.requestMeasure({
              key: this,
              read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
              write: ({ sel, panel: panel2 }) => {
                if (sel.top < panel2.top)
                  this.list.scrollTop -= panel2.top - sel.top;
                else if (sel.bottom > panel2.bottom)
                  this.list.scrollTop += sel.bottom - panel2.bottom;
              }
            });
          } else if (this.selectedIndex < 0) {
            this.list.removeAttribute("aria-activedescendant");
          }
          if (needsSync)
            this.sync();
        }
        sync() {
          let domPos = this.list.firstChild;
          function rm() {
            let prev = domPos;
            domPos = prev.nextSibling;
            prev.remove();
          }
          for (let item of this.items) {
            if (item.dom.parentNode == this.list) {
              while (domPos != item.dom)
                rm();
              domPos = item.dom.nextSibling;
            } else {
              this.list.insertBefore(item.dom, domPos);
            }
          }
          while (domPos)
            rm();
        }
        moveSelection(selectedIndex) {
          if (this.selectedIndex < 0)
            return;
          let field = this.view.state.field(lintState);
          let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
          if (!selection)
            return;
          this.view.dispatch({
            selection: { anchor: selection.from, head: selection.to },
            scrollIntoView: true,
            effects: movePanelSelection.of(selection)
          });
        }
        static open(view2) {
          return new LintPanel(view2);
        }
      };
      function svg(content, attrs = `viewBox="0 0 40 40"`) {
        return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content)}</svg>')`;
      }
      function underline(color) {
        return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
      }
      var baseTheme = view.EditorView.baseTheme({
        ".cm-diagnostic": {
          padding: "3px 6px 3px 8px",
          marginLeft: "-1px",
          display: "block",
          whiteSpace: "pre-wrap"
        },
        ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
        ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
        ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
        ".cm-diagnosticAction": {
          font: "inherit",
          border: "none",
          padding: "2px 4px",
          backgroundColor: "#444",
          color: "white",
          borderRadius: "3px",
          marginLeft: "8px"
        },
        ".cm-diagnosticSource": {
          fontSize: "70%",
          opacity: 0.7
        },
        ".cm-lintRange": {
          backgroundPosition: "left bottom",
          backgroundRepeat: "repeat-x",
          paddingBottom: "0.7px"
        },
        ".cm-lintRange-error": { backgroundImage: underline("#d11") },
        ".cm-lintRange-warning": { backgroundImage: underline("orange") },
        ".cm-lintRange-info": { backgroundImage: underline("#999") },
        ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
        ".cm-tooltip-lint": {
          padding: 0,
          margin: 0
        },
        ".cm-lintPoint": {
          position: "relative",
          "&:after": {
            content: '""',
            position: "absolute",
            bottom: 0,
            left: "-2px",
            borderLeft: "3px solid transparent",
            borderRight: "3px solid transparent",
            borderBottom: "4px solid #d11"
          }
        },
        ".cm-lintPoint-warning": {
          "&:after": { borderBottomColor: "orange" }
        },
        ".cm-lintPoint-info": {
          "&:after": { borderBottomColor: "#999" }
        },
        ".cm-panel.cm-panel-lint": {
          position: "relative",
          "& ul": {
            maxHeight: "100px",
            overflowY: "auto",
            "& [aria-selected]": {
              backgroundColor: "#ddd",
              "& u": { textDecoration: "underline" }
            },
            "&:focus [aria-selected]": {
              background_fallback: "#bdf",
              backgroundColor: "Highlight",
              color_fallback: "white",
              color: "HighlightText"
            },
            "& u": { textDecoration: "none" },
            padding: 0,
            margin: 0
          },
          "& [name=close]": {
            position: "absolute",
            top: "0",
            right: "2px",
            background: "inherit",
            border: "none",
            font: "inherit",
            padding: 0,
            margin: 0
          }
        }
      });
      var LintGutterMarker = class extends gutter.GutterMarker {
        constructor(diagnostics) {
          super();
          this.diagnostics = diagnostics;
          this.severity = diagnostics.reduce((max, d) => {
            let s = d.severity;
            return s == "error" || s == "warning" && max == "info" ? s : max;
          }, "info");
        }
        toDOM(view2) {
          let elt2 = document.createElement("div");
          elt2.className = "cm-lint-marker cm-lint-marker-" + this.severity;
          elt2.onmouseover = () => gutterMarkerMouseOver(view2, elt2, this.diagnostics);
          return elt2;
        }
      };
      function trackHoverOn(view2, marker) {
        let mousemove = (event) => {
          let rect = marker.getBoundingClientRect();
          if (event.clientX > rect.left - 10 && event.clientX < rect.right + 10 && event.clientY > rect.top - 10 && event.clientY < rect.bottom + 10)
            return;
          for (let target = event.target; target; target = target.parentNode) {
            if (target.nodeType == 1 && target.classList.contains("cm-tooltip-lint"))
              return;
          }
          window.removeEventListener("mousemove", mousemove);
          if (view2.state.field(lintGutterTooltip))
            view2.dispatch({ effects: setLintGutterTooltip.of(null) });
        };
        window.addEventListener("mousemove", mousemove);
      }
      function gutterMarkerMouseOver(view2, marker, diagnostics) {
        function hovered() {
          let line = view2.visualLineAtHeight(marker.getBoundingClientRect().top + 5);
          const linePos = view2.coordsAtPos(line.from), markerRect = marker.getBoundingClientRect();
          if (linePos) {
            view2.dispatch({ effects: setLintGutterTooltip.of({
              pos: line.from,
              above: false,
              create() {
                return {
                  dom: diagnosticsTooltip(view2, diagnostics),
                  offset: { x: markerRect.left - linePos.left, y: 0 }
                };
              }
            }) });
          }
          marker.onmouseout = marker.onmousemove = null;
          trackHoverOn(view2, marker);
        }
        let hoverTimeout = setTimeout(hovered, 600);
        marker.onmouseout = () => {
          clearTimeout(hoverTimeout);
          marker.onmouseout = marker.onmousemove = null;
        };
        marker.onmousemove = () => {
          clearTimeout(hoverTimeout);
          hoverTimeout = setTimeout(hovered, 600);
        };
      }
      function markersForDiagnostics(doc, diagnostics) {
        let byLine = Object.create(null);
        for (let diagnostic of diagnostics) {
          let line = doc.lineAt(diagnostic.from);
          (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);
        }
        let markers = [];
        for (let line in byLine) {
          markers.push(new LintGutterMarker(byLine[line]).range(+line));
        }
        return rangeset.RangeSet.of(markers, true);
      }
      var lintGutterExtension = gutter.gutter({
        class: "cm-gutter-lint",
        markers: (view2) => view2.state.field(lintGutterMarkers)
      });
      var lintGutterMarkers = state.StateField.define({
        create() {
          return rangeset.RangeSet.empty;
        },
        update(markers, tr) {
          markers = markers.map(tr.changes);
          for (let effect of tr.effects)
            if (effect.is(setDiagnosticsEffect)) {
              markers = markersForDiagnostics(tr.state.doc, effect.value);
            }
          return markers;
        }
      });
      var setLintGutterTooltip = state.StateEffect.define();
      var lintGutterTooltip = state.StateField.define({
        create() {
          return null;
        },
        update(tooltip2, tr) {
          if (tooltip2 && tr.docChanged)
            tooltip2 = Object.assign(Object.assign({}, tooltip2), { pos: tr.changes.mapPos(tooltip2.pos) });
          return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip2);
        },
        provide: (field) => tooltip.showTooltip.from(field)
      });
      var lintGutterTheme = view.EditorView.baseTheme({
        ".cm-gutter-lint": {
          width: "1.4em",
          "& .cm-gutterElement": {
            padding: "0 .2em",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center"
          }
        },
        ".cm-lint-marker": {
          width: "1em",
          height: "1em"
        },
        ".cm-lint-marker-info": {
          content: svg(`<path fill="#aaf" stroke="#77e" stroke-width="6" stroke-linejoin="round" d="M5 5L35 5L35 35L5 35Z"/>`)
        },
        ".cm-lint-marker-warning": {
          content: svg(`<path fill="#fe8" stroke="#fd7" stroke-width="6" stroke-linejoin="round" d="M20 6L37 35L3 35Z"/>`)
        },
        ".cm-lint-marker-error:before": {
          content: svg(`<circle cx="20" cy="20" r="15" fill="#f87" stroke="#f43" stroke-width="6"/>`)
        }
      });
      function lintGutter() {
        return [lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];
      }
      exports.closeLintPanel = closeLintPanel;
      exports.diagnosticCount = diagnosticCount;
      exports.forceLinting = forceLinting;
      exports.lintGutter = lintGutter;
      exports.lintKeymap = lintKeymap;
      exports.linter = linter;
      exports.nextDiagnostic = nextDiagnostic;
      exports.openLintPanel = openLintPanel;
      exports.setDiagnostics = setDiagnostics;
      exports.setDiagnosticsEffect = setDiagnosticsEffect;
    }
  });

  // ../../../node_modules/@codemirror/basic-setup/dist/index.cjs
  var require_dist22 = __commonJS({
    "../../../node_modules/@codemirror/basic-setup/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var view = require_dist4();
      var state = require_dist2();
      var history = require_dist5();
      var fold = require_dist9();
      var language = require_dist7();
      var gutter = require_dist8();
      var commands = require_dist11();
      var matchbrackets = require_dist10();
      var closebrackets = require_dist12();
      var search = require_dist15();
      var autocomplete = require_dist17();
      var comment = require_dist18();
      var rectangularSelection = require_dist19();
      var highlight = require_dist20();
      var lint = require_dist21();
      var basicSetup = [
        gutter.lineNumbers(),
        gutter.highlightActiveLineGutter(),
        view.highlightSpecialChars(),
        history.history(),
        fold.foldGutter(),
        view.drawSelection(),
        state.EditorState.allowMultipleSelections.of(true),
        language.indentOnInput(),
        highlight.defaultHighlightStyle.fallback,
        matchbrackets.bracketMatching(),
        closebrackets.closeBrackets(),
        autocomplete.autocompletion(),
        rectangularSelection.rectangularSelection(),
        view.highlightActiveLine(),
        search.highlightSelectionMatches(),
        view.keymap.of([
          ...closebrackets.closeBracketsKeymap,
          ...commands.defaultKeymap,
          ...search.searchKeymap,
          ...history.historyKeymap,
          ...fold.foldKeymap,
          ...comment.commentKeymap,
          ...autocomplete.completionKeymap,
          ...lint.lintKeymap
        ])
      ];
      Object.defineProperty(exports, "EditorView", {
        enumerable: true,
        get: function() {
          return view.EditorView;
        }
      });
      Object.defineProperty(exports, "EditorState", {
        enumerable: true,
        get: function() {
          return state.EditorState;
        }
      });
      exports.basicSetup = basicSetup;
    }
  });

  // ../../../node_modules/@lezer/markdown/dist/index.cjs
  var require_dist23 = __commonJS({
    "../../../node_modules/@lezer/markdown/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var common = require_dist6();
      var CompositeBlock = class {
        constructor(type, value, from, hash, end, children, positions) {
          this.type = type;
          this.value = value;
          this.from = from;
          this.hash = hash;
          this.end = end;
          this.children = children;
          this.positions = positions;
          this.hashProp = [[common.NodeProp.contextHash, hash]];
        }
        static create(type, value, from, parentHash, end) {
          let hash = parentHash + (parentHash << 8) + type + (value << 4) | 0;
          return new CompositeBlock(type, value, from, hash, end, [], []);
        }
        addChild(child, pos) {
          if (child.prop(common.NodeProp.contextHash) != this.hash)
            child = new common.Tree(child.type, child.children, child.positions, child.length, this.hashProp);
          this.children.push(child);
          this.positions.push(pos);
        }
        toTree(nodeSet, end = this.end) {
          let last = this.children.length - 1;
          if (last >= 0)
            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
          let tree = new common.Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
            makeTree: (children, positions, length) => new common.Tree(common.NodeType.none, children, positions, length, this.hashProp)
          });
          return tree;
        }
      };
      var Type;
      (function(Type2) {
        Type2[Type2["Document"] = 1] = "Document";
        Type2[Type2["CodeBlock"] = 2] = "CodeBlock";
        Type2[Type2["FencedCode"] = 3] = "FencedCode";
        Type2[Type2["Blockquote"] = 4] = "Blockquote";
        Type2[Type2["HorizontalRule"] = 5] = "HorizontalRule";
        Type2[Type2["BulletList"] = 6] = "BulletList";
        Type2[Type2["OrderedList"] = 7] = "OrderedList";
        Type2[Type2["ListItem"] = 8] = "ListItem";
        Type2[Type2["ATXHeading1"] = 9] = "ATXHeading1";
        Type2[Type2["ATXHeading2"] = 10] = "ATXHeading2";
        Type2[Type2["ATXHeading3"] = 11] = "ATXHeading3";
        Type2[Type2["ATXHeading4"] = 12] = "ATXHeading4";
        Type2[Type2["ATXHeading5"] = 13] = "ATXHeading5";
        Type2[Type2["ATXHeading6"] = 14] = "ATXHeading6";
        Type2[Type2["SetextHeading1"] = 15] = "SetextHeading1";
        Type2[Type2["SetextHeading2"] = 16] = "SetextHeading2";
        Type2[Type2["HTMLBlock"] = 17] = "HTMLBlock";
        Type2[Type2["LinkReference"] = 18] = "LinkReference";
        Type2[Type2["Paragraph"] = 19] = "Paragraph";
        Type2[Type2["CommentBlock"] = 20] = "CommentBlock";
        Type2[Type2["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
        Type2[Type2["Escape"] = 22] = "Escape";
        Type2[Type2["Entity"] = 23] = "Entity";
        Type2[Type2["HardBreak"] = 24] = "HardBreak";
        Type2[Type2["Emphasis"] = 25] = "Emphasis";
        Type2[Type2["StrongEmphasis"] = 26] = "StrongEmphasis";
        Type2[Type2["Link"] = 27] = "Link";
        Type2[Type2["Image"] = 28] = "Image";
        Type2[Type2["InlineCode"] = 29] = "InlineCode";
        Type2[Type2["HTMLTag"] = 30] = "HTMLTag";
        Type2[Type2["Comment"] = 31] = "Comment";
        Type2[Type2["ProcessingInstruction"] = 32] = "ProcessingInstruction";
        Type2[Type2["URL"] = 33] = "URL";
        Type2[Type2["HeaderMark"] = 34] = "HeaderMark";
        Type2[Type2["QuoteMark"] = 35] = "QuoteMark";
        Type2[Type2["ListMark"] = 36] = "ListMark";
        Type2[Type2["LinkMark"] = 37] = "LinkMark";
        Type2[Type2["EmphasisMark"] = 38] = "EmphasisMark";
        Type2[Type2["CodeMark"] = 39] = "CodeMark";
        Type2[Type2["CodeText"] = 40] = "CodeText";
        Type2[Type2["CodeInfo"] = 41] = "CodeInfo";
        Type2[Type2["LinkTitle"] = 42] = "LinkTitle";
        Type2[Type2["LinkLabel"] = 43] = "LinkLabel";
      })(Type || (Type = {}));
      var LeafBlock = class {
        constructor(start, content) {
          this.start = start;
          this.content = content;
          this.marks = [];
          this.parsers = [];
        }
      };
      var Line = class {
        constructor() {
          this.text = "";
          this.baseIndent = 0;
          this.basePos = 0;
          this.depth = 0;
          this.markers = [];
          this.pos = 0;
          this.indent = 0;
          this.next = -1;
        }
        forward() {
          if (this.basePos > this.pos)
            this.forwardInner();
        }
        forwardInner() {
          let newPos = this.skipSpace(this.basePos);
          this.indent = this.countIndent(newPos, this.pos, this.indent);
          this.pos = newPos;
          this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
        }
        skipSpace(from) {
          return skipSpace(this.text, from);
        }
        reset(text) {
          this.text = text;
          this.baseIndent = this.basePos = this.pos = this.indent = 0;
          this.forwardInner();
          this.depth = 1;
          while (this.markers.length)
            this.markers.pop();
        }
        moveBase(to) {
          this.basePos = to;
          this.baseIndent = this.countIndent(to, this.pos, this.indent);
        }
        moveBaseColumn(indent) {
          this.baseIndent = indent;
          this.basePos = this.findColumn(indent);
        }
        addMarker(elt2) {
          this.markers.push(elt2);
        }
        countIndent(to, from = 0, indent = 0) {
          for (let i = from; i < to; i++)
            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return indent;
        }
        findColumn(goal) {
          let i = 0;
          for (let indent = 0; i < this.text.length && indent < goal; i++)
            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
          return i;
        }
        scrub() {
          if (!this.baseIndent)
            return this.text;
          let result = "";
          for (let i = 0; i < this.basePos; i++)
            result += " ";
          return result + this.text.slice(this.basePos);
        }
      };
      function skipForList(bl, cx, line) {
        if (line.pos == line.text.length || bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent)
          return true;
        if (line.indent >= line.baseIndent + 4)
          return false;
        let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
        return size > 0 && (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) && line.text.charCodeAt(line.pos + size - 1) == bl.value;
      }
      var DefaultSkipMarkup = {
        [Type.Blockquote](bl, cx, line) {
          if (line.next != 62)
            return false;
          line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
          line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
          bl.end = cx.lineStart + line.text.length;
          return true;
        },
        [Type.ListItem](bl, _cx, line) {
          if (line.indent < line.baseIndent + bl.value && line.next > -1)
            return false;
          line.moveBaseColumn(line.baseIndent + bl.value);
          return true;
        },
        [Type.OrderedList]: skipForList,
        [Type.BulletList]: skipForList,
        [Type.Document]() {
          return true;
        }
      };
      function space(ch) {
        return ch == 32 || ch == 9 || ch == 10 || ch == 13;
      }
      function skipSpace(line, i = 0) {
        while (i < line.length && space(line.charCodeAt(i)))
          i++;
        return i;
      }
      function skipSpaceBack(line, i, to) {
        while (i > to && space(line.charCodeAt(i - 1)))
          i--;
        return i;
      }
      function isFencedCode(line) {
        if (line.next != 96 && line.next != 126)
          return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
        if (pos < line.pos + 3)
          return -1;
        if (line.next == 96) {
          for (let i = pos; i < line.text.length; i++)
            if (line.text.charCodeAt(i) == 96)
              return -1;
        }
        return pos;
      }
      function isBlockquote(line) {
        return line.next != 62 ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
      }
      function isHorizontalRule(line, cx, breaking) {
        if (line.next != 42 && line.next != 45 && line.next != 95)
          return -1;
        let count = 1;
        for (let pos = line.pos + 1; pos < line.text.length; pos++) {
          let ch = line.text.charCodeAt(pos);
          if (ch == line.next)
            count++;
          else if (!space(ch))
            return -1;
        }
        if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
          return -1;
        return count < 3 ? -1 : 1;
      }
      function inList(cx, type) {
        for (let i = cx.stack.length - 1; i >= 0; i--)
          if (cx.stack[i].type == type)
            return true;
        return false;
      }
      function isBulletList(line, cx, breaking) {
        return (line.next == 45 || line.next == 43 || line.next == 42) && (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) && (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
      }
      function isOrderedList(line, cx, breaking) {
        let pos = line.pos, next = line.next;
        for (; ; ) {
          if (next >= 48 && next <= 57)
            pos++;
          else
            break;
          if (pos == line.text.length)
            return -1;
          next = line.text.charCodeAt(pos);
        }
        if (pos == line.pos || pos > line.pos + 9 || next != 46 && next != 41 || pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1)) || breaking && !inList(cx, Type.OrderedList) && (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49))
          return -1;
        return pos + 1 - line.pos;
      }
      function isAtxHeading(line) {
        if (line.next != 35)
          return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
          pos++;
        if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
          return -1;
        let size = pos - line.pos;
        return size > 6 ? -1 : size;
      }
      function isSetextUnderline(line) {
        if (line.next != 45 && line.next != 61 || line.indent >= line.baseIndent + 4)
          return -1;
        let pos = line.pos + 1;
        while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
          pos++;
        let end = pos;
        while (pos < line.text.length && space(line.text.charCodeAt(pos)))
          pos++;
        return pos == line.text.length ? end : -1;
      }
      var EmptyLine = /^[ \t]*$/;
      var CommentEnd = /-->/;
      var ProcessingEnd = /\?>/;
      var HTMLBlockStyle = [
        [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
        [/^\s*<!--/, CommentEnd],
        [/^\s*<\?/, ProcessingEnd],
        [/^\s*<![A-Z]/, />/],
        [/^\s*<!\[CDATA\[/, /\]\]>/],
        [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
        [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
      ];
      function isHTMLBlock(line, _cx, breaking) {
        if (line.next != 60)
          return -1;
        let rest = line.text.slice(line.pos);
        for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
          if (HTMLBlockStyle[i][0].test(rest))
            return i;
        return -1;
      }
      function getListIndent(line, pos) {
        let indentAfter = line.countIndent(pos, line.pos, line.indent);
        let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
        return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
      }
      function addCodeText(marks, from, to) {
        let last = marks.length - 1;
        if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)
          marks[last].to = to;
        else
          marks.push(elt(Type.CodeText, from, to));
      }
      var DefaultBlockParsers = {
        LinkReference: void 0,
        IndentedCode(cx, line) {
          let base = line.baseIndent + 4;
          if (line.indent < base)
            return false;
          let start = line.findColumn(base);
          let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
          let marks = [], pendingMarks = [];
          addCodeText(marks, from, to);
          while (cx.nextLine() && line.depth >= cx.stack.length) {
            if (line.pos == line.text.length) {
              addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
              for (let m of line.markers)
                pendingMarks.push(m);
            } else if (line.indent < base) {
              break;
            } else {
              if (pendingMarks.length) {
                for (let m of pendingMarks) {
                  if (m.type == Type.CodeText)
                    addCodeText(marks, m.from, m.to);
                  else
                    marks.push(m);
                }
                pendingMarks = [];
              }
              addCodeText(marks, cx.lineStart - 1, cx.lineStart);
              for (let m of line.markers)
                marks.push(m);
              to = cx.lineStart + line.text.length;
              let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
              if (codeStart < to)
                addCodeText(marks, codeStart, to);
            }
          }
          if (pendingMarks.length) {
            pendingMarks = pendingMarks.filter((m) => m.type != Type.CodeText);
            if (pendingMarks.length)
              line.markers = pendingMarks.concat(line.markers);
          }
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);
          return true;
        },
        FencedCode(cx, line) {
          let fenceEnd = isFencedCode(line);
          if (fenceEnd < 0)
            return false;
          let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
          let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
          let marks = [elt(Type.CodeMark, from, from + len)];
          if (infoFrom < infoTo)
            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
          for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
            let i = line.pos;
            if (line.indent - line.baseIndent < 4)
              while (i < line.text.length && line.text.charCodeAt(i) == ch)
                i++;
            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
              for (let m of line.markers)
                marks.push(m);
              marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
              cx.nextLine();
              break;
            } else {
              if (!first)
                addCodeText(marks, cx.lineStart - 1, cx.lineStart);
              for (let m of line.markers)
                marks.push(m);
              let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
              if (textStart < textEnd)
                addCodeText(marks, textStart, textEnd);
            }
          }
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.FencedCode, cx.prevLineEnd() - from), from);
          return true;
        },
        Blockquote(cx, line) {
          let size = isBlockquote(line);
          if (size < 0)
            return false;
          cx.startContext(Type.Blockquote, line.pos);
          cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
          line.moveBase(line.pos + size);
          return null;
        },
        HorizontalRule(cx, line) {
          if (isHorizontalRule(line, cx, false) < 0)
            return false;
          let from = cx.lineStart + line.pos;
          cx.nextLine();
          cx.addNode(Type.HorizontalRule, from);
          return true;
        },
        BulletList(cx, line) {
          let size = isBulletList(line, cx, false);
          if (size < 0)
            return false;
          if (cx.block.type != Type.BulletList)
            cx.startContext(Type.BulletList, line.basePos, line.next);
          let newBase = getListIndent(line, line.pos + 1);
          cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
        },
        OrderedList(cx, line) {
          let size = isOrderedList(line, cx, false);
          if (size < 0)
            return false;
          if (cx.block.type != Type.OrderedList)
            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
          let newBase = getListIndent(line, line.pos + size);
          cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
        },
        ATXHeading(cx, line) {
          let size = isAtxHeading(line);
          if (size < 0)
            return false;
          let off = line.pos, from = cx.lineStart + off;
          let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
          while (after > off && line.text.charCodeAt(after - 1) == line.next)
            after--;
          if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))
            after = line.text.length;
          let buf = cx.buffer.write(Type.HeaderMark, 0, size).writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
          if (after < line.text.length)
            buf.write(Type.HeaderMark, after - off, endOfSpace - off);
          let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
          cx.nextLine();
          cx.addNode(node, from);
          return true;
        },
        HTMLBlock(cx, line) {
          let type = isHTMLBlock(line, cx, false);
          if (type < 0)
            return false;
          let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
          let marks = [], trailing = end != EmptyLine;
          while (!end.test(line.text) && cx.nextLine()) {
            if (line.depth < cx.stack.length) {
              trailing = false;
              break;
            }
            for (let m of line.markers)
              marks.push(m);
          }
          if (trailing)
            cx.nextLine();
          let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
          let to = cx.prevLineEnd();
          cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
          return true;
        },
        SetextHeading: void 0
      };
      var LinkReferenceParser = class {
        constructor(leaf) {
          this.stage = 0;
          this.elts = [];
          this.pos = 0;
          this.start = leaf.start;
          this.advance(leaf.content);
        }
        nextLine(cx, line, leaf) {
          if (this.stage == -1)
            return false;
          let content = leaf.content + "\n" + line.scrub();
          let finish = this.advance(content);
          if (finish > -1 && finish < content.length)
            return this.complete(cx, leaf, finish);
          return false;
        }
        finish(cx, leaf) {
          if ((this.stage == 2 || this.stage == 3) && skipSpace(leaf.content, this.pos) == leaf.content.length)
            return this.complete(cx, leaf, leaf.content.length);
          return false;
        }
        complete(cx, leaf, len) {
          cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
          return true;
        }
        nextStage(elt2) {
          if (elt2) {
            this.pos = elt2.to - this.start;
            this.elts.push(elt2);
            this.stage++;
            return true;
          }
          if (elt2 === false)
            this.stage = -1;
          return false;
        }
        advance(content) {
          for (; ; ) {
            if (this.stage == -1) {
              return -1;
            } else if (this.stage == 0) {
              if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                return -1;
              if (content.charCodeAt(this.pos) != 58)
                return this.stage = -1;
              this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
              this.pos++;
            } else if (this.stage == 1) {
              if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                return -1;
            } else if (this.stage == 2) {
              let skip = skipSpace(content, this.pos), end = 0;
              if (skip > this.pos) {
                let title = parseLinkTitle(content, skip, this.start);
                if (title) {
                  let titleEnd = lineEnd(content, title.to - this.start);
                  if (titleEnd > 0) {
                    this.nextStage(title);
                    end = titleEnd;
                  }
                }
              }
              if (!end)
                end = lineEnd(content, this.pos);
              return end > 0 && end < content.length ? end : -1;
            } else {
              return lineEnd(content, this.pos);
            }
          }
        }
      };
      function lineEnd(text, pos) {
        for (; pos < text.length; pos++) {
          let next = text.charCodeAt(pos);
          if (next == 10)
            break;
          if (!space(next))
            return -1;
        }
        return pos;
      }
      var SetextHeadingParser = class {
        nextLine(cx, line, leaf) {
          let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
          let next = line.next;
          if (underline < 0)
            return false;
          let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
          cx.nextLine();
          cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [
            ...cx.parser.parseInline(leaf.content, leaf.start),
            underlineMark
          ]));
          return true;
        }
        finish() {
          return false;
        }
      };
      var DefaultLeafBlocks = {
        LinkReference(_, leaf) {
          return leaf.content.charCodeAt(0) == 91 ? new LinkReferenceParser(leaf) : null;
        },
        SetextHeading() {
          return new SetextHeadingParser();
        }
      };
      var DefaultEndLeaf = [
        (_, line) => isAtxHeading(line) >= 0,
        (_, line) => isFencedCode(line) >= 0,
        (_, line) => isBlockquote(line) >= 0,
        (p, line) => isBulletList(line, p, true) >= 0,
        (p, line) => isOrderedList(line, p, true) >= 0,
        (p, line) => isHorizontalRule(line, p, true) >= 0,
        (p, line) => isHTMLBlock(line, p, true) >= 0
      ];
      var BlockContext = class {
        constructor(parser2, input, fragments, ranges) {
          this.parser = parser2;
          this.input = input;
          this.ranges = ranges;
          this.line = new Line();
          this.atEnd = false;
          this.dontInject = /* @__PURE__ */ new Set();
          this.stoppedAt = null;
          this.rangeI = 0;
          this.to = ranges[ranges.length - 1].to;
          this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
          this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
          this.stack = [this.block];
          this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;
          this.readLine();
        }
        get parsedPos() {
          return this.absoluteLineStart;
        }
        advance() {
          if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
            return this.finish();
          let { line } = this;
          for (; ; ) {
            while (line.depth < this.stack.length)
              this.finishContext();
            for (let mark of line.markers)
              this.addNode(mark.type, mark.from, mark.to);
            if (line.pos < line.text.length)
              break;
            if (!this.nextLine())
              return this.finish();
          }
          if (this.fragments && this.reuseFragment(line.basePos))
            return null;
          start:
            for (; ; ) {
              for (let type of this.parser.blockParsers)
                if (type) {
                  let result = type(this, line);
                  if (result != false) {
                    if (result == true)
                      return null;
                    line.forward();
                    continue start;
                  }
                }
              break;
            }
          let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
          for (let parse of this.parser.leafBlockParsers)
            if (parse) {
              let parser2 = parse(this, leaf);
              if (parser2)
                leaf.parsers.push(parser2);
            }
          lines:
            while (this.nextLine()) {
              if (line.pos == line.text.length)
                break;
              if (line.indent < line.baseIndent + 4) {
                for (let stop of this.parser.endLeafBlock)
                  if (stop(this, line))
                    break lines;
              }
              for (let parser2 of leaf.parsers)
                if (parser2.nextLine(this, line, leaf))
                  return null;
              leaf.content += "\n" + line.scrub();
              for (let m of line.markers)
                leaf.marks.push(m);
            }
          this.finishLeaf(leaf);
          return null;
        }
        stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
            throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
        }
        reuseFragment(start) {
          if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
            return false;
          let taken = this.fragments.takeNodes(this);
          if (!taken)
            return false;
          let withoutGaps = taken, end = this.absoluteLineStart + taken;
          for (let i = 1; i < this.ranges.length; i++) {
            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
            if (gapFrom >= this.lineStart && gapTo < end)
              withoutGaps -= gapTo - gapFrom;
          }
          this.lineStart += withoutGaps;
          this.absoluteLineStart += taken;
          this.moveRangeI();
          if (this.absoluteLineStart < this.to) {
            this.lineStart++;
            this.absoluteLineStart++;
            this.readLine();
          } else {
            this.atEnd = true;
            this.readLine();
          }
          return true;
        }
        nextLine() {
          this.lineStart += this.line.text.length;
          if (this.absoluteLineEnd >= this.to) {
            this.absoluteLineStart = this.absoluteLineEnd;
            this.atEnd = true;
            this.readLine();
            return false;
          } else {
            this.lineStart++;
            this.absoluteLineStart = this.absoluteLineEnd + 1;
            this.moveRangeI();
            this.readLine();
            return true;
          }
        }
        moveRangeI() {
          while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to)
            this.rangeI++;
        }
        readLine() {
          let { line } = this, text, end = this.absoluteLineStart;
          if (this.atEnd) {
            text = "";
          } else {
            text = this.lineChunkAt(end);
            end += text.length;
            if (this.ranges.length > 1) {
              let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
              while (this.ranges[rangeI].to < end) {
                rangeI++;
                let nextFrom = this.ranges[rangeI].from;
                let after = this.lineChunkAt(nextFrom);
                end = nextFrom + after.length;
                text = text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                textOffset = end - text.length;
              }
            }
          }
          this.absoluteLineEnd = end;
          line.reset(text);
          for (; line.depth < this.stack.length; line.depth++) {
            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
            if (!handler)
              throw new Error("Unhandled block context " + Type[cx.type]);
            if (!handler(cx, this, line))
              break;
            line.forward();
          }
        }
        lineChunkAt(pos) {
          let next = this.input.chunk(pos), text;
          if (!this.input.lineChunks) {
            let eol = next.indexOf("\n");
            text = eol < 0 ? next : next.slice(0, eol);
          } else {
            text = next == "\n" ? "" : next;
          }
          return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
        }
        prevLineEnd() {
          return this.atEnd ? this.lineStart : this.lineStart - 1;
        }
        startContext(type, start, value = 0) {
          this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
          this.stack.push(this.block);
        }
        startComposite(type, start, value = 0) {
          this.startContext(this.parser.getNodeType(type), start, value);
        }
        addNode(block, from, to) {
          if (typeof block == "number")
            block = new common.Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
          this.block.addChild(block, from - this.block.from);
        }
        addElement(elt2) {
          this.block.addChild(elt2.toTree(this.parser.nodeSet), elt2.from - this.block.from);
        }
        addLeafElement(leaf, elt2) {
          this.addNode(this.buffer.writeElements(injectMarks(elt2.children, leaf.marks), -elt2.from).finish(elt2.type, elt2.to - elt2.from), elt2.from);
        }
        finishContext() {
          let cx = this.stack.pop();
          let top = this.stack[this.stack.length - 1];
          top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
          this.block = top;
        }
        finish() {
          while (this.stack.length > 1)
            this.finishContext();
          return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
        }
        addGaps(tree) {
          return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
        }
        finishLeaf(leaf) {
          for (let parser2 of leaf.parsers)
            if (parser2.finish(this, leaf))
              return;
          let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
          this.addNode(this.buffer.writeElements(inline, -leaf.start).finish(Type.Paragraph, leaf.content.length), leaf.start);
        }
        elt(type, from, to, children) {
          if (typeof type == "string")
            return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
        }
        get buffer() {
          return new Buffer2(this.parser.nodeSet);
        }
      };
      function injectGaps(ranges, rangeI, tree, offset, dont) {
        if (dont.has(tree.tree))
          return tree.tree;
        let rangeEnd = ranges[rangeI].to;
        let children = [], positions = [], start = tree.from + offset;
        function movePastNext(upto, inclusive) {
          while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
            let size = ranges[rangeI + 1].from - rangeEnd;
            offset += size;
            upto += size;
            rangeI++;
            rangeEnd = ranges[rangeI].to;
          }
        }
        for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
          movePastNext(ch.from + offset, true);
          let from = ch.from + offset, node;
          if (ch.to + offset > rangeEnd) {
            node = injectGaps(ranges, rangeI, ch, offset, dont);
            movePastNext(ch.to + offset, false);
          } else {
            node = ch.toTree();
          }
          children.push(node);
          positions.push(from - start);
        }
        movePastNext(tree.to + offset, false);
        return new common.Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : void 0);
      }
      var MarkdownParser = class extends common.Parser {
        constructor(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers) {
          super();
          this.nodeSet = nodeSet;
          this.blockParsers = blockParsers;
          this.leafBlockParsers = leafBlockParsers;
          this.blockNames = blockNames;
          this.endLeafBlock = endLeafBlock;
          this.skipContextMarkup = skipContextMarkup;
          this.inlineParsers = inlineParsers;
          this.inlineNames = inlineNames;
          this.wrappers = wrappers;
          this.nodeTypes = Object.create(null);
          for (let t of nodeSet.types)
            this.nodeTypes[t.name] = t.id;
        }
        createParse(input, fragments, ranges) {
          let parse = new BlockContext(this, input, fragments, ranges);
          for (let w of this.wrappers)
            parse = w(parse, input, fragments, ranges);
          return parse;
        }
        configure(spec) {
          let config = resolveConfig(spec);
          if (!config)
            return this;
          let { nodeSet, skipContextMarkup } = this;
          let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
          if (nonEmpty(config.defineNodes)) {
            skipContextMarkup = Object.assign({}, skipContextMarkup);
            let nodeTypes2 = nodeSet.types.slice();
            for (let s of config.defineNodes) {
              let { name, block, composite } = typeof s == "string" ? { name: s } : s;
              if (nodeTypes2.some((t) => t.name == name))
                continue;
              if (composite)
                skipContextMarkup[nodeTypes2.length] = (bl, cx, line) => composite(cx, line, bl.value);
              let id = nodeTypes2.length;
              let group = composite ? ["Block", "BlockContext"] : !block ? void 0 : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
              nodeTypes2.push(common.NodeType.define({
                id,
                name,
                props: group && [[common.NodeProp.group, group]]
              }));
            }
            nodeSet = new common.NodeSet(nodeTypes2);
          }
          if (nonEmpty(config.props))
            nodeSet = nodeSet.extend(...config.props);
          if (nonEmpty(config.remove)) {
            for (let rm of config.remove) {
              let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
              if (block > -1)
                blockParsers[block] = leafBlockParsers[block] = void 0;
              if (inline > -1)
                inlineParsers[inline] = void 0;
            }
          }
          if (nonEmpty(config.parseBlock)) {
            for (let spec2 of config.parseBlock) {
              let found = blockNames.indexOf(spec2.name);
              if (found > -1) {
                blockParsers[found] = spec2.parse;
                leafBlockParsers[found] = spec2.leaf;
              } else {
                let pos = spec2.before ? findName(blockNames, spec2.before) : spec2.after ? findName(blockNames, spec2.after) + 1 : blockNames.length - 1;
                blockParsers.splice(pos, 0, spec2.parse);
                leafBlockParsers.splice(pos, 0, spec2.leaf);
                blockNames.splice(pos, 0, spec2.name);
              }
              if (spec2.endLeaf)
                endLeafBlock.push(spec2.endLeaf);
            }
          }
          if (nonEmpty(config.parseInline)) {
            for (let spec2 of config.parseInline) {
              let found = inlineNames.indexOf(spec2.name);
              if (found > -1) {
                inlineParsers[found] = spec2.parse;
              } else {
                let pos = spec2.before ? findName(inlineNames, spec2.before) : spec2.after ? findName(inlineNames, spec2.after) + 1 : inlineNames.length - 1;
                inlineParsers.splice(pos, 0, spec2.parse);
                inlineNames.splice(pos, 0, spec2.name);
              }
            }
          }
          if (config.wrap)
            wrappers = wrappers.concat(config.wrap);
          return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
        }
        getNodeType(name) {
          let found = this.nodeTypes[name];
          if (found == null)
            throw new RangeError(`Unknown node type '${name}'`);
          return found;
        }
        parseInline(text, offset) {
          let cx = new InlineContext(this, text, offset);
          outer:
            for (let pos = offset; pos < cx.end; ) {
              let next = cx.char(pos);
              for (let token of this.inlineParsers)
                if (token) {
                  let result = token(cx, next, pos);
                  if (result >= 0) {
                    pos = result;
                    continue outer;
                  }
                }
              pos++;
            }
          return cx.resolveMarkers(0);
        }
      };
      function nonEmpty(a) {
        return a != null && a.length > 0;
      }
      function resolveConfig(spec) {
        if (!Array.isArray(spec))
          return spec;
        if (spec.length == 0)
          return null;
        let conf = resolveConfig(spec[0]);
        if (spec.length == 1)
          return conf;
        let rest = resolveConfig(spec.slice(1));
        if (!rest || !conf)
          return conf || rest;
        let conc = (a, b) => (a || none).concat(b || none);
        return {
          props: conc(conf.props, rest.props),
          defineNodes: conc(conf.defineNodes, rest.defineNodes),
          parseBlock: conc(conf.parseBlock, rest.parseBlock),
          parseInline: conc(conf.parseInline, rest.parseInline),
          remove: conc(conf.remove, rest.remove)
        };
      }
      function findName(names, name) {
        let found = names.indexOf(name);
        if (found < 0)
          throw new RangeError(`Position specified relative to unknown parser ${name}`);
        return found;
      }
      var nodeTypes = [common.NodeType.none];
      for (let i = 1, name; name = Type[i]; i++) {
        nodeTypes[i] = common.NodeType.define({
          id: i,
          name,
          props: i >= Type.Escape ? [] : [[common.NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
        });
      }
      var none = [];
      var Buffer2 = class {
        constructor(nodeSet) {
          this.nodeSet = nodeSet;
          this.content = [];
          this.nodes = [];
        }
        write(type, from, to, children = 0) {
          this.content.push(type, from, to, 4 + children * 4);
          return this;
        }
        writeElements(elts, offset = 0) {
          for (let e of elts)
            e.writeTo(this, offset);
          return this;
        }
        finish(type, length) {
          return common.Tree.build({
            buffer: this.content,
            nodeSet: this.nodeSet,
            reused: this.nodes,
            topID: type,
            length
          });
        }
      };
      var Element = class {
        constructor(type, from, to, children = none) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.children = children;
        }
        writeTo(buf, offset) {
          let startOff = buf.content.length;
          buf.writeElements(this.children, offset);
          buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
        }
        toTree(nodeSet) {
          return new Buffer2(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
        }
      };
      var TreeElement = class {
        constructor(tree, from) {
          this.tree = tree;
          this.from = from;
        }
        get to() {
          return this.from + this.tree.length;
        }
        get type() {
          return this.tree.type.id;
        }
        get children() {
          return none;
        }
        writeTo(buf, offset) {
          buf.nodes.push(this.tree);
          buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
        }
        toTree() {
          return this.tree;
        }
      };
      function elt(type, from, to, children) {
        return new Element(type, from, to, children);
      }
      var EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
      var EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
      var LinkStart = {};
      var ImageStart = {};
      var InlineDelimiter = class {
        constructor(type, from, to, side) {
          this.type = type;
          this.from = from;
          this.to = to;
          this.side = side;
        }
      };
      var Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
      var Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
      try {
        Punctuation = /[\p{Pc}|\p{Pd}|\p{Pe}|\p{Pf}|\p{Pi}|\p{Po}|\p{Ps}]/u;
      } catch (_) {
      }
      var DefaultInline = {
        Escape(cx, next, start) {
          if (next != 92 || start == cx.end - 1)
            return -1;
          let escaped = cx.char(start + 1);
          for (let i = 0; i < Escapable.length; i++)
            if (Escapable.charCodeAt(i) == escaped)
              return cx.append(elt(Type.Escape, start, start + 2));
          return -1;
        },
        Entity(cx, next, start) {
          if (next != 38)
            return -1;
          let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
          return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;
        },
        InlineCode(cx, next, start) {
          if (next != 96 || start && cx.char(start - 1) == 96)
            return -1;
          let pos = start + 1;
          while (pos < cx.end && cx.char(pos) == 96)
            pos++;
          let size = pos - start, curSize = 0;
          for (; pos < cx.end; pos++) {
            if (cx.char(pos) == 96) {
              curSize++;
              if (curSize == size && cx.char(pos + 1) != 96)
                return cx.append(elt(Type.InlineCode, start, pos + 1, [
                  elt(Type.CodeMark, start, start + size),
                  elt(Type.CodeMark, pos + 1 - size, pos + 1)
                ]));
            } else {
              curSize = 0;
            }
          }
          return -1;
        },
        HTMLTag(cx, next, start) {
          if (next != 60 || start == cx.end - 1)
            return -1;
          let after = cx.slice(start + 1, cx.end);
          let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
          if (url)
            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));
          let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
          if (comment)
            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));
          let procInst = /^\?[^]*?\?>/.exec(after);
          if (procInst)
            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));
          let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
          if (!m)
            return -1;
          return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));
        },
        Emphasis(cx, next, start) {
          if (next != 95 && next != 42)
            return -1;
          let pos = start + 1;
          while (cx.char(pos) == next)
            pos++;
          let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
          let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
          let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
          let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
          let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
          let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
          let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
          return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 : 0) | (canClose ? 2 : 0)));
        },
        HardBreak(cx, next, start) {
          if (next == 92 && cx.char(start + 1) == 10)
            return cx.append(elt(Type.HardBreak, start, start + 2));
          if (next == 32) {
            let pos = start + 1;
            while (cx.char(pos) == 32)
              pos++;
            if (cx.char(pos) == 10 && pos >= start + 2)
              return cx.append(elt(Type.HardBreak, start, pos + 1));
          }
          return -1;
        },
        Link(cx, next, start) {
          return next == 91 ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1)) : -1;
        },
        Image(cx, next, start) {
          return next == 33 && cx.char(start + 1) == 91 ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1)) : -1;
        },
        LinkEnd(cx, next, start) {
          if (next != 93)
            return -1;
          for (let i = cx.parts.length - 1; i >= 0; i--) {
            let part = cx.parts[i];
            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
              if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                cx.parts[i] = null;
                return -1;
              }
              let content = cx.takeContent(i);
              let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);
              if (part.type == LinkStart)
                for (let j = 0; j < i; j++) {
                  let p = cx.parts[j];
                  if (p instanceof InlineDelimiter && p.type == LinkStart)
                    p.side = 0;
                }
              return link.to;
            }
          }
          return -1;
        }
      };
      function finishLink(cx, content, type, start, startPos) {
        let { text } = cx, next = cx.char(startPos), endPos = startPos;
        content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));
        content.push(elt(Type.LinkMark, startPos - 1, startPos));
        if (next == 40) {
          let pos = cx.skipSpace(startPos + 1);
          let dest = parseURL(text, pos - cx.offset, cx.offset), title;
          if (dest) {
            pos = cx.skipSpace(dest.to);
            title = parseLinkTitle(text, pos - cx.offset, cx.offset);
            if (title)
              pos = cx.skipSpace(title.to);
          }
          if (cx.char(pos) == 41) {
            content.push(elt(Type.LinkMark, startPos, startPos + 1));
            endPos = pos + 1;
            if (dest)
              content.push(dest);
            if (title)
              content.push(title);
            content.push(elt(Type.LinkMark, pos, endPos));
          }
        } else if (next == 91) {
          let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
          if (label) {
            content.push(label);
            endPos = label.to;
          }
        }
        return elt(type, start, endPos, content);
      }
      function parseURL(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next == 60) {
          for (let pos = start + 1; pos < text.length; pos++) {
            let ch = text.charCodeAt(pos);
            if (ch == 62)
              return elt(Type.URL, start + offset, pos + 1 + offset);
            if (ch == 60 || ch == 10)
              return false;
          }
          return null;
        } else {
          let depth = 0, pos = start;
          for (let escaped = false; pos < text.length; pos++) {
            let ch = text.charCodeAt(pos);
            if (space(ch)) {
              break;
            } else if (escaped) {
              escaped = false;
            } else if (ch == 40) {
              depth++;
            } else if (ch == 41) {
              if (!depth)
                break;
              depth--;
            } else if (ch == 92) {
              escaped = true;
            }
          }
          return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;
        }
      }
      function parseLinkTitle(text, start, offset) {
        let next = text.charCodeAt(start);
        if (next != 39 && next != 34 && next != 40)
          return false;
        let end = next == 40 ? 41 : next;
        for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
            escaped = false;
          else if (ch == end)
            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);
          else if (ch == 92)
            escaped = true;
        }
        return null;
      }
      function parseLinkLabel(text, start, offset, requireNonWS) {
        for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
          let ch = text.charCodeAt(pos);
          if (escaped)
            escaped = false;
          else if (ch == 93)
            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);
          else {
            if (requireNonWS && !space(ch))
              requireNonWS = false;
            if (ch == 91)
              return false;
            else if (ch == 92)
              escaped = true;
          }
        }
        return null;
      }
      var InlineContext = class {
        constructor(parser2, text, offset) {
          this.parser = parser2;
          this.text = text;
          this.offset = offset;
          this.parts = [];
        }
        char(pos) {
          return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset);
        }
        get end() {
          return this.offset + this.text.length;
        }
        slice(from, to) {
          return this.text.slice(from - this.offset, to - this.offset);
        }
        append(elt2) {
          this.parts.push(elt2);
          return elt2.to;
        }
        addDelimiter(type, from, to, open, close) {
          return this.append(new InlineDelimiter(type, from, to, (open ? 1 : 0) | (close ? 2 : 0)));
        }
        addElement(elt2) {
          return this.append(elt2);
        }
        resolveMarkers(from) {
          for (let i = from; i < this.parts.length; i++) {
            let close = this.parts[i];
            if (!(close instanceof InlineDelimiter && close.type.resolve && close.side & 2))
              continue;
            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
            let closeSize = close.to - close.from;
            let open, j = i - 1;
            for (; j >= from; j--) {
              let part = this.parts[j];
              if (!(part instanceof InlineDelimiter && part.side & 1 && part.type == close.type) || emp && (close.side & 1 || part.side & 2) && (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))
                continue;
              open = part;
              break;
            }
            if (!open)
              continue;
            let type = close.type.resolve, content = [];
            let start = open.from, end = close.to;
            if (emp) {
              let size = Math.min(2, open.to - open.from, closeSize);
              start = open.to - size;
              end = close.from + size;
              type = size == 1 ? "Emphasis" : "StrongEmphasis";
            }
            if (open.type.mark)
              content.push(this.elt(open.type.mark, start, open.to));
            for (let k = j + 1; k < i; k++) {
              if (this.parts[k] instanceof Element)
                content.push(this.parts[k]);
              this.parts[k] = null;
            }
            if (close.type.mark)
              content.push(this.elt(close.type.mark, close.from, end));
            let element = this.elt(type, start, end, content);
            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
            if (keep)
              this.parts.splice(i, 0, element);
            else
              this.parts[i] = element;
          }
          let result = [];
          for (let i = from; i < this.parts.length; i++) {
            let part = this.parts[i];
            if (part instanceof Element)
              result.push(part);
          }
          return result;
        }
        findOpeningDelimiter(type) {
          for (let i = this.parts.length - 1; i >= 0; i--) {
            let part = this.parts[i];
            if (part instanceof InlineDelimiter && part.type == type)
              return i;
          }
          return null;
        }
        takeContent(startIndex) {
          let content = this.resolveMarkers(startIndex);
          this.parts.length = startIndex;
          return content;
        }
        skipSpace(from) {
          return skipSpace(this.text, from - this.offset) + this.offset;
        }
        elt(type, from, to, children) {
          if (typeof type == "string")
            return elt(this.parser.getNodeType(type), from, to, children);
          return new TreeElement(type, from);
        }
      };
      function injectMarks(elements, marks) {
        if (!marks.length)
          return elements;
        if (!elements.length)
          return marks;
        let elts = elements.slice(), eI = 0;
        for (let mark of marks) {
          while (eI < elts.length && elts[eI].to < mark.to)
            eI++;
          if (eI < elts.length && elts[eI].from < mark.from) {
            let e = elts[eI];
            if (e instanceof Element)
              elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));
          } else {
            elts.splice(eI++, 0, mark);
          }
        }
        return elts;
      }
      var NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
      var FragmentCursor = class {
        constructor(fragments, input) {
          this.fragments = fragments;
          this.input = input;
          this.i = 0;
          this.fragment = null;
          this.fragmentEnd = -1;
          this.cursor = null;
          if (fragments.length)
            this.fragment = fragments[this.i++];
        }
        nextFragment() {
          this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
          this.cursor = null;
          this.fragmentEnd = -1;
        }
        moveTo(pos, lineStart) {
          while (this.fragment && this.fragment.to <= pos)
            this.nextFragment();
          if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
            return false;
          if (this.fragmentEnd < 0) {
            let end = this.fragment.to;
            while (end > 0 && this.input.read(end - 1, end) != "\n")
              end--;
            this.fragmentEnd = end ? end - 1 : 0;
          }
          let c = this.cursor;
          if (!c) {
            c = this.cursor = this.fragment.tree.cursor();
            c.firstChild();
          }
          let rPos = pos + this.fragment.offset;
          while (c.to <= rPos)
            if (!c.parent())
              return false;
          for (; ; ) {
            if (c.from >= rPos)
              return this.fragment.from <= lineStart;
            if (!c.childAfter(rPos))
              return false;
          }
        }
        matches(hash) {
          let tree = this.cursor.tree;
          return tree && tree.prop(common.NodeProp.contextHash) == hash;
        }
        takeNodes(cx) {
          let cur = this.cursor, off = this.fragment.offset;
          let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
          let prevEnd = end, prevI = blockI;
          for (; ; ) {
            if (cur.to - off >= this.fragmentEnd) {
              if (cur.type.isAnonymous && cur.firstChild())
                continue;
              break;
            }
            cx.dontInject.add(cur.tree);
            cx.addNode(cur.tree, cur.from - off);
            if (cur.type.is("Block")) {
              if (NotLast.indexOf(cur.type.id) < 0) {
                end = cur.to - off;
                blockI = cx.block.children.length;
              } else {
                end = prevEnd;
                blockI = prevI;
                prevEnd = cur.to - off;
                prevI = cx.block.children.length;
              }
            }
            if (!cur.nextSibling())
              break;
          }
          while (cx.block.children.length > blockI) {
            cx.block.children.pop();
            cx.block.positions.pop();
          }
          return end - start;
        }
      };
      var parser = new MarkdownParser(new common.NodeSet(nodeTypes), Object.keys(DefaultBlockParsers).map((n) => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map((n) => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map((n) => DefaultInline[n]), Object.keys(DefaultInline), []);
      function leftOverSpace(node, from, to) {
        let ranges = [];
        for (let n = node.firstChild, pos = from; ; n = n.nextSibling) {
          let nextPos = n ? n.from : to;
          if (nextPos > pos)
            ranges.push({ from: pos, to: nextPos });
          if (!n)
            break;
          pos = n.to;
        }
        return ranges;
      }
      function parseCode(config) {
        let { codeParser, htmlParser } = config;
        let wrap = common.parseMixed((node, input) => {
          let id = node.type.id;
          if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {
            let info = "";
            if (id = Type.FencedCode) {
              let infoNode = node.node.getChild(Type.CodeInfo);
              if (infoNode)
                info = input.read(infoNode.from, infoNode.to);
            }
            let parser2 = codeParser(info);
            if (parser2)
              return { parser: parser2, overlay: (node2) => node2.type.id == Type.CodeText };
          } else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {
            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
          }
          return null;
        });
        return { wrap };
      }
      var StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
      var Strikethrough = {
        defineNodes: ["Strikethrough", "StrikethroughMark"],
        parseInline: [{
          name: "Strikethrough",
          parse(cx, next, pos) {
            if (next != 126 || cx.char(pos + 1) != 126)
              return -1;
            return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, true, true);
          },
          after: "Emphasis"
        }]
      };
      function parseRow(cx, line, startI = 0, elts, offset = 0) {
        let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
        let parseCell = () => {
          elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
        };
        for (let i = startI; i < line.length; i++) {
          let next = line.charCodeAt(i);
          if (next == 124 && !esc) {
            if (!first || cellStart > -1)
              count++;
            first = false;
            if (elts) {
              if (cellStart > -1)
                parseCell();
              elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
            }
            cellStart = cellEnd = -1;
          } else if (esc || next != 32 && next != 9) {
            if (cellStart < 0)
              cellStart = i;
            cellEnd = i + 1;
          }
          esc = !esc && next == 92;
        }
        if (cellStart > -1) {
          count++;
          if (elts)
            parseCell();
        }
        return count;
      }
      function hasPipe(str, start) {
        for (let i = start; i < str.length; i++) {
          let next = str.charCodeAt(i);
          if (next == 124)
            return true;
          if (next == 92)
            i++;
        }
        return false;
      }
      var TableParser = class {
        constructor() {
          this.rows = null;
        }
        nextLine(cx, line, leaf) {
          if (this.rows == null) {
            this.rows = false;
            let lineText;
            if ((line.next == 45 || line.next == 58 || line.next == 124) && /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/.test(lineText = line.text.slice(line.pos))) {
              let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
              if (firstCount == parseRow(cx, lineText, line.pos))
                this.rows = [
                  cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                  cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)
                ];
            }
          } else if (this.rows) {
            let content = [];
            parseRow(cx, line.text, line.pos, content, cx.lineStart);
            this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
          }
          return false;
        }
        finish(cx, leaf) {
          if (this.rows) {
            this.emit(cx, leaf);
            return true;
          }
          return false;
        }
        emit(cx, leaf) {
          cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
        }
      };
      var Table = {
        defineNodes: [
          { name: "Table", block: true },
          "TableHeader",
          "TableRow",
          "TableCell",
          "TableDelimiter"
        ],
        parseBlock: [{
          name: "Table",
          leaf(_, leaf) {
            return hasPipe(leaf.content, 0) ? new TableParser() : null;
          },
          before: "SetextHeading"
        }]
      };
      var TaskParser = class {
        nextLine() {
          return false;
        }
        finish(cx, leaf) {
          cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
            cx.elt("TaskMarker", leaf.start, leaf.start + 3),
            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
          ]));
          return true;
        }
      };
      var TaskList = {
        defineNodes: [
          { name: "Task", block: true },
          "TaskMarker"
        ],
        parseBlock: [{
          name: "TaskList",
          leaf(cx, leaf) {
            return /^\[[ xX]\]/.test(leaf.content) && cx.parser.nodeSet.types[cx.block.type].name == "ListItem" ? new TaskParser() : null;
          },
          after: "SetextHeading"
        }]
      };
      var GFM = [Table, TaskList, Strikethrough];
      function parseSubSuper(ch, node, mark) {
        return (cx, next, pos) => {
          if (next != ch || cx.char(pos + 1) == ch)
            return -1;
          let elts = [cx.elt(mark, pos, pos + 1)];
          for (let i = pos + 1; i < cx.end; i++) {
            let next2 = cx.char(i);
            if (next2 == ch)
              return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
            if (next2 == 92)
              elts.push(cx.elt("Escape", i, i++ + 2));
            if (space(next2))
              break;
          }
          return -1;
        };
      }
      var Superscript = {
        defineNodes: ["Superscript", "SuperscriptMark"],
        parseInline: [{
          name: "Superscript",
          parse: parseSubSuper(94, "Superscript", "SuperscriptMark")
        }]
      };
      var Subscript = {
        defineNodes: ["Subscript", "SubscriptMark"],
        parseInline: [{
          name: "Subscript",
          parse: parseSubSuper(126, "Subscript", "SubscriptMark")
        }]
      };
      var Emoji = {
        defineNodes: ["Emoji"],
        parseInline: [{
          name: "Emoji",
          parse(cx, next, pos) {
            let match;
            if (next != 58 || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
              return -1;
            return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
          }
        }]
      };
      exports.BlockContext = BlockContext;
      exports.Element = Element;
      exports.Emoji = Emoji;
      exports.GFM = GFM;
      exports.InlineContext = InlineContext;
      exports.LeafBlock = LeafBlock;
      exports.Line = Line;
      exports.MarkdownParser = MarkdownParser;
      exports.Strikethrough = Strikethrough;
      exports.Subscript = Subscript;
      exports.Superscript = Superscript;
      exports.Table = Table;
      exports.TaskList = TaskList;
      exports.parseCode = parseCode;
      exports.parser = parser;
    }
  });

  // ../../../node_modules/@lezer/lr/dist/index.cjs
  var require_dist24 = __commonJS({
    "../../../node_modules/@lezer/lr/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var common = require_dist6();
      var Stack = class {
        constructor(p, stack, state, reducePos, pos, score, buffer, bufferBase, curContext, lookAhead = 0, parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
        }
        toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        static start(p, state, pos = 0) {
          let cx = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
        }
        get context() {
          return this.curContext ? this.curContext.context : null;
        }
        pushState(state, start) {
          this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
          this.state = state;
        }
        reduce(action) {
          let depth = action >> 19, type = action & 65535;
          let { parser } = this.p;
          let dPrec = parser.dynamicPrecedence(type);
          if (dPrec)
            this.score += dPrec;
          if (depth == 0) {
            if (type < parser.minRepeatTerm)
              this.storeNode(type, this.reducePos, this.reducePos, 4, true);
            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
            this.reduceContext(type, this.reducePos);
            return;
          }
          let base = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
          let start = this.stack[base - 2];
          let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
          if (type < parser.minRepeatTerm || action & 131072) {
            let pos = parser.stateFlag(this.state, 1) ? this.pos : this.reducePos;
            this.storeNode(type, start, pos, count + 4, true);
          }
          if (action & 262144) {
            this.state = this.stack[base];
          } else {
            let baseStateID = this.stack[base - 3];
            this.state = parser.getGoto(baseStateID, type, true);
          }
          while (this.stack.length > base)
            this.stack.pop();
          this.reduceContext(type, start);
        }
        storeNode(term, start, end, size = 4, isReduce = false) {
          if (term == 0) {
            let cur = this, top = this.buffer.length;
            if (top == 0 && cur.parent) {
              top = cur.bufferBase - cur.parent.bufferBase;
              cur = cur.parent;
            }
            if (top > 0 && cur.buffer[top - 4] == 0 && cur.buffer[top - 1] > -1) {
              if (start == end)
                return;
              if (cur.buffer[top - 2] >= start) {
                cur.buffer[top - 2] = end;
                return;
              }
            }
          }
          if (!isReduce || this.pos == end) {
            this.buffer.push(term, start, end, size);
          } else {
            let index = this.buffer.length;
            if (index > 0 && this.buffer[index - 4] != 0)
              while (index > 0 && this.buffer[index - 2] > end) {
                this.buffer[index] = this.buffer[index - 4];
                this.buffer[index + 1] = this.buffer[index - 3];
                this.buffer[index + 2] = this.buffer[index - 2];
                this.buffer[index + 3] = this.buffer[index - 1];
                index -= 4;
                if (size > 4)
                  size -= 4;
              }
            this.buffer[index] = term;
            this.buffer[index + 1] = start;
            this.buffer[index + 2] = end;
            this.buffer[index + 3] = size;
          }
        }
        shift(action, next, nextEnd) {
          let start = this.pos;
          if (action & 131072) {
            this.pushState(action & 65535, this.pos);
          } else if ((action & 262144) == 0) {
            let nextState = action, { parser } = this.p;
            if (nextEnd > this.pos || next <= parser.maxNode) {
              this.pos = nextEnd;
              if (!parser.stateFlag(nextState, 1))
                this.reducePos = nextEnd;
            }
            this.pushState(nextState, start);
            this.shiftContext(next, start);
            if (next <= parser.maxNode)
              this.buffer.push(next, start, nextEnd, 4);
          } else {
            this.pos = nextEnd;
            this.shiftContext(next, start);
            if (next <= this.p.parser.maxNode)
              this.buffer.push(next, start, nextEnd, 4);
          }
        }
        apply(action, next, nextEnd) {
          if (action & 65536)
            this.reduce(action);
          else
            this.shift(action, next, nextEnd);
        }
        useNode(value, next) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
            this.p.reused.push(value);
            index++;
          }
          let start = this.pos;
          this.reducePos = this.pos = start + value.length;
          this.pushState(next, start);
          this.buffer.push(index, start, this.reducePos, -1);
          if (this.curContext)
            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        split() {
          let parent = this;
          let off = parent.buffer.length;
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
            off -= 4;
          let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
          while (parent && base == parent.bufferBase)
            parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
        }
        recoverByDelete(next, nextEnd) {
          let isNode = next <= this.p.parser.maxNode;
          if (isNode)
            this.storeNode(next, this.pos, nextEnd, 4);
          this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190;
        }
        canShift(term) {
          for (let sim = new SimulatedStack(this); ; ) {
            let action = this.p.parser.stateSlot(sim.state, 4) || this.p.parser.hasAction(sim.state, term);
            if ((action & 65536) == 0)
              return true;
            if (action == 0)
              return false;
            sim.reduce(action);
          }
        }
        recoverByInsert(next) {
          if (this.stack.length >= 300)
            return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
            let best = [];
            for (let i = 0, s; i < nextStates.length; i += 2) {
              if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                best.push(nextStates[i], s);
            }
            if (this.stack.length < 120)
              for (let i = 0; best.length < 4 << 1 && i < nextStates.length; i += 2) {
                let s = nextStates[i + 1];
                if (!best.some((v, i2) => i2 & 1 && v == s))
                  best.push(nextStates[i], s);
              }
            nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4; i += 2) {
            let s = nextStates[i + 1];
            if (s == this.state)
              continue;
            let stack = this.split();
            stack.storeNode(0, stack.pos, stack.pos, 4, true);
            stack.pushState(s, this.pos);
            stack.shiftContext(nextStates[i], this.pos);
            stack.score -= 200;
            result.push(stack);
          }
          return result;
        }
        forceReduce() {
          let reduce = this.p.parser.stateSlot(this.state, 5);
          if ((reduce & 65536) == 0)
            return false;
          let { parser } = this.p;
          if (!parser.validAction(this.state, reduce)) {
            let depth = reduce >> 19, term = reduce & 65535;
            let target = this.stack.length - depth * 3;
            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)
              return false;
            this.storeNode(0, this.reducePos, this.reducePos, 4, true);
            this.score -= 100;
          }
          this.reduce(reduce);
          return true;
        }
        forceAll() {
          while (!this.p.parser.stateFlag(this.state, 2)) {
            if (!this.forceReduce()) {
              this.storeNode(0, this.pos, this.pos, 4, true);
              break;
            }
          }
          return this;
        }
        get deadEnd() {
          if (this.stack.length != 3)
            return false;
          let { parser } = this.p;
          return parser.data[parser.stateSlot(this.state, 1)] == 65535 && !parser.stateSlot(this.state, 4);
        }
        restart() {
          this.state = this.stack[0];
          this.stack.length = 0;
        }
        sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
            return false;
          for (let i = 0; i < this.stack.length; i += 3)
            if (this.stack[i] != other.stack[i])
              return false;
          return true;
        }
        get parser() {
          return this.p.parser;
        }
        dialectEnabled(dialectID) {
          return this.p.parser.dialect.flags[dialectID];
        }
        shiftContext(term, start) {
          if (this.curContext)
            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        reduceContext(term, start) {
          if (this.curContext)
            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
        }
        emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
        }
        emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
        }
        updateContext(context) {
          if (context != this.curContext.context) {
            let newCx = new StackContext(this.curContext.tracker, context);
            if (newCx.hash != this.curContext.hash)
              this.emitContext();
            this.curContext = newCx;
          }
        }
        setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
            this.emitLookAhead();
            this.lookAhead = lookAhead;
          }
        }
        close() {
          if (this.curContext && this.curContext.tracker.strict)
            this.emitContext();
          if (this.lookAhead > 0)
            this.emitLookAhead();
        }
      };
      var StackContext = class {
        constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
      };
      var Recover;
      (function(Recover2) {
        Recover2[Recover2["Insert"] = 200] = "Insert";
        Recover2[Recover2["Delete"] = 190] = "Delete";
        Recover2[Recover2["Reduce"] = 100] = "Reduce";
        Recover2[Recover2["MaxNext"] = 4] = "MaxNext";
        Recover2[Recover2["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover2[Recover2["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
      })(Recover || (Recover = {}));
      var SimulatedStack = class {
        constructor(start) {
          this.start = start;
          this.state = start.state;
          this.stack = start.stack;
          this.base = this.stack.length;
        }
        reduce(action) {
          let term = action & 65535, depth = action >> 19;
          if (depth == 0) {
            if (this.stack == this.start.stack)
              this.stack = this.stack.slice();
            this.stack.push(this.state, 0, 0);
            this.base += 3;
          } else {
            this.base -= (depth - 1) * 3;
          }
          let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto;
        }
      };
      var StackBufferCursor = class {
        constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
            this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
          let next = this.stack.parent;
          if (next != null) {
            this.index = this.stack.bufferBase - next.bufferBase;
            this.stack = next;
            this.buffer = next.buffer;
          }
        }
        get id() {
          return this.buffer[this.index - 4];
        }
        get start() {
          return this.buffer[this.index - 3];
        }
        get end() {
          return this.buffer[this.index - 2];
        }
        get size() {
          return this.buffer[this.index - 1];
        }
        next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
            this.maybeNext();
        }
        fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
        }
      };
      var CachedToken = class {
        constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
        }
      };
      var nullToken = new CachedToken();
      var InputStream = class {
        constructor(input, ranges) {
          this.input = input;
          this.ranges = ranges;
          this.chunk = "";
          this.chunkOff = 0;
          this.chunk2 = "";
          this.chunk2Pos = 0;
          this.next = -1;
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
        }
        resolveOffset(offset, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset;
          while (pos < range.from) {
            if (!index)
              return null;
            let next = this.ranges[--index];
            pos -= range.from - next.to;
            range = next;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
            if (index == this.ranges.length - 1)
              return null;
            let next = this.ranges[++index];
            pos += next.from - range.to;
            range = next;
          }
          return pos;
        }
        peek(offset) {
          let idx = this.chunkOff + offset, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
            pos = this.pos + offset;
            result = this.chunk.charCodeAt(idx);
          } else {
            let resolved = this.resolveOffset(offset, 1);
            if (resolved == null)
              return -1;
            pos = resolved;
            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
              result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
            } else {
              let i = this.rangeIndex, range = this.range;
              while (range.to <= pos)
                range = this.ranges[++i];
              this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
              if (pos + this.chunk2.length > range.to)
                this.chunk2 = this.chunk2.slice(0, range.to - pos);
              result = this.chunk2.charCodeAt(0);
            }
          }
          if (pos >= this.token.lookAhead)
            this.token.lookAhead = pos + 1;
          return result;
        }
        acceptToken(token, endOffset = 0) {
          let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end == null || end < this.token.start)
            throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end;
        }
        getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
            let { chunk, chunkPos } = this;
            this.chunk = this.chunk2;
            this.chunkPos = this.chunk2Pos;
            this.chunk2 = chunk;
            this.chunk2Pos = chunkPos;
            this.chunkOff = this.pos - this.chunkPos;
          } else {
            this.chunk2 = this.chunk;
            this.chunk2Pos = this.chunkPos;
            let nextChunk = this.input.chunk(this.pos);
            let end = this.pos + nextChunk.length;
            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
            this.chunkPos = this.pos;
            this.chunkOff = 0;
          }
        }
        readNext() {
          if (this.chunkOff >= this.chunk.length) {
            this.getChunk();
            if (this.chunkOff == this.chunk.length)
              return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        advance(n = 1) {
          this.chunkOff += n;
          while (this.pos + n >= this.range.to) {
            if (this.rangeIndex == this.ranges.length - 1)
              return this.setDone();
            n -= this.range.to - this.pos;
            this.range = this.ranges[++this.rangeIndex];
            this.pos = this.range.from;
          }
          this.pos += n;
          if (this.pos >= this.token.lookAhead)
            this.token.lookAhead = this.pos + 1;
          return this.readNext();
        }
        setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
        }
        reset(pos, token) {
          if (token) {
            this.token = token;
            token.start = pos;
            token.lookAhead = pos + 1;
            token.value = token.extended = -1;
          } else {
            this.token = nullToken;
          }
          if (this.pos != pos) {
            this.pos = pos;
            if (pos == this.end) {
              this.setDone();
              return this;
            }
            while (pos < this.range.from)
              this.range = this.ranges[--this.rangeIndex];
            while (pos >= this.range.to)
              this.range = this.ranges[++this.rangeIndex];
            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
              this.chunkOff = pos - this.chunkPos;
            } else {
              this.chunk = "";
              this.chunkOff = 0;
            }
            this.readNext();
          }
          return this;
        }
        read(from, to) {
          if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
          if (from >= this.range.from && to <= this.range.to)
            return this.input.read(from, to);
          let result = "";
          for (let r of this.ranges) {
            if (r.from >= to)
              break;
            if (r.to > from)
              result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
          }
          return result;
        }
      };
      var TokenGroup = class {
        constructor(data, id2) {
          this.data = data;
          this.id = id2;
        }
        token(input, stack) {
          readToken(this.data, input, stack, this.id);
        }
      };
      TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
      var ExternalTokenizer = class {
        constructor(token, options = {}) {
          this.token = token;
          this.contextual = !!options.contextual;
          this.fallback = !!options.fallback;
          this.extend = !!options.extend;
        }
      };
      function readToken(data, input, stack, group) {
        let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;
        scan:
          for (; ; ) {
            if ((groupMask & data[state]) == 0)
              break;
            let accEnd = data[state + 1];
            for (let i = state + 3; i < accEnd; i += 2)
              if ((data[i + 1] & groupMask) > 0) {
                let term = data[i];
                if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {
                  input.acceptToken(term);
                  break;
                }
              }
            for (let next = input.next, low = 0, high = data[state + 2]; low < high; ) {
              let mid = low + high >> 1;
              let index = accEnd + mid + (mid << 1);
              let from = data[index], to = data[index + 1];
              if (next < from)
                high = mid;
              else if (next >= to)
                low = mid + 1;
              else {
                state = data[index + 2];
                input.advance();
                continue scan;
              }
            }
            break;
          }
      }
      function decodeArray(input, Type = Uint16Array) {
        if (typeof input != "string")
          return input;
        let array = null;
        for (let pos = 0, out = 0; pos < input.length; ) {
          let value = 0;
          for (; ; ) {
            let next = input.charCodeAt(pos++), stop = false;
            if (next == 126) {
              value = 65535;
              break;
            }
            if (next >= 92)
              next--;
            if (next >= 34)
              next--;
            let digit = next - 32;
            if (digit >= 46) {
              digit -= 46;
              stop = true;
            }
            value += digit;
            if (stop)
              break;
            value *= 46;
          }
          if (array)
            array[out++] = value;
          else
            array = new Type(value);
        }
        return array;
      }
      var verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
      var stackIDs = null;
      var Safety;
      (function(Safety2) {
        Safety2[Safety2["Margin"] = 25] = "Margin";
      })(Safety || (Safety = {}));
      function cutAt(tree, pos, side) {
        let cursor = tree.fullCursor();
        cursor.moveTo(pos);
        for (; ; ) {
          if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
            for (; ; ) {
              if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25));
              if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                break;
              if (!cursor.parent())
                return side < 0 ? 0 : tree.length;
            }
        }
      }
      var FragmentCursor = class {
        constructor(fragments, nodeSet) {
          this.fragments = fragments;
          this.nodeSet = nodeSet;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
        }
        nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
            while (this.trees.length) {
              this.trees.pop();
              this.start.pop();
              this.index.pop();
            }
            this.trees.push(fr.tree);
            this.start.push(-fr.offset);
            this.index.push(0);
            this.nextStart = this.safeFrom;
          } else {
            this.nextStart = 1e9;
          }
        }
        nodeAt(pos) {
          if (pos < this.nextStart)
            return null;
          while (this.fragment && this.safeTo <= pos)
            this.nextFragment();
          if (!this.fragment)
            return null;
          for (; ; ) {
            let last = this.trees.length - 1;
            if (last < 0) {
              this.nextFragment();
              return null;
            }
            let top = this.trees[last], index = this.index[last];
            if (index == top.children.length) {
              this.trees.pop();
              this.start.pop();
              this.index.pop();
              continue;
            }
            let next = top.children[index];
            let start = this.start[last] + top.positions[index];
            if (start > pos) {
              this.nextStart = start;
              return null;
            }
            if (next instanceof common.Tree) {
              if (start == pos) {
                if (start < this.safeFrom)
                  return null;
                let end = start + next.length;
                if (end <= this.safeTo) {
                  let lookAhead = next.prop(common.NodeProp.lookAhead);
                  if (!lookAhead || end + lookAhead < this.fragment.to)
                    return next;
                }
              }
              this.index[last]++;
              if (start + next.length >= Math.max(this.safeFrom, pos)) {
                this.trees.push(next);
                this.start.push(start);
                this.index.push(0);
              }
            } else {
              this.index[last]++;
              this.nextStart = start + next.length;
            }
          }
        }
      };
      var TokenCache = class {
        constructor(parser, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser.tokenizers.map((_) => new CachedToken());
        }
        getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser } = stack.p, { tokenizers } = parser;
          let mask = parser.stateSlot(stack.state, 3);
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
            if ((1 << i & mask) == 0)
              continue;
            let tokenizer = tokenizers[i], token = this.tokens[i];
            if (main && !tokenizer.fallback)
              continue;
            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
              this.updateCachedToken(token, tokenizer, stack);
              token.mask = mask;
              token.context = context;
            }
            if (token.lookAhead > token.end + 25)
              lookAhead = Math.max(token.lookAhead, lookAhead);
            if (token.value != 0) {
              let startIndex = actionIndex;
              if (token.extended > -1)
                actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
              actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
              if (!tokenizer.extend) {
                main = token;
                if (actionIndex > startIndex)
                  break;
              }
            }
          }
          while (this.actions.length > actionIndex)
            this.actions.pop();
          if (lookAhead)
            stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
            main = new CachedToken();
            main.value = stack.p.parser.eofTerm;
            main.start = main.end = stack.pos;
            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
        }
        getMainToken(stack) {
          if (this.mainToken)
            return this.mainToken;
          let main = new CachedToken(), { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0;
          return main;
        }
        updateCachedToken(token, tokenizer, stack) {
          tokenizer.token(this.stream.reset(stack.pos, token), stack);
          if (token.value > -1) {
            let { parser } = stack.p;
            for (let i = 0; i < parser.specialized.length; i++)
              if (parser.specialized[i] == token.value) {
                let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                  if ((result & 1) == 0)
                    token.value = result >> 1;
                  else
                    token.extended = result >> 1;
                  break;
                }
              }
          } else {
            token.value = 0;
            token.end = Math.min(stack.p.stream.end, stack.pos + 1);
          }
        }
        putAction(action, token, end, index) {
          for (let i = 0; i < index; i += 3)
            if (this.actions[i] == action)
              return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end;
          return index;
        }
        addActions(stack, token, end, index) {
          let { state } = stack, { parser } = stack.p, { data } = parser;
          for (let set = 0; set < 2; set++) {
            for (let i = parser.stateSlot(state, set ? 2 : 1); ; i += 3) {
              if (data[i] == 65535) {
                if (data[i + 1] == 1) {
                  i = pair(data, i + 2);
                } else {
                  if (index == 0 && data[i + 1] == 2)
                    index = this.putAction(pair(data, i + 1), token, end, index);
                  break;
                }
              }
              if (data[i] == token)
                index = this.putAction(pair(data, i + 1), token, end, index);
            }
          }
          return index;
        }
      };
      var Rec;
      (function(Rec2) {
        Rec2[Rec2["Distance"] = 5] = "Distance";
        Rec2[Rec2["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        Rec2[Rec2["MinBufferLengthPrune"] = 200] = "MinBufferLengthPrune";
        Rec2[Rec2["ForceReduceLimit"] = 10] = "ForceReduceLimit";
      })(Rec || (Rec = {}));
      var Parse = class {
        constructor(parser, input, fragments, ranges) {
          this.parser = parser;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 9812;
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser, this.stream);
          this.topTerm = parser.top[1];
          let { from } = ranges[0];
          this.stacks = [Stack.start(this, parser.top[0], from)];
          this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;
        }
        get parsedPos() {
          return this.minStackPos;
        }
        advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          for (let i = 0; i < stacks.length; i++) {
            let stack = stacks[i];
            for (; ; ) {
              this.tokens.mainToken = null;
              if (stack.pos > pos) {
                newStacks.push(stack);
              } else if (this.advanceStack(stack, newStacks, stacks)) {
                continue;
              } else {
                if (!stopped) {
                  stopped = [];
                  stoppedTokens = [];
                }
                stopped.push(stack);
                let tok = this.tokens.getMainToken(stack);
                stoppedTokens.push(tok.value, tok.end);
              }
              break;
            }
          }
          if (!newStacks.length) {
            let finished = stopped && findFinished(stopped);
            if (finished)
              return this.stackToTree(finished);
            if (this.parser.strict) {
              if (verbose && stopped)
                console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
              throw new SyntaxError("No parse at " + pos);
            }
            if (!this.recovering)
              this.recovering = 5;
          }
          if (this.recovering && stopped) {
            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
            if (finished)
              return this.stackToTree(finished.forceAll());
          }
          if (this.recovering) {
            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
            if (newStacks.length > maxRemaining) {
              newStacks.sort((a, b) => b.score - a.score);
              while (newStacks.length > maxRemaining)
                newStacks.pop();
            }
            if (newStacks.some((s) => s.reducePos > pos))
              this.recovering--;
          } else if (newStacks.length > 1) {
            outer:
              for (let i = 0; i < newStacks.length - 1; i++) {
                let stack = newStacks[i];
                for (let j = i + 1; j < newStacks.length; j++) {
                  let other = newStacks[j];
                  if (stack.sameState(other) || stack.buffer.length > 200 && other.buffer.length > 200) {
                    if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                      newStacks.splice(j--, 1);
                    } else {
                      newStacks.splice(i--, 1);
                      continue outer;
                    }
                  }
                }
              }
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
            if (newStacks[i].pos < this.minStackPos)
              this.minStackPos = newStacks[i].pos;
          return null;
        }
        stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
            throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
        }
        advanceStack(stack, stacks, split) {
          let start = stack.pos, { parser } = this;
          let base = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start > this.stoppedAt)
            return stack.forceReduce() ? stack : null;
          if (this.fragments) {
            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
            for (let cached = this.fragments.nodeAt(start); cached; ) {
              let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
              if (match > -1 && cached.length && (!strictCx || (cached.prop(common.NodeProp.contextHash) || 0) == cxHash)) {
                stack.useNode(cached, match);
                if (verbose)
                  console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                return true;
              }
              if (!(cached instanceof common.Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                break;
              let inner = cached.children[0];
              if (inner instanceof common.Tree && cached.positions[0] == 0)
                cached = inner;
              else
                break;
            }
          }
          let defaultReduce = parser.stateSlot(stack.state, 4);
          if (defaultReduce > 0) {
            stack.reduce(defaultReduce);
            if (verbose)
              console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535)})`);
            return true;
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length; ) {
            let action = actions[i++], term = actions[i++], end = actions[i++];
            let last = i == actions.length || !split;
            let localStack = last ? stack : stack.split();
            localStack.apply(action, term, end);
            if (verbose)
              console.log(base + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser.getName(action & 65535)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
            if (last)
              return true;
            else if (localStack.pos > start)
              stacks.push(localStack);
            else
              split.push(localStack);
          }
          return false;
        }
        advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (; ; ) {
            if (!this.advanceStack(stack, null, null))
              return false;
            if (stack.pos > pos) {
              pushStackDedup(stack, newStacks);
              return true;
            }
          }
        }
        runRecovery(stacks, tokens, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
            let base = verbose ? this.stackID(stack) + " -> " : "";
            if (stack.deadEnd) {
              if (restarted)
                continue;
              restarted = true;
              stack.restart();
              if (verbose)
                console.log(base + this.stackID(stack) + " (restarted)");
              let done = this.advanceFully(stack, newStacks);
              if (done)
                continue;
            }
            let force = stack.split(), forceBase = base;
            for (let j = 0; force.forceReduce() && j < 10; j++) {
              if (verbose)
                console.log(forceBase + this.stackID(force) + " (via force-reduce)");
              let done = this.advanceFully(force, newStacks);
              if (done)
                break;
              if (verbose)
                forceBase = this.stackID(force) + " -> ";
            }
            for (let insert of stack.recoverByInsert(token)) {
              if (verbose)
                console.log(base + this.stackID(insert) + " (via recover-insert)");
              this.advanceFully(insert, newStacks);
            }
            if (this.stream.end > stack.pos) {
              if (tokenEnd == stack.pos) {
                tokenEnd++;
                token = 0;
              }
              stack.recoverByDelete(token, tokenEnd);
              if (verbose)
                console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
              pushStackDedup(stack, newStacks);
            } else if (!finished || finished.score < stack.score) {
              finished = stack;
            }
          }
          return finished;
        }
        stackToTree(stack) {
          stack.close();
          return common.Tree.build({
            buffer: StackBufferCursor.create(stack),
            nodeSet: this.parser.nodeSet,
            topID: this.topTerm,
            maxBufferLength: this.parser.bufferLength,
            reused: this.reused,
            start: this.ranges[0].from,
            length: stack.pos - this.ranges[0].from,
            minRepeatType: this.parser.minRepeatTerm
          });
        }
        stackID(stack) {
          let id2 = (stackIDs || (stackIDs = new WeakMap())).get(stack);
          if (!id2)
            stackIDs.set(stack, id2 = String.fromCodePoint(this.nextStackID++));
          return id2 + stack;
        }
      };
      function pushStackDedup(stack, newStacks) {
        for (let i = 0; i < newStacks.length; i++) {
          let other = newStacks[i];
          if (other.pos == stack.pos && other.sameState(stack)) {
            if (newStacks[i].score < stack.score)
              newStacks[i] = stack;
            return;
          }
        }
        newStacks.push(stack);
      }
      var Dialect = class {
        constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
        }
        allows(term) {
          return !this.disabled || this.disabled[term] == 0;
        }
      };
      var id = (x) => x;
      var ContextTracker = class {
        constructor(spec) {
          this.start = spec.start;
          this.shift = spec.shift || id;
          this.reduce = spec.reduce || id;
          this.reuse = spec.reuse || id;
          this.hash = spec.hash || (() => 0);
          this.strict = spec.strict !== false;
        }
      };
      var LRParser = class extends common.Parser {
        constructor(spec) {
          super();
          this.wrappers = [];
          if (spec.version != 13)
            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
            nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map((r) => spec.topRules[r][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
            nodeProps.push([]);
          function setProp(nodeID, prop, value) {
            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
            for (let propSpec of spec.nodeProps) {
              let prop = propSpec[0];
              for (let i = 1; i < propSpec.length; ) {
                let next = propSpec[i++];
                if (next >= 0) {
                  setProp(next, prop, propSpec[i++]);
                } else {
                  let value = propSpec[i + -next];
                  for (let j = -next; j > 0; j--)
                    setProp(propSpec[i++], prop, value);
                  i++;
                }
              }
            }
          this.nodeSet = new common.NodeSet(nodeNames.map((name, i) => common.NodeType.define({
            name: i >= this.minRepeatTerm ? void 0 : name,
            id: i,
            props: nodeProps[i],
            top: topTerms.indexOf(i) > -1,
            error: i == 0,
            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          this.strict = false;
          this.bufferLength = common.DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
          this.specializers = [];
          if (spec.specialized)
            for (let i = 0; i < spec.specialized.length; i++) {
              this.specialized[i] = spec.specialized[i].term;
              this.specializers[i] = spec.specialized[i].get;
            }
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
          let parse = new Parse(this, input, fragments, ranges);
          for (let w of this.wrappers)
            parse = w(parse, input, fragments, ranges);
          return parse;
        }
        getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
            return -1;
          for (let pos = table[term + 1]; ; ) {
            let groupTag = table[pos++], last = groupTag & 1;
            let target = table[pos++];
            if (last && loose)
              return target;
            for (let end = pos + (groupTag >> 1); pos < end; pos++)
              if (table[pos] == state)
                return target;
            if (last)
              return -1;
          }
        }
        hasAction(state, terminal) {
          let data = this.data;
          for (let set = 0; set < 2; set++) {
            for (let i = this.stateSlot(state, set ? 2 : 1), next; ; i += 3) {
              if ((next = data[i]) == 65535) {
                if (data[i + 1] == 1)
                  next = data[i = pair(data, i + 2)];
                else if (data[i + 1] == 2)
                  return pair(data, i + 2);
                else
                  break;
              }
              if (next == terminal || next == 0)
                return pair(data, i + 1);
            }
          }
          return 0;
        }
        stateSlot(state, slot) {
          return this.states[state * 6 + slot];
        }
        stateFlag(state, flag) {
          return (this.stateSlot(state, 0) & flag) > 0;
        }
        validAction(state, action) {
          if (action == this.stateSlot(state, 4))
            return true;
          for (let i = this.stateSlot(state, 1); ; i += 3) {
            if (this.data[i] == 65535) {
              if (this.data[i + 1] == 1)
                i = pair(this.data, i + 2);
              else
                return false;
            }
            if (action == pair(this.data, i + 1))
              return true;
          }
        }
        nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(state, 1); ; i += 3) {
            if (this.data[i] == 65535) {
              if (this.data[i + 1] == 1)
                i = pair(this.data, i + 2);
              else
                break;
            }
            if ((this.data[i + 2] & 65536 >> 16) == 0) {
              let value = this.data[i + 1];
              if (!result.some((v, i2) => i2 & 1 && v == value))
                result.push(this.data[i], value);
            }
          }
          return result;
        }
        overrides(token, prev) {
          let iPrev = findOffset(this.data, this.tokenPrecTable, prev);
          return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
        }
        configure(config) {
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
            copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
            let info = this.topRules[config.top];
            if (!info)
              throw new RangeError(`Invalid top rule name ${config.top}`);
            copy.top = info;
          }
          if (config.tokenizers)
            copy.tokenizers = this.tokenizers.map((t) => {
              let found = config.tokenizers.find((r) => r.from == t);
              return found ? found.to : t;
            });
          if (config.contextTracker)
            copy.context = config.contextTracker;
          if (config.dialect)
            copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
            copy.strict = config.strict;
          if (config.wrap)
            copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
            copy.bufferLength = config.bufferLength;
          return copy;
        }
        getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        get eofTerm() {
          return this.maxNode + 1;
        }
        get topNode() {
          return this.nodeSet.types[this.top[1]];
        }
        dynamicPrecedence(term) {
          let prec = this.dynamicPrecedences;
          return prec == null ? 0 : prec[term] || 0;
        }
        parseDialect(dialect) {
          let values = Object.keys(this.dialects), flags = values.map(() => false);
          if (dialect)
            for (let part of dialect.split(" ")) {
              let id2 = values.indexOf(part);
              if (id2 >= 0)
                flags[id2] = true;
            }
          let disabled = null;
          for (let i = 0; i < values.length; i++)
            if (!flags[i]) {
              for (let j = this.dialects[values[i]], id2; (id2 = this.data[j++]) != 65535; )
                (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id2] = 1;
            }
          return new Dialect(dialect, flags, disabled);
        }
        static deserialize(spec) {
          return new LRParser(spec);
        }
      };
      function pair(data, off) {
        return data[off] | data[off + 1] << 16;
      }
      function findOffset(data, start, term) {
        for (let i = start, next; (next = data[i]) != 65535; i++)
          if (next == term)
            return i - start;
        return -1;
      }
      function findFinished(stacks) {
        let best = null;
        for (let stack of stacks) {
          let stopped = stack.p.stoppedAt;
          if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2) && (!best || best.score < stack.score))
            best = stack;
        }
        return best;
      }
      exports.ContextTracker = ContextTracker;
      exports.ExternalTokenizer = ExternalTokenizer;
      exports.InputStream = InputStream;
      exports.LRParser = LRParser;
      exports.Stack = Stack;
    }
  });

  // ../../../node_modules/@lezer/html/dist/index.cjs
  var require_dist25 = __commonJS({
    "../../../node_modules/@lezer/html/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var lr = require_dist24();
      var common = require_dist6();
      var scriptText = 53;
      var StartCloseScriptTag = 1;
      var styleText = 54;
      var StartCloseStyleTag = 2;
      var textareaText = 55;
      var StartCloseTextareaTag = 3;
      var StartTag = 4;
      var StartScriptTag = 5;
      var StartStyleTag = 6;
      var StartTextareaTag = 7;
      var StartCloseTag = 8;
      var NoMatchStartCloseTag = 9;
      var MismatchedStartCloseTag = 10;
      var missingCloseTag = 56;
      var IncompleteCloseTag = 11;
      var SelfCloseEndTag = 12;
      var commentContent$1 = 57;
      var Element = 18;
      var ScriptText = 27;
      var StyleText = 30;
      var TextareaText = 33;
      var OpenTag = 35;
      var Dialect_noMatch = 0;
      var selfClosers = {
        area: true,
        base: true,
        br: true,
        col: true,
        command: true,
        embed: true,
        frame: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true,
        menuitem: true
      };
      var implicitlyClosed = {
        dd: true,
        li: true,
        optgroup: true,
        option: true,
        p: true,
        rp: true,
        rt: true,
        tbody: true,
        td: true,
        tfoot: true,
        th: true,
        tr: true
      };
      var closeOnOpen = {
        dd: { dd: true, dt: true },
        dt: { dd: true, dt: true },
        li: { li: true },
        option: { option: true, optgroup: true },
        optgroup: { optgroup: true },
        p: {
          address: true,
          article: true,
          aside: true,
          blockquote: true,
          dir: true,
          div: true,
          dl: true,
          fieldset: true,
          footer: true,
          form: true,
          h1: true,
          h2: true,
          h3: true,
          h4: true,
          h5: true,
          h6: true,
          header: true,
          hgroup: true,
          hr: true,
          menu: true,
          nav: true,
          ol: true,
          p: true,
          pre: true,
          section: true,
          table: true,
          ul: true
        },
        rp: { rp: true, rt: true },
        rt: { rp: true, rt: true },
        tbody: { tbody: true, tfoot: true },
        td: { td: true, th: true },
        tfoot: { tbody: true },
        th: { td: true, th: true },
        thead: { tbody: true, tfoot: true },
        tr: { tr: true }
      };
      function nameChar(ch) {
        return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161;
      }
      function isSpace(ch) {
        return ch == 9 || ch == 10 || ch == 13 || ch == 32;
      }
      var cachedName = null;
      var cachedInput = null;
      var cachedPos = 0;
      function tagNameAfter(input, offset) {
        let pos = input.pos + offset;
        if (cachedPos == pos && cachedInput == input)
          return cachedName;
        let next = input.peek(offset);
        while (isSpace(next))
          next = input.peek(++offset);
        let name = "";
        for (; ; ) {
          if (!nameChar(next))
            break;
          name += String.fromCharCode(next);
          next = input.peek(++offset);
        }
        cachedInput = input;
        cachedPos = pos;
        return cachedName = name || (next == question || next == bang ? void 0 : null);
      }
      var lessThan = 60;
      var greaterThan = 62;
      var slash = 47;
      var question = 63;
      var bang = 33;
      function ElementContext(name, parent) {
        this.name = name;
        this.parent = parent;
        this.hash = parent ? parent.hash : 0;
        for (let i = 0; i < name.length; i++)
          this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
      }
      var startTagTerms = [StartTag, StartScriptTag, StartStyleTag, StartTextareaTag];
      var elementContext = new lr.ContextTracker({
        start: null,
        shift(context, term, stack, input) {
          return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
        },
        reduce(context, term) {
          return term == Element && context ? context.parent : context;
        },
        reuse(context, node, stack, input) {
          let type = node.type.id;
          return type == StartTag || type == OpenTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
        },
        hash(context) {
          return context ? context.hash : 0;
        },
        strict: false
      });
      var tagStart = new lr.ExternalTokenizer((input, stack) => {
        if (input.next != lessThan) {
          if (input.next < 0 && stack.context)
            input.acceptToken(missingCloseTag);
          return;
        }
        input.advance();
        let close = input.next == slash;
        if (close)
          input.advance();
        let name = tagNameAfter(input, 0);
        if (name === void 0)
          return;
        if (!name)
          return input.acceptToken(close ? IncompleteCloseTag : StartTag);
        let parent = stack.context ? stack.context.name : null;
        if (close) {
          if (name == parent)
            return input.acceptToken(StartCloseTag);
          if (parent && implicitlyClosed[parent])
            return input.acceptToken(missingCloseTag, -2);
          if (stack.dialectEnabled(Dialect_noMatch))
            return input.acceptToken(NoMatchStartCloseTag);
          for (let cx = stack.context; cx; cx = cx.parent)
            if (cx.name == name)
              return;
          input.acceptToken(MismatchedStartCloseTag);
        } else {
          if (name == "script")
            return input.acceptToken(StartScriptTag);
          if (name == "style")
            return input.acceptToken(StartStyleTag);
          if (name == "textarea")
            return input.acceptToken(StartTextareaTag);
          if (parent && closeOnOpen[parent] && closeOnOpen[parent][name])
            input.acceptToken(missingCloseTag, -1);
          else
            input.acceptToken(StartTag);
        }
      }, { contextual: true });
      var selfClosed = new lr.ExternalTokenizer((input, stack) => {
        let size = 1;
        if (input.next == slash) {
          if (input.peek(1) != greaterThan)
            return;
          size = 2;
        } else if (input.next != greaterThan) {
          return;
        }
        if (stack.context && selfClosers[stack.context.name])
          input.acceptToken(SelfCloseEndTag, size);
      });
      var commentContent = new lr.ExternalTokenizer((input) => {
        for (let endPos = 0, i = 0; ; i++) {
          if (input.next < 0) {
            if (i)
              input.acceptToken(commentContent$1);
            break;
          }
          if (input.next == "-->".charCodeAt(endPos)) {
            endPos++;
            if (endPos == 3) {
              if (i > 3)
                input.acceptToken(commentContent$1, -2);
              break;
            }
          } else {
            endPos = 0;
          }
          input.advance();
        }
      });
      function contentTokenizer(tag, textToken, endToken) {
        let lastState = 2 + tag.length;
        return new lr.ExternalTokenizer((input) => {
          for (let state = 0, matchedLen = 0, i = 0; ; i++) {
            if (input.next < 0) {
              if (i)
                input.acceptToken(textToken);
              break;
            }
            if (state == 0 && input.next == lessThan || state == 1 && input.next == slash || state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
              state++;
              matchedLen++;
            } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
              matchedLen++;
            } else if (state == lastState && input.next == greaterThan) {
              if (i > matchedLen)
                input.acceptToken(textToken, -matchedLen);
              else
                input.acceptToken(endToken, -(matchedLen - 2));
              break;
            } else if ((input.next == 10 || input.next == 13) && i) {
              input.acceptToken(textToken, 1);
              break;
            } else {
              state = matchedLen = 0;
            }
            input.advance();
          }
        });
      }
      var scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);
      var styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);
      var textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);
      var parser = lr.LRParser.deserialize({
        version: 13,
        states: ",fOVO!jOOO!TQ#tO'#CoO!YQ#tO'#CyO!_Q#tO'#C|O!dQ#tO'#DPO!iOXO'#CnO!tOYO'#CnO#PO[O'#CnO$YO!jO'#CnOOOW'#Cn'#CnO$aO$fO'#DSO$iQ#tO'#DUO$nQ#tO'#DVOOOW'#Dj'#DjOOOW'#DX'#DXQVO!jOOO$sQ&jO,59ZO${Q&jO,59eO%TQ&jO,59hO%]Q&zO,59kOOOX'#D]'#D]O%hOXO'#CwO%sOXO,59YOOOY'#D^'#D^O%{OYO'#CzO&WOYO,59YOOO['#D_'#D_O&`O[O'#C}O&kO[O,59YOOOW'#D`'#D`O&sO!jO,59YO&zQ#tO'#DQOOOW,59Y,59YOOOp'#Da'#DaO'PO$fO,59nOOOW,59n,59nO'XQ#tO,59pO'^Q#tO,59qOOOW-E7V-E7VO'cQ&zO'#CqOOQ`'#DY'#DYO'qQ&jO1G.uOOOX1G.u1G.uO'yQ&jO1G/POOOY1G/P1G/PO(RQ&jO1G/SOOO[1G/S1G/SO(ZQ&zO1G/VOOOW1G/V1G/VOOOW1G/X1G/XOOOX-E7Z-E7ZO(fQ#tO'#CxOOOW1G.t1G.tOOOY-E7[-E7[O(kQ#tO'#C{OOO[-E7]-E7]O(pQ#tO'#DOOOOW-E7^-E7^O(uQ#tO,59lOOOp-E7_-E7_OOOW1G/Y1G/YOOOW1G/[1G/[OOOW1G/]1G/]O(zQ,UO,59]OOQ`-E7W-E7WOOOX7+$a7+$aOOOY7+$k7+$kOOO[7+$n7+$nOOOW7+$q7+$qOOOW7+$s7+$sO)VQ#tO,59dO)[Q#tO,59gO)aQ#tO,59jOOOW1G/W1G/WO)fO7[O'#CtO)tOMhO'#CtOOQ`1G.w1G.wOOOW1G/O1G/OOOOW1G/R1G/ROOOW1G/U1G/UOOOO'#DZ'#DZO*SO7[O,59`OOQ`,59`,59`OOOO'#D['#D[O*bOMhO,59`OOOO-E7X-E7XOOQ`1G.z1G.zOOOO-E7Y-E7Y",
        stateData: "*x~O!]OS~OSSOTPOUQOVROX[OYZOZ]O^]O_]O`]Oa]Ow]Oz^O!cYO~Od`O~OdaO~OdbO~OdcO~O!VdOPkP!YkP~O!WgOQnP!YnP~O!XjORqP!YqP~OSSOTPOUQOVROWoOX[OYZOZ]O^]O_]O`]Oa]Ow]O!cYO~O!YpO~P#[O!ZqO!dsO~OdtO~OduO~OfwOjzO~OfwOj|O~OfwOj!OO~O[!ROfwOj!QO~O!VdOPkX!YkX~OP!TO!Y!UO~O!WgOQnX!YnX~OQ!WO!Y!UO~O!XjORqX!YqX~OR!YO!Y!UO~O!Y!UO~P#[Od![O~O!ZqO!d!^O~Oj!_O~Oj!`O~Og!aOfeXjeX[eX~OfwOj!cO~OfwOj!dO~OfwOj!eO~O[!gOfwOj!fO~Od!hO~Od!iO~Od!jO~Oj!kO~Oi!nO!_!lO!a!mO~Oj!oO~Oj!pO~Oj!qO~O_!rO`!rO!_!tO!`!rO~O_!uO`!uO!a!tO!b!uO~O_!rO`!rO!_!xO!`!rO~O_!uO`!uO!a!xO!b!uO~O`_a!cwz!c~",
        goto: "%i!_PPPPPPPPPPPPPPPPPP!`!fP!lPP!vPP!y!|#P#V#Y#]#c#f#i#o#u!`P!`!`P#{$R$e$k$q$w$}%T%ZPPPPPPPP%aX]OW_nXTOW_nax`abcy{}!PR!n!aRfTR!UfXUOW_nRiUR!UiXVOW_nRlVR!UlXWOW_nQpWR!UnXXOW_nQ_ORv_Qy`Q{aQ}bQ!PcX!by{}!PQ!s!lR!w!sQ!v!mR!y!vQeTR!SeQhUR!VhQkVR!XkQnWR!ZnQrYR!]rS^O_TmWn",
        nodeNames: "\u26A0 StartCloseTag StartCloseTag StartCloseTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag SelfCloseEndTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue EndTag ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
        maxTerm: 66,
        context: elementContext,
        nodeProps: [
          [common.NodeProp.closedBy, -9, 1, 2, 3, 5, 6, 7, 8, 9, 10, "EndTag", 4, "EndTag SelfCloseEndTag", -4, 19, 29, 32, 35, "CloseTag"],
          [common.NodeProp.group, -9, 11, 15, 16, 17, 18, 38, 39, 40, 41, "Entity", 14, "Entity TextContent", -3, 27, 30, 33, "TextContent Entity"],
          [common.NodeProp.openedBy, 12, "StartTag", 26, "StartTag StartCloseTag", -4, 28, 31, 34, 36, "OpenTag"]
        ],
        skippedNodes: [0],
        repeatNodeCount: 9,
        tokenData: "!#b!aR!WOX$kXY)sYZ)sZ]$k]^)s^p$kpq)sqr$krs*zsv$kvw+dwx2yx}$k}!O3f!O!P$k!P!Q7_!Q![$k![!]8u!]!^$k!^!_>b!_!`!!p!`!a8T!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U$k4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!Z$vc^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!R&[V^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&Rq&xT^P!bpOv&qwx'Xx!^&q!^!_'g!_~&qP'^R^POv'Xw!^'X!_~'Xp'lQ!bpOv'gx~'ga'yU^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r`(bR!``Or(]sv(]w~(]!Q(rT!``!bpOr(krs'gsv(kwx(]x~(kW)WXiWOX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!a*O^^P!``!bp!]^OX&RXY)sYZ)sZ]&R]^)s^p&Rpq)sqr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!Z+TT!_h^P!bpOv&qwx'Xx!^&q!^!_'g!_~&q!Z+kbiWaPOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst/]tw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^)R!^!a.Q!a$f,s$f$g.Q$g~,s!Z,xbiWOX,sXZ.QZ],s]^.Q^p,sqr,srs.Qst)Rtw,swx.Qx!P,s!P!Q.Q!Q!],s!]!^.i!^!a.Q!a$f,s$f$g.Q$g~,s!R.TTOp.Qqs.Qt!].Q!]!^.d!^~.Q!R.iO_!R!Z.pXiW_!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z/baiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^)R!^!a1q!a$f0g$f$g1q$g~0g!Z0laiWOX0gXZ1qZ]0g]^1q^p0gqr0grs1qsw0gwx1qx!P0g!P!Q1q!Q!]0g!]!^2V!^!a1q!a$f0g$f$g1q$g~0g!R1tSOp1qq!]1q!]!^2Q!^~1q!R2VO`!R!Z2^XiW`!ROX)RZ])R^p)Rqr)Rsw)Rx!P)R!Q!^)R!a$f)R$g~)R!Z3SU!ax^P!``Or'rrs'Xsv'rw!^'r!^!_(]!_~'r!]3qe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O5S!O!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g~$k!]5_d^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!`&R!`!a6m!a$f$k$f$g&R$g~$k!T6xV^P!``!bp!dQOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!X7hX^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_!`&R!`!a8T!a~&R!X8`VjU^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R!a9U!YfSdQ^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx}$k}!O8u!O!P8u!P!Q&R!Q![8u![!]8u!]!^$k!^!_(k!_!a&R!a!c$k!c!}8u!}#R$k#R#S8u#S#T$k#T#o8u#o$f$k$f$g&R$g$}$k$}%O8u%O%W$k%W%o8u%o%p$k%p&a8u&a&b$k&b1p8u1p4U8u4U4d8u4d4e$k4e$IS8u$IS$I`$k$I`$Ib8u$Ib$Je$k$Je$Jg8u$Jg$Kh$k$Kh%#t8u%#t&/x$k&/x&Et8u&Et&FV$k&FV;'S8u;'S;:j<t;:j?&r$k?&r?Ah8u?Ah?BY$k?BY?Mn8u?Mn~$k!a=Pe^PiW!``!bpOX$kXZ&RZ]$k]^&R^p$kpq&Rqr$krs&qsv$kvw)Rwx'rx!P$k!P!Q&R!Q!^$k!^!_(k!_!a&R!a$f$k$f$g&R$g;=`$k;=`<%l8u<%l~$k!R>iW!``!bpOq(kqr?Rrs'gsv(kwx(]x!a(k!a!bKj!b~(k!R?YZ!``!bpOr(krs'gsv(kwx(]x}(k}!O?{!O!f(k!f!gAR!g#W(k#W#XGz#X~(k!R@SV!``!bpOr(krs'gsv(kwx(]x}(k}!O@i!O~(k!R@rT!``!bp!cPOr(krs'gsv(kwx(]x~(k!RAYV!``!bpOr(krs'gsv(kwx(]x!q(k!q!rAo!r~(k!RAvV!``!bpOr(krs'gsv(kwx(]x!e(k!e!fB]!f~(k!RBdV!``!bpOr(krs'gsv(kwx(]x!v(k!v!wBy!w~(k!RCQV!``!bpOr(krs'gsv(kwx(]x!{(k!{!|Cg!|~(k!RCnV!``!bpOr(krs'gsv(kwx(]x!r(k!r!sDT!s~(k!RD[V!``!bpOr(krs'gsv(kwx(]x!g(k!g!hDq!h~(k!RDxW!``!bpOrDqrsEbsvDqvwEvwxFfx!`Dq!`!aGb!a~DqqEgT!bpOvEbvxEvx!`Eb!`!aFX!a~EbPEyRO!`Ev!`!aFS!a~EvPFXOzPqF`Q!bpzPOv'gx~'gaFkV!``OrFfrsEvsvFfvwEvw!`Ff!`!aGQ!a~FfaGXR!``zPOr(]sv(]w~(]!RGkT!``!bpzPOr(krs'gsv(kwx(]x~(k!RHRV!``!bpOr(krs'gsv(kwx(]x#c(k#c#dHh#d~(k!RHoV!``!bpOr(krs'gsv(kwx(]x#V(k#V#WIU#W~(k!RI]V!``!bpOr(krs'gsv(kwx(]x#h(k#h#iIr#i~(k!RIyV!``!bpOr(krs'gsv(kwx(]x#m(k#m#nJ`#n~(k!RJgV!``!bpOr(krs'gsv(kwx(]x#d(k#d#eJ|#e~(k!RKTV!``!bpOr(krs'gsv(kwx(]x#X(k#X#YDq#Y~(k!RKqW!``!bpOrKjrsLZsvKjvwLowxNPx!aKj!a!b! g!b~KjqL`T!bpOvLZvxLox!aLZ!a!bM^!b~LZPLrRO!aLo!a!bL{!b~LoPMORO!`Lo!`!aMX!a~LoPM^OwPqMcT!bpOvLZvxLox!`LZ!`!aMr!a~LZqMyQ!bpwPOv'gx~'gaNUV!``OrNPrsLosvNPvwLow!aNP!a!bNk!b~NPaNpV!``OrNPrsLosvNPvwLow!`NP!`!a! V!a~NPa! ^R!``wPOr(]sv(]w~(]!R! nW!``!bpOrKjrsLZsvKjvwLowxNPx!`Kj!`!a!!W!a~Kj!R!!aT!``!bpwPOr(krs'gsv(kwx(]x~(k!V!!{VgS^P!``!bpOr&Rrs&qsv&Rwx'rx!^&R!^!_(k!_~&R",
        tokenizers: [scriptTokens, styleTokens, textareaTokens, tagStart, selfClosed, commentContent, 0, 1, 2, 3, 4, 5],
        topRules: { "Document": [0, 13] },
        dialects: { noMatch: 0 },
        tokenPrec: 446
      });
      function getAttrs(element, input) {
        let attrs = Object.create(null);
        for (let att of element.firstChild.getChildren("Attribute")) {
          let name = att.getChild("AttributeName"), value = att.getChild("AttributeValue") || att.getChild("UnquotedAttributeValue");
          if (name)
            attrs[input.read(name.from, name.to)] = !value ? "" : value.name == "AttributeValue" ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
        }
        return attrs;
      }
      function maybeNest(node, input, tags) {
        let attrs;
        for (let tag of tags) {
          if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent, input))))
            return { parser: tag.parser };
        }
        return null;
      }
      function configureNesting(tags) {
        let script = [], style = [], textarea = [];
        for (let tag of tags) {
          let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : null;
          if (!array)
            throw new RangeError("Only script, style, and textarea tags can host nested parsers");
          array.push(tag);
        }
        return common.parseMixed((node, input) => {
          let id = node.type.id;
          if (id == ScriptText)
            return maybeNest(node, input, script);
          if (id == StyleText)
            return maybeNest(node, input, style);
          if (id == TextareaText)
            return maybeNest(node, input, textarea);
          return null;
        });
      }
      exports.configureNesting = configureNesting;
      exports.parser = parser;
    }
  });

  // ../../../node_modules/@lezer/css/dist/index.cjs
  var require_dist26 = __commonJS({
    "../../../node_modules/@lezer/css/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var lr = require_dist24();
      var common = require_dist6();
      var descendantOp = 93;
      var Unit = 1;
      var callee = 94;
      var identifier = 95;
      var VariableName = 2;
      var space = [
        9,
        10,
        11,
        12,
        13,
        32,
        133,
        160,
        5760,
        8192,
        8193,
        8194,
        8195,
        8196,
        8197,
        8198,
        8199,
        8200,
        8201,
        8202,
        8232,
        8233,
        8239,
        8287,
        12288
      ];
      var colon = 58;
      var parenL = 40;
      var underscore = 95;
      var bracketL = 91;
      var dash = 45;
      var period = 46;
      var hash = 35;
      var percent = 37;
      function isAlpha(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161;
      }
      function isDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      var identifiers = new lr.ExternalTokenizer((input, stack) => {
        for (let inside = false, dashes = 0, i = 0; ; i++) {
          let { next } = input;
          if (isAlpha(next) || next == dash || next == underscore || inside && isDigit(next)) {
            if (!inside && (next != dash || i > 0))
              inside = true;
            if (dashes === i && next == dash)
              dashes++;
            input.advance();
          } else {
            if (inside)
              input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);
            break;
          }
        }
      });
      var descendant = new lr.ExternalTokenizer((input) => {
        if (space.includes(input.peek(-1))) {
          let { next } = input;
          if (isAlpha(next) || next == underscore || next == hash || next == period || next == bracketL || next == colon || next == dash)
            input.acceptToken(descendantOp);
        }
      });
      var unitToken = new lr.ExternalTokenizer((input) => {
        if (!space.includes(input.peek(-1))) {
          let { next } = input;
          if (next == percent) {
            input.advance();
            input.acceptToken(Unit);
          }
          if (isAlpha(next)) {
            do {
              input.advance();
            } while (isAlpha(input.next));
            input.acceptToken(Unit);
          }
        }
      });
      var spec_callee = { __proto__: null, lang: 32, "nth-child": 32, "nth-last-child": 32, "nth-of-type": 32, dir: 32, url: 60, "url-prefix": 60, domain: 60, regexp: 60, selector: 134 };
      var spec_AtKeyword = { __proto__: null, "@import": 114, "@media": 138, "@charset": 142, "@namespace": 146, "@keyframes": 152, "@supports": 164 };
      var spec_identifier = { __proto__: null, not: 128, only: 128, from: 158, to: 160 };
      var parser = lr.LRParser.deserialize({
        version: 13,
        states: "7WOYQ[OOOOQP'#Cd'#CdOOQP'#Cc'#CcO!ZQ[O'#CfO!}QXO'#CaO#UQ[O'#ChO#aQ[O'#DPO#fQ[O'#DTOOQP'#Ec'#EcO#kQdO'#DeO$VQ[O'#DrO#kQdO'#DtO$hQ[O'#DvO$sQ[O'#DyO$xQ[O'#EPO%WQ[O'#EROOQS'#Eb'#EbOOQS'#ES'#ESQYQ[OOOOQP'#Cg'#CgOOQP,59Q,59QO!ZQ[O,59QO%_Q[O'#EVO%yQWO,58{O&RQ[O,59SO#aQ[O,59kO#fQ[O,59oO%_Q[O,59sO%_Q[O,59uO%_Q[O,59vO'bQ[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO'iQWO,59SO'nQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO'sQ`O,59oOOQS'#Cp'#CpO#kQdO'#CqO'{QvO'#CsO)VQtO,5:POOQO'#Cx'#CxO'iQWO'#CwO)kQWO'#CyOOQS'#Ef'#EfOOQO'#Dh'#DhO)pQ[O'#DoO*OQWO'#EiO$xQ[O'#DmO*^QWO'#DpOOQO'#Ej'#EjO%|QWO,5:^O*cQpO,5:`OOQS'#Dx'#DxO*kQWO,5:bO*pQ[O,5:bOOQO'#D{'#D{O*xQWO,5:eO*}QWO,5:kO+VQWO,5:mOOQS-E8Q-E8QOOQP1G.l1G.lO+yQXO,5:qOOQO-E8T-E8TOOQS1G.g1G.gOOQP1G.n1G.nO'iQWO1G.nO'nQWO1G.nOOQP1G/V1G/VO,WQ`O1G/ZO,qQXO1G/_O-XQXO1G/aO-oQXO1G/bO.VQXO'#CdO.zQWO'#DaOOQS,59z,59zO/PQWO,59zO/XQ[O,59zO/`QdO'#CoO/gQ[O'#DOOOQP1G/Z1G/ZO#kQdO1G/ZO/nQpO,59]OOQS,59_,59_O#kQdO,59aO/vQWO1G/kOOQS,59c,59cO/{Q!bO,59eO0TQWO'#DhO0`QWO,5:TO0eQWO,5:ZO$xQ[O,5:VO$xQ[O'#EYO0mQWO,5;TO0xQWO,5:XO%_Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O1ZQWO1G/|O1`QdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XOOQP7+$Y7+$YOOQP7+$u7+$uO#kQdO7+$uO#kQdO,59{O1nQ[O'#EXO1xQWO1G/fOOQS1G/f1G/fO1xQWO1G/fO2QQtO'#ETO2uQdO'#EeO3PQWO,59ZO3UQXO'#EhO3]QWO,59jO3bQpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO3jQWO1G/PO#kQdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO3oQWO,5:tOOQO-E8W-E8WO3}QXO1G/vOOQS7+%h7+%hO4UQYO'#CsO%|QWO'#EZO4^QdO,5:hOOQS,5:h,5:hO4lQpO<<HaO4tQtO1G/gOOQO,5:s,5:sO5XQ[O,5:sOOQO-E8V-E8VOOQS7+%Q7+%QO5cQWO7+%QOOQS-E8R-E8RO#kQdO'#EUO5kQWO,5;POOQT1G.u1G.uO5sQWO,5;SOOQP1G/U1G/UOOQP<<Ha<<HaOOQS7+$k7+$kO5{QdO7+%ZOOQO7+%b7+%bOOQS,5:u,5:uOOQS-E8X-E8XOOQS1G0S1G0SOOQPAN={AN={O6SQtO'#EWO#kQdO'#EWO6}QdO7+%ROOQO7+%R7+%ROOQO1G0_1G0_OOQS<<Hl<<HlO7_QdO,5:pOOQO-E8S-E8SOOQO<<Hu<<HuO7iQtO,5:rOOQS-E8U-E8UOOQO<<Hm<<Hm",
        stateData: "8j~O#TOSROS~OUWOXWO]TO^TOtUOxVO!Y_O!ZXO!gYO!iZO!k[O!n]O!t^O#RPO#WRO~O#RcO~O]hO^hOpfOtiOxjO|kO!PmO#PlO#WeO~O!RnO~P!`O`sO#QqO#RpO~O#RuO~O#RwO~OQ!QObzOf!QOh!QOn!PO#Q}O#RyO#Z{O~Ob!SO!b!UO!e!VO#R!RO!R#]P~Oh![On!PO#R!ZO~O#R!^O~Ob!SO!b!UO!e!VO#R!RO~O!W#]P~P$VOUWOXWO]TO^TOtUOxVO#RPO#WRO~OpfO!RnO~O`!hO#QqO#RpO~OQ!pOUWOXWO]TO^TOtUOxVO!Y_O!ZXO!gYO!iZO!k[O!n]O!t^O#R!oO#WRO~O!Q!qO~P&^Ob!tO~Ob!uO~Ov!vOz!wO~OP!yObgXjgX!WgX!bgX!egX#RgXagXQgXfgXhgXngXpgX#QgX#ZgXvgX!QgX!VgX~Ob!SOj!zO!b!UO!e!VO#R!RO!W#]P~Ob!}O~Ob!SO!b!UO!e!VO#R#OO~Op#SO!`#RO!R#]X!W#]X~Ob#VO~Oj!zO!W#XO~O!W#YO~Oh#ZOn!PO~O!R#[O~O!RnO!`#RO~O!RnO!W#_O~O]hO^hOtiOxjO|kO!PmO#PlO#WeO~Op!ya!R!yaa!ya~P+_Ov#aOz#bO~O]hO^hOtiOxjO#WeO~Op{i|{i!P{i!R{i#P{ia{i~P,`Op}i|}i!P}i!R}i#P}ia}i~P,`Op!Oi|!Oi!P!Oi!R!Oi#P!Oia!Oi~P,`O]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#PWX#WWX~O]#cO~O!Q#fO!W#dO~O!Q#fO~P&^Oa#XP~P#kOa#[P~P%_Oa#nOj!zO~O!W#pO~Oh#qOo#qO~O]!^Xa![X!`![X~O]#rO~Oa#sO!`#RO~Op#SO!R#]a!W#]a~O!`#ROp!aa!R!aa!W!aaa!aa~O!W#xO~O!Q#|O!q#zO!r#zO#Z#yO~O!Q!{X!W!{X~P&^O!Q$SO!W#dO~Oj!zOQ!wXa!wXb!wXf!wXh!wXn!wXp!wX#Q!wX#R!wX#Z!wX~Op$VOa#XX~P#kOa$XO~Oa#[X~P!`Oa$ZO~Oj!zOv$[O~Oa$]O~O!`#ROp!|a!R!|a!W!|a~Oa$_O~P+_OP!yO!RgX~O!Q$bO!q#zO!r#zO#Z#yO~Oj!zOv$cO~Oj!zOp$eO!V$gO!Q!Ti!W!Ti~P#kO!Q!{a!W!{a~P&^O!Q$iO!W#dO~Op$VOa#Xa~OpfOa#[a~Oa$lO~P#kOj!zOQ!zXb!zXf!zXh!zXn!zXp!zX!Q!zX!V!zX!W!zX#Q!zX#R!zX#Z!zX~Op$eO!V$oO!Q!Tq!W!Tq~P#kOa!xap!xa~P#kOj!zOQ!zab!zaf!zah!zan!zap!za!Q!za!V!za!W!za#Q!za#R!za#Z!za~Oo#Zj!Pj~",
        goto: ",O#_PPPPP#`P#h#vP#h$U#hPP$[PPP$b$k$kP$}P$kP$k%e%wPPP&a&g#hP&mP#hP&sP#hP#h#hPPP&y']'iPP#`PP'o'o'y'oP'oP'o'oP#`P#`P#`P'|#`P(P(SPP#`P#`(V(e(s(y)T)Z)e)kPPPPPP)q)yP*e*hP+^+a+j]`Obn!s#d$QiWObfklmn!s!u#V#d$QiQObfklmn!s!u#V#d$QQdRR!ceQrTR!ghQ!gsQ!|!OR#`!hq!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jT#z#[#{q!OXZz!t!w!z#b#c#i#r$O$V$^$e$f$jp!QXZz!t!w!z#b#c#i#r$O$V$^$e$f$jQ![[R#Z!]QtTR!ihQ!gtR#`!iQvUR!jiQxVR!kjQoSQ!fgQ#W!XQ#^!`Q#_!aR$`#zQ!rnQ#g!sQ$P#dR$h$QX!pn!s#d$Qa!WY^_|!S!U#R#SR#P!SR!][R!_]R#]!_QbOU!bb!s$QQ!snR$Q#dQ#i!tU$U#i$^$jQ$^#rR$j$VQ$W#iR$k$WQgSS!eg$YR$Y#kQ$f$OR$n$fQ#e!rS$R#e$TR$T#gQ#T!TR#v#TQ#{#[R$a#{]aObn!s#d$Q[SObn!s#d$QQ!dfQ!lkQ!mlQ!nmQ#k!uR#w#VR#j!tQ|XQ!YZQ!xz[#h!t#i#r$V$^$jQ#m!wQ#o!zQ#}#bQ$O#cS$d$O$fR$m$eR#l!uQ!XYQ!a_R!{|U!TY_|Q!`^Q#Q!SQ#U!UQ#t#RR#u#S",
        nodeNames: "\u26A0 Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule",
        maxTerm: 106,
        nodeProps: [
          [common.NodeProp.openedBy, 17, "(", 48, "{"],
          [common.NodeProp.closedBy, 18, ")", 49, "}"]
        ],
        skippedNodes: [0, 3],
        repeatNodeCount: 8,
        tokenData: "Ay~R![OX$wX^%]^p$wpq%]qr(crs+}st,otu2Uuv$wvw2rwx2}xy3jyz3uz{3z{|4_|}8U}!O8a!O!P8x!P!Q9Z!Q![;e![!]<Y!]!^<x!^!_$w!_!`=T!`!a=`!a!b$w!b!c>O!c!}$w!}#O?[#O#P$w#P#Q?g#Q#R2U#R#T$w#T#U?r#U#c$w#c#d@q#d#o$w#o#pAQ#p#q2U#q#rA]#r#sAh#s#y$w#y#z%]#z$f$w$f$g%]$g#BY$w#BY#BZ%]#BZ$IS$w$IS$I_%]$I_$I|$w$I|$JO%]$JO$JT$w$JT$JU%]$JU$KV$w$KV$KW%]$KW&FU$w&FU&FV%]&FV~$wW$zQOy%Qz~%QW%VQoWOy%Qz~%Q~%bf#T~OX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q~&}f#T~oWOX%QX^&v^p%Qpq&vqy%Qz#y%Q#y#z&v#z$f%Q$f$g&v$g#BY%Q#BY#BZ&v#BZ$IS%Q$IS$I_&v$I_$I|%Q$I|$JO&v$JO$JT%Q$JT$JU&v$JU$KV%Q$KV$KW&v$KW&FU%Q&FU&FV&v&FV~%Q^(fSOy%Qz#]%Q#]#^(r#^~%Q^(wSoWOy%Qz#a%Q#a#b)T#b~%Q^)YSoWOy%Qz#d%Q#d#e)f#e~%Q^)kSoWOy%Qz#c%Q#c#d)w#d~%Q^)|SoWOy%Qz#f%Q#f#g*Y#g~%Q^*_SoWOy%Qz#h%Q#h#i*k#i~%Q^*pSoWOy%Qz#T%Q#T#U*|#U~%Q^+RSoWOy%Qz#b%Q#b#c+_#c~%Q^+dSoWOy%Qz#h%Q#h#i+p#i~%Q^+wQ!VUoWOy%Qz~%Q~,QUOY+}Zr+}rs,ds#O+}#O#P,i#P~+}~,iOh~~,lPO~+}_,tWtPOy%Qz!Q%Q!Q![-^![!c%Q!c!i-^!i#T%Q#T#Z-^#Z~%Q^-cWoWOy%Qz!Q%Q!Q![-{![!c%Q!c!i-{!i#T%Q#T#Z-{#Z~%Q^.QWoWOy%Qz!Q%Q!Q![.j![!c%Q!c!i.j!i#T%Q#T#Z.j#Z~%Q^.qWfUoWOy%Qz!Q%Q!Q![/Z![!c%Q!c!i/Z!i#T%Q#T#Z/Z#Z~%Q^/bWfUoWOy%Qz!Q%Q!Q![/z![!c%Q!c!i/z!i#T%Q#T#Z/z#Z~%Q^0PWoWOy%Qz!Q%Q!Q![0i![!c%Q!c!i0i!i#T%Q#T#Z0i#Z~%Q^0pWfUoWOy%Qz!Q%Q!Q![1Y![!c%Q!c!i1Y!i#T%Q#T#Z1Y#Z~%Q^1_WoWOy%Qz!Q%Q!Q![1w![!c%Q!c!i1w!i#T%Q#T#Z1w#Z~%Q^2OQfUoWOy%Qz~%QY2XSOy%Qz!_%Q!_!`2e!`~%QY2lQzQoWOy%Qz~%QX2wQXPOy%Qz~%Q~3QUOY2}Zw2}wx,dx#O2}#O#P3d#P~2}~3gPO~2}_3oQbVOy%Qz~%Q~3zOa~_4RSUPjSOy%Qz!_%Q!_!`2e!`~%Q_4fUjS!PPOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q^4}SoWOy%Qz!Q%Q!Q![5Z![~%Q^5bWoW#ZUOy%Qz!Q%Q!Q![5Z![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q^6PWoWOy%Qz{%Q{|6i|}%Q}!O6i!O!Q%Q!Q![6z![~%Q^6nSoWOy%Qz!Q%Q!Q![6z![~%Q^7RSoW#ZUOy%Qz!Q%Q!Q![6z![~%Q^7fYoW#ZUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%Q_8ZQpVOy%Qz~%Q^8fUjSOy%Qz!O%Q!O!P4x!P!Q%Q!Q![7_![~%Q_8}S#WPOy%Qz!Q%Q!Q![5Z![~%Q~9`RjSOy%Qz{9i{~%Q~9nSoWOy9iyz9zz{:o{~9i~9}ROz9zz{:W{~9z~:ZTOz9zz{:W{!P9z!P!Q:j!Q~9z~:oOR~~:tUoWOy9iyz9zz{:o{!P9i!P!Q;W!Q~9i~;_QR~oWOy%Qz~%Q^;jY#ZUOy%Qz!O%Q!O!P5Z!P!Q%Q!Q![7_![!g%Q!g!h5z!h#X%Q#X#Y5z#Y~%QX<_S]POy%Qz![%Q![!]<k!]~%QX<rQ^PoWOy%Qz~%Q_<}Q!WVOy%Qz~%QY=YQzQOy%Qz~%QX=eS|POy%Qz!`%Q!`!a=q!a~%QX=xQ|PoWOy%Qz~%QX>RUOy%Qz!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX>lY!YPoWOy%Qz}%Q}!O>e!O!Q%Q!Q![>e![!c%Q!c!}>e!}#T%Q#T#o>e#o~%QX?aQxPOy%Qz~%Q^?lQvUOy%Qz~%QX?uSOy%Qz#b%Q#b#c@R#c~%QX@WSoWOy%Qz#W%Q#W#X@d#X~%QX@kQ!`PoWOy%Qz~%QX@tSOy%Qz#f%Q#f#g@d#g~%QXAVQ!RPOy%Qz~%Q_AbQ!QVOy%Qz~%QZAmS!PPOy%Qz!_%Q!_!`2e!`~%Q",
        tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
        topRules: { "StyleSheet": [0, 4] },
        specialized: [{ term: 94, get: (value) => spec_callee[value] || -1 }, { term: 56, get: (value) => spec_AtKeyword[value] || -1 }, { term: 95, get: (value) => spec_identifier[value] || -1 }],
        tokenPrec: 1078
      });
      exports.parser = parser;
    }
  });

  // ../../../node_modules/@codemirror/lang-css/dist/index.cjs
  var require_dist27 = __commonJS({
    "../../../node_modules/@codemirror/lang-css/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var css$1 = require_dist26();
      var language = require_dist7();
      var highlight = require_dist20();
      var _properties = null;
      function properties() {
        if (!_properties && typeof document == "object" && document.body) {
          let names = [];
          for (let prop in document.body.style) {
            if (!/[A-Z]|^-|^(item|length)$/.test(prop))
              names.push(prop);
          }
          _properties = names.sort().map((name) => ({ type: "property", label: name }));
        }
        return _properties || [];
      }
      var pseudoClasses = [
        "active",
        "after",
        "before",
        "checked",
        "default",
        "disabled",
        "empty",
        "enabled",
        "first-child",
        "first-letter",
        "first-line",
        "first-of-type",
        "focus",
        "hover",
        "in-range",
        "indeterminate",
        "invalid",
        "lang",
        "last-child",
        "last-of-type",
        "link",
        "not",
        "nth-child",
        "nth-last-child",
        "nth-last-of-type",
        "nth-of-type",
        "only-of-type",
        "only-child",
        "optional",
        "out-of-range",
        "placeholder",
        "read-only",
        "read-write",
        "required",
        "root",
        "selection",
        "target",
        "valid",
        "visited"
      ].map((name) => ({ type: "class", label: name }));
      var values = [
        "above",
        "absolute",
        "activeborder",
        "additive",
        "activecaption",
        "after-white-space",
        "ahead",
        "alias",
        "all",
        "all-scroll",
        "alphabetic",
        "alternate",
        "always",
        "antialiased",
        "appworkspace",
        "asterisks",
        "attr",
        "auto",
        "auto-flow",
        "avoid",
        "avoid-column",
        "avoid-page",
        "avoid-region",
        "axis-pan",
        "background",
        "backwards",
        "baseline",
        "below",
        "bidi-override",
        "blink",
        "block",
        "block-axis",
        "bold",
        "bolder",
        "border",
        "border-box",
        "both",
        "bottom",
        "break",
        "break-all",
        "break-word",
        "bullets",
        "button",
        "button-bevel",
        "buttonface",
        "buttonhighlight",
        "buttonshadow",
        "buttontext",
        "calc",
        "capitalize",
        "caps-lock-indicator",
        "caption",
        "captiontext",
        "caret",
        "cell",
        "center",
        "checkbox",
        "circle",
        "cjk-decimal",
        "clear",
        "clip",
        "close-quote",
        "col-resize",
        "collapse",
        "color",
        "color-burn",
        "color-dodge",
        "column",
        "column-reverse",
        "compact",
        "condensed",
        "contain",
        "content",
        "contents",
        "content-box",
        "context-menu",
        "continuous",
        "copy",
        "counter",
        "counters",
        "cover",
        "crop",
        "cross",
        "crosshair",
        "currentcolor",
        "cursive",
        "cyclic",
        "darken",
        "dashed",
        "decimal",
        "decimal-leading-zero",
        "default",
        "default-button",
        "dense",
        "destination-atop",
        "destination-in",
        "destination-out",
        "destination-over",
        "difference",
        "disc",
        "discard",
        "disclosure-closed",
        "disclosure-open",
        "document",
        "dot-dash",
        "dot-dot-dash",
        "dotted",
        "double",
        "down",
        "e-resize",
        "ease",
        "ease-in",
        "ease-in-out",
        "ease-out",
        "element",
        "ellipse",
        "ellipsis",
        "embed",
        "end",
        "ethiopic-abegede-gez",
        "ethiopic-halehame-aa-er",
        "ethiopic-halehame-gez",
        "ew-resize",
        "exclusion",
        "expanded",
        "extends",
        "extra-condensed",
        "extra-expanded",
        "fantasy",
        "fast",
        "fill",
        "fill-box",
        "fixed",
        "flat",
        "flex",
        "flex-end",
        "flex-start",
        "footnotes",
        "forwards",
        "from",
        "geometricPrecision",
        "graytext",
        "grid",
        "groove",
        "hand",
        "hard-light",
        "help",
        "hidden",
        "hide",
        "higher",
        "highlight",
        "highlighttext",
        "horizontal",
        "hsl",
        "hsla",
        "hue",
        "icon",
        "ignore",
        "inactiveborder",
        "inactivecaption",
        "inactivecaptiontext",
        "infinite",
        "infobackground",
        "infotext",
        "inherit",
        "initial",
        "inline",
        "inline-axis",
        "inline-block",
        "inline-flex",
        "inline-grid",
        "inline-table",
        "inset",
        "inside",
        "intrinsic",
        "invert",
        "italic",
        "justify",
        "keep-all",
        "landscape",
        "large",
        "larger",
        "left",
        "level",
        "lighter",
        "lighten",
        "line-through",
        "linear",
        "linear-gradient",
        "lines",
        "list-item",
        "listbox",
        "listitem",
        "local",
        "logical",
        "loud",
        "lower",
        "lower-hexadecimal",
        "lower-latin",
        "lower-norwegian",
        "lowercase",
        "ltr",
        "luminosity",
        "manipulation",
        "match",
        "matrix",
        "matrix3d",
        "medium",
        "menu",
        "menutext",
        "message-box",
        "middle",
        "min-intrinsic",
        "mix",
        "monospace",
        "move",
        "multiple",
        "multiple_mask_images",
        "multiply",
        "n-resize",
        "narrower",
        "ne-resize",
        "nesw-resize",
        "no-close-quote",
        "no-drop",
        "no-open-quote",
        "no-repeat",
        "none",
        "normal",
        "not-allowed",
        "nowrap",
        "ns-resize",
        "numbers",
        "numeric",
        "nw-resize",
        "nwse-resize",
        "oblique",
        "opacity",
        "open-quote",
        "optimizeLegibility",
        "optimizeSpeed",
        "outset",
        "outside",
        "outside-shape",
        "overlay",
        "overline",
        "padding",
        "padding-box",
        "painted",
        "page",
        "paused",
        "perspective",
        "pinch-zoom",
        "plus-darker",
        "plus-lighter",
        "pointer",
        "polygon",
        "portrait",
        "pre",
        "pre-line",
        "pre-wrap",
        "preserve-3d",
        "progress",
        "push-button",
        "radial-gradient",
        "radio",
        "read-only",
        "read-write",
        "read-write-plaintext-only",
        "rectangle",
        "region",
        "relative",
        "repeat",
        "repeating-linear-gradient",
        "repeating-radial-gradient",
        "repeat-x",
        "repeat-y",
        "reset",
        "reverse",
        "rgb",
        "rgba",
        "ridge",
        "right",
        "rotate",
        "rotate3d",
        "rotateX",
        "rotateY",
        "rotateZ",
        "round",
        "row",
        "row-resize",
        "row-reverse",
        "rtl",
        "run-in",
        "running",
        "s-resize",
        "sans-serif",
        "saturation",
        "scale",
        "scale3d",
        "scaleX",
        "scaleY",
        "scaleZ",
        "screen",
        "scroll",
        "scrollbar",
        "scroll-position",
        "se-resize",
        "self-start",
        "self-end",
        "semi-condensed",
        "semi-expanded",
        "separate",
        "serif",
        "show",
        "single",
        "skew",
        "skewX",
        "skewY",
        "skip-white-space",
        "slide",
        "slider-horizontal",
        "slider-vertical",
        "sliderthumb-horizontal",
        "sliderthumb-vertical",
        "slow",
        "small",
        "small-caps",
        "small-caption",
        "smaller",
        "soft-light",
        "solid",
        "source-atop",
        "source-in",
        "source-out",
        "source-over",
        "space",
        "space-around",
        "space-between",
        "space-evenly",
        "spell-out",
        "square",
        "start",
        "static",
        "status-bar",
        "stretch",
        "stroke",
        "stroke-box",
        "sub",
        "subpixel-antialiased",
        "svg_masks",
        "super",
        "sw-resize",
        "symbolic",
        "symbols",
        "system-ui",
        "table",
        "table-caption",
        "table-cell",
        "table-column",
        "table-column-group",
        "table-footer-group",
        "table-header-group",
        "table-row",
        "table-row-group",
        "text",
        "text-bottom",
        "text-top",
        "textarea",
        "textfield",
        "thick",
        "thin",
        "threeddarkshadow",
        "threedface",
        "threedhighlight",
        "threedlightshadow",
        "threedshadow",
        "to",
        "top",
        "transform",
        "translate",
        "translate3d",
        "translateX",
        "translateY",
        "translateZ",
        "transparent",
        "ultra-condensed",
        "ultra-expanded",
        "underline",
        "unidirectional-pan",
        "unset",
        "up",
        "upper-latin",
        "uppercase",
        "url",
        "var",
        "vertical",
        "vertical-text",
        "view-box",
        "visible",
        "visibleFill",
        "visiblePainted",
        "visibleStroke",
        "visual",
        "w-resize",
        "wait",
        "wave",
        "wider",
        "window",
        "windowframe",
        "windowtext",
        "words",
        "wrap",
        "wrap-reverse",
        "x-large",
        "x-small",
        "xor",
        "xx-large",
        "xx-small"
      ].map((name) => ({ type: "keyword", label: name })).concat([
        "aliceblue",
        "antiquewhite",
        "aqua",
        "aquamarine",
        "azure",
        "beige",
        "bisque",
        "black",
        "blanchedalmond",
        "blue",
        "blueviolet",
        "brown",
        "burlywood",
        "cadetblue",
        "chartreuse",
        "chocolate",
        "coral",
        "cornflowerblue",
        "cornsilk",
        "crimson",
        "cyan",
        "darkblue",
        "darkcyan",
        "darkgoldenrod",
        "darkgray",
        "darkgreen",
        "darkkhaki",
        "darkmagenta",
        "darkolivegreen",
        "darkorange",
        "darkorchid",
        "darkred",
        "darksalmon",
        "darkseagreen",
        "darkslateblue",
        "darkslategray",
        "darkturquoise",
        "darkviolet",
        "deeppink",
        "deepskyblue",
        "dimgray",
        "dodgerblue",
        "firebrick",
        "floralwhite",
        "forestgreen",
        "fuchsia",
        "gainsboro",
        "ghostwhite",
        "gold",
        "goldenrod",
        "gray",
        "grey",
        "green",
        "greenyellow",
        "honeydew",
        "hotpink",
        "indianred",
        "indigo",
        "ivory",
        "khaki",
        "lavender",
        "lavenderblush",
        "lawngreen",
        "lemonchiffon",
        "lightblue",
        "lightcoral",
        "lightcyan",
        "lightgoldenrodyellow",
        "lightgray",
        "lightgreen",
        "lightpink",
        "lightsalmon",
        "lightseagreen",
        "lightskyblue",
        "lightslategray",
        "lightsteelblue",
        "lightyellow",
        "lime",
        "limegreen",
        "linen",
        "magenta",
        "maroon",
        "mediumaquamarine",
        "mediumblue",
        "mediumorchid",
        "mediumpurple",
        "mediumseagreen",
        "mediumslateblue",
        "mediumspringgreen",
        "mediumturquoise",
        "mediumvioletred",
        "midnightblue",
        "mintcream",
        "mistyrose",
        "moccasin",
        "navajowhite",
        "navy",
        "oldlace",
        "olive",
        "olivedrab",
        "orange",
        "orangered",
        "orchid",
        "palegoldenrod",
        "palegreen",
        "paleturquoise",
        "palevioletred",
        "papayawhip",
        "peachpuff",
        "peru",
        "pink",
        "plum",
        "powderblue",
        "purple",
        "rebeccapurple",
        "red",
        "rosybrown",
        "royalblue",
        "saddlebrown",
        "salmon",
        "sandybrown",
        "seagreen",
        "seashell",
        "sienna",
        "silver",
        "skyblue",
        "slateblue",
        "slategray",
        "snow",
        "springgreen",
        "steelblue",
        "tan",
        "teal",
        "thistle",
        "tomato",
        "turquoise",
        "violet",
        "wheat",
        "white",
        "whitesmoke",
        "yellow",
        "yellowgreen"
      ].map((name) => ({ type: "constant", label: name })));
      var tags = [
        "a",
        "abbr",
        "address",
        "article",
        "aside",
        "b",
        "bdi",
        "bdo",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "figcaption",
        "figure",
        "footer",
        "form",
        "header",
        "hgroup",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "main",
        "meter",
        "nav",
        "ol",
        "output",
        "p",
        "pre",
        "ruby",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "template",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "tr",
        "u",
        "ul"
      ].map((name) => ({ type: "type", label: name }));
      var span = /^[\w-]*/;
      var cssCompletionSource = (context) => {
        let { state, pos } = context, node = language.syntaxTree(state).resolveInner(pos, -1);
        if (node.name == "PropertyName")
          return { from: node.from, options: properties(), span };
        if (node.name == "ValueName")
          return { from: node.from, options: values, span };
        if (node.name == "PseudoClassName")
          return { from: node.from, options: pseudoClasses, span };
        if (node.name == "TagName") {
          for (let { parent } = node; parent; parent = parent.parent)
            if (parent.name == "Block")
              return { from: node.from, options: properties(), span };
          return { from: node.from, options: tags, span };
        }
        if (!context.explicit)
          return null;
        let above = node.resolve(pos), before = above.childBefore(pos);
        if (before && before.name == ":" && above.name == "PseudoClassSelector")
          return { from: pos, options: pseudoClasses, span };
        if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
          return { from: pos, options: values, span };
        if (above.name == "Block")
          return { from: pos, options: properties(), span };
        return null;
      };
      var cssLanguage = language.LRLanguage.define({
        parser: css$1.parser.configure({
          props: [
            language.indentNodeProp.add({
              Declaration: language.continuedIndent()
            }),
            language.foldNodeProp.add({
              Block: language.foldInside
            }),
            highlight.styleTags({
              "import charset namespace keyframes": highlight.tags.definitionKeyword,
              "media supports": highlight.tags.controlKeyword,
              "from to selector": highlight.tags.keyword,
              NamespaceName: highlight.tags.namespace,
              KeyframeName: highlight.tags.labelName,
              TagName: highlight.tags.tagName,
              ClassName: highlight.tags.className,
              PseudoClassName: highlight.tags.constant(highlight.tags.className),
              IdName: highlight.tags.labelName,
              "FeatureName PropertyName": highlight.tags.propertyName,
              AttributeName: highlight.tags.attributeName,
              NumberLiteral: highlight.tags.number,
              KeywordQuery: highlight.tags.keyword,
              UnaryQueryOp: highlight.tags.operatorKeyword,
              "CallTag ValueName": highlight.tags.atom,
              VariableName: highlight.tags.variableName,
              Callee: highlight.tags.operatorKeyword,
              Unit: highlight.tags.unit,
              "UniversalSelector NestingSelector": highlight.tags.definitionOperator,
              AtKeyword: highlight.tags.keyword,
              MatchOp: highlight.tags.compareOperator,
              "ChildOp SiblingOp, LogicOp": highlight.tags.logicOperator,
              BinOp: highlight.tags.arithmeticOperator,
              Important: highlight.tags.modifier,
              Comment: highlight.tags.blockComment,
              ParenthesizedContent: highlight.tags.special(highlight.tags.name),
              ColorLiteral: highlight.tags.color,
              StringLiteral: highlight.tags.string,
              ":": highlight.tags.punctuation,
              "PseudoOp #": highlight.tags.derefOperator,
              "; ,": highlight.tags.separator,
              "( )": highlight.tags.paren,
              "[ ]": highlight.tags.squareBracket,
              "{ }": highlight.tags.brace
            })
          ]
        }),
        languageData: {
          commentTokens: { block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*\}$/,
          wordChars: "-"
        }
      });
      var cssCompletion = cssLanguage.data.of({ autocomplete: cssCompletionSource });
      function css() {
        return new language.LanguageSupport(cssLanguage, cssCompletion);
      }
      exports.css = css;
      exports.cssCompletion = cssCompletion;
      exports.cssCompletionSource = cssCompletionSource;
      exports.cssLanguage = cssLanguage;
    }
  });

  // ../../../node_modules/@lezer/javascript/dist/index.cjs
  var require_dist28 = __commonJS({
    "../../../node_modules/@lezer/javascript/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var lr = require_dist24();
      var common = require_dist6();
      var noSemi = 275;
      var incdec = 1;
      var incdecPrefix = 2;
      var templateContent = 276;
      var templateDollarBrace = 277;
      var templateEnd = 278;
      var insertSemi = 279;
      var TSExtends = 3;
      var spaces = 281;
      var newline = 282;
      var LineComment = 4;
      var BlockComment = 5;
      var Dialect_ts = 1;
      var space = [
        9,
        10,
        11,
        12,
        13,
        32,
        133,
        160,
        5760,
        8192,
        8193,
        8194,
        8195,
        8196,
        8197,
        8198,
        8199,
        8200,
        8201,
        8202,
        8232,
        8233,
        8239,
        8287,
        12288
      ];
      var braceR = 125;
      var braceL = 123;
      var semicolon = 59;
      var slash = 47;
      var star = 42;
      var plus = 43;
      var minus = 45;
      var dollar = 36;
      var backtick = 96;
      var backslash = 92;
      var trackNewline = new lr.ContextTracker({
        start: false,
        shift(context, term) {
          return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
        },
        strict: false
      });
      var insertSemicolon = new lr.ExternalTokenizer((input, stack) => {
        let { next } = input;
        if ((next == braceR || next == -1 || stack.context) && stack.canShift(insertSemi))
          input.acceptToken(insertSemi);
      }, { contextual: true, fallback: true });
      var noSemicolon = new lr.ExternalTokenizer((input, stack) => {
        let { next } = input, after;
        if (space.indexOf(next) > -1)
          return;
        if (next == slash && ((after = input.peek(1)) == slash || after == star))
          return;
        if (next != braceR && next != semicolon && next != -1 && !stack.context && stack.canShift(noSemi))
          input.acceptToken(noSemi);
      }, { contextual: true });
      var incdecToken = new lr.ExternalTokenizer((input, stack) => {
        let { next } = input;
        if (next == plus || next == minus) {
          input.advance();
          if (next == input.next) {
            input.advance();
            let mayPostfix = !stack.context && stack.canShift(incdec);
            input.acceptToken(mayPostfix ? incdec : incdecPrefix);
          }
        }
      }, { contextual: true });
      var template = new lr.ExternalTokenizer((input) => {
        for (let afterDollar = false, i = 0; ; i++) {
          let { next } = input;
          if (next < 0) {
            if (i)
              input.acceptToken(templateContent);
            break;
          } else if (next == backtick) {
            if (i)
              input.acceptToken(templateContent);
            else
              input.acceptToken(templateEnd, 1);
            break;
          } else if (next == braceL && afterDollar) {
            if (i == 1)
              input.acceptToken(templateDollarBrace, 1);
            else
              input.acceptToken(templateContent, -1);
            break;
          } else if (next == 10 && i) {
            input.advance();
            input.acceptToken(templateContent);
            break;
          } else if (next == backslash) {
            input.advance();
          }
          afterDollar = next == dollar;
          input.advance();
        }
      });
      function tsExtends(value, stack) {
        return value == "extends" && stack.dialectEnabled(Dialect_ts) ? TSExtends : -1;
      }
      var spec_identifier = { __proto__: null, export: 16, as: 21, from: 25, default: 30, async: 35, function: 36, this: 46, true: 54, false: 54, void: 60, typeof: 64, null: 78, super: 80, new: 114, await: 131, yield: 133, delete: 134, class: 144, extends: 146, public: 189, private: 189, protected: 189, readonly: 191, instanceof: 212, in: 214, const: 216, import: 248, keyof: 299, unique: 303, infer: 309, is: 343, abstract: 363, implements: 365, type: 367, let: 370, var: 372, interface: 379, enum: 383, namespace: 389, module: 391, declare: 395, global: 399, for: 420, of: 429, while: 432, with: 436, do: 440, if: 444, else: 446, switch: 450, case: 456, try: 462, catch: 464, finally: 466, return: 470, throw: 474, break: 478, continue: 482, debugger: 486 };
      var spec_word = { __proto__: null, async: 101, get: 103, set: 105, public: 153, private: 153, protected: 153, static: 155, abstract: 157, override: 159, readonly: 165, new: 347 };
      var spec_LessThan = { __proto__: null, "<": 121 };
      var parser = lr.LRParser.deserialize({
        version: 13,
        states: "$1WO`QYOOO'QQ!LdO'#CgO'XOSO'#DSO)dQYO'#DXO)tQYO'#DdO){QYO'#DnO-xQYO'#DtOOQO'#EX'#EXO.]QWO'#EWO.bQWO'#EWOOQ!LS'#Eb'#EbO0aQ!LdO'#IqO2wQ!LdO'#IrO3eQWO'#EvO3jQpO'#F]OOQ!LS'#FO'#FOO3rO!bO'#FOO4QQWO'#FdO5_QWO'#FcOOQ!LS'#Ir'#IrOOQ!LQ'#Iq'#IqOOQQ'#J['#J[O5dQWO'#HjO5iQ!LYO'#HkOOQQ'#Ic'#IcOOQQ'#Hl'#HlQ`QYOOO){QYO'#DfO5qQWO'#GWO5vQ#tO'#ClO6UQWO'#EVO6aQWO'#EcO6fQ#tO'#E}O7QQWO'#GWO7VQWO'#G[O7bQWO'#G[O7pQWO'#G_O7pQWO'#G`O7pQWO'#GbO5qQWO'#GeO8aQWO'#GhO9oQWO'#CcO:PQWO'#GuO:XQWO'#G{O:XQWO'#G}O`QYO'#HPO:XQWO'#HRO:XQWO'#HUO:^QWO'#H[O:cQ!LZO'#H`O){QYO'#HbO:nQ!LZO'#HdO:yQ!LZO'#HfO5iQ!LYO'#HhO){QYO'#IsOOOS'#Hn'#HnO;UOSO,59nOOQ!LS,59n,59nO=gQbO'#CgO=qQYO'#HoO>OQWO'#ItO?}QbO'#ItO'dQYO'#ItO@UQWO,59sO@lQ&jO'#D^OAeQWO'#EXOArQWO'#JPOA}QWO'#JOOBVQWO,5:uOB[QWO'#I}OBcQWO'#DuO5vQ#tO'#EVOBqQWO'#EVOB|Q`O'#E}OOQ!LS,5:O,5:OOCUQYO,5:OOESQ!LdO,5:YOEpQWO,5:`OFZQ!LYO'#I|O7VQWO'#I{OFbQWO'#I{OFjQWO,5:tOFoQWO'#I{OF}QYO,5:rOH}QWO'#ESOJXQWO,5:rOKhQWO'#DhOKoQYO'#DmOKyQ&jO,5:{O){QYO,5:{OOQQ'#En'#EnOOQQ'#Ep'#EpO){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}O){QYO,5:}OOQQ'#Et'#EtOLRQYO,5;_OOQ!LS,5;d,5;dOOQ!LS,5;e,5;eONRQWO,5;eOOQ!LS,5;f,5;fO){QYO'#HyONWQ!LYO,5<PONrQWO,5:}O){QYO,5;bO! [QpO'#JTONyQpO'#JTO! cQpO'#JTO! tQpO,5;mOOOO,5;w,5;wO!!SQYO'#F_OOOO'#Hx'#HxO3rO!bO,5;jO!!ZQpO'#FaOOQ!LS,5;j,5;jO!!wQ,UO'#CqOOQ!LS'#Ct'#CtO!#[QWO'#CtO!#aOSO'#CxO!#}Q#tO,5;|O!$UQWO,5<OO!%bQWO'#FnO!%oQWO'#FoO!%tQWO'#FsO!&vQ&jO'#FwO!'iQ,UO'#IlOOQ!LS'#Il'#IlO!'sQWO'#IkO!(RQWO'#IjOOQ!LS'#Cr'#CrOOQ!LS'#Cy'#CyO!(ZQWO'#C{OJ^QWO'#FfOJ^QWO'#FhO!(`QWO'#FjO!(eQWO'#FkO!(jQWO'#FqOJ^QWO'#FvO!(oQWO'#EYO!)WQWO,5;}O`QYO,5>UOOQQ'#If'#IfOOQQ,5>V,5>VOOQQ-E;j-E;jO!+SQ!LdO,5:QOOQ!LQ'#Co'#CoO!+sQ#tO,5<rOOQO'#Ce'#CeO!,UQWO'#CpO!,^Q!LYO'#IgO5_QWO'#IgO:^QWO,59WO!,lQpO,59WO!,tQ#tO,59WO5vQ#tO,59WO!-PQWO,5:rO!-XQWO'#GtO!-dQWO'#J`O){QYO,5;gO!-lQ&jO,5;iO!-qQWO,5=_O!-vQWO,5=_O!-{QWO,5=_O5iQ!LYO,5=_O5qQWO,5<rO!.ZQWO'#EZO!.lQ&jO'#E[OOQ!LQ'#I}'#I}O!.}Q!LYO'#J]O5iQ!LYO,5<vO7pQWO,5<|OOQO'#Cq'#CqO!/YQpO,5<yO!/bQ#tO,5<zO!/mQWO,5<|O!/rQ`O,5=PO:^QWO'#GjO5qQWO'#GlO!/zQWO'#GlO5vQ#tO'#GoO!0PQWO'#GoOOQQ,5=S,5=SO!0UQWO'#GpO!0^QWO'#ClO!0cQWO,58}O!0mQWO,58}O!2oQYO,58}OOQQ,58},58}O!2|Q!LYO,58}O){QYO,58}O!3XQYO'#GwOOQQ'#Gx'#GxOOQQ'#Gy'#GyO`QYO,5=aO!3iQWO,5=aO){QYO'#DtO`QYO,5=gO`QYO,5=iO!3nQWO,5=kO`QYO,5=mO!3sQWO,5=pO!3xQYO,5=vOOQQ,5=z,5=zO){QYO,5=zO5iQ!LYO,5=|OOQQ,5>O,5>OO!7yQWO,5>OOOQQ,5>Q,5>QO!7yQWO,5>QOOQQ,5>S,5>SO!8OQ`O,5?_OOOS-E;l-E;lOOQ!LS1G/Y1G/YO!8TQbO,5>ZO){QYO,5>ZOOQO-E;m-E;mO!8_QWO,5?`O!8gQbO,5?`O!8nQWO,5?jOOQ!LS1G/_1G/_O!8vQpO'#DQOOQO'#Iv'#IvO){QYO'#IvO!9eQpO'#IvO!:SQpO'#D_O!:eQ&jO'#D_O!<pQYO'#D_O!<wQWO'#IuO!=PQWO,59xO!=UQWO'#E]O!=dQWO'#JQO!=lQWO,5:vO!>SQ&jO'#D_O){QYO,5?kO!>^QWO'#HtO!8nQWO,5?jOOQ!LQ1G0a1G0aO!?jQ&jO'#DxOOQ!LS,5:a,5:aO){QYO,5:aOH}QWO,5:aO!?qQWO,5:aO:^QWO,5:qO!,lQpO,5:qO!,tQ#tO,5:qO5vQ#tO,5:qOOQ!LS1G/j1G/jOOQ!LS1G/z1G/zOOQ!LQ'#ER'#ERO){QYO,5?hO!?|Q!LYO,5?hO!@_Q!LYO,5?hO!@fQWO,5?gO!@nQWO'#HvO!@fQWO,5?gOOQ!LQ1G0`1G0`O7VQWO,5?gOOQ!LS1G0^1G0^O!AYQ!LdO1G0^O!AyQ!LbO,5:nOOQ!LS'#Fm'#FmO!BgQ!LdO'#IlOF}QYO1G0^O!DfQ#tO'#IwO!DpQWO,5:SO!DuQbO'#IxO){QYO'#IxO!EPQWO,5:XOOQ!LS'#DQ'#DQOOQ!LS1G0g1G0gO!EUQWO1G0gO!GgQ!LdO1G0iO!GnQ!LdO1G0iO!JRQ!LdO1G0iO!JYQ!LdO1G0iO!LaQ!LdO1G0iO!LtQ!LdO1G0iO# eQ!LdO1G0iO# lQ!LdO1G0iO#$PQ!LdO1G0iO#$WQ!LdO1G0iO#%{Q!LdO1G0iO#(uQ7^O'#CgO#*pQ7^O1G0yO#,kQ7^O'#IrOOQ!LS1G1P1G1PO#-OQ!LdO,5>eOOQ!LQ-E;w-E;wO#-oQ!LdO1G0iOOQ!LS1G0i1G0iO#/qQ!LdO1G0|O#0bQpO,5;oO#0gQpO,5;pO#0lQpO'#FWO#1QQWO'#FVOOQO'#JU'#JUOOQO'#Hw'#HwO#1VQpO1G1XOOQ!LS1G1X1G1XOOOO1G1b1G1bO#1eQ7^O'#IqO#1oQWO,5;yOLRQYO,5;yOOOO-E;v-E;vOOQ!LS1G1U1G1UOOQ!LS,5;{,5;{O#1tQpO,5;{OOQ!LS,59`,59`OH}QWO'#InOOOS'#Hm'#HmO#1yOSO,59dOOQ!LS,59d,59dO){QYO1G1hO!(eQWO'#H{O#2UQWO,5<aOOQ!LS,5<^,5<^OOQO'#GR'#GROJ^QWO,5<lOOQO'#GT'#GTOJ^QWO,5<nOJ^QWO,5<pOOQO1G1j1G1jO#2aQ`O'#CoO#2tQ`O,5<YO#2{QWO'#JXO5qQWO'#JXO#3ZQWO,5<[OJ^QWO,5<ZO#3`Q`O'#FmO#3mQ`O'#JYO#3wQWO'#JYOH}QWO'#JYO#3|QWO,5<_OOQ!LQ'#Dc'#DcO#4RQWO'#FpO#4^QpO'#FxO!&qQ&jO'#FxO!&qQ&jO'#FzO#4oQWO'#F{O!(jQWO'#GOOOQO'#H}'#H}O#4tQ&jO,5<cOOQ!LS,5<c,5<cO#4{Q&jO'#FxO#5ZQ&jO'#FyO#5cQ&jO'#FyOOQ!LS,5<q,5<qOJ^QWO,5?VOJ^QWO,5?VO#5hQWO'#IOO#5sQWO,5?UOOQ!LS'#Cg'#CgO#6gQ#tO,59gOOQ!LS,59g,59gO#7YQ#tO,5<QO#7{Q#tO,5<SO#8VQWO,5<UOOQ!LS,5<V,5<VO#8[QWO,5<]O#8aQ#tO,5<bOF}QYO1G1iO#8qQWO1G1iOOQQ1G3p1G3pOOQ!LS1G/l1G/lONRQWO1G/lOOQQ1G2^1G2^OH}QWO1G2^O){QYO1G2^OH}QWO1G2^O#8vQWO1G2^O#9UQWO,59[O#:_QWO'#ESOOQ!LQ,5?R,5?RO#:iQ!LYO,5?ROOQQ1G.r1G.rO:^QWO1G.rO!,lQpO1G.rO!,tQ#tO1G.rO#:wQWO1G0^O#:|QWO'#CgO#;XQWO'#JaO#;aQWO,5=`O#;fQWO'#JaO#;kQWO'#JaO#;pQWO'#IWO#<OQWO,5?zO#<WQbO1G1ROOQ!LS1G1T1G1TO5qQWO1G2yO#<_QWO1G2yO#<dQWO1G2yO#<iQWO1G2yOOQQ1G2y1G2yO#<nQ#tO1G2^O7VQWO'#JOO7VQWO'#E]O7VQWO'#IQO#=PQ!LYO,5?wOOQQ1G2b1G2bO!/mQWO1G2hOH}QWO1G2eO#=[QWO1G2eOOQQ1G2f1G2fOH}QWO1G2fO#=aQWO1G2fO#=iQ&jO'#GdOOQQ1G2h1G2hO!&qQ&jO'#ISO!/rQ`O1G2kOOQQ1G2k1G2kOOQQ,5=U,5=UO#=qQ#tO,5=WO5qQWO,5=WO#4oQWO,5=ZO5_QWO,5=ZO!,lQpO,5=ZO!,tQ#tO,5=ZO5vQ#tO,5=ZO#>SQWO'#J_O#>_QWO,5=[OOQQ1G.i1G.iO#>dQ!LYO1G.iO#>oQWO1G.iO!(ZQWO1G.iO5iQ!LYO1G.iO#>tQbO,5?|O#?OQWO,5?|O#?ZQYO,5=cO#?bQWO,5=cO7VQWO,5?|OOQQ1G2{1G2{O`QYO1G2{OOQQ1G3R1G3ROOQQ1G3T1G3TO:XQWO1G3VO#?gQYO1G3XO#CbQYO'#HWOOQQ1G3[1G3[O:^QWO1G3bO#CoQWO1G3bO5iQ!LYO1G3fOOQQ1G3h1G3hOOQ!LQ'#Ft'#FtO5iQ!LYO1G3jO5iQ!LYO1G3lOOOS1G4y1G4yO#CwQ`O,5<PO#DPQbO1G3uO#DZQWO1G4zO#DcQWO1G5UO#DkQWO,5?bOLRQYO,5:wO7VQWO,5:wO:^QWO,59yOLRQYO,59yO!,lQpO,59yO#DpQ7^O,59yOOQO,5:w,5:wO#DzQ&jO'#HpO#EbQWO,5?aOOQ!LS1G/d1G/dO#EjQ&jO'#HuO#FOQWO,5?lOOQ!LQ1G0b1G0bO!:eQ&jO,59yO#FWQbO1G5VOOQO,5>`,5>`O7VQWO,5>`OOQO-E;r-E;rOOQ!LQ'#EO'#EOO#FbQ!LrO'#EPO!?bQ&jO'#DyOOQO'#Hs'#HsO#F|Q&jO,5:dOOQ!LS,5:d,5:dO#GTQ&jO'#DyO#GfQ&jO'#DyO#GmQ&jO'#EUO#GpQ&jO'#EPO#G}Q&jO'#EPO!?bQ&jO'#EPO#HbQWO1G/{O#HgQ`O1G/{OOQ!LS1G/{1G/{O){QYO1G/{OH}QWO1G/{OOQ!LS1G0]1G0]O:^QWO1G0]O!,lQpO1G0]O!,tQ#tO1G0]O#HnQ!LdO1G5SO){QYO1G5SO#IOQ!LYO1G5SO#IaQWO1G5RO7VQWO,5>bOOQO,5>b,5>bO#IiQWO,5>bOOQO-E;t-E;tO#IaQWO1G5RO#IwQ!LdO,59gO#KvQ!LdO,5<QO#MxQ!LdO,5<SO$ zQ!LdO,5<bOOQ!LS7+%x7+%xO$$SQ!LdO7+%xO$$sQWO'#HqO$$}QWO,5?cOOQ!LS1G/n1G/nO$%VQYO'#HrO$%dQWO,5?dO$%lQbO,5?dOOQ!LS1G/s1G/sOOQ!LS7+&R7+&RO$%vQ7^O,5:YO){QYO7+&eO$&QQ7^O,5:QOOQO1G1Z1G1ZOOQO1G1[1G1[O$&_QMhO,5;rOLRQYO,5;qOOQO-E;u-E;uOOQ!LS7+&s7+&sOOOO7+&|7+&|OOOO1G1e1G1eO$&jQWO1G1eOOQ!LS1G1g1G1gO$&oQ`O,5?YOOOS-E;k-E;kOOQ!LS1G/O1G/OO$&vQ!LdO7+'SOOQ!LS,5>g,5>gO$'gQWO,5>gOOQ!LS1G1{1G1{P$'lQWO'#H{POQ!LS-E;y-E;yO$(]Q#tO1G2WO$)OQ#tO1G2YO$)YQ#tO1G2[OOQ!LS1G1t1G1tO$)aQWO'#HzO$)oQWO,5?sO$)oQWO,5?sO$)wQWO,5?sO$*SQWO,5?sOOQO1G1v1G1vO$*bQ#tO1G1uO$*rQWO'#H|O$+SQWO,5?tOH}QWO,5?tO$+[Q`O,5?tOOQ!LS1G1y1G1yO5iQ!LYO,5<dO5iQ!LYO,5<eO$+fQWO,5<eO#4jQWO,5<eO!,lQpO,5<dO$+kQWO,5<fO5iQ!LYO,5<gO$+fQWO,5<jOOQO-E;{-E;{OOQ!LS1G1}1G1}O!&qQ&jO,5<dO$+sQWO,5<eO!&qQ&jO,5<fO!&qQ&jO,5<eO$,OQ#tO1G4qO$,YQ#tO1G4qOOQO,5>j,5>jOOQO-E;|-E;|O!-lQ&jO,59iO){QYO,59iO$,gQWO1G1pOJ^QWO1G1wO$,lQ!LdO7+'TOOQ!LS7+'T7+'TOF}QYO7+'TOOQ!LS7+%W7+%WO$-]Q`O'#JZO#HbQWO7+'xO$-gQWO7+'xO$-oQ`O7+'xOOQQ7+'x7+'xOH}QWO7+'xO){QYO7+'xOH}QWO7+'xOOQO1G.v1G.vO$-yQ!LbO'#CgO$.ZQ!LbO,5<hO$.xQWO,5<hOOQ!LQ1G4m1G4mOOQQ7+$^7+$^O:^QWO7+$^O!,lQpO7+$^OF}QYO7+%xO$.}QWO'#IVO$/]QWO,5?{OOQO1G2z1G2zO5qQWO,5?{O$/]QWO,5?{O$/eQWO,5?{OOQO,5>r,5>rOOQO-E<U-E<UOOQ!LS7+&m7+&mO$/jQWO7+(eO5iQ!LYO7+(eO5qQWO7+(eO$/oQWO7+(eO$/tQWO7+'xOOQ!LQ,5>l,5>lOOQ!LQ-E<O-E<OOOQQ7+(S7+(SO$0SQ!LbO7+(POH}QWO7+(PO$0^Q`O7+(QOOQQ7+(Q7+(QOH}QWO7+(QO$0eQWO'#J^O$0pQWO,5=OOOQO,5>n,5>nOOQO-E<Q-E<QOOQQ7+(V7+(VO$1jQ&jO'#GmOOQQ1G2r1G2rOH}QWO1G2rO){QYO1G2rOH}QWO1G2rO$1qQWO1G2rO$2PQ#tO1G2rO5iQ!LYO1G2uO#4oQWO1G2uO5_QWO1G2uO!,lQpO1G2uO!,tQ#tO1G2uO$2bQWO'#IUO$2mQWO,5?yO$2uQ&jO,5?yOOQ!LQ1G2v1G2vOOQQ7+$T7+$TO$2zQWO7+$TO5iQ!LYO7+$TO$3PQWO7+$TO){QYO1G5hO){QYO1G5iO$3UQYO1G2}O$3]QWO1G2}O$3bQYO1G2}O$3iQ!LYO1G5hOOQQ7+(g7+(gO5iQ!LYO7+(qO`QYO7+(sOOQQ'#Jd'#JdOOQQ'#IX'#IXO$3sQYO,5=rOOQQ,5=r,5=rO){QYO'#HXO$4QQWO'#HZOOQQ7+(|7+(|O$4VQYO7+(|O7VQWO7+(|OOQQ7+)Q7+)QOOQQ7+)U7+)UOOQQ7+)W7+)WOOQO1G4|1G4|O$8TQ7^O1G0cO$8_QWO1G0cOOQO1G/e1G/eO$8jQ7^O1G/eO:^QWO1G/eOLRQYO'#D_OOQO,5>[,5>[OOQO-E;n-E;nOOQO,5>a,5>aOOQO-E;s-E;sO!,lQpO1G/eOOQO1G3z1G3zO:^QWO,5:eOOQO,5:k,5:kO){QYO,5:kO$8tQ!LYO,5:kO$9PQ!LYO,5:kO!,lQpO,5:eOOQO-E;q-E;qOOQ!LS1G0O1G0OO!?bQ&jO,5:eO$9_Q&jO,5:eO$9pQ!LrO,5:kO$:[Q&jO,5:eO!?bQ&jO,5:kOOQO,5:p,5:pO$:cQ&jO,5:kO$:pQ!LYO,5:kOOQ!LS7+%g7+%gO#HbQWO7+%gO#HgQ`O7+%gOOQ!LS7+%w7+%wO:^QWO7+%wO!,lQpO7+%wO$;UQ!LdO7+*nO){QYO7+*nOOQO1G3|1G3|O7VQWO1G3|O$;fQWO7+*mO$;nQ!LdO1G2WO$=pQ!LdO1G2YO$?rQ!LdO1G1uO$AzQ#tO,5>]OOQO-E;o-E;oO$BUQbO,5>^O){QYO,5>^OOQO-E;p-E;pO$B`QWO1G5OO$BhQ7^O1G0^O$DoQ7^O1G0iO$DvQ7^O1G0iO$FwQ7^O1G0iO$GOQ7^O1G0iO$HsQ7^O1G0iO$IWQ7^O1G0iO$KeQ7^O1G0iO$KlQ7^O1G0iO$MmQ7^O1G0iO$MtQ7^O1G0iO% iQ7^O1G0iO% |Q!LdO<<JPO%!mQ7^O1G0iO%$]Q7^O'#IlO%&YQ7^O1G0|OLRQYO'#FYOOQO'#JV'#JVOOQO1G1^1G1^O%&gQWO1G1]O%&lQ7^O,5>eOOOO7+'P7+'POOOS1G4t1G4tOOQ!LS1G4R1G4ROJ^QWO7+'vO%&vQWO,5>fO5qQWO,5>fOOQO-E;x-E;xO%'UQWO1G5_O%'UQWO1G5_O%'^QWO1G5_O%'iQ`O,5>hO%'sQWO,5>hOH}QWO,5>hOOQO-E;z-E;zO%'xQ`O1G5`O%(SQWO1G5`OOQO1G2O1G2OOOQO1G2P1G2PO5iQ!LYO1G2PO$+fQWO1G2PO5iQ!LYO1G2OO%([QWO1G2QOH}QWO1G2QOOQO1G2R1G2RO5iQ!LYO1G2UO!,lQpO1G2OO#4jQWO1G2PO%(aQWO1G2QO%(iQWO1G2POJ^QWO7+*]OOQ!LS1G/T1G/TO%(tQWO1G/TOOQ!LS7+'[7+'[O%(yQ#tO7+'cO%)ZQ!LdO<<JoOOQ!LS<<Jo<<JoOH}QWO'#IPO%)zQWO,5?uOOQQ<<Kd<<KdOH}QWO<<KdO#HbQWO<<KdO%*SQWO<<KdO%*[Q`O<<KdOH}QWO1G2SOOQQ<<Gx<<GxO:^QWO<<GxO%*fQ!LdO<<IdOOQ!LS<<Id<<IdOOQO,5>q,5>qO%+VQWO,5>qO#;kQWO,5>qOOQO-E<T-E<TO%+[QWO1G5gO%+[QWO1G5gO5qQWO1G5gO%+dQWO<<LPOOQQ<<LP<<LPO%+iQWO<<LPO5iQ!LYO<<LPO){QYO<<KdOH}QWO<<KdOOQQ<<Kk<<KkO$0SQ!LbO<<KkOOQQ<<Kl<<KlO$0^Q`O<<KlO%+nQ&jO'#IRO%+yQWO,5?xOLRQYO,5?xOOQQ1G2j1G2jO#FbQ!LrO'#EPO!?bQ&jO'#GnOOQO'#IT'#ITO%,RQ&jO,5=XOOQQ,5=X,5=XO%,YQ&jO'#EPO%,eQ&jO'#EPO%,|Q&jO'#EPO%-WQ&jO'#GnO%-iQWO7+(^O%-nQWO7+(^O%-vQ`O7+(^OOQQ7+(^7+(^OH}QWO7+(^O){QYO7+(^OH}QWO7+(^O%.QQWO7+(^OOQQ7+(a7+(aO5iQ!LYO7+(aO#4oQWO7+(aO5_QWO7+(aO!,lQpO7+(aO%.`QWO,5>pOOQO-E<S-E<SOOQO'#Gq'#GqO%.kQWO1G5eO5iQ!LYO<<GoOOQQ<<Go<<GoO%.sQWO<<GoO%.xQWO7++SO%.}QWO7++TOOQQ7+(i7+(iO%/SQWO7+(iO%/XQYO7+(iO%/`QWO7+(iO){QYO7++SO){QYO7++TOOQQ<<L]<<L]OOQQ<<L_<<L_OOQQ-E<V-E<VOOQQ1G3^1G3^O%/eQWO,5=sOOQQ,5=u,5=uO:^QWO<<LhO%/jQWO<<LhOLRQYO7+%}OOQO7+%P7+%PO%/oQ7^O1G5VO:^QWO7+%POOQO1G0P1G0PO%/yQ!LdO1G0VOOQO1G0V1G0VO){QYO1G0VO%0TQ!LYO1G0VO:^QWO1G0PO!,lQpO1G0PO!?bQ&jO1G0PO%0`Q!LYO1G0VO%0nQ&jO1G0PO%1PQ!LYO1G0VO%1eQ!LrO1G0VO%1oQ&jO1G0PO!?bQ&jO1G0VOOQ!LS<<IR<<IROOQ!LS<<Ic<<IcO:^QWO<<IcO%1vQ!LdO<<NYOOQO7+)h7+)hO%2WQ!LdO7+'cO%4`QbO1G3xO%4jQ7^O7+%xO%4wQ7^O,59gO%6tQ7^O,5<QO%8qQ7^O,5<SO%:nQ7^O,5<bO%<^Q7^O7+'SO%<kQ7^O7+'TO%<xQWO,5;tOOQO7+&w7+&wO%<}Q#tO<<KbOOQO1G4Q1G4QO%=_QWO1G4QO%=jQWO1G4QO%=xQWO7+*yO%=xQWO7+*yOH}QWO1G4SO%>QQ`O1G4SO%>[QWO7+*zOOQO7+'k7+'kO5iQ!LYO7+'kOOQO7+'j7+'jO$+fQWO7+'lO%>dQ`O7+'lOOQO7+'p7+'pO5iQ!LYO7+'jO$+fQWO7+'kO%>kQWO7+'lOH}QWO7+'lO#4jQWO7+'kO%>pQ#tO<<MwOOQ!LS7+$o7+$oO%>zQ`O,5>kOOQO-E;}-E;}O#HbQWOANAOOOQQANAOANAOOH}QWOANAOO%?UQ!LbO7+'nOOQQAN=dAN=dO5qQWO1G4]OOQO1G4]1G4]O%?cQWO1G4]O%?hQWO7++RO%?hQWO7++RO5iQ!LYOANAkO%?pQWOANAkOOQQANAkANAkO%?uQWOANAOO%?}Q`OANAOOOQQANAVANAVOOQQANAWANAWO%@XQWO,5>mOOQO-E<P-E<PO%@dQ7^O1G5dO#4oQWO,5=YO5_QWO,5=YO!,lQpO,5=YOOQO-E<R-E<ROOQQ1G2s1G2sO$9pQ!LrO,5:kO!?bQ&jO,5=YO%@nQ&jO,5=YO%APQ&jO,5:kOOQQ<<Kx<<KxOH}QWO<<KxO%-iQWO<<KxO%AZQWO<<KxO%AcQ`O<<KxO){QYO<<KxOH}QWO<<KxOOQQ<<K{<<K{O5iQ!LYO<<K{O#4oQWO<<K{O5_QWO<<K{O%AmQ&jO1G4[O%ArQWO7++POOQQAN=ZAN=ZO5iQ!LYOAN=ZOOQQ<<Nn<<NnOOQQ<<No<<NoOOQQ<<LT<<LTO%AzQWO<<LTO%BPQYO<<LTO%BWQWO<<NnO%B]QWO<<NoOOQQ1G3_1G3_OOQQANBSANBSO:^QWOANBSO%BbQ7^O<<IiOOQO<<Hk<<HkOOQO7+%q7+%qO%/yQ!LdO7+%qO){QYO7+%qOOQO7+%k7+%kO:^QWO7+%kO!,lQpO7+%kO%BlQ!LYO7+%qO!?bQ&jO7+%kO%BwQ!LYO7+%qO%CVQ&jO7+%kO%ChQ!LYO7+%qOOQ!LSAN>}AN>}O%C|Q!LdO<<KbO%FUQ7^O<<JPO%FcQ7^O1G1uO%HRQ7^O1G2WO%JOQ7^O1G2YO%K{Q7^O<<JoO%LYQ7^O<<IdOOQO1G1`1G1`OOQO7+)l7+)lO%LgQWO7+)lO%LrQWO<<NeO%LzQ`O7+)nOOQO<<KV<<KVO5iQ!LYO<<KWO$+fQWO<<KWOOQO<<KU<<KUO5iQ!LYO<<KVO%MUQ`O<<KWO$+fQWO<<KVOOQQG26jG26jO#HbQWOG26jOOQO7+)w7+)wO5qQWO7+)wO%M]QWO<<NmOOQQG27VG27VO5iQ!LYOG27VOH}QWOG26jOLRQYO1G4XO%MeQWO7++OO5iQ!LYO1G2tO#4oQWO1G2tO5_QWO1G2tO!,lQpO1G2tO!?bQ&jO1G2tO%1eQ!LrO1G0VO%MmQ&jO1G2tO%-iQWOANAdOOQQANAdANAdOH}QWOANAdO%NOQWOANAdO%NWQ`OANAdOOQQANAgANAgO5iQ!LYOANAgO#4oQWOANAgOOQO'#Gr'#GrOOQO7+)v7+)vOOQQG22uG22uOOQQANAoANAoO%NbQWOANAoOOQQANDYANDYOOQQANDZANDZO%NgQYOG27nOOQO<<I]<<I]O%/yQ!LdO<<I]OOQO<<IV<<IVO:^QWO<<IVO){QYO<<I]O!,lQpO<<IVO&$eQ!LYO<<I]O!?bQ&jO<<IVO&$pQ!LYO<<I]O&%OQ7^O7+'cOOQO<<MW<<MWOOQOAN@rAN@rO5iQ!LYOAN@rOOQOAN@qAN@qO$+fQWOAN@rO5iQ!LYOAN@qOOQQLD,ULD,UOOQO<<Mc<<McOOQQLD,qLD,qO#HbQWOLD,UO&&nQ7^O7+)sOOQO7+(`7+(`O5iQ!LYO7+(`O#4oQWO7+(`O5_QWO7+(`O!,lQpO7+(`O!?bQ&jO7+(`OOQQG27OG27OO%-iQWOG27OOH}QWOG27OOOQQG27RG27RO5iQ!LYOG27ROOQQG27ZG27ZO:^QWOLD-YOOQOAN>wAN>wOOQOAN>qAN>qO%/yQ!LdOAN>wO:^QWOAN>qO){QYOAN>wO!,lQpOAN>qO&&xQ!LYOAN>wO&'TQ7^O<<KbOOQOG26^G26^O5iQ!LYOG26^OOQOG26]G26]OOQQ!$( p!$( pOOQO<<Kz<<KzO5iQ!LYO<<KzO#4oQWO<<KzO5_QWO<<KzO!,lQpO<<KzOOQQLD,jLD,jO%-iQWOLD,jOOQQLD,mLD,mOOQQ!$(!t!$(!tOOQOG24cG24cOOQOG24]G24]O%/yQ!LdOG24cO:^QWOG24]O){QYOG24cOOQOLD+xLD+xOOQOANAfANAfO5iQ!LYOANAfO#4oQWOANAfO5_QWOANAfOOQQ!$(!U!$(!UOOQOLD)}LD)}OOQOLD)wLD)wO%/yQ!LdOLD)}OOQOG27QG27QO5iQ!LYOG27QO#4oQWOG27QOOQO!$'Mi!$'MiOOQOLD,lLD,lO5iQ!LYOLD,lOOQO!$(!W!$(!WOLRQYO'#DnO&(sQbO'#IqOLRQYO'#DfO&(zQ!LdO'#CgO&)eQbO'#CgO&)uQYO,5:rOLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO,5:}OLRQYO'#HyO&+uQWO,5<PO&-XQWO,5:}OLRQYO,5;bO!(ZQWO'#C{O!(ZQWO'#C{OH}QWO'#FfO&+}QWO'#FfOH}QWO'#FhO&+}QWO'#FhOH}QWO'#FvO&+}QWO'#FvOLRQYO,5?kO&)uQYO1G0^O&-`Q7^O'#CgOLRQYO1G1hOH}QWO,5<lO&+}QWO,5<lOH}QWO,5<nO&+}QWO,5<nOH}QWO,5<ZO&+}QWO,5<ZO&)uQYO1G1iOLRQYO7+&eOH}QWO1G1wO&+}QWO1G1wO&)uQYO7+'TO&)uQYO7+%xOH}QWO7+'vO&+}QWO7+'vO&-jQWO'#EWO&-oQWO'#EWO&-wQWO'#EvO&-|QWO'#EcO&.RQWO'#JPO&.^QWO'#I}O&.iQWO,5:rO&.nQ#tO,5;|O&.uQWO'#FoO&.zQWO'#FoO&/PQWO,5;}O&/XQWO,5:rO&/aQ7^O1G0yO&/hQWO,5<]O&/mQWO,5<]O&/rQWO1G1iO&/wQWO1G0^O&/|Q#tO1G2[O&0TQ#tO1G2[O4QQWO'#FdO5_QWO'#FcOBqQWO'#EVOLRQYO,5;_O!(jQWO'#FqO!(jQWO'#FqOJ^QWO,5<pOJ^QWO,5<p",
        stateData: "&1Q~O'TOS'UOSSOSTOS~OPTOQTOWyO]cO^hOanObmOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!PSO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!jlO#`sO#ppO#t^O${qO$}tO%PrO%QrO%TuO%VvO%YwO%ZwO%]xO%jzO%p{O%r|O%t}O%v!OO%y!PO&P!QO&T!RO&V!SO&X!TO&Z!UO&]!VO'WPO'aQO'mYO'zaO~OPZXYZX^ZXiZXrZXsZXuZX}ZX!]ZX!^ZX!`ZX!fZX!wZX#ScX#WZX#XZX#YZX#ZZX#[ZX#]ZX#^ZX#_ZX#aZX#cZX#eZX#fZX#kZX'RZX'aZX'nZX'uZX'vZX~O!X$hX~P$zO'O!XO'P!WO'Q!ZO~OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!P!bO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'W![O'aQO'mYO'zaO~O|!`O}!]Oz'hPz'rP~P'dO!O!lO~P`OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!P!bO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'W9VO'aQO'mYO'zaO~OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!P!bO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'aQO'mYO'zaO~O|!qO#Q!tO#R!qO'W9WO!_'oP~P+{O#S!uO~O!X!vO#S!uO~OP#]OY#cOi#QOr!zOs!zOu!{O}#aO!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO#f#YO'aQO'n#ZO'u!|O'v!}O~O^'eX'R'eX!_'eXz'eX!P'eX$|'eX!X'eX~P.jO!w#dO#k#dOP'fXY'fX^'fXi'fXr'fXs'fXu'fX}'fX!]'fX!^'fX!`'fX!f'fX#W'fX#X'fX#Y'fX#Z'fX#['fX#]'fX#^'fX#a'fX#c'fX#e'fX#f'fX'a'fX'n'fX'u'fX'v'fX~O#_'fX'R'fXz'fX!_'fX'c'fX!P'fX$|'fX!X'fX~P0zO!w#dO~O#v#eO#}#iO~O!P#jO#t^O$Q#kO$S#mO~O]#pOg#}Oi#qOj#pOk#pOn$OOp$POu#wO!P#xO!Z$UO!`#uO#R$VO#p$SO$Z$QO$]$RO$`$TO'W#oO'a#rO'['^P~O!`$WO~O!X$YO~O^$ZO'R$ZO~O'W$_O~O!`$WO'W$_O'X$aO']$bO~Ob$hO!`$WO'W$_O~O#_#SO~O]$qOr$mO!P$jO!`$lO$}$pO'W$_O'X$aO[(SP~O!j$rO~Ou$sO!P$tO'W$_O~Ou$sO!P$tO%V$xO'W$_O~O'W$yO~O#`sO$}tO%PrO%QrO%TuO%VvO%YwO%ZwO~Oa%SOb%RO!j%PO${%QO%_%OO~P7uOa%VObmO!P%UO!jlO#`sO${qO%PrO%QrO%TuO%VvO%YwO%ZwO%]xO~O_%YO!w%]O$}%WO'X$aO~P8tO!`%^O!c%bO~O!`%cO~O!PSO~O^$ZO&}%kO'R$ZO~O^$ZO&}%nO'R$ZO~O^$ZO&}%pO'R$ZO~O'O!XO'P!WO'Q%tO~OPZXYZXiZXrZXsZXuZX}ZX}cX!]ZX!^ZX!`ZX!fZX!wZX!wcX#ScX#WZX#XZX#YZX#ZZX#[ZX#]ZX#^ZX#_ZX#aZX#cZX#eZX#fZX#kZX'aZX'nZX'uZX'vZX~OzZXzcX~P;aO|%vOz&cX}&cX~P){O}!]Oz'hX~OP#]OY#cOi#QOr!zOs!zOu!{O}!]O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO#f#YO'aQO'n#ZO'u!|O'v!}O~Oz'hX~P>WOz%{O~Ou&OO!S&YO!T&RO!U&RO'X$aO~O]&POj&PO|&SO'd%|O!O'iP!O'tP~P@ZOz'qX}'qX!X'qX!_'qX'n'qX~O!w'qX#S!{X!O'qX~PASO!w&ZOz'sX}'sX~O}&[Oz'rX~Oz&^O~O!w#dO~PASOR&bO!P&_O!k&aO'W$_O~Ob&gO!`$WO'W$_O~Or$mO!`$lO~O!O&hO~P`Or!zOs!zOu!{O!^!xO!`!yO'aQOP!baY!bai!ba}!ba!]!ba!f!ba#W!ba#X!ba#Y!ba#Z!ba#[!ba#]!ba#^!ba#_!ba#a!ba#c!ba#e!ba#f!ba'n!ba'u!ba'v!ba~O^!ba'R!baz!ba!_!ba'c!ba!P!ba$|!ba!X!ba~PC]O!_&iO~O!X!vO!w&kO'n&jO}'pX^'pX'R'pX~O!_'pX~PEuO}&oO!_'oX~O!_&qO~Ou$sO!P$tO#R&rO'W$_O~OPTOQTO]cOa!jOb!iOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!PSO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!j!hO#p!kO#t^O'W9VO'aQO'mYO'zaO~O]#pOg#}Oi#qOj#pOk#pOn$OOp9iOu#wO!P#xO!Z:lO!`#uO#R9oO#p$SO$Z9kO$]9mO$`$TO'W&vO'a#rO~O#S&xO~O]#pOg#}Oi#qOj#pOk#pOn$OOp$POu#wO!P#xO!Z$UO!`#uO#R$VO#p$SO$Z$QO$]$RO$`$TO'W&vO'a#rO~O'['kP~PJ^O|&|O!_'lP~P){O'd'OO'mYO~OP9SOQ9SO]cOa:jOb!iOgcOi9SOjcOkcOn9SOp9SOuROwcOxcOycO!P!bO!Z9UO!`UO!c9SO!d9SO!e9SO!f9SO!g9SO!j!hO#p!kO#t^O'W'^O'aQO'mYO'z:hO~O!`!yO~O}#aO^$Xa'R$Xa!_$Xaz$Xa!P$Xa$|$Xa!X$Xa~O#`'eO~PH}O!X'gO!P'wX#s'wX#v'wX#}'wX~Or'hO~PNyOr'hO!P'wX#s'wX#v'wX#}'wX~O!P'jO#s'nO#v'iO#}'oO~O|'rO~PLRO#v#eO#}'uO~Or$aXu$aX!^$aX'n$aX'u$aX'v$aX~OReX}eX!weX'[eX'[$aX~P!!cOj'wO~O'O'yO'P'xO'Q'{O~Or'}Ou(OO'n#ZO'u(QO'v(SO~O'['|O~P!#lO'[(VO~O]#pOg#}Oi#qOj#pOk#pOn$OOp9iOu#wO!P#xO!Z:lO!`#uO#R9oO#p$SO$Z9kO$]9mO$`$TO'a#rO~O|(ZO'W(WO!_'{P~P!$ZO#S(]O~O|(aO'W(^Oz'|P~P!$ZO^(jOi(oOu(gO!S(mO!T(fO!U(fO!`(dO!t(nO$s(iO'X$aO'd(cO~O!O(lO~P!&RO!^!xOr'`Xu'`X'n'`X'u'`X'v'`X}'`X!w'`X~O'['`X#i'`X~P!&}OR(rO!w(qO}'_X'['_X~O}(sO'['^X~O'W(uO~O!`(zO~O'W&vO~O!`(dO~Ou$sO|!qO!P$tO#Q!tO#R!qO'W$_O!_'oP~O!X!vO#S)OO~OP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO#f#YO'aQO'n#ZO'u!|O'v!}O~O^!Ya}!Ya'R!Yaz!Ya!_!Ya'c!Ya!P!Ya$|!Ya!X!Ya~P!)`OR)WO!P&_O!k)VO$|)UO']$bO~O'W$yO'['^P~O!X)ZO!P'ZX^'ZX'R'ZX~O!`$WO']$bO~O!`$WO'W$_O']$bO~O!X!vO#S&xO~O$})gO'W)cO!O(TP~O})hO[(SX~O'd'OO~OY)lO~O[)mO~O!P$jO'W$_O'X$aO[(SP~Ou$sO|)rO!P$tO'W$_Oz'rP~O]&VOj&VO|)sO'd'OO!O'tP~O})tO^(PX'R(PX~O!w)xO']$bO~OR){O!P#xO']$bO~O!P)}O~Or*PO!PSO~O!j*UO~Ob*ZO~O'W(uO!O(RP~Ob$hO~O$}tO'W$yO~P8tOY*aO[*`O~OPTOQTO]cOanObmOgcOiTOjcOkcOnTOpTOuROwcOxcOycO!ZkO!`UO!cTO!dTO!eTO!fTO!gTO!jlO#t^O${qO'aQO'mYO'zaO~O!P!bO#p!kO'W9VO~P!0uO[*`O^$ZO'R$ZO~O^*eO#`*gO%P*gO%Q*gO~P){O!`%^O~O%p*lO~O!P*nO~O&Q*qO&R*pOP&OaQ&OaW&Oa]&Oa^&Oaa&Oab&Oag&Oai&Oaj&Oak&Oan&Oap&Oau&Oaw&Oax&Oay&Oa!P&Oa!Z&Oa!`&Oa!c&Oa!d&Oa!e&Oa!f&Oa!g&Oa!j&Oa#`&Oa#p&Oa#t&Oa${&Oa$}&Oa%P&Oa%Q&Oa%T&Oa%V&Oa%Y&Oa%Z&Oa%]&Oa%j&Oa%p&Oa%r&Oa%t&Oa%v&Oa%y&Oa&P&Oa&T&Oa&V&Oa&X&Oa&Z&Oa&]&Oa&|&Oa'W&Oa'a&Oa'm&Oa'z&Oa!O&Oa%w&Oa_&Oa%|&Oa~O'W*tO~O'c*wO~Oz&ca}&ca~P!)`O}!]Oz'ha~Oz'ha~P>WO}&[Oz'ra~O}tX}!VX!OtX!O!VX!XtX!X!VX!`!VX!wtX']!VX~O!X+OO!w*}O}#PX}'jX!O#PX!O'jX!X'jX!`'jX']'jX~O!X+QO!`$WO']$bO}!RX!O!RX~O]%}Oj%}Ou&OO'd(cO~OP9SOQ9SO]cOa:jOb!iOgcOi9SOjcOkcOn9SOp9SOuROwcOxcOycO!P!bO!Z9UO!`UO!c9SO!d9SO!e9SO!f9SO!g9SO!j!hO#p!kO#t^O'aQO'mYO'z:hO~O'W9sO~P!:sO}+UO!O'iX~O!O+WO~O!X+OO!w*}O}#PX!O#PX~O}+XO!O'tX~O!O+ZO~O]%}Oj%}Ou&OO'X$aO'd(cO~O!T+[O!U+[O~P!=qOu$sO|+_O!P$tO'W$_Oz&hX}&hX~O^+dO!S+gO!T+cO!U+cO!n+kO!o+iO!p+jO!q+hO!t+lO'X$aO'd(cO'm+aO~O!O+fO~P!>rOR+qO!P&_O!k+pO~O!w+wO}'pa!_'pa^'pa'R'pa~O!X!vO~P!?|O}&oO!_'oa~Ou$sO|+zO!P$tO#Q+|O#R+zO'W$_O}&jX!_&jX~O^!zi}!zi'R!ziz!zi!_!zi'c!zi!P!zi$|!zi!X!zi~P!)`O#S!va}!va!_!va!w!va!P!va^!va'R!vaz!va~P!#lO#S'`XP'`XY'`X^'`Xi'`Xs'`X!]'`X!`'`X!f'`X#W'`X#X'`X#Y'`X#Z'`X#['`X#]'`X#^'`X#_'`X#a'`X#c'`X#e'`X#f'`X'R'`X'a'`X!_'`Xz'`X!P'`X'c'`X$|'`X!X'`X~P!&}O},VO'['kX~P!#lO'[,XO~O},YO!_'lX~P!)`O!_,]O~Oz,^O~OP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O'aQOY#Vi^#Vii#Vi}#Vi!]#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'u#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~O#W#Vi~P!EZO#W#OO~P!EZOP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO'aQOY#Vi^#Vi}#Vi!]#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'u#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~Oi#Vi~P!GuOi#QO~P!GuOP#]Oi#QOr!zOs!zOu!{O!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO'aQO^#Vi}#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'u#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~OY#Vi!]#Vi#]#Vi#^#Vi#_#Vi~P!JaOY#cO!]#SO#]#SO#^#SO#_#SO~P!JaOP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO'aQO^#Vi}#Vi#c#Vi#e#Vi#f#Vi'R#Vi'n#Vi'v#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~O'u#Vi~P!MXO'u!|O~P!MXOP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO'aQO'u!|O^#Vi}#Vi#e#Vi#f#Vi'R#Vi'n#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~O'v#Vi~P# sO'v!}O~P# sOP#]OY#cOi#QOr!zOs!zOu!{O!]#SO!^!xO!`!yO!f#]O#W#OO#X#PO#Y#PO#Z#PO#[#RO#]#SO#^#SO#_#SO#a#TO#c#VO#e#XO'aQO'u!|O'v!}O~O^#Vi}#Vi#f#Vi'R#Vi'n#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~P#$_OPZXYZXiZXrZXsZXuZX!]ZX!^ZX!`ZX!fZX!wZX#ScX#WZX#XZX#YZX#ZZX#[ZX#]ZX#^ZX#_ZX#aZX#cZX#eZX#fZX#kZX'aZX'nZX'uZX'vZX}ZX!OZX~O#iZX~P#&rOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O#c9aO#e9cO#f9dO'aQO'n#ZO'u!|O'v!}O~O#i,`O~P#(|OP'fXY'fXi'fXr'fXs'fXu'fX!]'fX!^'fX!`'fX!f'fX#W'fX#X'fX#Y'fX#Z'fX#['fX#]'fX#^'fX#a'fX#c'fX#e'fX#f'fX'a'fX'n'fX'u'fX'v'fX}'fX~O!w9hO#k9hO#_'fX#i'fX!O'fX~P#*wO^&ma}&ma'R&ma!_&ma'c&maz&ma!P&ma$|&ma!X&ma~P!)`OP#ViY#Vi^#Vii#Vis#Vi}#Vi!]#Vi!^#Vi!`#Vi!f#Vi#W#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi'R#Vi'a#Viz#Vi!_#Vi'c#Vi!P#Vi$|#Vi!X#Vi~P!#lO^#ji}#ji'R#jiz#ji!_#ji'c#ji!P#ji$|#ji!X#ji~P!)`O#v,bO~O#v,cO~O!X'gO!w,dO!P#zX#s#zX#v#zX#}#zX~O|,eO~O!P'jO#s,gO#v'iO#},hO~O}9eO!O'eX~P#(|O!O,iO~O#},kO~O'O'yO'P'xO'Q,nO~O],qOj,qOz,rO~O}cX!XcX!_cX!_$aX'ncX~P!!cO!_,xO~P!#lO},yO!X!vO'n&jO!_'{X~O!_-OO~Oz$aX}$aX!X$hX~P!!cO}-QOz'|X~P!#lO!X-SO~Oz-UO~O|(ZO'W$_O!_'{P~Oi-YO!X!vO!`$WO']$bO'n&jO~O!X)ZO~O!O-`O~P!&RO!T-aO!U-aO'X$aO'd(cO~Ou-cO'd(cO~O!t-dO~O'W$yO}&rX'[&rX~O}(sO'['^a~Or-iOs-iOu-jO'noa'uoa'voa}oa!woa~O'[oa#ioa~P#5{Or'}Ou(OO'n$Ya'u$Ya'v$Ya}$Ya!w$Ya~O'[$Ya#i$Ya~P#6qOr'}Ou(OO'n$[a'u$[a'v$[a}$[a!w$[a~O'[$[a#i$[a~P#7dO]-kO~O#S-lO~O'[$ja}$ja#i$ja!w$ja~P!#lO#S-oO~OR-xO!P&_O!k-wO$|-vO~O'[-yO~O]#pOi#qOj#pOk#pOn$OOp9iOu#wO!P#xO!Z:lO!`#uO#R9oO#p$SO$Z9kO$]9mO$`$TO'a#rO~Og-{O'W-zO~P#9ZO!X)ZO!P'Za^'Za'R'Za~O#S.RO~OYZX}cX!OcX~O}.SO!O(TX~O!O.UO~OY.VO~O'W)cO~O!P$jO'W$_O[&zX}&zX~O})hO[(Sa~O!_.[O~P!)`O].^O~OY._O~O[.`O~OR-xO!P&_O!k-wO$|-vO']$bO~O})tO^(Pa'R(Pa~O!w.fO~OR.iO!P#xO~O'd'OO!O(QP~OR.sO!P.oO!k.rO$|.qO']$bO~OY.}O}.{O!O(RX~O!O/OO~O[/QO^$ZO'R$ZO~O]/RO~O#_/TO%n/UO~P0zO!w#dO#_/TO%n/UO~O^/VO~P){O^/XO~O%w/]OP%uiQ%uiW%ui]%ui^%uia%uib%uig%uii%uij%uik%uin%uip%uiu%uiw%uix%uiy%ui!P%ui!Z%ui!`%ui!c%ui!d%ui!e%ui!f%ui!g%ui!j%ui#`%ui#p%ui#t%ui${%ui$}%ui%P%ui%Q%ui%T%ui%V%ui%Y%ui%Z%ui%]%ui%j%ui%p%ui%r%ui%t%ui%v%ui%y%ui&P%ui&T%ui&V%ui&X%ui&Z%ui&]%ui&|%ui'W%ui'a%ui'm%ui'z%ui!O%ui_%ui%|%ui~O_/cO!O/aO%|/bO~P`O!PSO!`/fO~O}#aO'c$Xa~Oz&ci}&ci~P!)`O}!]Oz'hi~O}&[Oz'ri~Oz/jO~O}!Ra!O!Ra~P#(|O]%}Oj%}O|/pO'd(cO}&dX!O&dX~P@ZO}+UO!O'ia~O]&VOj&VO|)sO'd'OO}&iX!O&iX~O}+XO!O'ta~Oz'si}'si~P!)`O^$ZO!X!vO!`$WO!f/{O!w/yO'R$ZO']$bO'n&jO~O!O0OO~P!>rO!T0PO!U0PO'X$aO'd(cO'm+aO~O!S0QO~P#GTO!PSO!S0QO!q0SO!t0TO~P#GTO!S0QO!o0VO!p0VO!q0SO!t0TO~P#GTO!P&_O~O!P&_O~P!#lO}'pi!_'pi^'pi'R'pi~P!)`O!w0`O}'pi!_'pi^'pi'R'pi~O}&oO!_'oi~Ou$sO!P$tO#R0bO'W$_O~O#SoaPoaYoa^oaioa!]oa!^oa!`oa!foa#Woa#Xoa#Yoa#Zoa#[oa#]oa#^oa#_oa#aoa#coa#eoa#foa'Roa'aoa!_oazoa!Poa'coa$|oa!Xoa~P#5{O#S$YaP$YaY$Ya^$Yai$Yas$Ya!]$Ya!^$Ya!`$Ya!f$Ya#W$Ya#X$Ya#Y$Ya#Z$Ya#[$Ya#]$Ya#^$Ya#_$Ya#a$Ya#c$Ya#e$Ya#f$Ya'R$Ya'a$Ya!_$Yaz$Ya!P$Ya'c$Ya$|$Ya!X$Ya~P#6qO#S$[aP$[aY$[a^$[ai$[as$[a!]$[a!^$[a!`$[a!f$[a#W$[a#X$[a#Y$[a#Z$[a#[$[a#]$[a#^$[a#_$[a#a$[a#c$[a#e$[a#f$[a'R$[a'a$[a!_$[az$[a!P$[a'c$[a$|$[a!X$[a~P#7dO#S$jaP$jaY$ja^$jai$jas$ja}$ja!]$ja!^$ja!`$ja!f$ja#W$ja#X$ja#Y$ja#Z$ja#[$ja#]$ja#^$ja#_$ja#a$ja#c$ja#e$ja#f$ja'R$ja'a$ja!_$jaz$ja!P$ja!w$ja'c$ja$|$ja!X$ja~P!#lO^!zq}!zq'R!zqz!zq!_!zq'c!zq!P!zq$|!zq!X!zq~P!)`O}&eX'[&eX~PJ^O},VO'['ka~O|0jO}&fX!_&fX~P){O},YO!_'la~O},YO!_'la~P!)`O#i!ba!O!ba~PC]O#i!Ya}!Ya!O!Ya~P#(|O!P0}O#t^O#{1OO~O!O1SO~O'c1TO~P!#lO^$Uq}$Uq'R$Uqz$Uq!_$Uq'c$Uq!P$Uq$|$Uq!X$Uq~P!)`Oz1UO~O],qOj,qO~Or'}Ou(OO'v(SO'n$ti'u$ti}$ti!w$ti~O'[$ti#i$ti~P$'tOr'}Ou(OO'n$vi'u$vi'v$vi}$vi!w$vi~O'[$vi#i$vi~P$(gO#i1VO~P!#lO|1XO'W$_O}&nX!_&nX~O},yO!_'{a~O},yO!X!vO!_'{a~O},yO!X!vO'n&jO!_'{a~O'[$ci}$ci#i$ci!w$ci~P!#lO|1`O'W(^Oz&pX}&pX~P!$ZO}-QOz'|a~O}-QOz'|a~P!#lO!X!vO~O!X!vO#_1jO~Oi1nO!X!vO'n&jO~O}'_i'['_i~P!#lO!w1qO}'_i'['_i~P!#lO!_1tO~O^$Vq}$Vq'R$Vqz$Vq!_$Vq'c$Vq!P$Vq$|$Vq!X$Vq~P!)`O}1xO!P'}X~P!#lO!P&_O$|1{O~O!P&_O$|1{O~P!#lO!P$aX$qZX^$aX'R$aX~P!!cO$q2POrfXufX!PfX'nfX'ufX'vfX^fX'RfX~O$q2PO~O$}2WO'W)cO}&yX!O&yX~O}.SO!O(Ta~OY2[O~O[2]O~O]2`O~OR2bO!P&_O!k2aO$|1{O~O^$ZO'R$ZO~P!#lO!P#xO~P!#lO}2gO!w2iO!O(QX~O!O2jO~Ou(gO!S2sO!T2lO!U2lO!n2rO!o2qO!p2qO!t2pO'X$aO'd(cO'm+aO~O!O2oO~P$0uOR2zO!P.oO!k2yO$|2xO~OR2zO!P.oO!k2yO$|2xO']$bO~O'W(uO}&xX!O&xX~O}.{O!O(Ra~O'd3TO~O]3VO~O[3XO~O!_3[O~P){O^3^O~O^3^O~P){O#_3`O%n3aO~PEuO_/cO!O3eO%|/bO~P`O!X3gO~O&R3hOP&OqQ&OqW&Oq]&Oq^&Oqa&Oqb&Oqg&Oqi&Oqj&Oqk&Oqn&Oqp&Oqu&Oqw&Oqx&Oqy&Oq!P&Oq!Z&Oq!`&Oq!c&Oq!d&Oq!e&Oq!f&Oq!g&Oq!j&Oq#`&Oq#p&Oq#t&Oq${&Oq$}&Oq%P&Oq%Q&Oq%T&Oq%V&Oq%Y&Oq%Z&Oq%]&Oq%j&Oq%p&Oq%r&Oq%t&Oq%v&Oq%y&Oq&P&Oq&T&Oq&V&Oq&X&Oq&Z&Oq&]&Oq&|&Oq'W&Oq'a&Oq'm&Oq'z&Oq!O&Oq%w&Oq_&Oq%|&Oq~O}#Pi!O#Pi~P#(|O!w3jO}#Pi!O#Pi~O}!Ri!O!Ri~P#(|O^$ZO!w3qO'R$ZO~O^$ZO!X!vO!w3qO'R$ZO~O!T3uO!U3uO'X$aO'd(cO'm+aO~O^$ZO!X!vO!`$WO!f3vO!w3qO'R$ZO']$bO'n&jO~O!S3wO~P$9_O!S3wO!q3zO!t3{O~P$9_O^$ZO!X!vO!f3vO!w3qO'R$ZO'n&jO~O}'pq!_'pq^'pq'R'pq~P!)`O}&oO!_'oq~O#S$tiP$tiY$ti^$tii$tis$ti!]$ti!^$ti!`$ti!f$ti#W$ti#X$ti#Y$ti#Z$ti#[$ti#]$ti#^$ti#_$ti#a$ti#c$ti#e$ti#f$ti'R$ti'a$ti!_$tiz$ti!P$ti'c$ti$|$ti!X$ti~P$'tO#S$viP$viY$vi^$vii$vis$vi!]$vi!^$vi!`$vi!f$vi#W$vi#X$vi#Y$vi#Z$vi#[$vi#]$vi#^$vi#_$vi#a$vi#c$vi#e$vi#f$vi'R$vi'a$vi!_$viz$vi!P$vi'c$vi$|$vi!X$vi~P$(gO#S$ciP$ciY$ci^$cii$cis$ci}$ci!]$ci!^$ci!`$ci!f$ci#W$ci#X$ci#Y$ci#Z$ci#[$ci#]$ci#^$ci#_$ci#a$ci#c$ci#e$ci#f$ci'R$ci'a$ci!_$ciz$ci!P$ci!w$ci'c$ci$|$ci!X$ci~P!#lO}&ea'[&ea~P!#lO}&fa!_&fa~P!)`O},YO!_'li~O#i!zi}!zi!O!zi~P#(|OP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O'aQOY#Vii#Vi!]#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'u#Vi'v#Vi}#Vi!O#Vi~O#W#Vi~P$BuO#W9YO~P$BuOP#]Or!zOs!zOu!{O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO'aQOY#Vi!]#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'u#Vi'v#Vi}#Vi!O#Vi~Oi#Vi~P$D}Oi9[O~P$D}OP#]Oi9[Or!zOs!zOu!{O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O'aQO#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'u#Vi'v#Vi}#Vi!O#Vi~OY#Vi!]#Vi#]#Vi#^#Vi#_#Vi~P$GVOY9gO!]9^O#]9^O#^9^O#_9^O~P$GVOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O'aQO#c#Vi#e#Vi#f#Vi#i#Vi'n#Vi'v#Vi}#Vi!O#Vi~O'u#Vi~P$IkO'u!|O~P$IkOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O#c9aO'aQO'u!|O#e#Vi#f#Vi#i#Vi'n#Vi}#Vi!O#Vi~O'v#Vi~P$KsO'v!}O~P$KsOP#]OY9gOi9[Or!zOs!zOu!{O!]9^O!^!xO!`!yO!f#]O#W9YO#X9ZO#Y9ZO#Z9ZO#[9]O#]9^O#^9^O#_9^O#a9_O#c9aO#e9cO'aQO'u!|O'v!}O~O#f#Vi#i#Vi'n#Vi}#Vi!O#Vi~P$M{O^#gy}#gy'R#gyz#gy!_#gy'c#gy!P#gy$|#gy!X#gy~P!)`OP#ViY#Vii#Vis#Vi!]#Vi!^#Vi!`#Vi!f#Vi#W#Vi#X#Vi#Y#Vi#Z#Vi#[#Vi#]#Vi#^#Vi#_#Vi#a#Vi#c#Vi#e#Vi#f#Vi#i#Vi'a#Vi}#Vi!O#Vi~P!#lO!^!xOP'`XY'`Xi'`Xr'`Xs'`Xu'`X!]'`X!`'`X!f'`X#W'`X#X'`X#Y'`X#Z'`X#['`X#]'`X#^'`X#_'`X#a'`X#c'`X#e'`X#f'`X#i'`X'a'`X'n'`X'u'`X'v'`X}'`X!O'`X~O#i#ji}#ji!O#ji~P#(|O!O4]O~O}&ma!O&ma~P#(|O!X!vO'n&jO}&na!_&na~O},yO!_'{i~O},yO!X!vO!_'{i~Oz&pa}&pa~P!#lO!X4dO~O}-QOz'|i~P!#lO}-QOz'|i~Oz4jO~O!X!vO#_4pO~Oi4qO!X!vO'n&jO~Oz4sO~O'[$eq}$eq#i$eq!w$eq~P!#lO^$Vy}$Vy'R$Vyz$Vy!_$Vy'c$Vy!P$Vy$|$Vy!X$Vy~P!)`O}1xO!P'}a~O!P&_O$|4xO~O!P&_O$|4xO~P!#lO^!zy}!zy'R!zyz!zy!_!zy'c!zy!P!zy$|!zy!X!zy~P!)`OY4{O~O}.SO!O(Ti~O]5QO~O[5RO~O'd'OO}&uX!O&uX~O}2gO!O(Qa~O!O5`O~P$0uOu-cO'd(cO'm+aO~O!S5cO!T5bO!U5bO!t0TO'X$aO'd(cO'm+aO~O!o5dO!p5dO~P%,eO!T5bO!U5bO'X$aO'd(cO'm+aO~O!P.oO~O!P.oO$|5fO~O!P.oO$|5fO~P!#lOR5kO!P.oO!k5jO$|5fO~OY5pO}&xa!O&xa~O}.{O!O(Ri~O]5sO~O!_5tO~O!_5uO~O!_5vO~O!_5vO~P){O^5xO~O!X5{O~O!_5}O~O}'si!O'si~P#(|O^$ZO'R$ZO~P!)`O^$ZO!w6SO'R$ZO~O^$ZO!X!vO!w6SO'R$ZO~O!T6XO!U6XO'X$aO'd(cO'm+aO~O^$ZO!X!vO!f6YO!w6SO'R$ZO'n&jO~O!`$WO']$bO~P%1PO!S6ZO~P%0nO}'py!_'py^'py'R'py~P!)`O#S$eqP$eqY$eq^$eqi$eqs$eq}$eq!]$eq!^$eq!`$eq!f$eq#W$eq#X$eq#Y$eq#Z$eq#[$eq#]$eq#^$eq#_$eq#a$eq#c$eq#e$eq#f$eq'R$eq'a$eq!_$eqz$eq!P$eq!w$eq'c$eq$|$eq!X$eq~P!#lO}&fi!_&fi~P!)`O#i!zq}!zq!O!zq~P#(|Or-iOs-iOu-jOPoaYoaioa!]oa!^oa!`oa!foa#Woa#Xoa#Yoa#Zoa#[oa#]oa#^oa#_oa#aoa#coa#eoa#foa#ioa'aoa'noa'uoa'voa}oa!Ooa~Or'}Ou(OOP$YaY$Yai$Yas$Ya!]$Ya!^$Ya!`$Ya!f$Ya#W$Ya#X$Ya#Y$Ya#Z$Ya#[$Ya#]$Ya#^$Ya#_$Ya#a$Ya#c$Ya#e$Ya#f$Ya#i$Ya'a$Ya'n$Ya'u$Ya'v$Ya}$Ya!O$Ya~Or'}Ou(OOP$[aY$[ai$[as$[a!]$[a!^$[a!`$[a!f$[a#W$[a#X$[a#Y$[a#Z$[a#[$[a#]$[a#^$[a#_$[a#a$[a#c$[a#e$[a#f$[a#i$[a'a$[a'n$[a'u$[a'v$[a}$[a!O$[a~OP$jaY$jai$jas$ja!]$ja!^$ja!`$ja!f$ja#W$ja#X$ja#Y$ja#Z$ja#[$ja#]$ja#^$ja#_$ja#a$ja#c$ja#e$ja#f$ja#i$ja'a$ja}$ja!O$ja~P!#lO#i$Uq}$Uq!O$Uq~P#(|O#i$Vq}$Vq!O$Vq~P#(|O!O6eO~O'[$xy}$xy#i$xy!w$xy~P!#lO!X!vO}&ni!_&ni~O!X!vO'n&jO}&ni!_&ni~O},yO!_'{q~Oz&pi}&pi~P!#lO}-QOz'|q~Oz6lO~P!#lOz6lO~O}'_y'['_y~P!#lO}&sa!P&sa~P!#lO!P$pq^$pq'R$pq~P!#lOY6tO~O}.SO!O(Tq~O]6wO~O!P&_O$|6xO~O!P&_O$|6xO~P!#lO!w6yO}&ua!O&ua~O}2gO!O(Qi~P#(|O!T7PO!U7PO'X$aO'd(cO'm+aO~O!S7RO!t3{O~P%@nO!P.oO$|7UO~O!P.oO$|7UO~P!#lO'd7[O~O}.{O!O(Rq~O!_7_O~O!_7_O~P){O!_7aO~O!_7bO~O}#Py!O#Py~P#(|O^$ZO!w7hO'R$ZO~O^$ZO!X!vO!w7hO'R$ZO~O!T7kO!U7kO'X$aO'd(cO'm+aO~O^$ZO!X!vO!f7lO!w7hO'R$ZO'n&jO~O#S$xyP$xyY$xy^$xyi$xys$xy}$xy!]$xy!^$xy!`$xy!f$xy#W$xy#X$xy#Y$xy#Z$xy#[$xy#]$xy#^$xy#_$xy#a$xy#c$xy#e$xy#f$xy'R$xy'a$xy!_$xyz$xy!P$xy!w$xy'c$xy$|$xy!X$xy~P!#lO#i#gy}#gy!O#gy~P#(|OP$ciY$cii$cis$ci!]$ci!^$ci!`$ci!f$ci#W$ci#X$ci#Y$ci#Z$ci#[$ci#]$ci#^$ci#_$ci#a$ci#c$ci#e$ci#f$ci#i$ci'a$ci}$ci!O$ci~P!#lOr'}Ou(OO'v(SOP$tiY$tii$tis$ti!]$ti!^$ti!`$ti!f$ti#W$ti#X$ti#Y$ti#Z$ti#[$ti#]$ti#^$ti#_$ti#a$ti#c$ti#e$ti#f$ti#i$ti'a$ti'n$ti'u$ti}$ti!O$ti~Or'}Ou(OOP$viY$vii$vis$vi!]$vi!^$vi!`$vi!f$vi#W$vi#X$vi#Y$vi#Z$vi#[$vi#]$vi#^$vi#_$vi#a$vi#c$vi#e$vi#f$vi#i$vi'a$vi'n$vi'u$vi'v$vi}$vi!O$vi~O#i$Vy}$Vy!O$Vy~P#(|O#i!zy}!zy!O!zy~P#(|O!X!vO}&nq!_&nq~O},yO!_'{y~Oz&pq}&pq~P!#lOz7rO~P!#lO}.SO!O(Ty~O}2gO!O(Qq~O!T8OO!U8OO'X$aO'd(cO'm+aO~O!P.oO$|8RO~O!P.oO$|8RO~P!#lO!_8UO~O&R8VOP&O!ZQ&O!ZW&O!Z]&O!Z^&O!Za&O!Zb&O!Zg&O!Zi&O!Zj&O!Zk&O!Zn&O!Zp&O!Zu&O!Zw&O!Zx&O!Zy&O!Z!P&O!Z!Z&O!Z!`&O!Z!c&O!Z!d&O!Z!e&O!Z!f&O!Z!g&O!Z!j&O!Z#`&O!Z#p&O!Z#t&O!Z${&O!Z$}&O!Z%P&O!Z%Q&O!Z%T&O!Z%V&O!Z%Y&O!Z%Z&O!Z%]&O!Z%j&O!Z%p&O!Z%r&O!Z%t&O!Z%v&O!Z%y&O!Z&P&O!Z&T&O!Z&V&O!Z&X&O!Z&Z&O!Z&]&O!Z&|&O!Z'W&O!Z'a&O!Z'm&O!Z'z&O!Z!O&O!Z%w&O!Z_&O!Z%|&O!Z~O^$ZO!w8[O'R$ZO~O^$ZO!X!vO!w8[O'R$ZO~OP$eqY$eqi$eqs$eq!]$eq!^$eq!`$eq!f$eq#W$eq#X$eq#Y$eq#Z$eq#[$eq#]$eq#^$eq#_$eq#a$eq#c$eq#e$eq#f$eq#i$eq'a$eq}$eq!O$eq~P!#lO}&uq!O&uq~P#(|O^$ZO!w8qO'R$ZO~OP$xyY$xyi$xys$xy!]$xy!^$xy!`$xy!f$xy#W$xy#X$xy#Y$xy#Z$xy#[$xy#]$xy#^$xy#_$xy#a$xy#c$xy#e$xy#f$xy#i$xy'a$xy}$xy!O$xy~P!#lO'c'eX~P.jO'cZXzZX!_ZX%nZX!PZX$|ZX!XZX~P$zO!XcX!_ZX!_cX'ncX~P;aOP9SOQ9SO]cOa:jOb!iOgcOi9SOjcOkcOn9SOp9SOuROwcOxcOycO!PSO!Z9UO!`UO!c9SO!d9SO!e9SO!f9SO!g9SO!j!hO#p!kO#t^O'W'^O'aQO'mYO'z:hO~O}9eO!O$Xa~O]#pOg#}Oi#qOj#pOk#pOn$OOp9jOu#wO!P#xO!Z:mO!`#uO#R9pO#p$SO$Z9lO$]9nO$`$TO'W&vO'a#rO~O#`'eO~P&+}O!OZX!OcX~P;aO#S9XO~O!X!vO#S9XO~O!w9hO~O#_9^O~O!w9qO}'sX!O'sX~O!w9hO}'qX!O'qX~O#S9rO~O'[9tO~P!#lO#S9yO~O#S9zO~O!X!vO#S9{O~O!X!vO#S9rO~O#i9|O~P#(|O#S9}O~O#S:OO~O#S:PO~O#S:QO~O#i:RO~P!#lO#i:SO~P!#lO#t~!^!n!p!q#Q#R'z$Z$]$`$q${$|$}%T%V%Y%Z%]%_~TS#t'z#Xy'T'U#v'T'W'd~",
        goto: "#Dk(XPPPPPPP(YP(jP*^PPPP-sPP.Y3j5^5qP5qPPP5q5qP5qP7_PP7dP7xPPPP<XPPPP<X>wPPP>}AYP<XPCsPPPPEk<XPPPPPGd<XPPJcK`PPPPKdL|PMUNVPK`<X<X!#^!&V!*v!*v!.TPPP!.[!1O<XPPPPPPPPPP!3sP!5UPP<X!6cP<XP<X<X<X<XP<X!8vPP!;mP!>`!>h!>l!>lP!;jP!>p!>pP!AcP!Ag<X<X!Am!D_5qP5qP5q5qP!Eb5q5q!GY5q!I[5q!J|5q5q!Kj!Md!Md!Mh!Md!MpP!MdP5q!Nl5q# v5q5q-sPPP##TPP##m##mP##mP#$S##mPP#$YP#$PP#$P#$lMQ#$P#%Z#%a#%d(Y#%g(YP#%n#%n#%nP(YP(YP(YP(YPP(YP#%t#%wP#%w(YPPP(YP(YP(YP(YP(YP(Y(Y#%{#&V#&]#&c#&q#&w#&}#'X#'_#'i#'o#'}#(T#(Z#(i#)O#*b#*p#*v#*|#+S#+Y#+d#+j#+p#+z#,^#,dPPPPPPPPP#,jPP#-^#1[PP#2r#2y#3RP#7_PP#7c#9v#?p#?t#?w#?z#@V#@YPP#@]#@a#AO#As#Aw#BZPP#B_#Be#BiP#Bl#Bp#Bs#Cc#Cy#DO#DR#DU#D[#D_#Dc#DgmhOSj}!m$Y%a%d%e%g*i*n/]/`Q$gmQ$npQ%XyS&R!b+UQ&f!iS(f#x(kQ)a$hQ)n$pQ*Y%RQ+[&YS+c&_+eQ+u&gQ-a(mQ.z*ZY0P+g+h+i+j+kS2l.o2nU3u0Q0S0VU5b2q2r2sS6X3w3zS7P5c5dQ7k6ZR8O7R$l[ORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8q!j'`#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ(v$PQ)f$jQ*[%UQ*c%^Q,P9iQ-|)ZQ.X)gQ/S*aQ2V.SQ3R.{Q4U9jR4}2WpeOSjy}!m$Y%W%a%d%e%g*i*n/]/`R*^%Y&WVOSTjkn}!S!W!]!j!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:j:kW!cRU!`&SQ$`lQ$fmS$kp$pv$urs!q!t$W$s&[&o&r)r)s)t*g+O+_+z+|/f0bQ$}wQ&c!hQ&e!iS(Y#u(dS)`$g$hQ)d$jQ)q$rQ*T%PQ*X%RS+t&f&gQ,}(ZQ.Q)aQ.W)gQ.Y)hQ.])lQ.u*US.y*Y*ZQ0^+uQ1W,yQ2U.SQ2Y.VQ2_._Q3Q.zQ4a1XQ4|2WQ5P2[Q6s4{R7u6t!Y$dm!i$f$g$h&Q&e&f&g(e)`)a+R+b+t+u-Z.Q/u/|0R0^1m3t3y6V7i8]Q)X$`Q)y$zQ)|${Q*W%RQ.a)qQ.t*TU.x*X*Y*ZQ2{.uS3P.y.zQ5]2kQ5o3QS6}5^5aS7|7O7QQ8g7}R8v8hW#{a$b(s:hS$zt%WQ${uQ$|vR)w$x$V#za!v!x#c#u#w$Q$R$V&b'x(R(T(U(](a(q(r)U)W)Z)x){+q,V-Q-S-l-v-x.f.i.q.s1V1`1j1q1x1{2P2b2x2z4d4p4x5f5k6x7U8R9g9k9l9m9n9o9p9u9v9w9x9y9z9}:O:R:S:h:n:oV(w$P9i9jU&V!b$t+XQ'P!zQ)k$mQ.j)}Q1r-iR5X2g&YcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:k$]#`Z!_!n$^%u%y&t&{'R'S'T'U'V'W'X'Y'Z'[']'_'b'f'p)j*y+S+]+v,U,[,_,a,o-m/k/n0_0i0m0n0o0p0q0r0s0t0u0v0w0x0y0|1R1v2S3l3o4P4S4T4Y4Z5Z6O6R6_6c6d7e7x8Y8o8z9T:a&ZcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ&T!bR/q+UY%}!b&R&Y+U+[S(e#x(kS+b&_+eS-Z(f(mQ-[(gQ-b(nQ.l*PU/|+c+g+hU0R+i+j+kS0W+l2pQ1m-aQ1o-cQ1p-dS2k.o2nU3t0P0Q0SQ3x0TQ3y0VS5^2l2sS5a2q2rU6V3u3w3zQ6[3{S7O5b5cQ7Q5dS7i6X6ZS7}7P7RQ8]7kR8h8OlhOSj}!m$Y%a%d%e%g*i*n/]/`Q%i!QS&s!u9XQ)^$eQ*R$}Q*S%OQ+r&dS,T&x9rS-n)O9{Q.O)_Q.n*QQ/d*pQ/e*qQ/m+PQ0U+iQ0[+sS1w-o:PQ2Q.PS2T.R:QQ3k/oQ3n/wQ3}0]Q4z2RQ5|3hQ6P3mQ6T3sQ6]4OQ7c5}Q7f6UQ8X7gQ8l8VQ8n8ZR8y8p$W#_Z!_!n%u%y&t&{'R'S'T'U'V'W'X'Y'Z'[']'_'b'f'p)j*y+S+]+v,U,[,_,o-m/k/n0_0i0m0n0o0p0q0r0s0t0u0v0w0x0y0|1R1v2S3l3o4P4S4T4Y4Z5Z6O6R6_6c6d7e7x8Y8o8z9T:aU(p#y&w0{T)S$^,a$W#^Z!_!n%u%y&t&{'R'S'T'U'V'W'X'Y'Z'[']'_'b'f'p)j*y+S+]+v,U,[,_,o-m/k/n0_0i0m0n0o0p0q0r0s0t0u0v0w0x0y0|1R1v2S3l3o4P4S4T4Y4Z5Z6O6R6_6c6d7e7x8Y8o8z9T:aQ'a#_S)R$^,aR-p)S&YcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ%d{Q%e|Q%g!OQ%h!PR/[*lQ&`!hQ)T$`Q+o&cS-u)X)qS0X+m+nW1z-r-s-t.aS3|0Y0ZU4w1|1}2OU6q4v5T5UQ7t6rR8c7wT+d&_+eS+b&_+eU/|+c+g+hU0R+i+j+kS0W+l2pS2k.o2nU3t0P0Q0SQ3x0TQ3y0VS5^2l2sS5a2q2rU6V3u3w3zQ6[3{S7O5b5cQ7Q5dS7i6X6ZS7}7P7RQ8]7kR8h8OS+d&_+eT2m.o2nS&m!p/YQ,|(YQ-X(eS/{+b2kQ1],}S1g-Y-bU3v0R0W5aQ4`1WS4n1n1pU6Y3x3y7QQ6g4aQ6p4qR7l6[Q!wXS&l!p/YQ)P$XQ)[$cQ)b$iQ+x&mQ,{(YQ-W(eQ-](hQ-})]Q.v*VS/z+b2kS1[,|,}S1f-X-bQ1i-[Q1l-^Q2}.wW3r/{0R0W5aQ4_1WQ4c1]S4h1g1pQ4o1oQ5m3OW6W3v3x3y7QS6f4`4aQ6k4jQ6n4nQ6{5[Q7Y5nS7j6Y6[Q7n6gQ7p6lQ7s6pQ7z6|Q8T7ZQ8^7lQ8a7rQ8e7{Q8t8fQ8|8uQ9Q8}Q:Z:UQ:d:_R:e:`$nWORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qS!wn!j!j:T#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kR:Z:j$nXORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qQ$Xb!Y$cm!i$f$g$h&Q&e&f&g(e)`)a+R+b+t+u-Z.Q/u/|0R0^1m3t3y6V7i8]S$in!jQ)]$dQ*V%RW.w*W*X*Y*ZU3O.x.y.zQ5[2kS5n3P3QU6|5]5^5aQ7Z5oU7{6}7O7QS8f7|7}S8u8g8hQ8}8v!j:U#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kQ:_:iR:`:j$f]OSTjk}!S!W!]!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qU!gRU!`v$urs!q!t$W$s&[&o&r)r)s)t*g+O+_+z+|/f0bQ*d%^!h:V#[#j'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kR:Y&SS&W!b$tR/s+X$l[ORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8q!j'`#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kR*c%^$noORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8qQ'P!z!k:W#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:k!h#UZ!_$^%u%y&t&{'Y'Z'[']'b'f)j*y+]+v,U,[,o-m0_0i0y1v2S3o4P4S6R7e8Y8o8z9T!R9`'_'p+S,a/k/n0m0u0v0w0x0|1R3l4T4Y4Z5Z6O6_6c6d7x:a!d#WZ!_$^%u%y&t&{'[']'b'f)j*y+]+v,U,[,o-m0_0i0y1v2S3o4P4S6R7e8Y8o8z9T}9b'_'p+S,a/k/n0m0w0x0|1R3l4T4Y4Z5Z6O6_6c6d7x:a!`#[Z!_$^%u%y&t&{'b'f)j*y+]+v,U,[,o-m0_0i0y1v2S3o4P4S6R7e8Y8o8z9Tl(U#s&y(},w-P-e-f0g1u4^4r:[:f:gx:k'_'p+S,a/k/n0m0|1R3l4T4Y4Z5Z6O6_6c6d7x:a!`:n&u'd(X(_+n,S,l-T-q-t.e.g0Z0f1^1b2O2d2f2v4R4e4k4t4y5U5i6^6i6o7WZ:o0z4X6`7m8_&YcORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kS#k`#lR1O,d&a_ORSTU`jk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j#l$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,d,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kS#f^#mT'i#h'mT#g^#mT'k#h'm&a`ORSTU`jk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#[#a#d#j#l$Y$l%Y%]%^%a%c%d%e%g%k%v&O&S&Z&a&k&x&|'r'|)O)V*e*i*n*}+Q+p+w,Y,`,d,e-j-o-w.R.r/T/U/V/X/]/`/b/p/y0`0j0}2a2i2y3^3`3a3j3q5j5x6S6y7h8[8q9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:kT#k`#lQ#n`R't#l$nbORSTUjk}!S!W!]!`!m!u!y!{#O#P#Q#R#S#T#U#V#W#X#Y#a#d$Y$l%Y%]%^%a%c%d%e%g%k%v&O&Z&a&k&x&|'|)O)V*e*i*n+p+w,Y,`-j-o-w.R.r/T/U/V/X/]/`/b/y0`0j2a2y3^3`3a3q5j5x6S7h8[8q!k:i#[#j&S'r*}+Q,e/p0}2i3j6y9S9U9X9Y9Z9[9]9^9_9`9a9b9c9d9e9h9q9r9t9{9|:P:Q:k#RdOSUj}!S!W!m!{#j$Y%Y%]%^%a%c%d%e%g%k&O&a'r)V*e*i*n+p,e-j-w.r/T/U/V/X/]/`/b0}2a2y3^3`3a5j5xt#ya!x$Q$R$V(R(T(U(](q(r,V-l1V1q:h:n:o!|&w!v#c#u#w&b'x(a)U)W)Z)x){+q-Q-S-v-x.f.i.q.s1`1j1x1{2P2b2x2z4d4p4x5f5k6x7U8R9k9m9o9u9w9y9}:RQ({$TQ,p'}c0{9g9l9n9p9v9x9z:O:St#va!x$Q$R$V(R(T(U(](q(r,V-l1V1q:h:n:oS(h#x(kQ(|$UQ-^(i!|:]!v#c#u#w&b'x(a)U)W)Z)x){+q-Q-S-v-x.f.i.q.s1`1j1x1{2P2b2x2z4d4p4x5f5k6x7U8R9k9m9o9u9w9y9}:Rb:^9g9l9n9p9v9x9z:O:SQ:b:lR:c:mt#ya!x$Q$R$V(R(T(U(](q(r,V-l1V1q:h:n:o!|&w!v#c#u#w&b'x(a)U)W)Z)x){+q-Q-S-v-x.f.i.q.s1`1j1x1{2P2b2x2z4d4p4x5f5k6x7U8R9k9m9o9u9w9y9}:Rc0{9g9l9n9p9v9x9z:O:SlfOSj}!m$Y%a%d%e%g*i*n/]/`Q(`#wQ*u%nQ*v%pR1_-Q$U#za!v!x#c#u#w$Q$R$V&b'x(R(T(U(](a(q(r)U)W)Z)x){+q,V-Q-S-l-v-x.f.i.q.s1V1`1j1q1x1{2P2b2x2z4d4p4x5f5k6x7U8R9g9k9l9m9n9o9p9u9v9w9x9y9z9}:O:R:S:h:n:oQ)z${Q.h)|Q2e.gR5W2fT(j#x(kS(j#x(kT2m.o2nQ)[$cQ-](hQ-})]Q.v*VQ2}.wQ5m3OQ6{5[Q7Y5nQ7z6|Q8T7ZQ8e7{Q8t8fQ8|8uR9Q8}l(R#s&y(},w-P-e-f0g1u4^4r:[:f:g!`9u&u'd(X(_+n,S,l-T-q-t.e.g0Z0f1^1b2O2d2f2v4R4e4k4t4y5U5i6^6i6o7WZ9v0z4X6`7m8_n(T#s&y(},u,w-P-e-f0g1u4^4r:[:f:g!b9w&u'd(X(_+n,S,l-T-q-t.e.g0Z0d0f1^1b2O2d2f2v4R4e4k4t4y5U5i6^6i6o7W]9x0z4X6`6a7m8_peOSjy}!m$Y%W%a%d%e%g*i*n/]/`Q%TxR*e%^peOSjy}!m$Y%W%a%d%e%g*i*n/]/`R%TxQ*O$|R.d)wqeOSjy}!m$Y%W%a%d%e%g*i*n/]/`Q.p*TS2w.t.uW5e2t2u2v2{U7T5g5h5iU8P7S7V7WQ8i8QR8w8jQ%[yR*_%WR3U.}R7]5pS$kp$pR.Y)hQ%azR*i%bR*o%hT/^*n/`QjOQ!mST$]j!mQ'z#rR,m'zQ!YQR%s!YQ!^RU%w!^%x*zQ%x!_R*z%yQ+V&TR/r+VQ,W&yR0h,WQ,Z&{S0k,Z0lR0l,[Q+e&_R/}+eQ&]!eQ*{%zT+`&]*{Q+Y&WR/t+YQ&p!rQ+y&nU+}&p+y0cR0c,OQ'm#hR,f'mQ#l`R's#lQ#bZU'c#b*x9fQ*x9TR9f'pQ,z(YW1Y,z1Z4b6hU1Z,{,|,}S4b1[1]R6h4c#q(P#s&u&y'd(X(_(x(y(}+n,Q,R,S,l,u,v,w-P-T-e-f-q-t.e.g0Z0d0e0f0g0z1^1b1u2O2d2f2v4R4V4W4X4^4e4k4r4t4y5U5i6^6`6a6b6i6o7W7m8_:[:f:gQ-R(_U1a-R1c4fQ1c-TR4f1bQ(k#xR-_(kQ(t#|R-h(tQ1y-qR4u1yQ)u$vR.c)uQ2h.jS5Y2h6zR6z5ZQ*Q$}R.m*QQ2n.oR5_2nQ.|*[S3S.|5qR5q3UQ.T)dW2X.T2Z5O6uQ2Z.WQ5O2YR6u5PQ)i$kR.Z)iQ/`*nR3d/`WiOSj!mQ%f}Q)Q$YQ*h%aQ*j%dQ*k%eQ*m%gQ/Z*iS/^*n/`R3c/]Q$[gQ%j!RQ%m!TQ%o!UQ%q!VQ)p$qQ)v$wQ*^%[Q*s%lS/P*_*bQ/g*rQ/h*uQ/i*vS/x+b2kQ1d-VQ1e-WQ1k-]Q2^.^Q2c.eQ2|.vQ3W/RQ3b/[Y3p/z/{0R0W5aQ4g1fQ4i1hQ4l1lQ5S2`Q5V2dQ5l2}Q5r3V[6Q3o3r3v3x3y7QQ6j4hQ6m4mQ6v5QQ7X5mQ7^5sW7d6R6W6Y6[Q7o6kQ7q6nQ7v6wQ7y6{Q8S7YU8W7e7j7lQ8`7pQ8b7sQ8d7zQ8k8TS8m8Y8^Q8r8aQ8s8eQ8x8oQ8{8tQ9O8zQ9P8|R9R9QQ$emQ&d!iU)_$f$g$hQ+P&QU+s&e&f&gQ-V(eS.P)`)aQ/o+RQ/w+bS0]+t+uQ1h-ZQ2R.QQ3m/uS3s/|0RQ4O0^Q4m1mS6U3t3yQ7g6VQ8Z7iR8p8]S#ta:hR)Y$bU#|a$b:hR-g(sQ#saS&u!v)ZQ&y!xQ'd#cQ(X#uQ(_#wQ(x$QQ(y$RQ(}$VQ+n&bQ,Q9kQ,R9mQ,S9oQ,l'xQ,u(RQ,v(TQ,w(UQ-P(]Q-T(aQ-e(qQ-f(rd-q)U-v.q1{2x4x5f6x7U8RQ-t)WQ.e)xQ.g){Q0Z+qQ0d9uQ0e9wQ0f9yQ0g,VQ0z9gQ1^-QQ1b-SQ1u-lQ2O-xQ2d.fQ2f.iQ2v.sQ4R9}Q4V9lQ4W9nQ4X9pQ4^1VQ4e1`Q4k1jQ4r1qQ4t1xQ4y2PQ5U2bQ5i2zQ6^:RQ6`9zQ6a9vQ6b9xQ6i4dQ6o4pQ7W5kQ7m:OQ8_:SQ:[:hQ:f:nR:g:oT'y#r'zlgOSj}!m$Y%a%d%e%g*i*n/]/`S!oU%cQ%l!SQ%r!WQ'Q!{Q'q#jS*b%Y%]Q*f%^Q*r%kQ*|&OQ+m&aQ,j'rQ-s)VQ/W*eQ0Y+pQ1Q,eQ1s-jQ1}-wQ2u.rQ3Y/TQ3Z/UQ3]/VQ3_/XQ3f/bQ4[0}Q5T2aQ5h2yQ5w3^Q5y3`Q5z3aQ7V5jR7`5x!vZOSUj}!S!m!{$Y%Y%]%^%a%c%d%e%g%k&O&a)V*e*i*n+p-j-w.r/T/U/V/X/]/`/b2a2y3^3`3a5j5xQ!_RQ!nTQ$^kQ%u!]Q%y!`Q&t!uQ&{!yQ'R#OQ'S#PQ'T#QQ'U#RQ'V#SQ'W#TQ'X#UQ'Y#VQ'Z#WQ'[#XQ']#YQ'_#[Q'b#aQ'f#dW'p#j'r,e0}Q)j$lQ*y%vS+S&S/pQ+]&ZQ+v&kQ,U&xQ,[&|Q,_9SQ,a9UQ,o'|Q-m)OQ/k*}Q/n+QQ0_+wQ0i,YQ0m9XQ0n9YQ0o9ZQ0p9[Q0q9]Q0r9^Q0s9_Q0t9`Q0u9aQ0v9bQ0w9cQ0x9dQ0y,`Q0|9hQ1R9eQ1v-oQ2S.RQ3l9qQ3o/yQ4P0`Q4S0jQ4T9rQ4Y9tQ4Z9{Q5Z2iQ6O3jQ6R3qQ6_9|Q6c:PQ6d:QQ7e6SQ7x6yQ8Y7hQ8o8[Q8z8qQ9T!WR:a:kT!XQ!YR!aRR&U!bS&Q!b+US+R&R&YR/u+[R&z!xR&}!yT!sU$WS!rU$WU$vrs*gS&n!q!tQ+{&oQ,O&rQ.b)tS0a+z+|R4Q0b[!dR!`$s&[)r+_h!pUrs!q!t$W&o&r)t+z+|0bQ/Y*gQ/l+OQ3i/fT:X&S)sT!fR$sS!eR$sS%z!`)rS+T&S)sQ+^&[R/v+_T&X!b$tQ#h^R'v#mT'l#h'mR1P,dT([#u(dR(b#wQ-r)UQ1|-vQ2t.qQ4v1{Q5g2xQ6r4xQ7S5fQ7w6xQ8Q7UR8j8RlhOSj}!m$Y%a%d%e%g*i*n/]/`Q%ZyR*^%WV$wrs*gR.k)}R*]%UQ$opR)o$pR)e$jT%_z%bT%`z%bT/_*n/`",
        nodeNames: "\u26A0 ArithOp ArithOp extends LineComment BlockComment Script ExportDeclaration export Star as VariableName from String ; default FunctionDeclaration async function VariableDefinition TypeParamList TypeDefinition ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString null super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression await yield delete LogicOp BitOp ParenthesizedExpression ClassExpression class extends ClassBody MethodDeclaration Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression PrivatePropertyName BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try catch finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement",
        maxTerm: 330,
        context: trackNewline,
        nodeProps: [
          [common.NodeProp.group, -26, 7, 14, 16, 54, 180, 184, 187, 188, 190, 193, 196, 207, 209, 215, 217, 219, 221, 224, 230, 234, 236, 238, 240, 242, 244, 245, "Statement", -30, 11, 13, 23, 26, 27, 38, 39, 40, 41, 43, 48, 56, 64, 70, 71, 87, 88, 97, 99, 115, 118, 120, 121, 122, 123, 125, 126, 144, 145, 147, "Expression", -22, 22, 24, 28, 29, 31, 148, 150, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 174, 176, 178, 179, "Type", -3, 75, 81, 86, "ClassItem"],
          [common.NodeProp.closedBy, 37, "]", 47, "}", 62, ")", 128, "JSXSelfCloseEndTag JSXEndTag", 142, "JSXEndTag"],
          [common.NodeProp.openedBy, 42, "[", 46, "{", 61, "(", 127, "JSXStartTag", 137, "JSXStartTag JSXStartCloseTag"]
        ],
        skippedNodes: [0, 4, 5],
        repeatNodeCount: 28,
        tokenData: "!C}~R!`OX%TXY%cYZ'RZ[%c[]%T]^'R^p%Tpq%cqr'crs(kst0htu2`uv4pvw5ewx6cxy<yyz=Zz{=k{|>k|}?O}!O>k!O!P?`!P!QCl!Q!R!0[!R![!1q![!]!7s!]!^!8V!^!_!8g!_!`!9d!`!a!:[!a!b!<R!b!c%T!c!}2`!}#O!=d#O#P%T#P#Q!=t#Q#R!>U#R#S2`#S#T!>i#T#o2`#o#p!>y#p#q!?O#q#r!?f#r#s!?x#s$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$I|2`$I|$I}!Bq$I}$JO!Bq$JO$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`W%YR$QWO!^%T!_#o%T#p~%T,T%jg$QW'T+{OX%TXY%cYZ%TZ[%c[p%Tpq%cq!^%T!_#o%T#p$f%T$f$g%c$g#BY%T#BY#BZ%c#BZ$IS%T$IS$I_%c$I_$JT%T$JT$JU%c$JU$KV%T$KV$KW%c$KW&FU%T&FU&FV%c&FV?HT%T?HT?HU%c?HU~%T,T'YR$QW'U+{O!^%T!_#o%T#p~%T$T'jS$QW!f#{O!^%T!_!`'v!`#o%T#p~%T$O'}S#a#v$QWO!^%T!_!`(Z!`#o%T#p~%T$O(bR#a#v$QWO!^%T!_#o%T#p~%T'u(rZ$QW]!ROY(kYZ)eZr(krs*rs!^(k!^!_+U!_#O(k#O#P-b#P#o(k#o#p+U#p~(k&r)jV$QWOr)ers*Ps!^)e!^!_*a!_#o)e#o#p*a#p~)e&r*WR#{&j$QWO!^%T!_#o%T#p~%T&j*dROr*ars*ms~*a&j*rO#{&j'u*{R#{&j$QW]!RO!^%T!_#o%T#p~%T'm+ZV]!ROY+UYZ*aZr+Urs+ps#O+U#O#P+w#P~+U'm+wO#{&j]!R'm+zROr+Urs,Ts~+U'm,[U#{&j]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R,sU]!ROY,nZr,nrs-Vs#O,n#O#P-[#P~,n!R-[O]!R!R-_PO~,n'u-gV$QWOr(krs-|s!^(k!^!_+U!_#o(k#o#p+U#p~(k'u.VZ#{&j$QW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/PZ$QW]!ROY.xYZ%TZr.xrs/rs!^.x!^!_,n!_#O.x#O#P0S#P#o.x#o#p,n#p~.x!Z/yR$QW]!RO!^%T!_#o%T#p~%T!Z0XT$QWO!^.x!^!_,n!_#o.x#o#p,n#p~.xy0mZ$QWOt%Ttu1`u!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`y1g]$QW'mqOt%Ttu1`u!Q%T!Q![1`![!^%T!_!c%T!c!}1`!}#R%T#R#S1`#S#T%T#T#o1`#p$g%T$g~1`&i2k_$QW#vS'W%k'dpOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`[3q_$QW#vSOt%Ttu3ju}%T}!O3j!O!Q%T!Q![3j![!^%T!_!c%T!c!}3j!}#R%T#R#S3j#S#T%T#T#o3j#p$g%T$g~3j$O4wS#Y#v$QWO!^%T!_!`5T!`#o%T#p~%T$O5[R$QW#k#vO!^%T!_#o%T#p~%T%r5lU'v%j$QWOv%Tvw6Ow!^%T!_!`5T!`#o%T#p~%T$O6VS$QW#e#vO!^%T!_!`5T!`#o%T#p~%T'u6jZ$QW]!ROY6cYZ7]Zw6cwx*rx!^6c!^!_8T!_#O6c#O#P:T#P#o6c#o#p8T#p~6c&r7bV$QWOw7]wx*Px!^7]!^!_7w!_#o7]#o#p7w#p~7]&j7zROw7wwx*mx~7w'm8YV]!ROY8TYZ7wZw8Twx+px#O8T#O#P8o#P~8T'm8rROw8Twx8{x~8T'm9SU#{&j]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R9kU]!ROY9fZw9fwx-Vx#O9f#O#P9}#P~9f!R:QPO~9f'u:YV$QWOw6cwx:ox!^6c!^!_8T!_#o6c#o#p8T#p~6c'u:xZ#{&j$QW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z;rZ$QW]!ROY;kYZ%TZw;kwx/rx!^;k!^!_9f!_#O;k#O#P<e#P#o;k#o#p9f#p~;k!Z<jT$QWO!^;k!^!_9f!_#o;k#o#p9f#p~;k%V=QR!`$}$QWO!^%T!_#o%T#p~%TZ=bR!_R$QWO!^%T!_#o%T#p~%T%R=tU'X!R#Z#v$QWOz%Tz{>W{!^%T!_!`5T!`#o%T#p~%T$O>_S#W#v$QWO!^%T!_!`5T!`#o%T#p~%T$u>rSi$m$QWO!^%T!_!`5T!`#o%T#p~%T&i?VR}&a$QWO!^%T!_#o%T#p~%T&i?gVr%n$QWO!O%T!O!P?|!P!Q%T!Q![@r![!^%T!_#o%T#p~%Ty@RT$QWO!O%T!O!P@b!P!^%T!_#o%T#p~%Ty@iR|q$QWO!^%T!_#o%T#p~%Ty@yZ$QWjqO!Q%T!Q![@r![!^%T!_!g%T!g!hAl!h#R%T#R#S@r#S#X%T#X#YAl#Y#o%T#p~%TyAqZ$QWO{%T{|Bd|}%T}!OBd!O!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyBiV$QWO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%TyCVV$QWjqO!Q%T!Q![CO![!^%T!_#R%T#R#SCO#S#o%T#p~%T,TCs`$QW#X#vOYDuYZ%TZzDuz{Jl{!PDu!P!Q!-e!Q!^Du!^!_Fx!_!`!.^!`!a!/]!a!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXD|[$QWyPOYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~DuXEy_$QWyPO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%TPF}VyPOYFxZ!PFx!P!QGd!Q!}Fx!}#OG{#O#PHh#P~FxPGiUyP#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGdPHOTOYG{Z#OG{#O#PH_#P#QFx#Q~G{PHbQOYG{Z~G{PHkQOYFxZ~FxXHvY$QWOYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~HqXIkV$QWOYHqYZ%TZ!^Hq!^!_G{!_#oHq#o#pG{#p~HqXJVV$QWOYDuYZ%TZ!^Du!^!_Fx!_#oDu#o#pFx#p~Du,TJs^$QWyPOYJlYZKoZzJlz{NQ{!PJl!P!Q!,R!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl,TKtV$QWOzKoz{LZ{!^Ko!^!_M]!_#oKo#o#pM]#p~Ko,TL`X$QWOzKoz{LZ{!PKo!P!QL{!Q!^Ko!^!_M]!_#oKo#o#pM]#p~Ko,TMSR$QWT+{O!^%T!_#o%T#p~%T+{M`ROzM]z{Mi{~M]+{MlTOzM]z{Mi{!PM]!P!QM{!Q~M]+{NQOT+{,TNX^$QWyPOYJlYZKoZzJlz{NQ{!PJl!P!Q! T!Q!^Jl!^!_!!]!_!}Jl!}#O!'|#O#P!+a#P#oJl#o#p!!]#p~Jl,T! ^_$QWT+{yPO!^%T!_#Z%T#Z#[Er#[#]%T#]#^Er#^#a%T#a#bEr#b#g%T#g#hEr#h#i%T#i#jEr#j#m%T#m#nEr#n#o%T#p~%T+{!!bYyPOY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!&x!Q!}!!]!}#O!$`#O#P!&f#P~!!]+{!#VYyPOY!!]YZM]Zz!!]z{!#Q{!P!!]!P!Q!#u!Q!}!!]!}#O!$`#O#P!&f#P~!!]+{!#|UT+{yP#Z#[Gd#]#^Gd#a#bGd#g#hGd#i#jGd#m#nGd+{!$cWOY!$`YZM]Zz!$`z{!${{#O!$`#O#P!&S#P#Q!!]#Q~!$`+{!%OYOY!$`YZM]Zz!$`z{!${{!P!$`!P!Q!%n!Q#O!$`#O#P!&S#P#Q!!]#Q~!$`+{!%sTT+{OYG{Z#OG{#O#PH_#P#QFx#Q~G{+{!&VTOY!$`YZM]Zz!$`z{!${{~!$`+{!&iTOY!!]YZM]Zz!!]z{!#Q{~!!]+{!&}_yPOzM]z{Mi{#ZM]#Z#[!&x#[#]M]#]#^!&x#^#aM]#a#b!&x#b#gM]#g#h!&x#h#iM]#i#j!&x#j#mM]#m#n!&x#n~M],T!(R[$QWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|,T!(|^$QWOY!'|YZKoZz!'|z{!(w{!P!'|!P!Q!)x!Q!^!'|!^!_!$`!_#O!'|#O#P!*o#P#QJl#Q#o!'|#o#p!$`#p~!'|,T!*PY$QWT+{OYHqYZ%TZ!^Hq!^!_G{!_#OHq#O#PIf#P#QDu#Q#oHq#o#pG{#p~Hq,T!*tX$QWOY!'|YZKoZz!'|z{!(w{!^!'|!^!_!$`!_#o!'|#o#p!$`#p~!'|,T!+fX$QWOYJlYZKoZzJlz{NQ{!^Jl!^!_!!]!_#oJl#o#p!!]#p~Jl,T!,Yc$QWyPOzKoz{LZ{!^Ko!^!_M]!_#ZKo#Z#[!,R#[#]Ko#]#^!,R#^#aKo#a#b!,R#b#gKo#g#h!,R#h#iKo#i#j!,R#j#mKo#m#n!,R#n#oKo#o#pM]#p~Ko,T!-lV$QWS+{OY!-eYZ%TZ!^!-e!^!_!.R!_#o!-e#o#p!.R#p~!-e+{!.WQS+{OY!.RZ~!.R$P!.g[$QW#k#vyPOYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Du]!/f[#sS$QWyPOYDuYZ%TZ!PDu!P!QEr!Q!^Du!^!_Fx!_!}Du!}#OHq#O#PJQ#P#oDu#o#pFx#p~Duy!0cd$QWjqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#U%T#U#V!3X#V#X%T#X#YAl#Y#b%T#b#c!2w#c#d!4m#d#l%T#l#m!5{#m#o%T#p~%Ty!1x_$QWjqO!O%T!O!P@r!P!Q%T!Q![!1q![!^%T!_!g%T!g!hAl!h#R%T#R#S!1q#S#X%T#X#YAl#Y#b%T#b#c!2w#c#o%T#p~%Ty!3OR$QWjqO!^%T!_#o%T#p~%Ty!3^W$QWO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#o%T#p~%Ty!3}Y$QWjqO!Q%T!Q!R!3v!R!S!3v!S!^%T!_#R%T#R#S!3v#S#b%T#b#c!2w#c#o%T#p~%Ty!4rV$QWO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#o%T#p~%Ty!5`X$QWjqO!Q%T!Q!Y!5X!Y!^%T!_#R%T#R#S!5X#S#b%T#b#c!2w#c#o%T#p~%Ty!6QZ$QWO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#o%T#p~%Ty!6z]$QWjqO!Q%T!Q![!6s![!^%T!_!c%T!c!i!6s!i#R%T#R#S!6s#S#T%T#T#Z!6s#Z#b%T#b#c!2w#c#o%T#p~%T%w!7|R!XV$QW#i%hO!^%T!_#o%T#p~%T!P!8^R^w$QWO!^%T!_#o%T#p~%T+c!8rR']d!]%Y#t&s'zP!P!Q!8{!^!_!9Q!_!`!9_W!9QO$SW#v!9VP#[#v!_!`!9Y#v!9_O#k#v#v!9dO#]#v%w!9kT!w%o$QWO!^%T!_!`'v!`!a!9z!a#o%T#p~%T$P!:RR#S#w$QWO!^%T!_#o%T#p~%T%w!:gT'[!s#]#v#}S$QWO!^%T!_!`!:v!`!a!;W!a#o%T#p~%T$O!:}R#]#v$QWO!^%T!_#o%T#p~%T$O!;_T#[#v$QWO!^%T!_!`5T!`!a!;n!a#o%T#p~%T$O!;uS#[#v$QWO!^%T!_!`5T!`#o%T#p~%T%w!<YV'n%o$QWO!O%T!O!P!<o!P!^%T!_!a%T!a!b!=P!b#o%T#p~%T$`!<vRs$W$QWO!^%T!_#o%T#p~%T$O!=WS$QW#f#vO!^%T!_!`5T!`#o%T#p~%T&e!=kRu&]$QWO!^%T!_#o%T#p~%TZ!={RzR$QWO!^%T!_#o%T#p~%T$O!>]S#c#v$QWO!^%T!_!`5T!`#o%T#p~%T$P!>pR$QW'a#wO!^%T!_#o%T#p~%T~!?OO!P~%r!?VT'u%j$QWO!^%T!_!`5T!`#o%T#p#q!=P#q~%T$u!?oR!O$k$QW'cQO!^%T!_#o%T#p~%TX!@PR!gP$QWO!^%T!_#o%T#p~%T,T!@gr$QW'T+{#vS'W%k'dpOX%TXY%cYZ%TZ[%c[p%Tpq%cqt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$f%T$f$g%c$g#BY2`#BY#BZ!@Y#BZ$IS2`$IS$I_!@Y$I_$JT2`$JT$JU!@Y$JU$KV2`$KV$KW!@Y$KW&FU2`&FU&FV!@Y&FV?HT2`?HT?HU!@Y?HU~2`,T!CO_$QW'U+{#vS'W%k'dpOt%Ttu2`u}%T}!O3j!O!Q%T!Q![2`![!^%T!_!c%T!c!}2`!}#R%T#R#S2`#S#T%T#T#o2`#p$g%T$g~2`",
        tokenizers: [noSemicolon, incdecToken, template, 0, 1, 2, 3, 4, 5, 6, 7, 8, insertSemicolon],
        topRules: { "Script": [0, 6] },
        dialects: { jsx: 11282, ts: 11284 },
        dynamicPrecedences: { "145": 1, "172": 1 },
        specialized: [{ term: 284, get: (value, stack) => tsExtends(value, stack) << 1 }, { term: 284, get: (value) => spec_identifier[value] || -1 }, { term: 296, get: (value) => spec_word[value] || -1 }, { term: 59, get: (value) => spec_LessThan[value] || -1 }],
        tokenPrec: 11305
      });
      exports.parser = parser;
    }
  });

  // ../../../node_modules/@codemirror/lang-javascript/dist/index.cjs
  var require_dist29 = __commonJS({
    "../../../node_modules/@codemirror/lang-javascript/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var javascript$1 = require_dist28();
      var language = require_dist7();
      var highlight = require_dist20();
      var autocomplete = require_dist17();
      var snippets = [
        autocomplete.snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
          label: "function",
          detail: "definition",
          type: "keyword"
        }),
        autocomplete.snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
          label: "for",
          detail: "loop",
          type: "keyword"
        }),
        autocomplete.snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
          label: "for",
          detail: "of loop",
          type: "keyword"
        }),
        autocomplete.snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
          label: "try",
          detail: "block",
          type: "keyword"
        }),
        autocomplete.snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
          label: "class",
          detail: "definition",
          type: "keyword"
        }),
        autocomplete.snippetCompletion('import {${names}} from "${module}"\n${}', {
          label: "import",
          detail: "named",
          type: "keyword"
        }),
        autocomplete.snippetCompletion('import ${name} from "${module}"\n${}', {
          label: "import",
          detail: "default",
          type: "keyword"
        })
      ];
      var javascriptLanguage = language.LRLanguage.define({
        parser: javascript$1.parser.configure({
          props: [
            language.indentNodeProp.add({
              IfStatement: language.continuedIndent({ except: /^\s*({|else\b)/ }),
              TryStatement: language.continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
              LabeledStatement: language.flatIndent,
              SwitchBody: (context) => {
                let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
              },
              Block: language.delimitedIndent({ closing: "}" }),
              ArrowFunction: (cx) => cx.baseIndent + cx.unit,
              "TemplateString BlockComment": () => -1,
              "Statement Property": language.continuedIndent({ except: /^{/ }),
              JSXElement(context) {
                let closed = /^\s*<\//.test(context.textAfter);
                return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
              },
              JSXEscape(context) {
                let closed = /\s*\}/.test(context.textAfter);
                return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
              },
              "JSXOpenTag JSXSelfClosingTag"(context) {
                return context.column(context.node.from) + context.unit;
              }
            }),
            language.foldNodeProp.add({
              "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": language.foldInside,
              BlockComment(tree) {
                return { from: tree.from + 2, to: tree.to - 2 };
              }
            }),
            highlight.styleTags({
              "get set async static": highlight.tags.modifier,
              "for while do if else switch try catch finally return throw break continue default case": highlight.tags.controlKeyword,
              "in of await yield void typeof delete instanceof": highlight.tags.operatorKeyword,
              "export import let var const function class extends": highlight.tags.definitionKeyword,
              "with debugger from as new": highlight.tags.keyword,
              TemplateString: highlight.tags.special(highlight.tags.string),
              Super: highlight.tags.atom,
              BooleanLiteral: highlight.tags.bool,
              this: highlight.tags.self,
              null: highlight.tags.null,
              Star: highlight.tags.modifier,
              VariableName: highlight.tags.variableName,
              "CallExpression/VariableName": highlight.tags.function(highlight.tags.variableName),
              VariableDefinition: highlight.tags.definition(highlight.tags.variableName),
              Label: highlight.tags.labelName,
              PropertyName: highlight.tags.propertyName,
              PrivatePropertyName: highlight.tags.special(highlight.tags.propertyName),
              "CallExpression/MemberExpression/PropertyName": highlight.tags.function(highlight.tags.propertyName),
              "FunctionDeclaration/VariableDefinition": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
              "ClassDeclaration/VariableDefinition": highlight.tags.definition(highlight.tags.className),
              PropertyDefinition: highlight.tags.definition(highlight.tags.propertyName),
              PrivatePropertyDefinition: highlight.tags.definition(highlight.tags.special(highlight.tags.propertyName)),
              UpdateOp: highlight.tags.updateOperator,
              LineComment: highlight.tags.lineComment,
              BlockComment: highlight.tags.blockComment,
              Number: highlight.tags.number,
              String: highlight.tags.string,
              ArithOp: highlight.tags.arithmeticOperator,
              LogicOp: highlight.tags.logicOperator,
              BitOp: highlight.tags.bitwiseOperator,
              CompareOp: highlight.tags.compareOperator,
              RegExp: highlight.tags.regexp,
              Equals: highlight.tags.definitionOperator,
              "Arrow : Spread": highlight.tags.punctuation,
              "( )": highlight.tags.paren,
              "[ ]": highlight.tags.squareBracket,
              "{ }": highlight.tags.brace,
              ".": highlight.tags.derefOperator,
              ", ;": highlight.tags.separator,
              TypeName: highlight.tags.typeName,
              TypeDefinition: highlight.tags.definition(highlight.tags.typeName),
              "type enum interface implements namespace module declare": highlight.tags.definitionKeyword,
              "abstract global privacy readonly override": highlight.tags.modifier,
              "is keyof unique infer": highlight.tags.operatorKeyword,
              JSXAttributeValue: highlight.tags.attributeValue,
              JSXText: highlight.tags.content,
              "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": highlight.tags.angleBracket,
              "JSXIdentifier JSXNameSpacedName": highlight.tags.tagName,
              "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": highlight.tags.attributeName
            })
          ]
        }),
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
          wordChars: "$"
        }
      });
      var typescriptLanguage = javascriptLanguage.configure({ dialect: "ts" });
      var jsxLanguage = javascriptLanguage.configure({ dialect: "jsx" });
      var tsxLanguage = javascriptLanguage.configure({ dialect: "jsx ts" });
      function javascript(config = {}) {
        let lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;
        return new language.LanguageSupport(lang, javascriptLanguage.data.of({
          autocomplete: autocomplete.ifNotIn(["LineComment", "BlockComment", "String"], autocomplete.completeFromList(snippets))
        }));
      }
      function esLint(eslint, config) {
        if (!config) {
          config = {
            parserOptions: { ecmaVersion: 2019, sourceType: "module" },
            env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
            rules: {}
          };
          eslint.getRules().forEach((desc, name) => {
            if (desc.meta.docs.recommended)
              config.rules[name] = 2;
          });
        }
        return (view) => {
          let { state } = view, found = [];
          for (let { from, to } of javascriptLanguage.findRegions(state)) {
            let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };
            for (let d of eslint.verify(state.sliceDoc(from, to), config))
              found.push(translateDiagnostic(d, state.doc, offset));
          }
          return found;
        };
      }
      function mapPos(line, col, doc, offset) {
        return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
      }
      function translateDiagnostic(input, doc, offset) {
        let start = mapPos(input.line, input.column, doc, offset);
        let result = {
          from: start,
          to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,
          message: input.message,
          source: input.ruleId ? "jshint:" + input.ruleId : "jshint",
          severity: input.severity == 1 ? "warning" : "error"
        };
        if (input.fix) {
          let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
          result.actions = [{
            name: "fix",
            apply(view, start2) {
              view.dispatch({ changes: { from: start2 + from, to: start2 + to, insert: text }, scrollIntoView: true });
            }
          }];
        }
        return result;
      }
      exports.esLint = esLint;
      exports.javascript = javascript;
      exports.javascriptLanguage = javascriptLanguage;
      exports.jsxLanguage = jsxLanguage;
      exports.snippets = snippets;
      exports.tsxLanguage = tsxLanguage;
      exports.typescriptLanguage = typescriptLanguage;
    }
  });

  // ../../../node_modules/@codemirror/lang-html/dist/index.cjs
  var require_dist30 = __commonJS({
    "../../../node_modules/@codemirror/lang-html/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var html$1 = require_dist25();
      var langCss = require_dist27();
      var langJavascript = require_dist29();
      var view = require_dist4();
      var state = require_dist2();
      var language = require_dist7();
      var highlight = require_dist20();
      var Targets = ["_blank", "_self", "_top", "_parent"];
      var Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
      var Methods = ["get", "post", "put", "delete"];
      var Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
      var Bool = ["true", "false"];
      var S = {};
      var Tags = {
        a: {
          attrs: {
            href: null,
            ping: null,
            type: null,
            media: null,
            target: Targets,
            hreflang: null
          }
        },
        abbr: S,
        acronym: S,
        address: S,
        applet: S,
        area: {
          attrs: {
            alt: null,
            coords: null,
            href: null,
            target: null,
            ping: null,
            media: null,
            hreflang: null,
            type: null,
            shape: ["default", "rect", "circle", "poly"]
          }
        },
        article: S,
        aside: S,
        audio: {
          attrs: {
            src: null,
            mediagroup: null,
            crossorigin: ["anonymous", "use-credentials"],
            preload: ["none", "metadata", "auto"],
            autoplay: ["autoplay"],
            loop: ["loop"],
            controls: ["controls"]
          }
        },
        b: S,
        base: { attrs: { href: null, target: Targets } },
        basefont: S,
        bdi: S,
        bdo: S,
        big: S,
        blockquote: { attrs: { cite: null } },
        body: S,
        br: S,
        button: {
          attrs: {
            form: null,
            formaction: null,
            name: null,
            value: null,
            autofocus: ["autofocus"],
            disabled: ["autofocus"],
            formenctype: Encs,
            formmethod: Methods,
            formnovalidate: ["novalidate"],
            formtarget: Targets,
            type: ["submit", "reset", "button"]
          }
        },
        canvas: { attrs: { width: null, height: null } },
        caption: S,
        center: S,
        cite: S,
        code: S,
        col: { attrs: { span: null } },
        colgroup: { attrs: { span: null } },
        command: {
          attrs: {
            type: ["command", "checkbox", "radio"],
            label: null,
            icon: null,
            radiogroup: null,
            command: null,
            title: null,
            disabled: ["disabled"],
            checked: ["checked"]
          }
        },
        data: { attrs: { value: null } },
        datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
        datalist: { attrs: { data: null } },
        dd: S,
        del: { attrs: { cite: null, datetime: null } },
        details: { attrs: { open: ["open"] } },
        dfn: S,
        dir: S,
        div: S,
        dl: S,
        dt: S,
        em: S,
        embed: { attrs: { src: null, type: null, width: null, height: null } },
        eventsource: { attrs: { src: null } },
        fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
        figcaption: S,
        figure: S,
        font: S,
        footer: S,
        form: {
          attrs: {
            action: null,
            name: null,
            "accept-charset": Charsets,
            autocomplete: ["on", "off"],
            enctype: Encs,
            method: Methods,
            novalidate: ["novalidate"],
            target: Targets
          }
        },
        frame: S,
        frameset: S,
        h1: S,
        h2: S,
        h3: S,
        h4: S,
        h5: S,
        h6: S,
        head: {
          children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
        },
        header: S,
        hgroup: S,
        hr: S,
        html: {
          attrs: { manifest: null }
        },
        i: S,
        iframe: {
          attrs: {
            src: null,
            srcdoc: null,
            name: null,
            width: null,
            height: null,
            sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
            seamless: ["seamless"]
          }
        },
        img: {
          attrs: {
            alt: null,
            src: null,
            ismap: null,
            usemap: null,
            width: null,
            height: null,
            crossorigin: ["anonymous", "use-credentials"]
          }
        },
        input: {
          attrs: {
            alt: null,
            dirname: null,
            form: null,
            formaction: null,
            height: null,
            list: null,
            max: null,
            maxlength: null,
            min: null,
            name: null,
            pattern: null,
            placeholder: null,
            size: null,
            src: null,
            step: null,
            value: null,
            width: null,
            accept: ["audio/*", "video/*", "image/*"],
            autocomplete: ["on", "off"],
            autofocus: ["autofocus"],
            checked: ["checked"],
            disabled: ["disabled"],
            formenctype: Encs,
            formmethod: Methods,
            formnovalidate: ["novalidate"],
            formtarget: Targets,
            multiple: ["multiple"],
            readonly: ["readonly"],
            required: ["required"],
            type: [
              "hidden",
              "text",
              "search",
              "tel",
              "url",
              "email",
              "password",
              "datetime",
              "date",
              "month",
              "week",
              "time",
              "datetime-local",
              "number",
              "range",
              "color",
              "checkbox",
              "radio",
              "file",
              "submit",
              "image",
              "reset",
              "button"
            ]
          }
        },
        ins: { attrs: { cite: null, datetime: null } },
        kbd: S,
        keygen: {
          attrs: {
            challenge: null,
            form: null,
            name: null,
            autofocus: ["autofocus"],
            disabled: ["disabled"],
            keytype: ["RSA"]
          }
        },
        label: { attrs: { for: null, form: null } },
        legend: S,
        li: { attrs: { value: null } },
        link: {
          attrs: {
            href: null,
            type: null,
            hreflang: null,
            media: null,
            sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
          }
        },
        map: { attrs: { name: null } },
        mark: S,
        menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
        meta: {
          attrs: {
            content: null,
            charset: Charsets,
            name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
            "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
          }
        },
        meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
        nav: S,
        noframes: S,
        noscript: S,
        object: {
          attrs: {
            data: null,
            type: null,
            name: null,
            usemap: null,
            form: null,
            width: null,
            height: null,
            typemustmatch: ["typemustmatch"]
          }
        },
        ol: {
          attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
          children: ["li", "script", "template", "ul", "ol"]
        },
        optgroup: { attrs: { disabled: ["disabled"], label: null } },
        option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
        output: { attrs: { for: null, form: null, name: null } },
        p: S,
        param: { attrs: { name: null, value: null } },
        pre: S,
        progress: { attrs: { value: null, max: null } },
        q: { attrs: { cite: null } },
        rp: S,
        rt: S,
        ruby: S,
        s: S,
        samp: S,
        script: {
          attrs: {
            type: ["text/javascript"],
            src: null,
            async: ["async"],
            defer: ["defer"],
            charset: Charsets
          }
        },
        section: S,
        select: {
          attrs: {
            form: null,
            name: null,
            size: null,
            autofocus: ["autofocus"],
            disabled: ["disabled"],
            multiple: ["multiple"]
          }
        },
        small: S,
        source: { attrs: { src: null, type: null, media: null } },
        span: S,
        strike: S,
        strong: S,
        style: {
          attrs: {
            type: ["text/css"],
            media: null,
            scoped: null
          }
        },
        sub: S,
        summary: S,
        sup: S,
        table: S,
        tbody: S,
        td: { attrs: { colspan: null, rowspan: null, headers: null } },
        textarea: {
          attrs: {
            dirname: null,
            form: null,
            maxlength: null,
            name: null,
            placeholder: null,
            rows: null,
            cols: null,
            autofocus: ["autofocus"],
            disabled: ["disabled"],
            readonly: ["readonly"],
            required: ["required"],
            wrap: ["soft", "hard"]
          }
        },
        tfoot: S,
        th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
        thead: S,
        time: { attrs: { datetime: null } },
        title: S,
        tr: S,
        track: {
          attrs: {
            src: null,
            label: null,
            default: null,
            kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
            srclang: null
          }
        },
        tt: S,
        u: S,
        ul: { children: ["li", "script", "template", "ul", "ol"] },
        var: S,
        video: {
          attrs: {
            src: null,
            poster: null,
            width: null,
            height: null,
            crossorigin: ["anonymous", "use-credentials"],
            preload: ["auto", "metadata", "none"],
            autoplay: ["autoplay"],
            mediagroup: ["movie"],
            muted: ["muted"],
            controls: ["controls"]
          }
        },
        wbr: S
      };
      var GlobalAttrs = {
        accesskey: null,
        class: null,
        contenteditable: Bool,
        contextmenu: null,
        dir: ["ltr", "rtl", "auto"],
        draggable: ["true", "false", "auto"],
        dropzone: ["copy", "move", "link", "string:", "file:"],
        hidden: ["hidden"],
        id: null,
        inert: ["inert"],
        itemid: null,
        itemprop: null,
        itemref: null,
        itemscope: ["itemscope"],
        itemtype: null,
        lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
        spellcheck: Bool,
        autocorrect: Bool,
        autocapitalize: Bool,
        style: null,
        tabindex: null,
        title: null,
        translate: ["yes", "no"],
        onclick: null,
        rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
        role: "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
        "aria-activedescendant": null,
        "aria-atomic": Bool,
        "aria-autocomplete": ["inline", "list", "both", "none"],
        "aria-busy": Bool,
        "aria-checked": ["true", "false", "mixed", "undefined"],
        "aria-controls": null,
        "aria-describedby": null,
        "aria-disabled": Bool,
        "aria-dropeffect": null,
        "aria-expanded": ["true", "false", "undefined"],
        "aria-flowto": null,
        "aria-grabbed": ["true", "false", "undefined"],
        "aria-haspopup": Bool,
        "aria-hidden": Bool,
        "aria-invalid": ["true", "false", "grammar", "spelling"],
        "aria-label": null,
        "aria-labelledby": null,
        "aria-level": null,
        "aria-live": ["off", "polite", "assertive"],
        "aria-multiline": Bool,
        "aria-multiselectable": Bool,
        "aria-owns": null,
        "aria-posinset": null,
        "aria-pressed": ["true", "false", "mixed", "undefined"],
        "aria-readonly": Bool,
        "aria-relevant": null,
        "aria-required": Bool,
        "aria-selected": ["true", "false", "undefined"],
        "aria-setsize": null,
        "aria-sort": ["ascending", "descending", "none", "other"],
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null
      };
      var AllTags = Object.keys(Tags);
      var GlobalAttrNames = Object.keys(GlobalAttrs);
      function elementName(doc, tree, max = doc.length) {
        if (!tree)
          return "";
        let tag = tree.firstChild;
        let name = tag && tag.getChild("TagName");
        return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
      }
      function findParentElement(tree, skip = false) {
        for (let cur = tree.parent; cur; cur = cur.parent)
          if (cur.name == "Element") {
            if (skip)
              skip = false;
            else
              return cur;
          }
        return null;
      }
      function allowedChildren(doc, tree) {
        let parentInfo = Tags[elementName(doc, findParentElement(tree, true))];
        return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || AllTags;
      }
      function openTags(doc, tree) {
        let open = [];
        for (let parent = tree; parent = findParentElement(parent); ) {
          let tagName = elementName(doc, parent);
          if (tagName && parent.lastChild.name == "CloseTag")
            break;
          if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
            open.push(tagName);
        }
        return open;
      }
      var identifier = /^[:\-\.\w\u00b7-\uffff]+$/;
      function completeTag(state2, tree, from, to) {
        let end = /\s*>/.test(state2.sliceDoc(to, to + 5)) ? "" : ">";
        return {
          from,
          to,
          options: allowedChildren(state2.doc, tree).map((tagName) => ({ label: tagName, type: "type" })).concat(openTags(state2.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end, type: "type", boost: 99 - i }))),
          span: /^\/?[:\-\.\w\u00b7-\uffff]*$/
        };
      }
      function completeCloseTag(state2, tree, from, to) {
        let end = /\s*>/.test(state2.sliceDoc(to, to + 5)) ? "" : ">";
        return {
          from,
          to,
          options: openTags(state2.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
          span: identifier
        };
      }
      function completeStartTag(state2, tree, pos) {
        let options = [], level = 0;
        for (let tagName of allowedChildren(state2.doc, tree))
          options.push({ label: "<" + tagName, type: "type" });
        for (let open of openTags(state2.doc, tree))
          options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
        return { from: pos, to: pos, options, span: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
      }
      function completeAttrName(state2, tree, from, to) {
        let elt = findParentElement(tree), info = elt ? Tags[elementName(state2.doc, elt)] : null;
        let names = info && info.attrs ? Object.keys(info.attrs).concat(GlobalAttrNames) : GlobalAttrNames;
        return {
          from,
          to,
          options: names.map((attrName) => ({ label: attrName, type: "property" })),
          span: identifier
        };
      }
      function completeAttrValue(state2, tree, from, to) {
        var _a;
        let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
        let options = [], span = void 0;
        if (nameNode) {
          let attrName = state2.sliceDoc(nameNode.from, nameNode.to);
          let attrs = GlobalAttrs[attrName];
          if (!attrs) {
            let elt = findParentElement(tree), info = elt ? Tags[elementName(state2.doc, elt)] : null;
            attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
          }
          if (attrs) {
            let base = state2.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
            if (/^['"]/.test(base)) {
              span = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
              quoteStart = "";
              quoteEnd = state2.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
              base = base.slice(1);
              from++;
            } else {
              span = /^[^\s<>='"]*$/;
            }
            for (let value of attrs)
              options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
          }
        }
        return { from, to, options, span };
      }
      function htmlCompletionSource(context) {
        let { state: state2, pos } = context, around = language.syntaxTree(state2).resolveInner(pos), tree = around.resolve(pos, -1);
        for (let scan = pos, before; around == tree && (before = tree.childBefore(scan)); ) {
          let last = before.lastChild;
          if (!last || !last.type.isError || last.from < last.to)
            break;
          around = tree = before;
          scan = last.from;
        }
        if (tree.name == "TagName") {
          return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state2, tree, tree.from, pos) : completeTag(state2, tree, tree.from, pos);
        } else if (tree.name == "StartTag") {
          return completeTag(state2, tree, pos, pos);
        } else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
          return completeCloseTag(state2, tree, pos, pos);
        } else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
          return completeAttrName(state2, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
        } else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
          return completeAttrValue(state2, tree, tree.name == "Is" ? pos : tree.from, pos);
        } else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
          return completeStartTag(state2, tree, pos);
        } else {
          return null;
        }
      }
      var htmlLanguage = language.LRLanguage.define({
        parser: html$1.parser.configure({
          props: [
            language.indentNodeProp.add({
              Element(context) {
                let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                if (context.node.to <= context.pos + after[0].length)
                  return context.continue();
                return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
              },
              "OpenTag CloseTag SelfClosingTag"(context) {
                return context.column(context.node.from) + context.unit;
              },
              Document(context) {
                if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                  return context.continue();
                let endElt = null, close;
                for (let cur = context.node; ; ) {
                  let last = cur.lastChild;
                  if (!last || last.name != "Element" || last.to != cur.to)
                    break;
                  endElt = cur = last;
                }
                if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                  return context.lineIndent(endElt.from) + context.unit;
                return null;
              }
            }),
            language.foldNodeProp.add({
              Element(node) {
                let first = node.firstChild, last = node.lastChild;
                if (!first || first.name != "OpenTag")
                  return null;
                return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
              }
            }),
            highlight.styleTags({
              "Text RawText": highlight.tags.content,
              "StartTag StartCloseTag SelfCloserEndTag EndTag SelfCloseEndTag": highlight.tags.angleBracket,
              TagName: highlight.tags.tagName,
              "MismatchedCloseTag/TagName": [highlight.tags.tagName, highlight.tags.invalid],
              AttributeName: highlight.tags.attributeName,
              "AttributeValue UnquotedAttributeValue": highlight.tags.attributeValue,
              Is: highlight.tags.definitionOperator,
              "EntityReference CharacterReference": highlight.tags.character,
              Comment: highlight.tags.blockComment,
              ProcessingInst: highlight.tags.processingInstruction,
              DoctypeDecl: highlight.tags.documentMeta
            })
          ],
          wrap: html$1.configureNesting([
            {
              tag: "script",
              attrs(attrs) {
                return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
              },
              parser: langJavascript.javascriptLanguage.parser
            },
            {
              tag: "style",
              attrs(attrs) {
                return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
              },
              parser: langCss.cssLanguage.parser
            }
          ])
        }),
        languageData: {
          commentTokens: { block: { open: "<!--", close: "-->" } },
          indentOnInput: /^\s*<\/\w+\W$/,
          wordChars: "-._"
        }
      });
      var htmlCompletion = htmlLanguage.data.of({ autocomplete: htmlCompletionSource });
      function html(config = {}) {
        let lang = htmlLanguage;
        if (config.matchClosingTags === false)
          lang = lang.configure({ dialect: "noMatch" });
        return new language.LanguageSupport(lang, [
          htmlCompletion,
          config.autoCloseTags !== false ? autoCloseTags : [],
          langJavascript.javascript().support,
          langCss.css().support
        ]);
      }
      var autoCloseTags = view.EditorView.inputHandler.of((view2, from, to, text) => {
        if (view2.composing || view2.state.readOnly || from != to || text != ">" && text != "/" || !htmlLanguage.isActiveAt(view2.state, from, -1))
          return false;
        let { state: state$1 } = view2;
        let changes = state$1.changeByRange((range) => {
          var _a, _b, _c;
          let { head } = range, around = language.syntaxTree(state$1).resolveInner(head, -1), name;
          if (around.name == "TagName" || around.name == "StartTag")
            around = around.parent;
          if (text == ">" && around.name == "OpenTag") {
            if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" && (name = elementName(state$1.doc, around.parent, head)))
              return { range: state.EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };
          } else if (text == "/" && around.name == "OpenTag") {
            let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
            if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name = elementName(state$1.doc, base, head))) {
              let insert = `/${name}>`;
              return { range: state.EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };
            }
          }
          return { range };
        });
        if (changes.changes.empty)
          return false;
        view2.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
        return true;
      });
      exports.autoCloseTags = autoCloseTags;
      exports.html = html;
      exports.htmlCompletion = htmlCompletion;
      exports.htmlCompletionSource = htmlCompletionSource;
      exports.htmlLanguage = htmlLanguage;
    }
  });

  // ../../../node_modules/@codemirror/lang-markdown/dist/index.cjs
  var require_dist31 = __commonJS({
    "../../../node_modules/@codemirror/lang-markdown/dist/index.cjs"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var state = require_dist2();
      var view = require_dist4();
      var language = require_dist7();
      var markdown$1 = require_dist23();
      var langHtml = require_dist30();
      var highlight = require_dist20();
      var data = language.defineLanguageFacet({ block: { open: "<!--", close: "-->" } });
      var commonmark = markdown$1.parser.configure({
        props: [
          highlight.styleTags({
            "Blockquote/...": highlight.tags.quote,
            HorizontalRule: highlight.tags.contentSeparator,
            "ATXHeading1/... SetextHeading1/...": highlight.tags.heading1,
            "ATXHeading2/... SetextHeading2/...": highlight.tags.heading2,
            "ATXHeading3/...": highlight.tags.heading3,
            "ATXHeading4/...": highlight.tags.heading4,
            "ATXHeading5/...": highlight.tags.heading5,
            "ATXHeading6/...": highlight.tags.heading6,
            "Comment CommentBlock": highlight.tags.comment,
            Escape: highlight.tags.escape,
            Entity: highlight.tags.character,
            "Emphasis/...": highlight.tags.emphasis,
            "StrongEmphasis/...": highlight.tags.strong,
            "Link/... Image/...": highlight.tags.link,
            "OrderedList/... BulletList/...": highlight.tags.list,
            "BlockQuote/...": highlight.tags.quote,
            "InlineCode CodeText": highlight.tags.monospace,
            URL: highlight.tags.url,
            "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": highlight.tags.processingInstruction,
            "CodeInfo LinkLabel": highlight.tags.labelName,
            LinkTitle: highlight.tags.string,
            Paragraph: highlight.tags.content
          }),
          language.foldNodeProp.add((type) => {
            if (!type.is("Block") || type.is("Document"))
              return void 0;
            return (tree, state2) => ({ from: state2.doc.lineAt(tree.from).to, to: tree.to });
          }),
          language.indentNodeProp.add({
            Document: () => null
          }),
          language.languageDataProp.add({
            Document: data
          })
        ]
      });
      function mkLang(parser) {
        return new language.Language(data, parser, parser.nodeSet.types.find((t) => t.name == "Document"));
      }
      var commonmarkLanguage = mkLang(commonmark);
      var extended = commonmark.configure([markdown$1.GFM, markdown$1.Subscript, markdown$1.Superscript, markdown$1.Emoji, {
        props: [
          highlight.styleTags({
            "TableDelimiter SubscriptMark SuperscriptMark StrikethroughMark": highlight.tags.processingInstruction,
            "TableHeader/...": highlight.tags.heading,
            "Strikethrough/...": highlight.tags.strikethrough,
            TaskMarker: highlight.tags.atom,
            Task: highlight.tags.list,
            Emoji: highlight.tags.character,
            "Subscript Superscript": highlight.tags.special(highlight.tags.content),
            TableCell: highlight.tags.content
          })
        ]
      }]);
      var markdownLanguage = mkLang(extended);
      function getCodeParser(languages, defaultLanguage) {
        return (info) => {
          let found = info && language.LanguageDescription.matchLanguageName(languages, info, true);
          if (!found)
            return defaultLanguage ? defaultLanguage.parser : null;
          if (found.support)
            return found.support.language.parser;
          return language.ParseContext.getSkippingParser(found.load());
        };
      }
      function nodeStart(node, doc) {
        return doc.sliceString(node.from, node.from + 50);
      }
      var Context = class {
        constructor(node, from, to, spaceBefore, spaceAfter, type, item) {
          this.node = node;
          this.from = from;
          this.to = to;
          this.spaceBefore = spaceBefore;
          this.spaceAfter = spaceAfter;
          this.type = type;
          this.item = item;
        }
        blank(trailing = true) {
          let result = this.spaceBefore;
          if (this.node.name == "Blockquote")
            result += ">";
          else
            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
              result += " ";
          return result + (trailing ? this.spaceAfter : "");
        }
        marker(doc, add) {
          let number = this.node.name == "OrderedList" ? String(+itemNumber(this.item, doc)[2] + add) : "";
          return this.spaceBefore + number + this.type + this.spaceAfter;
        }
      };
      function getContext(node, line, doc) {
        let nodes = [];
        for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
          if (cur.name == "ListItem" || cur.name == "Blockquote")
            nodes.push(cur);
        }
        let context = [], pos = 0;
        for (let i = nodes.length - 1; i >= 0; i--) {
          let node2 = nodes[i], match, start = pos;
          if (node2.name == "Blockquote" && (match = /^\s*>( ?)/.exec(line.slice(pos)))) {
            pos += match[0].length;
            context.push(new Context(node2, start, pos, "", match[1], ">", null));
          } else if (node2.name == "ListItem" && node2.parent.name == "OrderedList" && (match = /^(\s*)\d+([.)])(\s*)/.exec(nodeStart(node2, doc)))) {
            let after = match[3], len = match[0].length;
            if (after.length >= 4) {
              after = after.slice(0, after.length - 4);
              len -= 4;
            }
            pos += len;
            context.push(new Context(node2.parent, start, pos, match[1], after, match[2], node2));
          } else if (node2.name == "ListItem" && node2.parent.name == "BulletList" && (match = /^(\s*)([-+*])(\s+)/.exec(nodeStart(node2, doc)))) {
            let after = match[3], len = match[0].length;
            if (after.length > 4) {
              after = after.slice(0, after.length - 4);
              len -= 4;
            }
            pos += len;
            context.push(new Context(node2.parent, start, pos, match[1], after, match[2], node2));
          }
        }
        return context;
      }
      function itemNumber(item, doc) {
        return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
      }
      function renumberList(after, doc, changes) {
        for (let prev = -1, node = after; ; ) {
          if (node.name == "ListItem") {
            let m = itemNumber(node, doc);
            let number = +m[2];
            if (prev >= 0) {
              if (number != prev + 1)
                return;
              changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2) });
            }
            prev = number;
          }
          let next = node.nextSibling;
          if (!next)
            break;
          node = next;
        }
      }
      var insertNewlineContinueMarkup = ({ state: state$1, dispatch }) => {
        let tree = language.syntaxTree(state$1), { doc } = state$1;
        let dont = null, changes = state$1.changeByRange((range) => {
          if (!range.empty || !markdownLanguage.isActiveAt(state$1, range.from))
            return dont = { range };
          let pos = range.from, line = doc.lineAt(pos);
          let context = getContext(tree.resolveInner(pos, -1), line.text, doc);
          while (context.length && context[context.length - 1].from > pos - line.from)
            context.pop();
          if (!context.length)
            return dont = { range };
          let inner = context[context.length - 1];
          if (inner.to - inner.spaceAfter.length > pos - line.from)
            return dont = { range };
          if (inner.item && pos >= inner.to - inner.spaceAfter.length && !/\S/.test(line.text.slice(inner.to))) {
            if (inner.node.firstChild.to >= pos || line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
              let next = context.length > 1 ? context[context.length - 2] : null;
              let delTo, insert2 = "";
              if (next && next.item) {
                delTo = line.from + next.from;
                insert2 = next.marker(doc, 1);
              } else {
                delTo = line.from + (next ? next.to : 0);
              }
              let changes3 = [{ from: delTo, to: pos, insert: insert2 }];
              if (inner.node.name == "OrderedList")
                renumberList(inner.item, doc, changes3);
              if (next && next.node.name == "OrderedList")
                renumberList(next.item, doc, changes3);
              return { range: state.EditorSelection.cursor(delTo + insert2.length), changes: changes3 };
            } else {
              let insert2 = "";
              for (let i = 0, e = context.length - 2; i <= e; i++)
                insert2 += context[i].blank(i < e);
              insert2 += state$1.lineBreak;
              return { range: state.EditorSelection.cursor(pos + insert2.length), changes: { from: line.from, insert: insert2 } };
            }
          }
          let changes2 = [];
          if (inner.node.name == "OrderedList")
            renumberList(inner.item, doc, changes2);
          let insert = state$1.lineBreak;
          let continued = inner.item && inner.item.from < line.from;
          if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
            for (let i = 0, e = context.length - 1; i <= e; i++)
              insert += i == e && !continued ? context[i].marker(doc, 1) : context[i].blank();
          }
          let from = pos;
          while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
            from--;
          changes2.push({ from, to: pos, insert });
          return { range: state.EditorSelection.cursor(from + insert.length), changes: changes2 };
        });
        if (dont)
          return false;
        dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
      };
      function isMark(node) {
        return node.name == "QuoteMark" || node.name == "ListMark";
      }
      function contextNodeForDelete(tree, pos) {
        let node = tree.resolveInner(pos, -1), scan = pos;
        if (isMark(node)) {
          scan = node.from;
          node = node.parent;
        }
        for (let prev; prev = node.childBefore(scan); ) {
          if (isMark(prev)) {
            scan = prev.from;
          } else if (prev.name == "OrderedList" || prev.name == "BulletList") {
            node = prev.lastChild;
            scan = node.to;
          } else {
            break;
          }
        }
        return node;
      }
      var deleteMarkupBackward = ({ state: state$1, dispatch }) => {
        let tree = language.syntaxTree(state$1);
        let dont = null, changes = state$1.changeByRange((range) => {
          let pos = range.from, { doc } = state$1;
          if (range.empty && markdownLanguage.isActiveAt(state$1, range.from)) {
            let line = doc.lineAt(pos);
            let context = getContext(contextNodeForDelete(tree, pos), line.text, doc);
            if (context.length) {
              let inner = context[context.length - 1];
              let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
              if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
                return {
                  range: state.EditorSelection.cursor(line.from + spaceEnd),
                  changes: { from: line.from + spaceEnd, to: pos }
                };
              if (pos - line.from == spaceEnd) {
                let start = line.from + inner.from;
                if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to)))
                  return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank() } };
                if (start < pos)
                  return { range: state.EditorSelection.cursor(start), changes: { from: start, to: pos } };
              }
            }
          }
          return dont = { range };
        });
        if (dont)
          return false;
        dispatch(state$1.update(changes, { scrollIntoView: true, userEvent: "delete" }));
        return true;
      };
      var markdownKeymap = [
        { key: "Enter", run: insertNewlineContinueMarkup },
        { key: "Backspace", run: deleteMarkupBackward }
      ];
      var htmlNoMatch = langHtml.html({ matchClosingTags: false });
      function markdown(config = {}) {
        let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;
        if (!(parser instanceof markdown$1.MarkdownParser))
          throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
        let extensions = config.extensions ? [config.extensions] : [];
        let support = [htmlNoMatch.support], defaultCode;
        if (defaultCodeLanguage instanceof language.LanguageSupport) {
          support.push(defaultCodeLanguage.support);
          defaultCode = defaultCodeLanguage.language;
        } else if (defaultCodeLanguage) {
          defaultCode = defaultCodeLanguage;
        }
        let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages || [], defaultCode) : void 0;
        extensions.push(markdown$1.parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
        if (addKeymap)
          support.push(state.Prec.high(view.keymap.of(markdownKeymap)));
        return new language.LanguageSupport(mkLang(parser.configure(extensions)), support);
      }
      exports.commonmarkLanguage = commonmarkLanguage;
      exports.deleteMarkupBackward = deleteMarkupBackward;
      exports.insertNewlineContinueMarkup = insertNewlineContinueMarkup;
      exports.markdown = markdown;
      exports.markdownKeymap = markdownKeymap;
      exports.markdownLanguage = markdownLanguage;
    }
  });

  // (disabled):fs
  var require_fs = __commonJS({
    "(disabled):fs"() {
    }
  });

  // (disabled):constants
  var require_constants = __commonJS({
    "(disabled):constants"() {
    }
  });

  // main.bc.js
  (function(a) {
    a.__CM__view = require_dist4();
    a.__CM__state = require_dist2();
  })(function() {
    return this;
  }());
  (function(a) {
    a.__CM__view = require_dist22().EditorView;
    a.__CM__state = require_dist22().EditorState;
    a.__CM__basic_setup = require_dist22().basicSetup;
    a.__CM__markdown = require_dist31().markdown;
  })(function() {
    return this;
  }());
  (function(o) {
    "use strict";
    var d2 = 8715, k$ = 8624, lU = 8909, hL = 8706, nj = 8724, lT = 192, pL = 8711, pM = "state", aW = 123, d1 = 8593, ek = 8595, lS = 8789, mA = 8867, pK = 8743, gV = 8656, gu = 183, k_ = 8647, bd = 255, o7 = 8497, gI = "title", cX = 8741, qv = 8911, hK = 8597, pJ = "message", d0 = 8463, mz = 175, n$ = 10901, oa = 10003, lR = 2224400062, nh = 305, ni = 8214, aM = 128, o6 = 10871, k9 = "fd ", ng = 8635, k8 = -61, my = 10886, S = 3854881, ga = ">", k7 = 9651, d8 = 8847, hJ = 1027, er = 8885, cN = 8782, gt = 8815, pI = 8450, o5 = 8472, aa = 65024, hI = 8823, pH = 10902, k6 = 10885, o4 = 8862, mx = 10861, lQ = "error", cS = 8594, cM = 8806, qu = 8902, gs = 8814, ej = 10950, o3 = 8621, qt = 989, qs = 9830, hH = "e", nf = "h1", o2 = 8216, k5 = 8821, pG = 8937, gr = ": Not a directory", qr = 8615, gU = 9633, mw = "Out_of_memory", qq = 10936, fY = 10234, ei = 8842, o1 = 8290, hn = "index out of bounds", mv = "Rpc failure: %s", ex = "_bigarr02", gT = 8657, n_ = 8926, lP = 180, ne = 9136, hm = 8605, mu = 8411, nd = 8677, aU = 65535, lO = 10537, n9 = 8730, mt = 8650, gq = 8596, ms = 8254, cR = 8592, qp = 1009, n8 = 10756, gS = 8202, hG = 8757, qo = "infinity", lN = "li", mr = 126, ce = 8811, nc = "sub", o0 = 9137, lM = 8868, n7 = 8802, fX = 8519, hl = 124, hk = 8849, dZ = 8712, n6 = 169, eq = 8739, g8 = 8938, hj = "src/note.ml", cL = 252, f$ = 8833, bl = ".", n5 = "Marshal.from_bytes", hF = 8828, c1 = 8203, k4 = 8473, mq = 240, k3 = 8720, nb = 8927, cg = 8810, pF = 8630, gp = 8921, g7 = 8646, oZ = "Rpc failure: ", n4 = 8649, g6 = 8840, na = 8773, gH = 8708, cP = -32, m$ = 8872, n3 = "completion_result", fW = 8614, lL = 10812, n2 = 10731, ep = 8831, gR = 8640, mp = 10547, qn = 8787, qm = 10752, lK = "Lwt.", mo = 8824, d6 = 10955, m_ = 8971, lH = 8908, lI = 8612, lJ = 8854, oY = 8920, ql = "Assert_failure", mn = 10703, hE = -123, cW = 32, go = 8723, pE = "]]>", oX = 8903, k2 = 8625, gn = 8599, oV = 8969, oW = "blockquote", k1 = 8861, n1 = 10214, n0 = 10925, k0 = 819, dY = '"', m8 = 9711, m9 = "Fatal error: exception %s\n", nZ = 2048, m7 = "%X", pD = 10933, b8 = 256, oT = 8785, oU = 8719, lG = 8289, mm = 9838, hD = 8600, ml = 8786, kZ = "Used by setup", pC = 8857, hC = "ENOENT", kY = "([^/]+)", hB = 8804, ca = 8776, dX = 8809, hi = 15, b9 = 8835, gG = 8851, oS = 8610, bD = 125, qk = "ENOTEMPTY", gF = 8777, gQ = 8940, fV = 8639, m6 = 8598, nY = "Division_by_zero", pB = 8775, cQ = 8726, nX = 10754, gE = "%d", pA = 8208, m5 = 8966, gD = 8421, nW = "h5", oR = "buffer.ml", oQ = 729, lF = 8676, hh = 8850, qj = 10924, mj = 9140, mk = 102, m4 = "h3", nV = 8864, f_ = 8822, nU = 9657, kW = 8749, kX = 8501, nT = 8201, fU = 8772, fT = 8781, kV = 9733, nS = 9, kU = 10892, mi = 8617, gC = 8756, hg = 8817, am = 8402, dW = 8884, oP = "err", bf = 254, qi = 8707, ed = "pre", c0 = 100, g5 = 8636, fS = 8841, py = 8602, pz = " : flags Open_text and Open_binary are not compatible", oO = 8634, hf = 8896, ec = 8783, qh = -33, lE = 8968, qg = 965, ew = 160, kT = "line1", nR = 8704, px = "![", qf = 10888, qe = 10236, lD = 937, nQ = 8631, pw = 8654, he = 8638, hA = "Unix.Unix_error", kS = 10758, lC = 8910, pv = 10511, lB = "Stack_overflow", eo = 8709, mh = 8645, qd = 1008, lA = 10890, oN = "/static/", gP = 8832, ax = -97, oM = 253, m3 = "Not_found", fR = 10232, lz = 8768, gB = 8459, g4 = 8499, f9 = "dd", fQ = 10229, hz = 174, hd = 8766, qc = "n", m2 = 10891, ly = 8791, f8 = "rmdir", nP = 728, mf = 8245, mg = 8474, lx = 9472, hy = "dir", lw = 8994, f7 = 1026, nO = 10937, me = 8949, mc = 10509, md = 232, oL = 10938, m1 = 8613, aC = 128, mb = 8820, eb = "Fatal error: exception ", nN = 8865, cd = "length", ma = 8619, m0 = "doc", gA = 8838, gm = 8641, lv = "hr", qb = 10980, p$ = 8496, qa = "_", g3 = "compare: functional value", mZ = 8611, p_ = 8653, pu = 8218, f6 = 8713, fP = 10231, lu = 978, lt = "Invalid_argument", nM = 8517, dV = "Map.bal", gz = 8788, kR = "@[", mY = 8226, ls = "%ni", mX = "col1", oJ = 8287, oK = 10, lr = 949, b6 = 10878, pt = 9667, hc = 10230, lq = 8916, oI = "-->", hx = 8644, lp = 10606, nL = "exec_result", aD = "0", ps = 8863, nK = 197, fO = 10233, l$ = "Sys_blocked_io", oH = 8855, en = "p", l_ = 8745, pr = 9656, dU = 8843, gl = 8643, y = 248, l9 = 8929, pq = 9661, mW = 8484, ea = "highlight", nJ = 8705, cU = 255, ez = 8923, oG = 9652, mV = 10215, pp = 8721, dT = 246, d5 = 8465, kQ = "%u", oF = 8970, dS = 10956, gk = 8651, p9 = 8991, lo = 8759, b5 = 127, f5 = 8818, b$ = 1024, po = 711, nI = "@{", nH = 10704, nG = " : flags Open_rdonly and Open_wronly are not compatible", p7 = 8790, p8 = 8846, nF = 240, bF = "-", pn = 8469, mU = 10889, nE = " : file already exists", ln = 982, p6 = 184, a0 = 16777215, pm = 8928, gy = 8801, p5 = 9827, nD = 64, p4 = "ul", nC = 8853, eh = 168, oE = 8230, kP = 8989, lm = ", characters ", oD = 8608, p3 = 8482, kO = 8225, b_ = 8807, oC = 8475, kN = 12520, pl = "stderr", g2 = 977, dR = -91, gO = 981, mT = 10607, pk = 8222, g1 = 8898, cT = 8834, pj = 8859, g0 = 8816, cZ = 1e3, l8 = 8217, j = "", p2 = 224, l7 = "^", b4 = 63, nB = 8746, mS = 8888, oB = 8866, nA = "Match_failure", pi = 8460, p1 = 10512, mR = 10534, oA = 8907, nz = 8464, cK = 8764, l6 = 8919, ny = 8779, cc = "+", mQ = 10536, ph = "src/compat.ml", oz = 8655, l5 = 8603, gN = 8819, pg = "%li", mP = 9416, d4 = 8660, gj = 8736, l4 = 8493, hb = 8221, pf = 8751, d7 = 8658, eg = 8805, oy = 8648, ox = ")", kM = 8666, d$ = 8922, ll = 8291, gZ = "nan", pe = "Lwt.%s", ha = 962, g$ = 8897, gi = 8882, nx = 224, gY = 10217, p0 = 57343, aZ = "/", gh = "div", g_ = 8829, lk = 10864, pZ = 9674, hw = "ENOTDIR", nw = 8601, pY = 1073741823, mO = "dl", pX = 11005, kL = 8953, fN = 8652, cJ = 250, lj = "col2", l3 = 8799, nu = 8918, nv = ";", nt = "completions", g9 = 8659, hv = 8765, ef = 8869, gg = 1255, em = 255, pW = "Unhandled", ev = 10949, aV = 32768, eu = "jsError", ow = 10935, ov = "End_of_file", pd = 8477, pc = "sharp_ppf", ot = 8622, ou = "Failure", f4 = 8830, ns = "\n", el = "code", cY = 8742, mN = 8488, hu = 247, dQ = 8476, f2 = 8716, f3 = 8900, os = 9662, d_ = 8808, cb = 10927, l2 = -48, or = 56320, ey = 9642, mM = 8747, cf = 10877, $ = "camlinternalFormat.ml", oq = 8796, pV = "Sys_error", l1 = 1114111, nr = 10887, gX = 8939, f1 = 8899, li = "ol", kK = 8990, nq = "line2", np = "EEXIST", mL = "Printexc.handle_uncaught_exception", mK = 10753, no = 733, gf = 8500, be = "int_of_string", n = 824, ht = 8941, pU = "dt", lh = 10764, op = 8620, f0 = 8852, oo = 8778, gM = 120, on = "caml_ppf", pT = 103, mJ = 8520, om = "h6", ge = 512, nn = 32752, mI = 8931, gx = 10216, kJ = 732, gd = 177, b7 = 10928, kI = 10913, nm = "0x", nl = 8800, bE = "\n", kG = 8754, kH = "h2", hs = 8771, l0 = 8780, gL = 8750, pS = "%Li", ol = 256, lZ = 9141, mH = 1014, kF = 8606, ok = 10016, pR = 8936, lg = 8744, lY = 8825, gw = 8492, oj = 10934, cV = 8733, pb = "source", hr = 8883, pa = "log", kE = 8995, lX = 9653, mG = 8220, gK = "mkdir", gc = 1013, o$ = 8693, et = ": No such file or directory", kD = 8988, lf = 63, kC = 8728, mF = 8737, kB = 8812, cO = 8770, oi = ", ", gW = 8826, o_ = 8912, gv = -65, o9 = 8755, oh = 8890, hq = 8827, mE = "Incorrect number of arguments", hp = "class", nk = 10914, fZ = 8466, lW = "?>", og = 2047, o8 = 8667, es = 8740, lV = -34, gJ = 8642, kz = "Pervasives.do_at_exit", kA = "utf8", le = 8760, mD = 8461, of = 9829, pP = 8518, pQ = 251, ld = 9666, a1 = " ", mC = "Undefined_recursive_module", od = 8618, oe = 10533, ky = "stdout", gb = 8661, mB = 8858, lc = "h4", pO = 8965, d9 = "Set.bal", lb = 9663, d3 = 8784, pN = 189, la = 8769, ob = 8913, oc = "%i", kx = 8930, ee = 8848, ho = 8637, fM = 8839;
    function qW(b10, a10) {
      throw [0, b10, a10];
    }
    var N = [0];
    function ahI(b10, c10) {
      function f10(a11) {
        qW(N.Undefined_recursive_module, b10);
      }
      function e10(b11, c11, a11) {
        if (typeof b11 === "number")
          switch (b11) {
            case 0:
              c11[a11] = { fun: f10 };
              break;
            case 1:
              c11[a11] = [dT, f10];
              break;
            default:
              c11[a11] = [];
          }
        else
          switch (b11[0]) {
            case 0:
              c11[a11] = [0];
              for (var d10 = 1; d10 < b11[1].length; d10++)
                e10(b11[1][d10], c11[a11], d10);
              break;
            default:
              c11[a11] = b11[1];
          }
      }
      var a10 = [];
      e10(c10, a10, 0);
      return a10[0];
    }
    function O(c10, a10) {
      if (typeof a10 === "function") {
        c10.fun = a10;
        return 0;
      }
      if (a10.fun) {
        c10.fun = a10.fun;
        return 0;
      }
      var b10 = a10.length;
      while (b10--)
        c10[b10] = a10[b10];
      return 0;
    }
    function qy(b10, c10, d10) {
      if (typeof b10 === "number")
        switch (b10) {
          case 0:
          case 1:
          case 2:
          default:
            O(c10, d10);
        }
      else
        switch (b10[0]) {
          case 0:
            for (var a10 = 1; a10 < b10[1].length; a10++)
              qy(b10[1][a10], c10[a10], d10[a10]);
            break;
        }
      return 0;
    }
    function eH(c10, b10, a10) {
      var d10 = String.fromCharCode;
      if (b10 == 0 && a10 <= 4096 && a10 == c10.length)
        return d10.apply(null, c10);
      var e10 = j;
      for (; 0 < a10; b10 += b$, a10 -= b$)
        e10 += d10.apply(null, c10.slice(b10, b10 + Math.min(a10, b$)));
      return e10;
    }
    function eA(b10) {
      if (o.Uint8Array)
        var c10 = new o.Uint8Array(b10.l);
      else
        var c10 = new Array(b10.l);
      var e10 = b10.c, d10 = e10.length, a10 = 0;
      for (; a10 < d10; a10++)
        c10[a10] = e10.charCodeAt(a10);
      for (d10 = b10.l; a10 < d10; a10++)
        c10[a10] = 0;
      b10.c = c10;
      b10.t = 4;
      return c10;
    }
    function bn(d10, e10, b10, f10, c10) {
      if (c10 == 0)
        return 0;
      if (f10 == 0 && (c10 >= b10.l || b10.t == 2 && c10 >= b10.c.length)) {
        b10.c = d10.t == 4 ? eH(d10.c, e10, c10) : e10 == 0 && d10.c.length == c10 ? d10.c : d10.c.substr(e10, c10);
        b10.t = b10.c.length == b10.l ? 0 : 2;
      } else if (b10.t == 2 && f10 == b10.c.length) {
        b10.c += d10.t == 4 ? eH(d10.c, e10, c10) : e10 == 0 && d10.c.length == c10 ? d10.c : d10.c.substr(e10, c10);
        b10.t = b10.c.length == b10.l ? 0 : 2;
      } else {
        if (b10.t != 4)
          eA(b10);
        var g10 = d10.c, h10 = b10.c;
        if (d10.t == 4)
          if (f10 <= e10)
            for (var a10 = 0; a10 < c10; a10++)
              h10[f10 + a10] = g10[e10 + a10];
          else
            for (var a10 = c10 - 1; a10 >= 0; a10--)
              h10[f10 + a10] = g10[e10 + a10];
        else {
          var i10 = Math.min(c10, g10.length - e10);
          for (var a10 = 0; a10 < i10; a10++)
            h10[f10 + a10] = g10.charCodeAt(e10 + a10);
          for (; a10 < c10; a10++)
            h10[f10 + a10] = 0;
        }
      }
      return 0;
    }
    function aN(a10) {
      return a10;
    }
    function aX(a10, b10, c10, d10, e10) {
      bn(aN(a10), b10, c10, d10, e10);
      return 0;
    }
    function co(b10, a10) {
      if (b10 == 0)
        return j;
      if (a10.repeat)
        return a10.repeat(b10);
      var d10 = j, c10 = 0;
      for (; ; ) {
        if (b10 & 1)
          d10 += a10;
        b10 >>= 1;
        if (b10 == 0)
          return d10;
        a10 += a10;
        c10++;
        if (c10 == 9)
          a10.slice(0, 1);
      }
    }
    function bq(a10) {
      if (a10.t == 2)
        a10.c += co(a10.l - a10.c.length, "\0");
      else
        a10.c = eH(a10.c, 0, a10.c.length);
      a10.t = 0;
    }
    function q2(a10) {
      if (a10.length < 24) {
        for (var b10 = 0; b10 < a10.length; b10++)
          if (a10.charCodeAt(b10) > b5)
            return false;
        return true;
      } else
        return !/[^\x00-\x7f]/.test(a10);
    }
    function h7(e10) {
      for (var k10 = j, c10 = j, g10, f10, h10, a10, b10 = 0, i10 = e10.length; b10 < i10; b10++) {
        f10 = e10.charCodeAt(b10);
        if (f10 < aC) {
          for (var d10 = b10 + 1; d10 < i10 && (f10 = e10.charCodeAt(d10)) < aC; d10++)
            ;
          if (d10 - b10 > ge) {
            c10.substr(0, 1);
            k10 += c10;
            c10 = j;
            k10 += e10.slice(b10, d10);
          } else
            c10 += e10.slice(b10, d10);
          if (d10 == i10)
            break;
          b10 = d10;
        }
        a10 = 1;
        if (++b10 < i10 && ((h10 = e10.charCodeAt(b10)) & -64) == aM) {
          g10 = h10 + (f10 << 6);
          if (f10 < nx) {
            a10 = g10 - 12416;
            if (a10 < aC)
              a10 = 1;
          } else {
            a10 = 2;
            if (++b10 < i10 && ((h10 = e10.charCodeAt(b10)) & -64) == aM) {
              g10 = h10 + (g10 << 6);
              if (f10 < mq) {
                a10 = g10 - 925824;
                if (a10 < nZ || a10 >= 55295 && a10 < 57344)
                  a10 = 2;
              } else {
                a10 = 3;
                if (++b10 < i10 && ((h10 = e10.charCodeAt(b10)) & -64) == aM && f10 < 245) {
                  a10 = h10 - 63447168 + (g10 << 6);
                  if (a10 < 65536 || a10 > 1114111)
                    a10 = 3;
                }
              }
            }
          }
        }
        if (a10 < 4) {
          b10 -= a10;
          c10 += "\uFFFD";
        } else if (a10 > aU)
          c10 += String.fromCharCode(55232 + (a10 >> 10), or + (a10 & 1023));
        else
          c10 += String.fromCharCode(a10);
        if (c10.length > b$) {
          c10.substr(0, 1);
          k10 += c10;
          c10 = j;
        }
      }
      return k10 + c10;
    }
    function a2(c10, a10, b10) {
      this.t = c10;
      this.c = a10;
      this.l = b10;
    }
    a2.prototype.toString = function() {
      switch (this.t) {
        case 9:
          return this.c;
        default:
          bq(this);
        case 0:
          if (q2(this.c)) {
            this.t = 9;
            return this.c;
          }
          this.t = 8;
        case 8:
          return this.c;
      }
    };
    a2.prototype.toUtf16 = function() {
      var a10 = this.toString();
      if (this.t == 9)
        return a10;
      return h7(a10);
    };
    a2.prototype.slice = function() {
      var a10 = this.t == 4 ? this.c.slice() : this.c;
      return new a2(this.t, a10, this.l);
    };
    function qI(a10) {
      return new a2(0, a10, a10.length);
    }
    function a(a10) {
      return qI(a10);
    }
    function h4(c10, b10) {
      qW(c10, a(b10));
    }
    function V(a10) {
      h4(N.Invalid_argument, a10);
    }
    function qF() {
      V(hn);
    }
    function P(a10, c10, b10) {
      b10 &= bd;
      if (a10.t != 4) {
        if (c10 == a10.c.length) {
          a10.c += String.fromCharCode(b10);
          if (c10 + 1 == a10.l)
            a10.t = 0;
          return 0;
        }
        eA(a10);
      }
      a10.c[c10] = b10;
      return 0;
    }
    function bG(b10, a10, c10) {
      if (a10 >>> 0 >= b10.l)
        qF();
      return P(b10, a10, c10);
    }
    function aO(a10, b10) {
      switch (a10.t & 6) {
        default:
          if (b10 >= a10.c.length)
            return 0;
        case 0:
          return a10.c.charCodeAt(b10);
        case 4:
          return a10.c[b10];
      }
    }
    function bo(c10, a10) {
      if (c10.fun)
        return bo(c10.fun, a10);
      if (typeof c10 !== "function")
        return c10;
      var b10 = c10.length | 0;
      if (b10 === 0)
        return c10.apply(null, a10);
      var e10 = a10.length | 0, d10 = b10 - e10 | 0;
      if (d10 == 0)
        return c10.apply(null, a10);
      else if (d10 < 0)
        return bo(c10.apply(null, a10.slice(0, b10)), a10.slice(b10));
      else
        return function() {
          var e11 = arguments.length == 0 ? 1 : arguments.length, d11 = new Array(a10.length + e11);
          for (var b11 = 0; b11 < a10.length; b11++)
            d11[b11] = a10[b11];
          for (var b11 = 0; b11 < arguments.length; b11++)
            d11[a10.length + b11] = arguments[b11];
          return bo(c10, d11);
        };
    }
    function c3() {
      V(hn);
    }
    function T(a10, b10) {
      if (b10 >>> 0 >= a10.length - 1)
        c3();
      return a10;
    }
    function ahQ(a10) {
      if (isFinite(a10)) {
        if (Math.abs(a10) >= 22250738585072014e-324)
          return 0;
        if (a10 != 0)
          return 1;
        return 2;
      }
      return isNaN(a10) ? 4 : 3;
    }
    function aP(a10) {
      if ((a10.t & 6) != 0)
        bq(a10);
      return a10.c;
    }
    var aiR = Math.log2 && Math.log2(11235582092889474e291) == 1020;
    function aiQ(a10) {
      if (aiR)
        return Math.floor(Math.log2(a10));
      var b10 = 0;
      if (a10 == 0)
        return -Infinity;
      if (a10 >= 1)
        while (a10 >= 2) {
          a10 /= 2;
          b10++;
        }
      else
        while (a10 < 1) {
          a10 *= 2;
          b10--;
        }
      return b10;
    }
    function hU(c10) {
      var a10 = new o.Float32Array(1);
      a10[0] = c10;
      var b10 = new o.Int32Array(a10.buffer);
      return b10[0] | 0;
    }
    var qO = Math.pow(2, -24);
    function qV(a10) {
      throw a10;
    }
    function h5() {
      qV(N.Division_by_zero);
    }
    function m(b10, c10, a10) {
      this.lo = b10 & a0;
      this.mi = c10 & a0;
      this.hi = a10 & aU;
    }
    m.prototype.caml_custom = "_j";
    m.prototype.copy = function() {
      return new m(this.lo, this.mi, this.hi);
    };
    m.prototype.ucompare = function(a10) {
      if (this.hi > a10.hi)
        return 1;
      if (this.hi < a10.hi)
        return -1;
      if (this.mi > a10.mi)
        return 1;
      if (this.mi < a10.mi)
        return -1;
      if (this.lo > a10.lo)
        return 1;
      if (this.lo < a10.lo)
        return -1;
      return 0;
    };
    m.prototype.compare = function(a10) {
      var b10 = this.hi << 16, c10 = a10.hi << 16;
      if (b10 > c10)
        return 1;
      if (b10 < c10)
        return -1;
      if (this.mi > a10.mi)
        return 1;
      if (this.mi < a10.mi)
        return -1;
      if (this.lo > a10.lo)
        return 1;
      if (this.lo < a10.lo)
        return -1;
      return 0;
    };
    m.prototype.neg = function() {
      var a10 = -this.lo, b10 = -this.mi + (a10 >> 24), c10 = -this.hi + (b10 >> 24);
      return new m(a10, b10, c10);
    };
    m.prototype.add = function(a10) {
      var b10 = this.lo + a10.lo, c10 = this.mi + a10.mi + (b10 >> 24), d10 = this.hi + a10.hi + (c10 >> 24);
      return new m(b10, c10, d10);
    };
    m.prototype.sub = function(a10) {
      var b10 = this.lo - a10.lo, c10 = this.mi - a10.mi + (b10 >> 24), d10 = this.hi - a10.hi + (c10 >> 24);
      return new m(b10, c10, d10);
    };
    m.prototype.mul = function(a10) {
      var b10 = this.lo * a10.lo, c10 = (b10 * qO | 0) + this.mi * a10.lo + this.lo * a10.mi, d10 = (c10 * qO | 0) + this.hi * a10.lo + this.mi * a10.mi + this.lo * a10.hi;
      return new m(b10, c10, d10);
    };
    m.prototype.isZero = function() {
      return (this.lo | this.mi | this.hi) == 0;
    };
    m.prototype.isNeg = function() {
      return this.hi << 16 < 0;
    };
    m.prototype.and = function(a10) {
      return new m(this.lo & a10.lo, this.mi & a10.mi, this.hi & a10.hi);
    };
    m.prototype.or = function(a10) {
      return new m(this.lo | a10.lo, this.mi | a10.mi, this.hi | a10.hi);
    };
    m.prototype.xor = function(a10) {
      return new m(this.lo ^ a10.lo, this.mi ^ a10.mi, this.hi ^ a10.hi);
    };
    m.prototype.shift_left = function(a10) {
      a10 = a10 & 63;
      if (a10 == 0)
        return this;
      if (a10 < 24)
        return new m(this.lo << a10, this.mi << a10 | this.lo >> 24 - a10, this.hi << a10 | this.mi >> 24 - a10);
      if (a10 < 48)
        return new m(0, this.lo << a10 - 24, this.mi << a10 - 24 | this.lo >> 48 - a10);
      return new m(0, 0, this.lo << a10 - 48);
    };
    m.prototype.shift_right_unsigned = function(a10) {
      a10 = a10 & 63;
      if (a10 == 0)
        return this;
      if (a10 < 24)
        return new m(this.lo >> a10 | this.mi << 24 - a10, this.mi >> a10 | this.hi << 24 - a10, this.hi >> a10);
      if (a10 < 48)
        return new m(this.mi >> a10 - 24 | this.hi << 48 - a10, this.hi >> a10 - 24, 0);
      return new m(this.hi >> a10 - 48, 0, 0);
    };
    m.prototype.shift_right = function(a10) {
      a10 = a10 & 63;
      if (a10 == 0)
        return this;
      var c10 = this.hi << 16 >> 16;
      if (a10 < 24)
        return new m(this.lo >> a10 | this.mi << 24 - a10, this.mi >> a10 | c10 << 24 - a10, this.hi << 16 >> a10 >>> 16);
      var b10 = this.hi << 16 >> 31;
      if (a10 < 48)
        return new m(this.mi >> a10 - 24 | this.hi << 48 - a10, this.hi << 16 >> a10 - 24 >> 16, b10 & aU);
      return new m(this.hi << 16 >> a10 - 32, b10, b10);
    };
    m.prototype.lsl1 = function() {
      this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & a0;
      this.lo = this.lo << 1 & a0;
    };
    m.prototype.lsr1 = function() {
      this.lo = (this.lo >>> 1 | this.mi << 23) & a0;
      this.mi = (this.mi >>> 1 | this.hi << 23) & a0;
      this.hi = this.hi >>> 1;
    };
    m.prototype.udivmod = function(e10) {
      var c10 = 0, b10 = this.copy(), a10 = e10.copy(), d10 = new m(0, 0, 0);
      while (b10.ucompare(a10) > 0) {
        c10++;
        a10.lsl1();
      }
      while (c10 >= 0) {
        c10--;
        d10.lsl1();
        if (b10.ucompare(a10) >= 0) {
          d10.lo++;
          b10 = b10.sub(a10);
        }
        a10.lsr1();
      }
      return { quotient: d10, modulus: b10 };
    };
    m.prototype.div = function(a10) {
      var b10 = this;
      if (a10.isZero())
        h5();
      var d10 = b10.hi ^ a10.hi;
      if (b10.hi & aV)
        b10 = b10.neg();
      if (a10.hi & aV)
        a10 = a10.neg();
      var c10 = b10.udivmod(a10).quotient;
      if (d10 & aV)
        c10 = c10.neg();
      return c10;
    };
    m.prototype.mod = function(b10) {
      var a10 = this;
      if (b10.isZero())
        h5();
      var d10 = a10.hi;
      if (a10.hi & aV)
        a10 = a10.neg();
      if (b10.hi & aV)
        b10 = b10.neg();
      var c10 = a10.udivmod(b10).modulus;
      if (d10 & aV)
        c10 = c10.neg();
      return c10;
    };
    m.prototype.toInt = function() {
      return this.lo | this.mi << 24;
    };
    m.prototype.toFloat = function() {
      return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24) + this.lo;
    };
    m.prototype.toArray = function() {
      return [this.hi >> 8, this.hi & bd, this.mi >> 16, this.mi >> 8 & bd, this.mi & bd, this.lo >> 16, this.lo >> 8 & bd, this.lo & bd];
    };
    m.prototype.lo32 = function() {
      return this.lo | (this.mi & bd) << 24;
    };
    m.prototype.hi32 = function() {
      return this.mi >>> 8 & aU | this.hi << 16;
    };
    function eC(b10, c10, a10) {
      return new m(b10, c10, a10);
    }
    function eB(a10) {
      if (!isFinite(a10)) {
        if (isNaN(a10))
          return eC(1, 0, nn);
        return a10 > 0 ? eC(0, 0, nn) : eC(0, 0, 65520);
      }
      var f10 = a10 == 0 && 1 / a10 == -Infinity ? aV : a10 >= 0 ? 0 : aV;
      if (f10)
        a10 = -a10;
      var b10 = aiQ(a10) + 1023;
      if (b10 <= 0) {
        b10 = 0;
        a10 /= Math.pow(2, -f7);
      } else {
        a10 /= Math.pow(2, b10 - hJ);
        if (a10 < 16) {
          a10 *= 2;
          b10 -= 1;
        }
        if (b10 == 0)
          a10 /= 2;
      }
      var d10 = Math.pow(2, 24), c10 = a10 | 0;
      a10 = (a10 - c10) * d10;
      var e10 = a10 | 0;
      a10 = (a10 - e10) * d10;
      var g10 = a10 | 0;
      c10 = c10 & hi | f10 | b10 << 4;
      return eC(g10, e10, c10);
    }
    function c7(a10) {
      return a10.toArray();
    }
    function qE(c10, b10, g10) {
      c10.write(32, b10.dims.length);
      c10.write(32, b10.kind | b10.layout << 8);
      if (b10.caml_custom == ex)
        for (var a10 = 0; a10 < b10.dims.length; a10++)
          if (b10.dims[a10] < aU)
            c10.write(16, b10.dims[a10]);
          else {
            c10.write(16, aU);
            c10.write(32, 0);
            c10.write(32, b10.dims[a10]);
          }
      else
        for (var a10 = 0; a10 < b10.dims.length; a10++)
          c10.write(32, b10.dims[a10]);
      switch (b10.kind) {
        case 2:
        case 3:
        case 12:
          for (var a10 = 0; a10 < b10.data.length; a10++)
            c10.write(8, b10.data[a10]);
          break;
        case 4:
        case 5:
          for (var a10 = 0; a10 < b10.data.length; a10++)
            c10.write(16, b10.data[a10]);
          break;
        case 6:
          for (var a10 = 0; a10 < b10.data.length; a10++)
            c10.write(32, b10.data[a10]);
          break;
        case 8:
        case 9:
          c10.write(8, 0);
          for (var a10 = 0; a10 < b10.data.length; a10++)
            c10.write(32, b10.data[a10]);
          break;
        case 7:
          for (var a10 = 0; a10 < b10.data.length / 2; a10++) {
            var e10 = c7(b10.get(a10));
            for (var d10 = 0; d10 < 8; d10++)
              c10.write(8, e10[d10]);
          }
          break;
        case 1:
          for (var a10 = 0; a10 < b10.data.length; a10++) {
            var e10 = c7(eB(b10.get(a10)));
            for (var d10 = 0; d10 < 8; d10++)
              c10.write(8, e10[d10]);
          }
          break;
        case 0:
          for (var a10 = 0; a10 < b10.data.length; a10++) {
            var e10 = hU(b10.get(a10));
            c10.write(32, e10);
          }
          break;
        case 10:
          for (var a10 = 0; a10 < b10.data.length / 2; a10++) {
            var d10 = b10.get(a10);
            c10.write(32, hU(d10[1]));
            c10.write(32, hU(d10[2]));
          }
          break;
        case 11:
          for (var a10 = 0; a10 < b10.data.length / 2; a10++) {
            var f10 = b10.get(a10), e10 = c7(eB(f10[1]));
            for (var d10 = 0; d10 < 8; d10++)
              c10.write(8, e10[d10]);
            var e10 = c7(eB(f10[2]));
            for (var d10 = 0; d10 < 8; d10++)
              c10.write(8, e10[d10]);
          }
          break;
      }
      g10[0] = (4 + b10.dims.length) * 4;
      g10[1] = (4 + b10.dims.length) * 8;
    }
    function qC(a10) {
      switch (a10) {
        case 7:
        case 10:
        case 11:
          return 2;
        default:
          return 1;
      }
    }
    function ahL(c10, e10) {
      var b10 = o, a10;
      switch (c10) {
        case 0:
          a10 = b10.Float32Array;
          break;
        case 1:
          a10 = b10.Float64Array;
          break;
        case 2:
          a10 = b10.Int8Array;
          break;
        case 3:
          a10 = b10.Uint8Array;
          break;
        case 4:
          a10 = b10.Int16Array;
          break;
        case 5:
          a10 = b10.Uint16Array;
          break;
        case 6:
          a10 = b10.Int32Array;
          break;
        case 7:
          a10 = b10.Int32Array;
          break;
        case 8:
          a10 = b10.Int32Array;
          break;
        case 9:
          a10 = b10.Int32Array;
          break;
        case 10:
          a10 = b10.Float32Array;
          break;
        case 11:
          a10 = b10.Float64Array;
          break;
        case 12:
          a10 = b10.Uint8Array;
          break;
      }
      if (!a10)
        V("Bigarray.create: unsupported kind");
      var d10 = new a10(e10 * qC(c10));
      return d10;
    }
    function hV(c10) {
      var a10 = new o.Int32Array(1);
      a10[0] = c10;
      var b10 = new o.Float32Array(a10.buffer);
      return b10[0];
    }
    function ck(a10) {
      return new m(a10[7] << 0 | a10[6] << 8 | a10[5] << 16, a10[4] << 0 | a10[3] << 8 | a10[2] << 16, a10[1] << 0 | a10[0] << 8);
    }
    function eD(d10) {
      var f10 = d10.lo, g10 = d10.mi, b10 = d10.hi, c10 = (b10 & 32767) >> 4;
      if (c10 == og)
        return (f10 | g10 | b10 & hi) == 0 ? b10 & aV ? -Infinity : Infinity : NaN;
      var e10 = Math.pow(2, -24), a10 = (f10 * e10 + g10) * e10 + (b10 & hi);
      if (c10 > 0) {
        a10 += 16;
        a10 *= Math.pow(2, c10 - hJ);
      } else
        a10 *= Math.pow(2, -f7);
      if (b10 & aV)
        a10 = -a10;
      return a10;
    }
    function hM(b10) {
      var d10 = b10.length, c10 = 1;
      for (var a10 = 0; a10 < d10; a10++) {
        if (b10[a10] < 0)
          V("Bigarray.create: negative dimension");
        c10 = c10 * b10[a10];
      }
      return c10;
    }
    function ah_(b10, a10) {
      return new m(b10 & a0, b10 >>> 24 & bd | (a10 & aU) << 8, a10 >>> 16 & aU);
    }
    function hW(a10) {
      return a10.hi32();
    }
    function hX(a10) {
      return a10.lo32();
    }
    var ahM = ex;
    function bm(c10, d10, b10, a10) {
      this.kind = c10;
      this.layout = d10;
      this.dims = b10;
      this.data = a10;
    }
    bm.prototype.caml_custom = ahM;
    bm.prototype.offset = function(b10) {
      var c10 = 0;
      if (typeof b10 === "number")
        b10 = [b10];
      if (!(b10 instanceof Array))
        V("bigarray.js: invalid offset");
      if (this.dims.length != b10.length)
        V("Bigarray.get/set: bad number of dimensions");
      if (this.layout == 0)
        for (var a10 = 0; a10 < this.dims.length; a10++) {
          if (b10[a10] < 0 || b10[a10] >= this.dims[a10])
            c3();
          c10 = c10 * this.dims[a10] + b10[a10];
        }
      else
        for (var a10 = this.dims.length - 1; a10 >= 0; a10--) {
          if (b10[a10] < 1 || b10[a10] > this.dims[a10])
            c3();
          c10 = c10 * this.dims[a10] + (b10[a10] - 1);
        }
      return c10;
    };
    bm.prototype.get = function(a10) {
      switch (this.kind) {
        case 7:
          var d10 = this.data[a10 * 2 + 0], b10 = this.data[a10 * 2 + 1];
          return ah_(d10, b10);
        case 10:
        case 11:
          var e10 = this.data[a10 * 2 + 0], c10 = this.data[a10 * 2 + 1];
          return [bf, e10, c10];
        default:
          return this.data[a10];
      }
    };
    bm.prototype.set = function(a10, b10) {
      switch (this.kind) {
        case 7:
          this.data[a10 * 2 + 0] = hX(b10);
          this.data[a10 * 2 + 1] = hW(b10);
          break;
        case 10:
        case 11:
          this.data[a10 * 2 + 0] = b10[1];
          this.data[a10 * 2 + 1] = b10[2];
          break;
        default:
          this.data[a10] = b10;
          break;
      }
      return 0;
    };
    bm.prototype.fill = function(b10) {
      switch (this.kind) {
        case 7:
          var c10 = hX(b10), e10 = hW(b10);
          if (c10 == e10)
            this.data.fill(c10);
          else
            for (var a10 = 0; a10 < this.data.length; a10++)
              this.data[a10] = a10 % 2 == 0 ? c10 : e10;
          break;
        case 10:
        case 11:
          var d10 = b10[1], f10 = b10[2];
          if (d10 == f10)
            this.data.fill(d10);
          else
            for (var a10 = 0; a10 < this.data.length; a10++)
              this.data[a10] = a10 % 2 == 0 ? d10 : f10;
          break;
        default:
          this.data.fill(b10);
          break;
      }
    };
    bm.prototype.compare = function(b10, g10) {
      if (this.layout != b10.layout || this.kind != b10.kind) {
        var e10 = this.kind | this.layout << 8, f10 = b10.kind | b10.layout << 8;
        return f10 - e10;
      }
      if (this.dims.length != b10.dims.length)
        return b10.dims.length - this.dims.length;
      for (var a10 = 0; a10 < this.dims.length; a10++)
        if (this.dims[a10] != b10.dims[a10])
          return this.dims[a10] < b10.dims[a10] ? -1 : 1;
      switch (this.kind) {
        case 0:
        case 1:
        case 10:
        case 11:
          var c10, d10;
          for (var a10 = 0; a10 < this.data.length; a10++) {
            c10 = this.data[a10];
            d10 = b10.data[a10];
            if (c10 < d10)
              return -1;
            if (c10 > d10)
              return 1;
            if (c10 != d10) {
              if (!g10)
                return NaN;
              if (c10 == c10)
                return 1;
              if (d10 == d10)
                return -1;
            }
          }
          break;
        case 7:
          for (var a10 = 0; a10 < this.data.length; a10 += 2) {
            if (this.data[a10 + 1] < b10.data[a10 + 1])
              return -1;
            if (this.data[a10 + 1] > b10.data[a10 + 1])
              return 1;
            if (this.data[a10] >>> 0 < b10.data[a10] >>> 0)
              return -1;
            if (this.data[a10] >>> 0 > b10.data[a10] >>> 0)
              return 1;
          }
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
          for (var a10 = 0; a10 < this.data.length; a10++) {
            if (this.data[a10] < b10.data[a10])
              return -1;
            if (this.data[a10] > b10.data[a10])
              return 1;
          }
          break;
      }
      return 0;
    };
    function ch(c10, d10, b10, a10) {
      this.kind = c10;
      this.layout = d10;
      this.dims = b10;
      this.data = a10;
    }
    ch.prototype = new bm();
    ch.prototype.offset = function(a10) {
      if (typeof a10 !== "number")
        if (a10 instanceof Array && a10.length == 1)
          a10 = a10[0];
        else
          V("Ml_Bigarray_c_1_1.offset");
      if (a10 < 0 || a10 >= this.dims[0])
        c3();
      return a10;
    };
    ch.prototype.get = function(a10) {
      return this.data[a10];
    };
    ch.prototype.set = function(a10, b10) {
      this.data[a10] = b10;
      return 0;
    };
    ch.prototype.fill = function(a10) {
      this.data.fill(a10);
      return 0;
    };
    function qA(c10, d10, a10, b10) {
      var e10 = qC(c10);
      if (hM(a10) * e10 != b10.length)
        V("length doesn't match dims");
      if (d10 == 0 && a10.length == 1 && e10 == 1)
        return new ch(c10, d10, a10, b10);
      return new bm(c10, d10, a10, b10);
    }
    function D(a10) {
      h4(N.Failure, a10);
    }
    function qB(b10, v10, r10) {
      var i10 = b10.read32s();
      if (i10 < 0 || i10 > 16)
        D("input_value: wrong number of bigarray dimensions");
      var p10 = b10.read32s(), j10 = p10 & bd, o10 = p10 >> 8 & 1, h10 = [];
      if (r10 == ex)
        for (var a10 = 0; a10 < i10; a10++) {
          var n10 = b10.read16u();
          if (n10 == aU) {
            var t10 = b10.read32u(), u10 = b10.read32u();
            if (t10 != 0)
              D("input_value: bigarray dimension overflow in 32bit");
            n10 = u10;
          }
          h10.push(n10);
        }
      else
        for (var a10 = 0; a10 < i10; a10++)
          h10.push(b10.read32u());
      var d10 = hM(h10), f10 = ahL(j10, d10), g10 = qA(j10, o10, h10, f10);
      switch (j10) {
        case 2:
          for (var a10 = 0; a10 < d10; a10++)
            f10[a10] = b10.read8s();
          break;
        case 3:
        case 12:
          for (var a10 = 0; a10 < d10; a10++)
            f10[a10] = b10.read8u();
          break;
        case 4:
          for (var a10 = 0; a10 < d10; a10++)
            f10[a10] = b10.read16s();
          break;
        case 5:
          for (var a10 = 0; a10 < d10; a10++)
            f10[a10] = b10.read16u();
          break;
        case 6:
          for (var a10 = 0; a10 < d10; a10++)
            f10[a10] = b10.read32s();
          break;
        case 8:
        case 9:
          var s10 = b10.read8u();
          if (s10)
            D("input_value: cannot read bigarray with 64-bit OCaml ints");
          for (var a10 = 0; a10 < d10; a10++)
            f10[a10] = b10.read32s();
          break;
        case 7:
          var e10 = new Array(8);
          for (var a10 = 0; a10 < d10; a10++) {
            for (var c10 = 0; c10 < 8; c10++)
              e10[c10] = b10.read8u();
            var q10 = ck(e10);
            g10.set(a10, q10);
          }
          break;
        case 1:
          var e10 = new Array(8);
          for (var a10 = 0; a10 < d10; a10++) {
            for (var c10 = 0; c10 < 8; c10++)
              e10[c10] = b10.read8u();
            var k10 = eD(ck(e10));
            g10.set(a10, k10);
          }
          break;
        case 0:
          for (var a10 = 0; a10 < d10; a10++) {
            var k10 = hV(b10.read32s());
            g10.set(a10, k10);
          }
          break;
        case 10:
          for (var a10 = 0; a10 < d10; a10++) {
            var m10 = hV(b10.read32s()), l10 = hV(b10.read32s());
            g10.set(a10, [bf, m10, l10]);
          }
          break;
        case 11:
          var e10 = new Array(8);
          for (var a10 = 0; a10 < d10; a10++) {
            for (var c10 = 0; c10 < 8; c10++)
              e10[c10] = b10.read8u();
            var m10 = eD(ck(e10));
            for (var c10 = 0; c10 < 8; c10++)
              e10[c10] = b10.read8u();
            var l10 = eD(ck(e10));
            g10.set(a10, [bf, m10, l10]);
          }
          break;
      }
      v10[0] = (4 + i10) * 4;
      return qA(j10, o10, h10, f10);
    }
    function qz(a10, b10, c10) {
      return a10.compare(b10, c10);
    }
    function eE(a10, b10) {
      return Math.imul(a10, b10);
    }
    function ao(b10, a10) {
      a10 = eE(a10, 3432918353 | 0);
      a10 = a10 << 15 | a10 >>> 32 - 15;
      a10 = eE(a10, 461845907);
      b10 ^= a10;
      b10 = b10 << 13 | b10 >>> 32 - 13;
      return (b10 + (b10 << 2) | 0) + (3864292196 | 0) | 0;
    }
    function ah2(a10, b10) {
      a10 = ao(a10, hX(b10));
      a10 = ao(a10, hW(b10));
      return a10;
    }
    function hS(a10, b10) {
      return ah2(a10, eB(b10));
    }
    function qD(c10) {
      var b10 = hM(c10.dims), d10 = 0;
      switch (c10.kind) {
        case 2:
        case 3:
        case 12:
          if (b10 > b8)
            b10 = b8;
          var e10 = 0, a10 = 0;
          for (a10 = 0; a10 + 4 <= c10.data.length; a10 += 4) {
            e10 = c10.data[a10 + 0] | c10.data[a10 + 1] << 8 | c10.data[a10 + 2] << 16 | c10.data[a10 + 3] << 24;
            d10 = ao(d10, e10);
          }
          e10 = 0;
          switch (b10 & 3) {
            case 3:
              e10 = c10.data[a10 + 2] << 16;
            case 2:
              e10 |= c10.data[a10 + 1] << 8;
            case 1:
              e10 |= c10.data[a10 + 0];
              d10 = ao(d10, e10);
          }
          break;
        case 4:
        case 5:
          if (b10 > aM)
            b10 = aM;
          var e10 = 0, a10 = 0;
          for (a10 = 0; a10 + 2 <= c10.data.length; a10 += 2) {
            e10 = c10.data[a10 + 0] | c10.data[a10 + 1] << 16;
            d10 = ao(d10, e10);
          }
          if ((b10 & 1) != 0)
            d10 = ao(d10, c10.data[a10]);
          break;
        case 6:
          if (b10 > 64)
            b10 = 64;
          for (var a10 = 0; a10 < b10; a10++)
            d10 = ao(d10, c10.data[a10]);
          break;
        case 8:
        case 9:
          if (b10 > 64)
            b10 = 64;
          for (var a10 = 0; a10 < b10; a10++)
            d10 = ao(d10, c10.data[a10]);
          break;
        case 7:
          if (b10 > 32)
            b10 = 32;
          b10 *= 2;
          for (var a10 = 0; a10 < b10; a10++)
            d10 = ao(d10, c10.data[a10]);
          break;
        case 10:
          b10 *= 2;
        case 0:
          if (b10 > 64)
            b10 = 64;
          for (var a10 = 0; a10 < b10; a10++)
            d10 = hS(d10, c10.data[a10]);
          break;
        case 11:
          b10 *= 2;
        case 1:
          if (b10 > 32)
            b10 = 32;
          for (var a10 = 0; a10 < b10; a10++)
            d10 = hS(d10, c10.data[a10]);
          break;
      }
      return d10;
    }
    function ah7(a10, b10) {
      b10[0] = 4;
      return a10.read32s();
    }
    function aiz(a10, b10) {
      switch (a10.read8u()) {
        case 1:
          b10[0] = 4;
          return a10.read32s();
        case 2:
          D("input_value: native integer value too large");
        default:
          D("input_value: ill-formed native integer");
      }
    }
    function aih(c10, d10) {
      var b10 = new Array(8);
      for (var a10 = 0; a10 < 8; a10++)
        b10[a10] = c10.read8u();
      d10[0] = 8;
      return ck(b10);
    }
    function aid(e10, d10, b10) {
      var c10 = c7(d10);
      for (var a10 = 0; a10 < 8; a10++)
        e10.write(8, c10[a10]);
      b10[0] = 8;
      b10[1] = 8;
    }
    function ah9(a10, b10, c10) {
      return a10.compare(b10);
    }
    function aia(a10) {
      return a10.lo32() ^ a10.hi32();
    }
    var bH = { "_j": { deserialize: aih, serialize: aid, fixed_length: 8, compare: ah9, hash: aia }, "_i": { deserialize: ah7, fixed_length: 4 }, "_n": { deserialize: aiz, fixed_length: 4 }, "_bigarray": { deserialize: function(a10, b10) {
      return qB(a10, b10, "_bigarray");
    }, serialize: qE, compare: qz, hash: qD }, "_bigarr02": { deserialize: function(a10, b10) {
      return qB(a10, b10, ex);
    }, serialize: qE, compare: qz, hash: qD } };
    function hN(a10) {
      return bH[a10.caml_custom] && bH[a10.caml_custom].compare;
    }
    function qJ(f10, c10, d10, e10) {
      var b10 = hN(c10);
      if (b10) {
        var a10 = d10 > 0 ? b10(c10, f10, e10) : b10(f10, c10, e10);
        if (e10 && a10 != a10)
          return d10;
        if (+a10 != +a10)
          return +a10;
        if ((a10 | 0) != 0)
          return a10 | 0;
      }
      return d10;
    }
    function bI(a10) {
      return a10 instanceof a2;
    }
    function c8(a10) {
      return bI(a10);
    }
    function qK(a10) {
      if (typeof a10 === "number")
        return cZ;
      else if (bI(a10))
        return cL;
      else if (c8(a10))
        return 1252;
      else if (a10 instanceof Array && a10[0] === a10[0] >>> 0 && a10[0] <= em) {
        var b10 = a10[0] | 0;
        return b10 == bf ? 0 : b10;
      } else if (a10 instanceof String)
        return kN;
      else if (typeof a10 == "string")
        return kN;
      else if (a10 instanceof Number)
        return cZ;
      else if (a10 && a10.caml_custom)
        return gg;
      else if (a10 && a10.compare)
        return 1256;
      else if (typeof a10 == "function")
        return 1247;
      else if (typeof a10 == "symbol")
        return 1251;
      return 1001;
    }
    function qP(a10, b10) {
      if (a10 < b10)
        return -1;
      if (a10 == b10)
        return 0;
      return 1;
    }
    function qG(a10, b10) {
      a10.t & 6 && bq(a10);
      b10.t & 6 && bq(b10);
      return a10.c < b10.c ? -1 : a10.c > b10.c ? 1 : 0;
    }
    function e(a10, b10) {
      return qG(a10, b10);
    }
    function ci(a10, b10, d10) {
      var e10 = [];
      for (; ; ) {
        if (!(d10 && a10 === b10)) {
          var f10 = qK(a10);
          if (f10 == cJ) {
            a10 = a10[1];
            continue;
          }
          var g10 = qK(b10);
          if (g10 == cJ) {
            b10 = b10[1];
            continue;
          }
          if (f10 !== g10) {
            if (f10 == cZ) {
              if (g10 == gg)
                return qJ(a10, b10, -1, d10);
              return -1;
            }
            if (g10 == cZ) {
              if (f10 == gg)
                return qJ(b10, a10, 1, d10);
              return 1;
            }
            return f10 < g10 ? -1 : 1;
          }
          switch (f10) {
            case 247:
              V(g3);
              break;
            case 248:
              var c10 = qP(a10[2], b10[2]);
              if (c10 != 0)
                return c10 | 0;
              break;
            case 249:
              V(g3);
              break;
            case 250:
              V("equal: got Forward_tag, should not happen");
              break;
            case 251:
              V("equal: abstract value");
              break;
            case 252:
              if (a10 !== b10) {
                var c10 = qG(a10, b10);
                if (c10 != 0)
                  return c10 | 0;
              }
              break;
            case 253:
              V("equal: got Double_tag, should not happen");
              break;
            case 254:
              V("equal: got Double_array_tag, should not happen");
              break;
            case 255:
              V("equal: got Custom_tag, should not happen");
              break;
            case 1247:
              V(g3);
              break;
            case 1255:
              var i10 = hN(a10);
              if (i10 != hN(b10))
                return a10.caml_custom < b10.caml_custom ? -1 : 1;
              if (!i10)
                V("compare: abstract value");
              var c10 = i10(a10, b10, d10);
              if (c10 != c10)
                return d10 ? -1 : c10;
              if (c10 !== (c10 | 0))
                return -1;
              if (c10 != 0)
                return c10 | 0;
              break;
            case 1256:
              var c10 = a10.compare(b10, d10);
              if (c10 != c10)
                return d10 ? -1 : c10;
              if (c10 !== (c10 | 0))
                return -1;
              if (c10 != 0)
                return c10 | 0;
              break;
            case 1e3:
              a10 = +a10;
              b10 = +b10;
              if (a10 < b10)
                return -1;
              if (a10 > b10)
                return 1;
              if (a10 != b10) {
                if (!d10)
                  return NaN;
                if (a10 == a10)
                  return 1;
                if (b10 == b10)
                  return -1;
              }
              break;
            case 1001:
              if (a10 < b10)
                return -1;
              if (a10 > b10)
                return 1;
              if (a10 != b10) {
                if (!d10)
                  return NaN;
                if (a10 == a10)
                  return 1;
                if (b10 == b10)
                  return -1;
              }
              break;
            case 1251:
              if (a10 !== b10) {
                if (!d10)
                  return NaN;
                return 1;
              }
              break;
            case 1252:
              var a10 = aP(a10), b10 = aP(b10);
              if (a10 !== b10) {
                if (a10 < b10)
                  return -1;
                if (a10 > b10)
                  return 1;
              }
              break;
            case 12520:
              var a10 = a10.toString(), b10 = b10.toString();
              if (a10 !== b10) {
                if (a10 < b10)
                  return -1;
                if (a10 > b10)
                  return 1;
              }
              break;
            case 246:
            case 254:
            default:
              if (a10.length != b10.length)
                return a10.length < b10.length ? -1 : 1;
              if (a10.length > 1)
                e10.push(a10, b10, 1);
              break;
          }
        }
        if (e10.length == 0)
          return 0;
        var h10 = e10.pop();
        b10 = e10.pop();
        a10 = e10.pop();
        if (h10 + 1 < a10.length)
          e10.push(a10, b10, h10 + 1);
        a10 = a10[h10];
        b10 = b10[h10];
      }
    }
    function bp(a10, b10) {
      return ci(a10, b10, true);
    }
    function ahR() {
      return [0];
    }
    function U(a10) {
      if (a10 < 0)
        V("Bytes.create");
      return new a2(a10 ? 2 : 9, j, a10);
    }
    function c5(a10, b10) {
      return +(ci(a10, b10, false) == 0);
    }
    function ahT(a10, c10, b10, d10) {
      if (b10 > 0)
        if (c10 == 0 && (b10 >= a10.l || a10.t == 2 && b10 >= a10.c.length))
          if (d10 == 0) {
            a10.c = j;
            a10.t = 2;
          } else {
            a10.c = co(b10, String.fromCharCode(d10));
            a10.t = b10 == a10.l ? 0 : 2;
          }
        else {
          if (a10.t != 4)
            eA(a10);
          for (b10 += c10; c10 < b10; c10++)
            a10.c[c10] = d10;
        }
      return 0;
    }
    function ahU(a10) {
      var b10;
      a10 = aP(a10);
      b10 = +a10;
      if (a10.length > 0 && b10 === b10)
        return b10;
      a10 = a10.replace(/_/g, j);
      b10 = +a10;
      if (a10.length > 0 && b10 === b10 || /^[+-]?nan$/i.test(a10))
        return b10;
      var c10 = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(a10);
      if (c10) {
        var d10 = c10[3].replace(/0+$/, j), f10 = parseInt(c10[1] + c10[2] + d10, 16), e10 = (c10[4] | 0) - 4 * d10.length;
        b10 = f10 * Math.pow(2, e10);
        return b10;
      }
      if (/^\+?inf(inity)?$/i.test(a10))
        return Infinity;
      if (/^-inf(inity)?$/i.test(a10))
        return -Infinity;
      D("float_of_string");
    }
    function h3(d10) {
      d10 = aP(d10);
      var e10 = d10.length;
      if (e10 > 31)
        V("format_int: format too long");
      var a10 = { justify: cc, signstyle: bF, filler: a1, alternate: false, base: 0, signedconv: false, width: 0, uppercase: false, sign: 1, prec: -1, conv: "f" };
      for (var c10 = 0; c10 < e10; c10++) {
        var b10 = d10.charAt(c10);
        switch (b10) {
          case "-":
            a10.justify = bF;
            break;
          case "+":
          case " ":
            a10.signstyle = b10;
            break;
          case "0":
            a10.filler = aD;
            break;
          case "#":
            a10.alternate = true;
            break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            a10.width = 0;
            while (b10 = d10.charCodeAt(c10) - 48, b10 >= 0 && b10 <= 9) {
              a10.width = a10.width * 10 + b10;
              c10++;
            }
            c10--;
            break;
          case ".":
            a10.prec = 0;
            c10++;
            while (b10 = d10.charCodeAt(c10) - 48, b10 >= 0 && b10 <= 9) {
              a10.prec = a10.prec * 10 + b10;
              c10++;
            }
            c10--;
          case "d":
          case "i":
            a10.signedconv = true;
          case "u":
            a10.base = 10;
            break;
          case "x":
            a10.base = 16;
            break;
          case "X":
            a10.base = 16;
            a10.uppercase = true;
            break;
          case "o":
            a10.base = 8;
            break;
          case "e":
          case "f":
          case "g":
            a10.signedconv = true;
            a10.conv = b10;
            break;
          case "E":
          case "F":
          case "G":
            a10.signedconv = true;
            a10.uppercase = true;
            a10.conv = b10.toLowerCase();
            break;
        }
      }
      return a10;
    }
    function hO(b10, f10) {
      if (b10.uppercase)
        f10 = f10.toUpperCase();
      var e10 = f10.length;
      if (b10.signedconv && (b10.sign < 0 || b10.signstyle != bF))
        e10++;
      if (b10.alternate) {
        if (b10.base == 8)
          e10 += 1;
        if (b10.base == 16)
          e10 += 2;
      }
      var c10 = j;
      if (b10.justify == cc && b10.filler == a1)
        for (var d10 = e10; d10 < b10.width; d10++)
          c10 += a1;
      if (b10.signedconv) {
        if (b10.sign < 0)
          c10 += bF;
        else if (b10.signstyle != bF)
          c10 += b10.signstyle;
      }
      if (b10.alternate && b10.base == 8)
        c10 += aD;
      if (b10.alternate && b10.base == 16)
        c10 += nm;
      if (b10.justify == cc && b10.filler == aD)
        for (var d10 = e10; d10 < b10.width; d10++)
          c10 += aD;
      c10 += f10;
      if (b10.justify == bF)
        for (var d10 = e10; d10 < b10.width; d10++)
          c10 += a1;
      return a(c10);
    }
    function hP(i10, c10) {
      function j10(a11, b11) {
        if (Math.abs(a11) < 1)
          return a11.toFixed(b11);
        else {
          var c11 = parseInt(a11.toString().split(cc)[1]);
          if (c11 > 20) {
            c11 -= 20;
            a11 /= Math.pow(10, c11);
            a11 += new Array(c11 + 1).join(aD);
            if (b11 > 0)
              a11 = a11 + bl + new Array(b11 + 1).join(aD);
            return a11;
          } else
            return a11.toFixed(b11);
        }
      }
      var a10, e10 = h3(i10), d10 = e10.prec < 0 ? 6 : e10.prec;
      if (c10 < 0 || c10 == 0 && 1 / c10 == -Infinity) {
        e10.sign = -1;
        c10 = -c10;
      }
      if (isNaN(c10)) {
        a10 = gZ;
        e10.filler = a1;
      } else if (!isFinite(c10)) {
        a10 = "inf";
        e10.filler = a1;
      } else
        switch (e10.conv) {
          case "e":
            var a10 = c10.toExponential(d10), b10 = a10.length;
            if (a10.charAt(b10 - 3) == hH)
              a10 = a10.slice(0, b10 - 1) + aD + a10.slice(b10 - 1);
            break;
          case "f":
            a10 = j10(c10, d10);
            break;
          case "g":
            d10 = d10 ? d10 : 1;
            a10 = c10.toExponential(d10 - 1);
            var h10 = a10.indexOf(hH), g10 = +a10.slice(h10 + 1);
            if (g10 < -4 || c10 >= 1e21 || c10.toFixed(0).length > d10) {
              var b10 = h10 - 1;
              while (a10.charAt(b10) == aD)
                b10--;
              if (a10.charAt(b10) == bl)
                b10--;
              a10 = a10.slice(0, b10 + 1) + a10.slice(h10);
              b10 = a10.length;
              if (a10.charAt(b10 - 3) == hH)
                a10 = a10.slice(0, b10 - 1) + aD + a10.slice(b10 - 1);
              break;
            } else {
              var f10 = d10;
              if (g10 < 0) {
                f10 -= g10 + 1;
                a10 = c10.toFixed(f10);
              } else
                while (a10 = c10.toFixed(f10), a10.length > d10 + 1)
                  f10--;
              if (f10) {
                var b10 = a10.length - 1;
                while (a10.charAt(b10) == aD)
                  b10--;
                if (a10.charAt(b10) == bl)
                  b10--;
                a10 = a10.slice(0, b10 + 1);
              }
            }
            break;
        }
      return hO(e10, a10);
    }
    function c6(e10, c10) {
      if (aP(e10) == gE)
        return a(j + c10);
      var b10 = h3(e10);
      if (c10 < 0)
        if (b10.signedconv) {
          b10.sign = -1;
          c10 = -c10;
        } else
          c10 >>>= 0;
      var d10 = c10.toString(b10.base);
      if (b10.prec >= 0) {
        b10.filler = a1;
        var f10 = b10.prec - d10.length;
        if (f10 > 0)
          d10 = co(f10, aD) + d10;
      }
      return hO(b10, d10);
    }
    var aiB = 0;
    function M() {
      return aiB++;
    }
    function aH(a10) {
      return a10.toUtf16();
    }
    function c_() {
      return typeof o.process !== "undefined" && typeof o.process.versions !== "undefined" && typeof o.process.versions.node !== "undefined";
    }
    function aiS() {
      function a10(a11) {
        if (a11.charAt(0) === aZ)
          return [j, a11.substring(1)];
        return;
      }
      function b10(c10) {
        var g10 = /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/, a11 = g10.exec(c10), b11 = a11[1] || j, e10 = Boolean(b11 && b11.charAt(1) !== ":");
        if (Boolean(a11[2] || e10)) {
          var d10 = a11[1] || j, f10 = a11[2] || j;
          return [d10, c10.substring(d10.length + f10.length)];
        }
        return;
      }
      return c_() && o.process && o.process.platform ? o.process.platform === "win32" ? b10 : a10 : a10;
    }
    var h8 = aiS();
    function q0(a10) {
      return a10.slice(-1) !== aZ ? a10 + aZ : a10;
    }
    if (c_() && o.process && o.process.cwd)
      var c4 = o.process.cwd().replace(/\\/g, aZ);
    else
      var c4 = "/static";
    c4 = q0(c4);
    function aiq(a10) {
      a10 = aH(a10);
      if (!h8(a10))
        a10 = c4 + a10;
      var e10 = h8(a10), d10 = e10[1].split(aZ), b10 = [];
      for (var c10 = 0; c10 < d10.length; c10++)
        switch (d10[c10]) {
          case "..":
            if (b10.length > 1)
              b10.pop();
            break;
          case ".":
            break;
          default:
            b10.push(d10[c10]);
            break;
        }
      b10.unshift(e10[0]);
      b10.orig = a10;
      return b10;
    }
    function aiN(e10) {
      for (var f10 = j, b10 = f10, a10, h10, c10 = 0, g10 = e10.length; c10 < g10; c10++) {
        a10 = e10.charCodeAt(c10);
        if (a10 < aC) {
          for (var d10 = c10 + 1; d10 < g10 && (a10 = e10.charCodeAt(d10)) < aC; d10++)
            ;
          if (d10 - c10 > ge) {
            b10.substr(0, 1);
            f10 += b10;
            b10 = j;
            f10 += e10.slice(c10, d10);
          } else
            b10 += e10.slice(c10, d10);
          if (d10 == g10)
            break;
          c10 = d10;
        }
        if (a10 < nZ) {
          b10 += String.fromCharCode(192 | a10 >> 6);
          b10 += String.fromCharCode(aC | a10 & b4);
        } else if (a10 < 55296 || a10 >= p0)
          b10 += String.fromCharCode(nx | a10 >> 12, aC | a10 >> 6 & b4, aC | a10 & b4);
        else if (a10 >= 56319 || c10 + 1 == g10 || (h10 = e10.charCodeAt(c10 + 1)) < or || h10 > p0)
          b10 += "\xEF\xBF\xBD";
        else {
          c10++;
          a10 = (a10 << 10) + h10 - 56613888;
          b10 += String.fromCharCode(mq | a10 >> 18, aC | a10 >> 12 & b4, aC | a10 >> 6 & b4, aC | a10 & b4);
        }
        if (b10.length > b$) {
          b10.substr(0, 1);
          f10 += b10;
          b10 = j;
        }
      }
      return f10 + b10;
    }
    function ahP(a10) {
      var b10 = 9;
      if (!q2(a10))
        b10 = 8, a10 = aiN(a10);
      return new a2(b10, a10, a10.length);
    }
    function av(a10) {
      return ahP(a10);
    }
    var aiT = ["E2BIG", "EACCES", "EAGAIN", "EBADF", "EBUSY", "ECHILD", "EDEADLK", "EDOM", np, "EFAULT", "EFBIG", "EINTR", "EINVAL", "EIO", "EISDIR", "EMFILE", "EMLINK", "ENAMETOOLONG", "ENFILE", "ENODEV", hC, "ENOEXEC", "ENOLCK", "ENOMEM", "ENOSPC", "ENOSYS", hw, qk, "ENOTTY", "ENXIO", "EPERM", "EPIPE", "ERANGE", "EROFS", "ESPIPE", "ESRCH", "EXDEV", "EWOULDBLOCK", "EINPROGRESS", "EALREADY", "ENOTSOCK", "EDESTADDRREQ", "EMSGSIZE", "EPROTOTYPE", "ENOPROTOOPT", "EPROTONOSUPPORT", "ESOCKTNOSUPPORT", "EOPNOTSUPP", "EPFNOSUPPORT", "EAFNOSUPPORT", "EADDRINUSE", "EADDRNOTAVAIL", "ENETDOWN", "ENETUNREACH", "ENETRESET", "ECONNABORTED", "ECONNRESET", "ENOBUFS", "EISCONN", "ENOTCONN", "ESHUTDOWN", "ETOOMANYREFS", "ETIMEDOUT", "ECONNREFUSED", "EHOSTDOWN", "EHOSTUNREACH", "ELOOP", "EOVERFLOW"];
    function bL(d10, f10, e10, a10) {
      var b10 = aiT.indexOf(d10);
      if (b10 < 0) {
        if (a10 == null)
          a10 = -9999;
        b10 = [0, a10];
      }
      var c10 = [b10, av(f10 || j), av(e10 || j)];
      return c10;
    }
    var qT = {};
    function bJ(a10) {
      return qT[a10];
    }
    function bK(b10, a10) {
      throw [0, b10].concat(a10);
    }
    function qH(a10) {
      return new a2(4, a10, a10.length);
    }
    function A(a10) {
      h4(N.Sys_error, a10);
    }
    function aiE(a10) {
      a10 = aP(a10);
      A(a10 + et);
    }
    function ahO(b10, a10) {
      if (a10 >>> 0 >= b10.l)
        qF();
      return aO(b10, a10);
    }
    function aj(a10) {
      return a10.l;
    }
    function qw() {
    }
    function ae(a10) {
      this.data = a10;
    }
    ae.prototype = new qw();
    ae.prototype.truncate = function(a10) {
      var b10 = this.data;
      this.data = U(a10 | 0);
      bn(b10, 0, this.data, 0, a10);
    };
    ae.prototype.length = function() {
      return aj(this.data);
    };
    ae.prototype.write = function(b10, d10, g10, a10) {
      var c10 = this.length();
      if (b10 + a10 >= c10) {
        var e10 = U(b10 + a10), f10 = this.data;
        this.data = e10;
        bn(f10, 0, this.data, 0, c10);
      }
      aX(d10, g10, this.data, b10, a10);
      return 0;
    };
    ae.prototype.read = function(c10, a10, d10, b10) {
      var e10 = this.length();
      bn(this.data, c10, a10, d10, b10);
      return 0;
    };
    ae.prototype.read_one = function(a10) {
      return ahO(this.data, a10);
    };
    ae.prototype.close = function() {
    };
    ae.prototype.constructor = ae;
    function an(b10, a10) {
      this.content = {};
      this.lazyfiles = [];
      this.root = b10;
      this.lookupFun = a10;
    }
    an.prototype.nm = function(a10) {
      return this.root + a10;
    };
    an.prototype.create_dir_if_needed = function(d10) {
      var c10 = d10.split(aZ), b10 = j;
      for (var a10 = 0; a10 < c10.length - 1; a10++) {
        b10 += c10[a10] + aZ;
        if (this.content[b10])
          continue;
        this.content[b10] = Symbol("directory");
      }
    };
    an.prototype.slash = function(a10) {
      return /\/$/.test(a10) ? a10 : a10 + aZ;
    };
    an.prototype.lookup = function(b10) {
      if (!this.content[b10] && this.lookupFun) {
        var c10 = this.lookupFun(a(this.root), a(b10));
        if (c10 !== 0) {
          this.create_dir_if_needed(b10);
          this.content[b10] = new ae(aN(c10[1]));
        }
      }
    };
    an.prototype.exists = function(a10) {
      if (a10 == j)
        return 1;
      var b10 = this.slash(a10);
      if (this.content[b10])
        return 1;
      if (this.lazyfiles.indexOf(a10) >= 0)
        return 1;
      this.lookup(a10);
      return this.content[a10] ? 1 : 0;
    };
    an.prototype.mkdir = function(b10, e10, d10) {
      var c10 = d10 && bJ(hA);
      if (this.exists(b10) || this.lazyfiles.indexOf(b10) >= 0)
        if (c10)
          bK(c10, bL(np, gK, this.nm(b10)));
        else
          A(b10 + ": File exists");
      var a10 = /^(.*)\/[^/]+/.exec(b10);
      a10 = a10 && a10[1] || j;
      if (!this.exists(a10))
        if (c10)
          bK(c10, bL(hC, gK, this.nm(a10)));
        else
          A(a10 + et);
      if (!this.is_dir(a10))
        if (c10)
          bK(c10, bL(hw, gK, this.nm(a10)));
        else
          A(a10 + gr);
      this.create_dir_if_needed(this.slash(b10));
    };
    an.prototype.rmdir = function(a10, f10) {
      var b10 = f10 && bJ(hA), c10 = a10 == j ? j : this.slash(a10), e10 = new RegExp(l7 + c10 + kY);
      if (!this.exists(a10))
        if (b10)
          bK(b10, bL(hC, f8, this.nm(a10)));
        else
          A(a10 + et);
      if (!this.is_dir(a10))
        if (b10)
          bK(b10, bL(hw, f8, this.nm(a10)));
        else
          A(a10 + gr);
      for (var d10 in this.content)
        if (d10.match(e10))
          if (b10)
            bK(b10, bL(qk, f8, this.nm(a10)));
          else
            A(this.nm(a10) + ": Directory not empty");
      delete this.content[c10];
    };
    an.prototype.readdir = function(a10) {
      var g10 = a10 == j ? j : this.slash(a10);
      if (!this.exists(a10))
        A(a10 + et);
      if (!this.is_dir(a10))
        A(a10 + gr);
      var e10 = new RegExp(l7 + g10 + kY), c10 = {}, d10 = [];
      for (var f10 in this.content) {
        var b10 = f10.match(e10);
        if (b10 && !c10[b10[1]]) {
          c10[b10[1]] = true;
          d10.push(b10[1]);
        }
      }
      this.lazyfiles.forEach(function(b11) {
        var a11 = b11.match(e10);
        if (a11 && !c10[a11[1]]) {
          c10[a11[1]] = true;
          d10.push(a11[1]);
        }
      });
      return d10;
    };
    an.prototype.is_dir = function(a10) {
      if (a10 == j)
        return true;
      var b10 = this.slash(a10);
      return this.content[b10] ? 1 : 0;
    };
    an.prototype.unlink = function(a10) {
      var b10 = (this.content[a10] ? true : false) || this.lazyfiles.indexOf(a10) >= 0;
      delete this.content[a10];
      return b10;
    };
    an.prototype.open = function(a10, b10) {
      if (b10.rdonly && b10.wronly)
        A(this.nm(a10) + nG);
      if (b10.text && b10.binary)
        A(this.nm(a10) + pz);
      this.lookup(a10);
      if (this.content[a10]) {
        if (this.is_dir(a10))
          A(this.nm(a10) + " : is a directory");
        if (b10.create && b10.excl)
          A(this.nm(a10) + nE);
        var c10 = this.content[a10];
        if (b10.truncate)
          c10.truncate();
        return c10;
      } else if (b10.create) {
        this.create_dir_if_needed(a10);
        this.content[a10] = new ae(U(0));
        return this.content[a10];
      } else
        aiE(this.nm(a10));
    };
    an.prototype.register = function(c10, a10) {
      var b10;
      if (this.content[c10])
        A(this.nm(c10) + nE);
      if (bI(a10))
        b10 = new ae(a10);
      if (c8(a10))
        b10 = new ae(aN(a10));
      else if (a10 instanceof Array)
        b10 = new ae(qH(a10));
      else if (typeof a10 === "string")
        b10 = new ae(qI(a10));
      else if (a10.toString) {
        var d10 = aN(av(a10.toString()));
        b10 = new ae(d10);
      }
      if (b10) {
        this.create_dir_if_needed(c10);
        this.content[c10] = b10;
      } else
        A(this.nm(c10) + " : registering file with invalid content type");
    };
    an.prototype.register_lazy = function(a10) {
      this.lazyfiles.push(a10);
    };
    an.prototype.constructor = an;
    function k(a10) {
      return aj(a10);
    }
    function ap(b10, a10) {
      return aO(b10, a10);
    }
    function ahK(d10) {
      var c10 = k(d10), b10 = new Array(c10), a10 = 0;
      for (; a10 < c10; a10++)
        b10[a10] = ap(d10, a10);
      return b10;
    }
    function ahJ(a10) {
      if (a10.t != 4)
        eA(a10);
      return a10.c;
    }
    function a3(a10) {
      this.fs = require_fs();
      this.fd = a10;
    }
    a3.prototype = new qw();
    a3.prototype.truncate = function(a10) {
      try {
        this.fs.ftruncateSync(this.fd, a10 | 0);
      } catch (a11) {
        A(a11.toString());
      }
    };
    a3.prototype.length = function() {
      try {
        return this.fs.fstatSync(this.fd).size;
      } catch (a10) {
        A(a10.toString());
      }
    };
    a3.prototype.write = function(f10, b10, c10, e10) {
      var a10 = ahK(b10);
      if (!(a10 instanceof o.Uint8Array))
        a10 = new o.Uint8Array(a10);
      var d10 = o.Buffer.from(a10);
      try {
        this.fs.writeSync(this.fd, d10, c10, e10, f10);
      } catch (a11) {
        A(a11.toString());
      }
      return 0;
    };
    a3.prototype.read = function(g10, d10, c10, f10) {
      var a10 = ahJ(d10);
      if (!(a10 instanceof o.Uint8Array))
        a10 = new o.Uint8Array(a10);
      var e10 = o.Buffer.from(a10);
      try {
        this.fs.readSync(this.fd, e10, c10, f10, g10);
      } catch (a11) {
        A(a11.toString());
      }
      for (var b10 = 0; b10 < f10; b10++)
        bG(d10, c10 + b10, e10[c10 + b10]);
      return 0;
    };
    a3.prototype.read_one = function(c10) {
      var b10 = new o.Uint8Array(1), a10 = o.Buffer.from(b10);
      try {
        this.fs.readSync(this.fd, a10, 0, 1, c10);
      } catch (a11) {
        A(a11.toString());
      }
      return a10[0];
    };
    a3.prototype.close = function() {
      try {
        this.fs.closeSync(this.fd);
      } catch (a10) {
        A(a10.toString());
      }
    };
    a3.prototype.constructor = a3;
    function af(a10) {
      this.fs = require_fs();
      this.root = a10;
    }
    af.prototype.nm = function(a10) {
      return this.root + a10;
    };
    af.prototype.exists = function(a10) {
      try {
        return this.fs.existsSync(this.nm(a10)) ? 1 : 0;
      } catch (a11) {
        return 0;
      }
    };
    af.prototype.mkdir = function(b10, a10, c10) {
      try {
        this.fs.mkdirSync(this.nm(b10), { mode: a10 });
        return 0;
      } catch (a11) {
        this.raise_nodejs_error(a11, c10);
      }
    };
    af.prototype.rmdir = function(a10, b10) {
      try {
        this.fs.rmdirSync(this.nm(a10));
        return 0;
      } catch (a11) {
        this.raise_nodejs_error(a11, b10);
      }
    };
    af.prototype.readdir = function(a10, b10) {
      try {
        return this.fs.readdirSync(this.nm(a10));
      } catch (a11) {
        this.raise_nodejs_error(a11, b10);
      }
    };
    af.prototype.is_dir = function(a10) {
      try {
        return this.fs.statSync(this.nm(a10)).isDirectory() ? 1 : 0;
      } catch (a11) {
        A(a11.toString());
      }
    };
    af.prototype.unlink = function(a10, c10) {
      try {
        var b10 = this.fs.existsSync(this.nm(a10)) ? 1 : 0;
        this.fs.unlinkSync(this.nm(a10));
        return b10;
      } catch (a11) {
        this.raise_nodejs_error(a11, c10);
      }
    };
    af.prototype.open = function(f10, c10, g10) {
      var a10 = require_constants(), b10 = 0;
      for (var e10 in c10)
        switch (e10) {
          case "rdonly":
            b10 |= a10.O_RDONLY;
            break;
          case "wronly":
            b10 |= a10.O_WRONLY;
            break;
          case "append":
            b10 |= a10.O_WRONLY | a10.O_APPEND;
            break;
          case "create":
            b10 |= a10.O_CREAT;
            break;
          case "truncate":
            b10 |= a10.O_TRUNC;
            break;
          case "excl":
            b10 |= a10.O_EXCL;
            break;
          case "binary":
            b10 |= a10.O_BINARY;
            break;
          case "text":
            b10 |= a10.O_TEXT;
            break;
          case "nonblock":
            b10 |= a10.O_NONBLOCK;
            break;
        }
      try {
        var d10 = this.fs.openSync(this.nm(f10), b10);
        return new a3(d10);
      } catch (a11) {
        this.raise_nodejs_error(a11, g10);
      }
    };
    af.prototype.rename = function(b10, a10, c10) {
      try {
        this.fs.renameSync(this.nm(b10), this.nm(a10));
      } catch (a11) {
        this.raise_nodejs_error(a11, c10);
      }
    };
    af.prototype.stat = function(b10, c10) {
      try {
        var a10 = this.fs.statSync(this.nm(b10));
        return this.stats_from_js(a10);
      } catch (a11) {
        this.raise_nodejs_error(a11, c10);
      }
    };
    af.prototype.lstat = function(b10, c10) {
      try {
        var a10 = this.fs.lstatSync(this.nm(b10));
        return this.stats_from_js(a10);
      } catch (a11) {
        this.raise_nodejs_error(a11, c10);
      }
    };
    af.prototype.symlink = function(d10, c10, a10, b10) {
      try {
        this.fs.symlinkSync(this.nm(c10), this.nm(a10), d10 ? hy : "file");
        return 0;
      } catch (a11) {
        this.raise_nodejs_error(a11, b10);
      }
    };
    af.prototype.readlink = function(b10, c10) {
      try {
        var a10 = this.fs.readlinkSync(this.nm(b10), kA);
        return av(a10);
      } catch (a11) {
        this.raise_nodejs_error(a11, c10);
      }
    };
    af.prototype.raise_nodejs_error = function(a10, d10) {
      var b10 = bJ(hA);
      if (d10 && b10) {
        var c10 = bL(a10.code, a10.syscall, a10.path, a10.errno);
        bK(b10, c10);
      } else
        A(a10.toString());
    };
    af.prototype.stats_from_js = function(a10) {
      var b10;
      if (a10.isFile())
        b10 = 0;
      else if (a10.isDirectory())
        b10 = 1;
      else if (a10.isCharacterDevice())
        b10 = 2;
      else if (a10.isBlockDevice())
        b10 = 3;
      else if (a10.isSymbolicLink())
        b10 = 4;
      else if (a10.isFIFO())
        b10 = 5;
      else if (a10.isSocket())
        b10 = 6;
      return [0, a10.dev, a10.ino, b10, a10.mode, a10.nlink, a10.uid, a10.gid, a10.rdev, a10.size, a10.atimeMs, a10.mtimeMs, a10.ctimeMs];
    };
    af.prototype.constructor = af;
    function qM(b10) {
      var a10 = h8(b10);
      if (!a10)
        return;
      return a10[0] + aZ;
    }
    var eG = qM(c4) || D("unable to compute caml_root"), cp = [];
    if (c_())
      cp.push({ path: eG, device: new af(eG) });
    else
      cp.push({ path: eG, device: new an(eG) });
    cp.push({ path: oN, device: new an(oN) });
    function q3(b10) {
      var g10 = aiq(b10), b10 = g10.join(aZ), f10 = q0(b10), c10;
      for (var e10 = 0; e10 < cp.length; e10++) {
        var a10 = cp[e10];
        if (f10.search(a10.path) == 0 && (!c10 || c10.path.length < a10.path.length))
          c10 = { path: a10.path, device: a10.device, rest: b10.substring(a10.path.length, b10.length) };
      }
      if (!c10 && c_()) {
        var d10 = qM(b10);
        if (d10 && d10.match(/^[a-zA-Z]:\/$/)) {
          var a10 = { path: d10, device: new af(d10) };
          cp.push(a10);
          c10 = { path: a10.path, device: a10.device, rest: b10.substring(a10.path.length, b10.length) };
        }
      }
      if (c10)
        return c10;
      A("no device found for " + f10);
    }
    function ahS(c10, b10) {
      var a10 = q3(c10);
      if (!a10.device.register)
        D("cannot register file");
      a10.device.register(a10.rest, b10);
      return 0;
    }
    function q1(c10, b10) {
      var c10 = a(c10), b10 = a(b10);
      return ahS(c10, b10);
    }
    function ahW() {
      var b10 = o.caml_fs_tmp;
      if (b10)
        for (var a10 = 0; a10 < b10.length; a10++)
          q1(b10[a10].name, b10[a10].content);
      o.jsoo_create_file = q1;
      o.caml_fs_tmp = [];
      return 0;
    }
    function ahX() {
      return 0;
    }
    function hQ() {
      return [0];
    }
    function ahY(a10, b10) {
      return +(ci(a10, b10, false) >= 0);
    }
    function hT(d10, b10) {
      var e10 = b10.length, a10, c10;
      for (a10 = 0; a10 + 4 <= e10; a10 += 4) {
        c10 = b10.charCodeAt(a10) | b10.charCodeAt(a10 + 1) << 8 | b10.charCodeAt(a10 + 2) << 16 | b10.charCodeAt(a10 + 3) << 24;
        d10 = ao(d10, c10);
      }
      c10 = 0;
      switch (e10 & 3) {
        case 3:
          c10 = b10.charCodeAt(a10 + 2) << 16;
        case 2:
          c10 |= b10.charCodeAt(a10 + 1) << 8;
        case 1:
          c10 |= b10.charCodeAt(a10);
          d10 = ao(d10, c10);
      }
      d10 ^= e10;
      return d10;
    }
    function ah3(a10, b10) {
      return hT(a10, aP(b10));
    }
    function ah0(d10, b10) {
      var e10 = b10.length, a10, c10;
      for (a10 = 0; a10 + 4 <= e10; a10 += 4) {
        c10 = b10[a10] | b10[a10 + 1] << 8 | b10[a10 + 2] << 16 | b10[a10 + 3] << 24;
        d10 = ao(d10, c10);
      }
      c10 = 0;
      switch (e10 & 3) {
        case 3:
          c10 = b10[a10 + 2] << 16;
        case 2:
          c10 |= b10[a10 + 1] << 8;
        case 1:
          c10 |= b10[a10];
          d10 = ao(d10, c10);
      }
      d10 ^= e10;
      return d10;
    }
    function ahZ(a10, b10) {
      switch (b10.t & 6) {
        default:
          bq(b10);
        case 0:
          a10 = hT(a10, b10.c);
          break;
        case 2:
          a10 = ah0(a10, b10.c);
      }
      return a10;
    }
    function ah1(a10) {
      a10 ^= a10 >>> 16;
      a10 = eE(a10, 2246822507 | 0);
      a10 ^= a10 >>> 13;
      a10 = eE(a10, 3266489909 | 0);
      a10 ^= a10 >>> 16;
      return a10;
    }
    function hR(j10, l10, n10, m10) {
      var f10, g10, h10, d10, c10, b10, a10, e10, i10;
      d10 = l10;
      if (d10 < 0 || d10 > b8)
        d10 = b8;
      c10 = j10;
      b10 = n10;
      f10 = [m10];
      g10 = 0;
      h10 = 1;
      while (g10 < h10 && c10 > 0) {
        a10 = f10[g10++];
        if (a10 && a10.caml_custom) {
          if (bH[a10.caml_custom] && bH[a10.caml_custom].hash) {
            var k10 = bH[a10.caml_custom].hash(a10);
            b10 = ao(b10, k10);
            c10--;
          }
        } else if (a10 instanceof Array && a10[0] === (a10[0] | 0))
          switch (a10[0]) {
            case 248:
              b10 = ao(b10, a10[2]);
              c10--;
              break;
            case 250:
              f10[--g10] = a10[1];
              break;
            default:
              var o10 = a10.length - 1 << 10 | a10[0];
              b10 = ao(b10, o10);
              for (e10 = 1, i10 = a10.length; e10 < i10; e10++) {
                if (h10 >= d10)
                  break;
                f10[h10++] = a10[e10];
              }
              break;
          }
        else if (bI(a10)) {
          b10 = ahZ(b10, a10);
          c10--;
        } else if (c8(a10)) {
          b10 = ah3(b10, a10);
          c10--;
        } else if (typeof a10 === "string") {
          b10 = hT(b10, a10);
          c10--;
        } else if (a10 === (a10 | 0)) {
          b10 = ao(b10, a10 + a10 + 1);
          c10--;
        } else if (a10 === +a10) {
          b10 = hS(b10, a10);
          c10--;
        }
      }
      b10 = ah1(b10);
      return b10 & 1073741823;
    }
    function ah4(a10, c10, l10) {
      if (!isFinite(a10)) {
        if (isNaN(a10))
          return av(gZ);
        return av(a10 > 0 ? qo : "-infinity");
      }
      var i10 = a10 == 0 && 1 / a10 == -Infinity ? 1 : a10 >= 0 ? 0 : 1;
      if (i10)
        a10 = -a10;
      var d10 = 0;
      if (a10 == 0)
        ;
      else if (a10 < 1)
        while (a10 < 1 && d10 > -1022) {
          a10 *= 2;
          d10--;
        }
      else
        while (a10 >= 2) {
          a10 /= 2;
          d10++;
        }
      var k10 = d10 < 0 ? j : cc, e10 = j;
      if (i10)
        e10 = bF;
      else
        switch (l10) {
          case 43:
            e10 = cc;
            break;
          case 32:
            e10 = a1;
            break;
          default:
            break;
        }
      if (c10 >= 0 && c10 < 13) {
        var g10 = Math.pow(2, c10 * 4);
        a10 = Math.round(a10 * g10) / g10;
      }
      var b10 = a10.toString(16);
      if (c10 >= 0) {
        var h10 = b10.indexOf(bl);
        if (h10 < 0)
          b10 += bl + co(c10, aD);
        else {
          var f10 = h10 + 1 + c10;
          if (b10.length < f10)
            b10 += co(f10 - b10.length, aD);
          else
            b10 = b10.substr(0, f10);
        }
      }
      return av(e10 + nm + b10 + en + k10 + d10.toString(10));
    }
    function qx(b10, a10) {
      this.s = aP(b10);
      this.i = a10;
    }
    qx.prototype = { read8u: function() {
      return this.s.charCodeAt(this.i++);
    }, read8s: function() {
      return this.s.charCodeAt(this.i++) << 24 >> 24;
    }, read16u: function() {
      var b10 = this.s, a10 = this.i;
      this.i = a10 + 2;
      return b10.charCodeAt(a10) << 8 | b10.charCodeAt(a10 + 1);
    }, read16s: function() {
      var b10 = this.s, a10 = this.i;
      this.i = a10 + 2;
      return b10.charCodeAt(a10) << 24 >> 16 | b10.charCodeAt(a10 + 1);
    }, read32u: function() {
      var b10 = this.s, a10 = this.i;
      this.i = a10 + 4;
      return (b10.charCodeAt(a10) << 24 | b10.charCodeAt(a10 + 1) << 16 | b10.charCodeAt(a10 + 2) << 8 | b10.charCodeAt(a10 + 3)) >>> 0;
    }, read32s: function() {
      var b10 = this.s, a10 = this.i;
      this.i = a10 + 4;
      return b10.charCodeAt(a10) << 24 | b10.charCodeAt(a10 + 1) << 16 | b10.charCodeAt(a10 + 2) << 8 | b10.charCodeAt(a10 + 3);
    }, readstr: function(c10) {
      var b10 = this.i;
      this.i = b10 + c10;
      return a(this.s.substring(b10, b10 + c10));
    } };
    function cj(a10) {
      return eD(ck(a10));
    }
    function ah6(b10, f10) {
      var n10 = b10.read32u(), m10 = b10.read32u(), i10 = b10.read32u(), o10 = b10.read32u(), p10 = b10.read32u(), l10 = [], c10 = i10 > 0 ? [] : null, h10 = 0;
      function e10() {
        var i11 = b10.read8u();
        if (i11 >= nD)
          if (i11 >= aC) {
            var p11 = i11 & 15, k11 = i11 >> 4 & 7, a11 = [p11];
            if (k11 == 0)
              return a11;
            if (c10)
              c10[h10++] = a11;
            l10.push(a11, k11);
            return a11;
          } else
            return i11 & lf;
        else if (i11 >= cW) {
          var e11 = i11 & 31, a11 = b10.readstr(e11);
          if (c10)
            c10[h10++] = a11;
          return a11;
        } else
          switch (i11) {
            case 0:
              return b10.read8s();
            case 1:
              return b10.read16s();
            case 2:
              return b10.read32s();
            case 3:
              D("input_value: integer too large");
              break;
            case 4:
              var m11 = b10.read8u();
              return c10[h10 - m11];
            case 5:
              var m11 = b10.read16u();
              return c10[h10 - m11];
            case 6:
              var m11 = b10.read32u();
              return c10[h10 - m11];
            case 8:
              var r10 = b10.read32u(), p11 = r10 & cU, k11 = r10 >> 10, a11 = [p11];
              if (k11 == 0)
                return a11;
              if (c10)
                c10[h10++] = a11;
              l10.push(a11, k11);
              return a11;
            case 19:
              D("input_value: data block too large");
              break;
            case 9:
              var e11 = b10.read8u(), a11 = b10.readstr(e11);
              if (c10)
                c10[h10++] = a11;
              return a11;
            case 10:
              var e11 = b10.read32u(), a11 = b10.readstr(e11);
              if (c10)
                c10[h10++] = a11;
              return a11;
            case 12:
              var f11 = new Array(8);
              for (var d11 = 0; d11 < 8; d11++)
                f11[7 - d11] = b10.read8u();
              var a11 = cj(f11);
              if (c10)
                c10[h10++] = a11;
              return a11;
            case 11:
              var f11 = new Array(8);
              for (var d11 = 0; d11 < 8; d11++)
                f11[d11] = b10.read8u();
              var a11 = cj(f11);
              if (c10)
                c10[h10++] = a11;
              return a11;
            case 14:
              var e11 = b10.read8u(), a11 = new Array(e11 + 1);
              a11[0] = bf;
              var f11 = new Array(8);
              if (c10)
                c10[h10++] = a11;
              for (var d11 = 1; d11 <= e11; d11++) {
                for (var g11 = 0; g11 < 8; g11++)
                  f11[7 - g11] = b10.read8u();
                a11[d11] = cj(f11);
              }
              return a11;
            case 13:
              var e11 = b10.read8u(), a11 = new Array(e11 + 1);
              a11[0] = bf;
              var f11 = new Array(8);
              if (c10)
                c10[h10++] = a11;
              for (var d11 = 1; d11 <= e11; d11++) {
                for (var g11 = 0; g11 < 8; g11++)
                  f11[g11] = b10.read8u();
                a11[d11] = cj(f11);
              }
              return a11;
            case 7:
              var e11 = b10.read32u(), a11 = new Array(e11 + 1);
              a11[0] = bf;
              if (c10)
                c10[h10++] = a11;
              var f11 = new Array(8);
              for (var d11 = 1; d11 <= e11; d11++) {
                for (var g11 = 0; g11 < 8; g11++)
                  f11[7 - g11] = b10.read8u();
                a11[d11] = cj(f11);
              }
              return a11;
            case 15:
              var e11 = b10.read32u(), a11 = new Array(e11 + 1);
              a11[0] = bf;
              var f11 = new Array(8);
              for (var d11 = 1; d11 <= e11; d11++) {
                for (var g11 = 0; g11 < 8; g11++)
                  f11[g11] = b10.read8u();
                a11[d11] = cj(f11);
              }
              return a11;
            case 16:
            case 17:
              D("input_value: code pointer");
              break;
            case 18:
            case 24:
            case 25:
              var q10, s10 = j;
              while ((q10 = b10.read8u()) != 0)
                s10 += String.fromCharCode(q10);
              var o11 = bH[s10], n11;
              if (!o11)
                D("input_value: unknown custom block identifier");
              switch (i11) {
                case 18:
                  break;
                case 25:
                  if (!o11.fixed_length)
                    D("input_value: expected a fixed-size custom block");
                  n11 = o11.fixed_length;
                  break;
                case 24:
                  n11 = b10.read32u();
                  b10.read32s();
                  b10.read32s();
                  break;
              }
              var t10 = b10.i, k11 = [0], a11 = o11.deserialize(b10, k11);
              if (n11 != void 0) {
                if (n11 != k11[0])
                  D("input_value: incorrect length of serialized custom block");
              }
              if (c10)
                c10[h10++] = a11;
              return a11;
            default:
              D("input_value: ill-formed message");
          }
      }
      var k10 = e10();
      while (l10.length > 0) {
        var g10 = l10.pop(), a10 = l10.pop(), d10 = a10.length;
        if (d10 < g10)
          l10.push(a10, g10);
        a10[d10] = e10();
      }
      if (typeof f10 != "number")
        f10[0] = b10.i;
      return k10;
    }
    function Y(a10) {
      return a10;
    }
    function ah5(c10, a10) {
      var b10 = new qx(Y(c10), typeof a10 == "number" ? a10 : a10[0]);
      return ah6(b10, a10);
    }
    function aic(a10) {
      return +a10.isZero();
    }
    function cl(a10) {
      return new m(a10 & a0, a10 >> 24 & a0, a10 >> 31 & aU);
    }
    function hY(a10) {
      return a10.toInt();
    }
    function aib(a10) {
      return +a10.isNeg();
    }
    function qN(a10) {
      return a10.neg();
    }
    function ah$(g10, c10) {
      var a10 = h3(g10);
      if (a10.signedconv && aib(c10)) {
        a10.sign = -1;
        c10 = qN(c10);
      }
      var b10 = j, h10 = cl(a10.base), f10 = "0123456789abcdef";
      do {
        var e10 = c10.udivmod(h10);
        c10 = e10.quotient;
        b10 = f10.charAt(hY(e10.modulus)) + b10;
      } while (!aic(c10));
      if (a10.prec >= 0) {
        a10.filler = a1;
        var d10 = a10.prec - b10.length;
        if (d10 > 0)
          b10 = co(d10, aD) + b10;
      }
      return hO(a10, b10);
    }
    function ah8(a10, b10) {
      return a10.add(b10);
    }
    function aie(a10, b10) {
      return a10.mul(b10);
    }
    function hZ(a10, b10) {
      return a10.ucompare(b10) < 0;
    }
    function qU(c10) {
      var a10 = 0, e10 = k(c10), b10 = 10, d10 = 1;
      if (e10 > 0)
        switch (ap(c10, a10)) {
          case 45:
            a10++;
            d10 = -1;
            break;
          case 43:
            a10++;
            d10 = 1;
            break;
        }
      if (a10 + 1 < e10 && ap(c10, a10) == 48)
        switch (ap(c10, a10 + 1)) {
          case 120:
          case 88:
            b10 = 16;
            a10 += 2;
            break;
          case 111:
          case 79:
            b10 = 8;
            a10 += 2;
            break;
          case 98:
          case 66:
            b10 = 2;
            a10 += 2;
            break;
          case 117:
          case 85:
            a10 += 2;
            break;
        }
      return [a10, d10, b10];
    }
    function eF(a10) {
      if (a10 >= 48 && a10 <= 57)
        return a10 - 48;
      if (a10 >= 65 && a10 <= 90)
        return a10 - 55;
      if (a10 >= 97 && a10 <= 122)
        return a10 - 87;
      return -1;
    }
    function aif(f10) {
      var g10 = qU(f10), e10 = g10[0], i10 = g10[1], c10 = g10[2], h10 = cl(c10), j10 = new m(a0, 268435455, aU).udivmod(h10).quotient, d10 = ap(f10, e10), a10 = eF(d10);
      if (a10 < 0 || a10 >= c10)
        D(be);
      var b10 = cl(a10);
      for (; ; ) {
        e10++;
        d10 = ap(f10, e10);
        if (d10 == 95)
          continue;
        a10 = eF(d10);
        if (a10 < 0 || a10 >= c10)
          break;
        if (hZ(j10, b10))
          D(be);
        a10 = cl(a10);
        b10 = ah8(aie(h10, b10), a10);
        if (hZ(b10, a10))
          D(be);
      }
      if (e10 != k(f10))
        D(be);
      if (c10 == 10 && hZ(new m(0, 0, aV), b10))
        D(be);
      if (i10 < 0)
        b10 = qN(b10);
      return b10;
    }
    function aig(a10) {
      return a10.toFloat();
    }
    function h0(f10) {
      var h10 = qU(f10), c10 = h10[0], i10 = h10[1], d10 = h10[2], g10 = k(f10), j10 = -1 >>> 0, e10 = c10 < g10 ? ap(f10, c10) : 0, b10 = eF(e10);
      if (b10 < 0 || b10 >= d10)
        D(be);
      var a10 = b10;
      for (c10++; c10 < g10; c10++) {
        e10 = ap(f10, c10);
        if (e10 == 95)
          continue;
        b10 = eF(e10);
        if (b10 < 0 || b10 >= d10)
          break;
        a10 = d10 * a10 + b10;
        if (a10 > j10)
          D(be);
      }
      if (c10 != g10)
        D(be);
      a10 = i10 * a10;
      if (d10 == 10 && (a10 | 0) != a10)
        D(be);
      return a10 | 0;
    }
    function aik() {
      var b10 = o.console ? o.console : {}, c10 = [pa, "debug", "info", "warn", lQ, "assert", hy, "dirxml", "trace", "group", "groupCollapsed", "groupEnd", "time", "timeEnd"];
      function d10() {
      }
      for (var a10 = 0; a10 < c10.length; a10++)
        if (!b10[c10[a10]])
          b10[c10[a10]] = d10;
      return b10;
    }
    function aij(a10) {
      return a10.slice(1);
    }
    function qQ(a10, c10, b10) {
      return a10[aH(c10)].apply(a10, aij(b10));
    }
    function qR(c10) {
      var d10 = c10.length, b10 = new Array(d10 + 1);
      b10[0] = 0;
      for (var a10 = 0; a10 < d10; a10++)
        b10[a10 + 1] = c10[a10];
      return b10;
    }
    function aim(a10, b10) {
      return +(ci(a10, b10, false) <= 0);
    }
    function ain(a10, b10) {
      return +(ci(a10, b10, false) < 0);
    }
    function aio(c10) {
      var b10 = 0;
      for (var a10 = c10.length - 1; a10 >= 0; a10--) {
        var d10 = c10[a10];
        b10 = [0, d10, b10];
      }
      return b10;
    }
    function cm(a10, d10) {
      if (a10 < 0)
        c3();
      var a10 = a10 + 1 | 0, b10 = new Array(a10);
      b10[0] = 0;
      for (var c10 = 1; c10 < a10; c10++)
        b10[c10] = d10;
      return b10;
    }
    function air(c10, b10) {
      function a10(b11, a11) {
        return aO(b11, a11) << 24 | aO(b11, a11 + 1) << 16 | aO(b11, a11 + 2) << 8 | aO(b11, a11 + 3);
      }
      if (a10(c10, b10) != (lR | 0))
        D("Marshal.data_size: bad object");
      return a10(c10, b10 + 4);
    }
    function aiI(b10) {
      return a(eH(b10, 0, b10.length));
    }
    var ais = function() {
      function l10(a11, b10) {
        return a11 + b10 | 0;
      }
      function a10(d10, a11, c10, f10, b10, e10) {
        a11 = l10(l10(a11, d10), l10(f10, e10));
        return l10(a11 << b10 | a11 >>> 32 - b10, c10);
      }
      function g10(c10, b10, d10, e10, h11, f10, g11) {
        return a10(b10 & d10 | ~b10 & e10, c10, b10, h11, f10, g11);
      }
      function h10(d10, b10, e10, c10, h11, f10, g11) {
        return a10(b10 & c10 | e10 & ~c10, d10, b10, h11, f10, g11);
      }
      function i10(c10, b10, d10, e10, h11, f10, g11) {
        return a10(b10 ^ d10 ^ e10, c10, b10, h11, f10, g11);
      }
      function j10(c10, b10, d10, e10, h11, f10, g11) {
        return a10(d10 ^ (b10 | ~e10), c10, b10, h11, f10, g11);
      }
      function k10(f10, n10) {
        var e10 = n10;
        f10[e10 >> 2] |= aC << 8 * (e10 & 3);
        for (e10 = (e10 & ~3) + 8; (e10 & lf) < 60; e10 += 4)
          f10[(e10 >> 2) - 1] = 0;
        f10[(e10 >> 2) - 1] = n10 << 3;
        f10[e10 >> 2] = n10 >> 29 & 536870911;
        var k11 = [1732584193, 4023233417, 2562383102, 271733878];
        for (e10 = 0; e10 < f10.length; e10 += 16) {
          var a11 = k11[0], b10 = k11[1], c10 = k11[2], d10 = k11[3];
          a11 = g10(a11, b10, c10, d10, f10[e10 + 0], 7, 3614090360);
          d10 = g10(d10, a11, b10, c10, f10[e10 + 1], 12, 3905402710);
          c10 = g10(c10, d10, a11, b10, f10[e10 + 2], 17, 606105819);
          b10 = g10(b10, c10, d10, a11, f10[e10 + 3], 22, 3250441966);
          a11 = g10(a11, b10, c10, d10, f10[e10 + 4], 7, 4118548399);
          d10 = g10(d10, a11, b10, c10, f10[e10 + 5], 12, 1200080426);
          c10 = g10(c10, d10, a11, b10, f10[e10 + 6], 17, 2821735955);
          b10 = g10(b10, c10, d10, a11, f10[e10 + 7], 22, 4249261313);
          a11 = g10(a11, b10, c10, d10, f10[e10 + 8], 7, 1770035416);
          d10 = g10(d10, a11, b10, c10, f10[e10 + 9], 12, 2336552879);
          c10 = g10(c10, d10, a11, b10, f10[e10 + 10], 17, 4294925233);
          b10 = g10(b10, c10, d10, a11, f10[e10 + 11], 22, 2304563134);
          a11 = g10(a11, b10, c10, d10, f10[e10 + 12], 7, 1804603682);
          d10 = g10(d10, a11, b10, c10, f10[e10 + 13], 12, 4254626195);
          c10 = g10(c10, d10, a11, b10, f10[e10 + 14], 17, 2792965006);
          b10 = g10(b10, c10, d10, a11, f10[e10 + 15], 22, 1236535329);
          a11 = h10(a11, b10, c10, d10, f10[e10 + 1], 5, 4129170786);
          d10 = h10(d10, a11, b10, c10, f10[e10 + 6], 9, 3225465664);
          c10 = h10(c10, d10, a11, b10, f10[e10 + 11], 14, 643717713);
          b10 = h10(b10, c10, d10, a11, f10[e10 + 0], 20, 3921069994);
          a11 = h10(a11, b10, c10, d10, f10[e10 + 5], 5, 3593408605);
          d10 = h10(d10, a11, b10, c10, f10[e10 + 10], 9, 38016083);
          c10 = h10(c10, d10, a11, b10, f10[e10 + 15], 14, 3634488961);
          b10 = h10(b10, c10, d10, a11, f10[e10 + 4], 20, 3889429448);
          a11 = h10(a11, b10, c10, d10, f10[e10 + 9], 5, 568446438);
          d10 = h10(d10, a11, b10, c10, f10[e10 + 14], 9, 3275163606);
          c10 = h10(c10, d10, a11, b10, f10[e10 + 3], 14, 4107603335);
          b10 = h10(b10, c10, d10, a11, f10[e10 + 8], 20, 1163531501);
          a11 = h10(a11, b10, c10, d10, f10[e10 + 13], 5, 2850285829);
          d10 = h10(d10, a11, b10, c10, f10[e10 + 2], 9, 4243563512);
          c10 = h10(c10, d10, a11, b10, f10[e10 + 7], 14, 1735328473);
          b10 = h10(b10, c10, d10, a11, f10[e10 + 12], 20, 2368359562);
          a11 = i10(a11, b10, c10, d10, f10[e10 + 5], 4, 4294588738);
          d10 = i10(d10, a11, b10, c10, f10[e10 + 8], 11, 2272392833);
          c10 = i10(c10, d10, a11, b10, f10[e10 + 11], 16, 1839030562);
          b10 = i10(b10, c10, d10, a11, f10[e10 + 14], 23, 4259657740);
          a11 = i10(a11, b10, c10, d10, f10[e10 + 1], 4, 2763975236);
          d10 = i10(d10, a11, b10, c10, f10[e10 + 4], 11, 1272893353);
          c10 = i10(c10, d10, a11, b10, f10[e10 + 7], 16, 4139469664);
          b10 = i10(b10, c10, d10, a11, f10[e10 + 10], 23, 3200236656);
          a11 = i10(a11, b10, c10, d10, f10[e10 + 13], 4, 681279174);
          d10 = i10(d10, a11, b10, c10, f10[e10 + 0], 11, 3936430074);
          c10 = i10(c10, d10, a11, b10, f10[e10 + 3], 16, 3572445317);
          b10 = i10(b10, c10, d10, a11, f10[e10 + 6], 23, 76029189);
          a11 = i10(a11, b10, c10, d10, f10[e10 + 9], 4, 3654602809);
          d10 = i10(d10, a11, b10, c10, f10[e10 + 12], 11, 3873151461);
          c10 = i10(c10, d10, a11, b10, f10[e10 + 15], 16, 530742520);
          b10 = i10(b10, c10, d10, a11, f10[e10 + 2], 23, 3299628645);
          a11 = j10(a11, b10, c10, d10, f10[e10 + 0], 6, 4096336452);
          d10 = j10(d10, a11, b10, c10, f10[e10 + 7], 10, 1126891415);
          c10 = j10(c10, d10, a11, b10, f10[e10 + 14], 15, 2878612391);
          b10 = j10(b10, c10, d10, a11, f10[e10 + 5], 21, 4237533241);
          a11 = j10(a11, b10, c10, d10, f10[e10 + 12], 6, 1700485571);
          d10 = j10(d10, a11, b10, c10, f10[e10 + 3], 10, 2399980690);
          c10 = j10(c10, d10, a11, b10, f10[e10 + 10], 15, 4293915773);
          b10 = j10(b10, c10, d10, a11, f10[e10 + 1], 21, 2240044497);
          a11 = j10(a11, b10, c10, d10, f10[e10 + 8], 6, 1873313359);
          d10 = j10(d10, a11, b10, c10, f10[e10 + 15], 10, 4264355552);
          c10 = j10(c10, d10, a11, b10, f10[e10 + 6], 15, 2734768916);
          b10 = j10(b10, c10, d10, a11, f10[e10 + 13], 21, 1309151649);
          a11 = j10(a11, b10, c10, d10, f10[e10 + 4], 6, 4149444226);
          d10 = j10(d10, a11, b10, c10, f10[e10 + 11], 10, 3174756917);
          c10 = j10(c10, d10, a11, b10, f10[e10 + 2], 15, 718787259);
          b10 = j10(b10, c10, d10, a11, f10[e10 + 9], 21, 3951481745);
          k11[0] = l10(a11, k11[0]);
          k11[1] = l10(b10, k11[1]);
          k11[2] = l10(c10, k11[2]);
          k11[3] = l10(d10, k11[3]);
        }
        var o10 = new Array(16);
        for (var e10 = 0; e10 < 4; e10++)
          for (var m10 = 0; m10 < 4; m10++)
            o10[e10 * 4 + m10] = k11[e10] >> 8 * m10 & cU;
        return o10;
      }
      return function(h11, g11, f10) {
        var e10 = [];
        switch (h11.t & 6) {
          default:
            bq(h11);
          case 0:
            var d10 = h11.c;
            for (var a11 = 0; a11 < f10; a11 += 4) {
              var b10 = a11 + g11;
              e10[a11 >> 2] = d10.charCodeAt(b10) | d10.charCodeAt(b10 + 1) << 8 | d10.charCodeAt(b10 + 2) << 16 | d10.charCodeAt(b10 + 3) << 24;
            }
            for (; a11 < f10; a11++)
              e10[a11 >> 2] |= d10.charCodeAt(a11 + g11) << 8 * (a11 & 3);
            break;
          case 4:
            var c10 = h11.c;
            for (var a11 = 0; a11 < f10; a11 += 4) {
              var b10 = a11 + g11;
              e10[a11 >> 2] = c10[b10] | c10[b10 + 1] << 8 | c10[b10 + 2] << 16 | c10[b10 + 3] << 24;
            }
            for (; a11 < f10; a11++)
              e10[a11 >> 2] |= c10[a11 + g11] << 8 * (a11 & 3);
        }
        return aiI(k10(e10, f10));
      };
    }();
    function ait(c10, b10, a10) {
      return ais(aN(c10), b10, a10);
    }
    function aiu() {
      return 0;
    }
    var a4 = new Array();
    function br(c10) {
      var a10 = a4[c10];
      if (!a10.opened)
        A("Cannot flush a closed channel");
      if (!a10.buffer || a10.buffer == j)
        return 0;
      if (a10.fd && N.fds[a10.fd] && N.fds[a10.fd].output) {
        var b10 = N.fds[a10.fd].output;
        switch (b10.length) {
          case 2:
            b10(c10, a10.buffer);
            break;
          default:
            b10(a10.buffer);
        }
      }
      a10.buffer = j;
      return 0;
    }
    function qY(e10, f10) {
      var b10 = a4[e10], d10 = a(f10), c10 = k(d10);
      b10.file.write(b10.offset, d10, 0, c10);
      b10.offset += c10;
      return 0;
    }
    function aiO(a10) {
      var a10 = h7(a10), b10 = o;
      if (b10.process && b10.process.stdout && b10.process.stdout.write)
        b10.process.stderr.write(a10);
      else {
        if (a10.charCodeAt(a10.length - 1) == 10)
          a10 = a10.substr(0, a10.length - 1);
        var c10 = b10.console;
        c10 && c10.error && c10.error(a10);
      }
    }
    function aiP(a10) {
      var a10 = h7(a10), b10 = o;
      if (b10.process && b10.process.stdout && b10.process.stdout.write)
        b10.process.stdout.write(a10);
      else {
        if (a10.charCodeAt(a10.length - 1) == 10)
          a10 = a10.substr(0, a10.length - 1);
        var c10 = b10.console;
        c10 && c10.log && c10.log(a10);
      }
    }
    function eI(c10, e10, d10, a10) {
      if (N.fds === void 0)
        N.fds = new Array();
      a10 = a10 ? a10 : {};
      var b10 = {};
      b10.file = d10;
      b10.offset = a10.append ? d10.length() : 0;
      b10.flags = a10;
      b10.output = e10;
      N.fds[c10] = b10;
      if (!N.fd_last_idx || c10 > N.fd_last_idx)
        N.fd_last_idx = c10;
      return c10;
    }
    function aiU(c10, b10, g10) {
      var a10 = {};
      while (b10) {
        switch (b10[1]) {
          case 0:
            a10.rdonly = 1;
            break;
          case 1:
            a10.wronly = 1;
            break;
          case 2:
            a10.append = 1;
            break;
          case 3:
            a10.create = 1;
            break;
          case 4:
            a10.truncate = 1;
            break;
          case 5:
            a10.excl = 1;
            break;
          case 6:
            a10.binary = 1;
            break;
          case 7:
            a10.text = 1;
            break;
          case 8:
            a10.nonblock = 1;
            break;
        }
        b10 = b10[2];
      }
      if (a10.rdonly && a10.wronly)
        A(aP(c10) + nG);
      if (a10.text && a10.binary)
        A(aP(c10) + pz);
      var d10 = q3(c10), e10 = d10.device.open(d10.rest, a10), f10 = N.fd_last_idx ? N.fd_last_idx : 0;
      return eI(f10 + 1, qY, e10, a10);
    }
    eI(0, qY, new ae(U(0)));
    eI(1, aiP, new ae(U(0)));
    eI(2, aiO, new ae(U(0)));
    function aiv(a10) {
      var c10 = N.fds[a10];
      if (c10.flags.wronly)
        A(k9 + a10 + " is writeonly");
      var d10 = null;
      if (a10 == 0 && c_()) {
        var e10 = require_fs();
        d10 = function() {
          return av(e10.readFileSync(0, kA));
        };
      }
      var b10 = { file: c10.file, offset: c10.offset, fd: a10, opened: true, out: false, refill: d10 };
      a4[b10.fd] = b10;
      return b10.fd;
    }
    function qS(c10) {
      var b10 = N.fds[c10];
      if (b10.flags.rdonly)
        A(k9 + c10 + " is readonly");
      var a10 = { file: b10.file, offset: b10.offset, fd: c10, opened: true, out: true, buffer: j };
      a4[a10.fd] = a10;
      return a10.fd;
    }
    function aiw() {
      var b10 = 0;
      for (var a10 = 0; a10 < a4.length; a10++)
        if (a4[a10] && a4[a10].opened && a4[a10].out)
          b10 = [0, a4[a10].fd, b10];
      return b10;
    }
    function aix(g10, d10, h10, f10) {
      var b10 = a4[g10];
      if (!b10.opened)
        A("Cannot output to a closed channel");
      var a10;
      if (h10 == 0 && aj(d10) == f10)
        a10 = d10;
      else {
        a10 = U(f10);
        bn(d10, h10, a10, 0, f10);
      }
      var i10 = Y(a10), c10 = aP(i10), e10 = c10.lastIndexOf(ns);
      if (e10 < 0)
        b10.buffer += c10;
      else {
        b10.buffer += c10.substr(0, e10 + 1);
        br(g10);
        b10.buffer += c10.substr(e10 + 1);
      }
      return 0;
    }
    function h1(b10, a10, d10, c10) {
      return aix(b10, aN(a10), d10, c10);
    }
    function h2(c10, b10) {
      var d10 = a(String.fromCharCode(b10));
      h1(c10, d10, 0, 1);
      return 0;
    }
    function aiy(b10, a10) {
      if (a10 == 0)
        h5();
      return b10 % a10;
    }
    function cn(a10, b10) {
      return +(ci(a10, b10, false) != 0);
    }
    function aiA(a10, b10) {
      a10[0] = cJ;
      a10[1] = b10;
      return 0;
    }
    function c9(a10) {
      if (a10 instanceof Array && a10[0] == a10[0] >>> 0)
        return a10[0];
      else if (bI(a10))
        return cL;
      else if (c8(a10))
        return cL;
      else if (a10 instanceof Function || typeof a10 == "function")
        return hu;
      else if (a10 && a10.caml_custom)
        return em;
      else
        return cZ;
    }
    var c2;
    if (typeof o.WeakMap === "undefined")
      c2 = function() {
        function a10(a11) {
          this.objs = a11;
        }
        a10.prototype.get = function(b10) {
          for (var a11 = 0; a11 < this.objs.length; a11++)
            if (this.objs[a11] === b10)
              return a11;
        };
        a10.prototype.set = function() {
        };
        return function() {
          this.objs = [];
          this.lookup = new a10(this.objs);
        };
      }();
    else
      c2 = function() {
        this.objs = [];
        this.lookup = new o.WeakMap();
      };
    c2.prototype.store = function(a10) {
      this.lookup.set(a10, this.objs.length);
      this.objs.push(a10);
    };
    c2.prototype.recall = function(b10) {
      var a10 = this.lookup.get(b10);
      return a10 === void 0 ? void 0 : this.objs.length - a10;
    };
    function aip(a10) {
      var b10 = [];
      for (; a10 !== 0; a10 = a10[2])
        b10.push(a10[1]);
      return b10;
    }
    var ail = false, aiC = function() {
      function l10() {
        this.chunk = [];
      }
      l10.prototype = { chunk_idx: 20, block_len: 0, obj_counter: 0, size_32: 0, size_64: 0, write: function(b10, c10) {
        for (var a10 = b10 - 8; a10 >= 0; a10 -= 8)
          this.chunk[this.chunk_idx++] = c10 >> a10 & cU;
      }, write_at: function(b10, c10, d10) {
        var b10 = b10;
        for (var a10 = c10 - 8; a10 >= 0; a10 -= 8)
          this.chunk[b10++] = d10 >> a10 & cU;
      }, write_code: function(c10, b10, d10) {
        this.chunk[this.chunk_idx++] = b10;
        for (var a10 = c10 - 8; a10 >= 0; a10 -= 8)
          this.chunk[this.chunk_idx++] = d10 >> a10 & cU;
      }, write_shared: function(a10) {
        if (a10 < 1 << 8)
          this.write_code(8, 4, a10);
        else if (a10 < 1 << 16)
          this.write_code(16, 5, a10);
        else
          this.write_code(32, 6, a10);
      }, pos: function() {
        return this.chunk_idx;
      }, finalize: function() {
        this.block_len = this.chunk_idx - 20;
        this.chunk_idx = 0;
        this.write(32, lR);
        this.write(32, this.block_len);
        this.write(32, this.obj_counter);
        this.write(32, this.size_32);
        this.write(32, this.size_64);
        return this.chunk;
      } };
      return function(c10, d10) {
        d10 = aip(d10);
        var h10 = d10.indexOf(0) !== -1, n10 = d10.indexOf(1) !== -1;
        if (n10)
          o.console.warn("in caml_output_val: flag Marshal.Closures is not supported.");
        var b10 = new l10(), i10 = [], e10 = h10 ? null : new c2();
        function m10(c11) {
          if (h10)
            return false;
          var a10 = e10.recall(c11);
          if (a10) {
            b10.write_shared(a10);
            return true;
          } else {
            e10.store(c11);
            return false;
          }
        }
        function g10(c11) {
          if (c11.caml_custom) {
            if (m10(c11))
              return;
            var f11 = c11.caml_custom, h11 = bH[f11], g11 = [0, 0];
            if (!h11.serialize)
              V("output_value: abstract value (Custom)");
            if (ail) {
              b10.write(8, 18);
              for (var d11 = 0; d11 < f11.length; d11++)
                b10.write(8, f11.charCodeAt(d11));
              b10.write(8, 0);
              h11.serialize(b10, c11, g11);
            } else if (h11.fixed_length == void 0) {
              b10.write(8, 24);
              for (var d11 = 0; d11 < f11.length; d11++)
                b10.write(8, f11.charCodeAt(d11));
              b10.write(8, 0);
              var l11 = b10.pos();
              for (var d11 = 0; d11 < 12; d11++)
                b10.write(8, 0);
              h11.serialize(b10, c11, g11);
              b10.write_at(l11, 32, g11[0]);
              b10.write_at(l11 + 4, 32, 0);
              b10.write_at(l11 + 8, 32, g11[1]);
            } else {
              b10.write(8, 25);
              for (var d11 = 0; d11 < f11.length; d11++)
                b10.write(8, f11.charCodeAt(d11));
              b10.write(8, 0);
              var n11 = b10.pos();
              h11.serialize(b10, c11, g11);
              if (h11.fixed_length != b10.pos() - n11)
                D("output_value: incorrect fixed sizes specified by " + f11);
            }
            b10.size_32 += 2 + (g11[0] + 3 >> 2);
            b10.size_64 += 2 + (g11[1] + 7 >> 3);
          } else if (c11 instanceof Array && c11[0] === (c11[0] | 0)) {
            if (c11[0] == pQ)
              D("output_value: abstract value (Abstract)");
            if (c11.length > 1 && m10(c11))
              return;
            if (c11[0] < 16 && c11.length - 1 < 8)
              b10.write(8, aC + c11[0] + (c11.length - 1 << 4));
            else
              b10.write_code(32, 8, c11.length - 1 << 10 | c11[0]);
            b10.size_32 += c11.length;
            b10.size_64 += c11.length;
            if (c11.length > 1)
              i10.push(c11, 1);
          } else if (bI(c11)) {
            if (!bI(a(j)))
              D("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
            if (m10(c11))
              return;
            var e11 = aj(c11);
            if (e11 < cW)
              b10.write(8, cW + e11);
            else if (e11 < ol)
              b10.write_code(8, nS, e11);
            else
              b10.write_code(32, oK, e11);
            for (var d11 = 0; d11 < e11; d11++)
              b10.write(8, aO(c11, d11));
            b10.size_32 += 1 + ((e11 + 4) / 4 | 0);
            b10.size_64 += 1 + ((e11 + 8) / 8 | 0);
          } else if (c8(c11)) {
            var e11 = k(c11);
            if (e11 < cW)
              b10.write(8, cW + e11);
            else if (e11 < ol)
              b10.write_code(8, nS, e11);
            else
              b10.write_code(32, oK, e11);
            for (var d11 = 0; d11 < e11; d11++)
              b10.write(8, ap(c11, d11));
            b10.size_32 += 1 + ((e11 + 4) / 4 | 0);
            b10.size_64 += 1 + ((e11 + 8) / 8 | 0);
          } else if (c11 != (c11 | 0)) {
            var o10 = typeof c11;
            D("output_value: abstract value (" + o10 + ox);
          } else if (c11 >= 0 && c11 < nD)
            b10.write(8, 64 + c11);
          else if (c11 >= -(1 << 7) && c11 < 1 << 7)
            b10.write_code(8, 0, c11);
          else if (c11 >= -(1 << 15) && c11 < 1 << 15)
            b10.write_code(16, 1, c11);
          else
            b10.write_code(32, 2, c11);
        }
        g10(c10);
        while (i10.length > 0) {
          var f10 = i10.pop(), c10 = i10.pop();
          if (f10 + 1 < c10.length)
            i10.push(c10, f10 + 1);
          g10(c10[f10]);
        }
        if (e10)
          b10.obj_counter = e10.objs.length;
        b10.finalize();
        return b10.chunk;
      };
    }();
    function aiD(b10, a10) {
      return qH(aiC(b10, a10));
    }
    function aQ(b10, c10, a10) {
      if (a10 && o.toplevelReloc)
        b10 = o.toplevelReloc(a10);
      N[b10 + 1] = c10;
      if (a10)
        N[a10] = c10;
    }
    function h6(a10, b10) {
      qT[aP(a10)] = b10;
      return 0;
    }
    function ahN(a10, b10) {
      if (a10 === b10)
        return 1;
      a10.t & 6 && bq(a10);
      b10.t & 6 && bq(b10);
      return a10.c == b10.c ? 1 : 0;
    }
    function a5(a10, b10) {
      return ahN(a10, b10);
    }
    function aiH() {
      V(hn);
    }
    function u(b10, a10) {
      if (a10 >>> 0 >= k(b10))
        aiH();
      return ap(b10, a10);
    }
    function c(a10, b10) {
      return 1 - a5(a10, b10);
    }
    function aiJ() {
      return 2147483647 / 4 | 0;
    }
    function aiK(a10) {
      return 0;
    }
    function aiL(b10) {
      var a10 = o;
      if (a10.quit)
        a10.quit(b10);
      if (a10.process && a10.process.exit)
        a10.process.exit(b10);
      V("Function 'exit' not implemented");
    }
    function aiF() {
      qV(N.Not_found);
    }
    function qZ(c10) {
      var a10 = o, b10 = aH(c10);
      if (a10.process && a10.process.env && a10.process.env[b10] != void 0)
        return av(a10.process.env[b10]);
      if (o.jsoo_static_env && o.jsoo_static_env[b10])
        return av(o.jsoo_static_env[b10]);
      aiF();
    }
    function aiM() {
      var a10 = new Date().getTime(), b10 = a10 ^ 4294967295 * Math.random();
      return [0, b10];
    }
    function bs(a10) {
      var b10 = 1;
      while (a10 && a10.joo_tramp) {
        a10 = a10.joo_tramp.apply(null, a10.joo_args);
        b10++;
      }
      return a10;
    }
    function w(b10, a10) {
      return { joo_tramp: b10, joo_args: a10 };
    }
    function qX(a10) {
      return a10;
    }
    function p(a10) {
      if (a10 instanceof Array)
        return a10;
      if (o.RangeError && a10 instanceof o.RangeError && a10.message && a10.message.match(/maximum call stack/i))
        return qX(N.Stack_overflow);
      if (o.InternalError && a10 instanceof o.InternalError && a10.message && a10.message.match(/too much recursion/i))
        return qX(N.Stack_overflow);
      if (a10 instanceof o.Error && bJ(eu))
        return [0, bJ(eu), a10];
      return [0, N.Failure, av(String(a10))];
    }
    function aii(a10) {
      switch (a10[2]) {
        case -8:
        case -11:
        case -12:
          return 1;
        default:
          return 0;
      }
    }
    function ahV(b10) {
      var a10 = j;
      if (b10[0] == 0) {
        a10 += b10[1][1];
        if (b10.length == 3 && b10[2][0] == 0 && aii(b10[1]))
          var e10 = b10[2], f10 = 1;
        else
          var f10 = 2, e10 = b10;
        a10 += "(";
        for (var d10 = f10; d10 < e10.length; d10++) {
          if (d10 > f10)
            a10 += oi;
          var c10 = e10[d10];
          if (typeof c10 == "number")
            a10 += c10.toString();
          else if (c10 instanceof a2)
            a10 += dY + c10.toString() + dY;
          else if (typeof c10 == "string")
            a10 += dY + c10.toString() + dY;
          else
            a10 += qa;
        }
        a10 += ox;
      } else if (b10[0] == y)
        a10 += b10[1];
      return a10;
    }
    function qL(a10) {
      if (a10 instanceof Array && (a10[0] == 0 || a10[0] == y)) {
        var c10 = bJ(mL);
        if (c10)
          c10(a10, false);
        else {
          var d10 = ahV(a10), b10 = bJ(kz);
          if (b10)
            b10(0);
          o.console.error(eb + d10 + ns);
        }
      } else
        throw a10;
    }
    function aiG() {
      var a10 = o;
      if (a10.process && a10.process.on)
        a10.process.on("uncaughtException", function(b10, c10) {
          qL(b10);
          a10.process.exit(2);
        });
      else if (a10.addEventListener)
        a10.addEventListener(lQ, function(a11) {
          if (a11.error)
            qL(a11.error);
        });
    }
    aiG();
    function d(a10, b10) {
      return a10.length == 1 ? a10(b10) : bo(a10, [b10]);
    }
    function f(a10, b10, c10) {
      return a10.length == 2 ? a10(b10, c10) : bo(a10, [b10, c10]);
    }
    function _(a10, b10, c10, d10) {
      return a10.length == 3 ? a10(b10, c10, d10) : bo(a10, [b10, c10, d10]);
    }
    function dP(a10, b10, c10, d10, e10, f10) {
      return a10.length == 5 ? a10(b10, c10, d10, e10, f10) : bo(a10, [b10, c10, d10, e10, f10]);
    }
    function ahH(a10, b10, c10, d10, e10, f10, g10, h10) {
      return a10.length == 7 ? a10(b10, c10, d10, e10, f10, g10, h10) : bo(a10, [b10, c10, d10, e10, f10, g10, h10]);
    }
    ahW();
    var eK = [y, a(mw), -1], ia = [y, a(pV), -2], c$ = [y, a(ou), -3], h9 = [y, a(lt), -4], Q = [y, a(m3), -7], h_ = [y, a(nA), -8], h$ = [y, a(lB), -9], B = [y, a(ql), -11], ib = [y, a(mC), -12], ahG = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]], e3 = [0, [11, a('File "'), [2, 0, [11, a('", line '), [4, 0, 0, 0, [11, a(lm), [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, a(": "), [2, 0, 0]]]]]]]]]], a('File "%s", line %d, characters %d-%d: %s')], jq = [0, a("Toplevel"), 0, [0, a("Functions for manipulating the toplevel worker thread"), 0], [0, 1, 0, 0]], jA = a("wakeup_later"), dJ = [0, 0, 0], b3 = [2, a(bE)];
    aQ(11, ib, mC);
    aQ(10, B, ql);
    aQ(9, [y, a(l$), -10], l$);
    aQ(8, h$, lB);
    aQ(7, h_, nA);
    aQ(6, Q, m3);
    aQ(5, [y, a(nY), -6], nY);
    aQ(4, [y, a(ov), -5], ov);
    aQ(3, h9, lt);
    aQ(2, c$, ou);
    aQ(1, ia, pV);
    aQ(0, eK, mw);
    var ra = a("output_substring"), q9 = a("%.12g"), q8 = a(bl), q6 = a("true"), q7 = a("false"), rc = a("option is None"), rf = a("\\\\"), rg = a("\\'"), rh = a("\\b"), ri = a("\\t"), rj = a("\\n"), rk = a("\\r"), re = a("Char.chr"), rm = a(" is not an Unicode scalar value"), rn = a(m7), rr = a("List.combine"), rq = a("List.init"), rp = a("tl"), ro = a("hd"), rv = a("String.blit / Bytes.blit_string"), ru = a("Bytes.blit"), rt = a("String.sub / Bytes.sub"), rB = a("String.contains_from / Bytes.contains_from"), ry = a(j), rx = a(j), rw = a("String.concat"), rD = a(n5), rE = a(n5), rJ = a("Set.remove_min_elt"), rK = [0, 0, 0, 0], rL = [0, 0, 0], rM = [0, a("set.ml"), 570, 18], rF = a(d9), rG = a(d9), rH = a(d9), rI = a(d9), rS = a("Map.remove_min_elt"), rT = [0, 0, 0, 0], rU = [0, a("map.ml"), 400, 10], rV = [0, 0, 0], rO = a(dV), rP = a(dV), rQ = a(dV), rR = a(dV), rX = a("Stdlib.Queue.Empty"), rZ = a("CamlinternalLazy.Undefined"), r7 = a("Buffer.add_substring/add_subbytes"), r6 = a("Buffer.add: cannot grow buffer"), r5 = [0, a(oR), 93, 2], r4 = [0, a(oR), 94, 2], r3 = a("Buffer.sub"), se = a("%c"), sf = a("%s"), sg = a(oc), sh = a(pg), si = a(ls), sj = a(pS), sk = a("%f"), sl = a("%B"), sm = a("%{"), sn = a("%}"), so = a("%("), sp = a("%)"), sq = a("%a"), sr = a("%t"), ss = a("%?"), st = a("%r"), su = a("%_r"), sv = [0, a($), 850, 23], sG = [0, a($), 814, 21], sy = [0, a($), 815, 21], sH = [0, a($), 818, 21], sz = [0, a($), k0, 21], sI = [0, a($), 822, 19], sA = [0, a($), 823, 19], sJ = [0, a($), 826, 22], sB = [0, a($), 827, 22], sK = [0, a($), 831, 30], sC = [0, a($), 832, 30], sE = [0, a($), 836, 26], sw = [0, a($), 837, 26], sF = [0, a($), 846, 28], sx = [0, a($), 847, 28], sD = [0, a($), 851, 23], tN = a(kQ), tL = [0, a($), 1558, 4], tM = a("Printf: bad conversion %["), tO = [0, a($), 1626, 39], tP = [0, a($), 1649, 31], tQ = [0, a($), 1650, 31], tR = a("Printf: bad conversion %_"), tS = a(nI), tT = a(kR), tU = a(nI), tV = a(kR), tZ = [0, [11, a("invalid box description "), [3, 0, 0]], a("invalid box description %S")], tX = a(j), tY = [0, 0, 4], t0 = a(j), t1 = a("b"), t2 = a("h"), t3 = a("hov"), t4 = a("hv"), t5 = a("v"), tJ = a(gZ), tH = a("neg_infinity"), tI = a(qo), tG = a(bl), tB = [0, pT], tp = a("%+nd"), tq = a("% nd"), ts = a("%+ni"), tt = a("% ni"), tu = a("%nx"), tv = a("%#nx"), tw = a("%nX"), tx = a("%#nX"), ty = a("%no"), tz = a("%#no"), to = a("%nd"), tr = a(ls), tA = a("%nu"), tc = a("%+ld"), td = a("% ld"), tf = a("%+li"), tg = a("% li"), th = a("%lx"), ti = a("%#lx"), tj = a("%lX"), tk = a("%#lX"), tl = a("%lo"), tm = a("%#lo"), tb = a("%ld"), te = a(pg), tn = a("%lu"), s1 = a("%+Ld"), s2 = a("% Ld"), s4 = a("%+Li"), s5 = a("% Li"), s6 = a("%Lx"), s7 = a("%#Lx"), s8 = a("%LX"), s9 = a("%#LX"), s_ = a("%Lo"), s$ = a("%#Lo"), s0 = a("%Ld"), s3 = a(pS), ta = a("%Lu"), sO = a("%+d"), sP = a("% d"), sR = a("%+i"), sS = a("% i"), sT = a("%x"), sU = a("%#x"), sV = a(m7), sW = a("%#X"), sX = a("%o"), sY = a("%#o"), sN = a(gE), sQ = a(oc), sZ = a(kQ), r8 = a("@]"), r9 = a("@}"), r_ = a("@?"), r$ = a("@\n"), sa = a("@."), sb = a("@@"), sc = a("@%"), sd = a("@"), sL = a("CamlinternalFormat.Type_mismatch"), t9 = a(j), t_ = [0, [11, a(oi), [2, 0, [2, 0, 0]]], a(", %s%s")], ux = [0, [11, a(eb), [2, 0, [12, 10, 0]]], a(m9)], uy = [0, [11, a("Fatal error in uncaught exception handler: exception "), [2, 0, [12, 10, 0]]], a("Fatal error in uncaught exception handler: exception %s\n")], uw = a("Fatal error: out of memory in uncaught exception handler"), uu = [0, [11, a(eb), [2, 0, [12, 10, 0]]], a(m9)], uq = [0, [2, 0, [12, 10, 0]], a("%s\n")], ui = a("Raised at"), uj = a("Re-raised at"), uk = a("Raised by primitive operation at"), ul = a("Called from"), um = a(" (inlined)"), uo = a(j), un = [0, [2, 0, [12, 32, [2, 0, [11, a(' in file "'), [2, 0, [12, 34, [2, 0, [11, a(", line "), [4, 0, 0, 0, [11, a(lm), ahG]]]]]]]]]], a('%s %s in file "%s"%s, line %d, characters %d-%d')], up = [0, [2, 0, [11, a(" unknown location"), 0]], a("%s unknown location")], ud = a("Out of memory"), ue = a("Stack overflow"), uf = a("Pattern matching failed"), ug = a("Assertion failed"), uh = a("Undefined recursive module"), t$ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], a("(%s%s)")], ua = a(j), ub = a(j), uc = [0, [12, 40, [2, 0, [12, 41, 0]]], a("(%s)")], t8 = [0, [4, 0, 0, 0, 0], a(gE)], t6 = [0, [3, 0, 0], a("%S")], t7 = a(qa), ur = [0, a(j), a("(Cannot print locations:\n bytecode executable program file not found)"), a("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"), a("(Cannot print locations:\n bytecode executable program file has wrong magic number)"), a("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")], uB = a("Fun.Finally_raised: "), uz = a("Stdlib.Fun.Finally_raised"), uC = a("x"), uG = a("Hashtbl: unsupported hash table format"), ahE = a("OCAMLRUNPARAM"), ahC = a("CAMLRUNPARAM"), uD = a(j), u5 = [3, 0, 3], u6 = a(bl), u0 = a(ga), u1 = a("</"), u2 = a(j), uW = a(ga), uX = a("<"), uY = a(j), uU = a(bE), uQ = a(j), uR = a(j), uS = a(j), uT = a(j), uP = [0, a(j)], uL = a(j), uM = a(j), uN = a(j), uO = a(j), uK = [0, a(j), 0, a(j)], uJ = a(j), uI = a("Stdlib.Format.String_tag"), va = a("Js_of_ocaml__Js.Error"), vb = a(eu), vn = [0, [2, 0, [12, 58, [2, 0, 0]]], a("%s:%s")], ve = a("N"), vf = [0, [11, a("I("), [7, 3, 0, 0, [12, 41, 0]]], a("I(%Li)")], vg = [0, [11, a("I32("), [5, 3, 0, 0, [12, 41, 0]]], a("I32(%li)")], vh = [0, [11, a("B("), [9, 0, [12, 41, 0]]], a("B(%b)")], vi = [0, [11, a("F("), [8, [0, 0, 3], 0, 0, [12, 41, 0]]], a("F(%g)")], vj = [0, [11, a("S("), [2, 0, [12, 41, 0]]], a("S(%s)")], vk = [0, [11, a("D("), [2, 0, [12, 41, 0]]], a("D(%s)")], vl = a(nv), vm = [0, [12, 91, [2, 0, [12, 93, 0]]], a("[%s]")], vo = a(nv), vp = [0, [12, aW, [2, 0, [12, bD, 0]]], a("{%s}")], vq = [0, [11, a("B64("), [2, 0, [12, 41, 0]]], a("B64(%s)")], vG = [0, [11, a("Expected unit, got '"), [2, 0, [12, 39, 0]]], a("Expected unit, got '%s'")], vF = a("Base64 Unhandled"), vE = [0, [11, a("Expected DateTime, got '"), [2, 0, [12, 39, 0]]], a("Expected DateTime, got '%s'")], vD = [0, [11, a("Expected string, got '"), [2, 0, [12, 39, 0]]], a("Expected string, got '%s'")], vC = [0, [11, a("Expected float, got string '"), [2, 0, [12, 39, 0]]], a("Expected float, got string '%s'")], vB = [0, [11, a("Expected float, got '"), [2, 0, [12, 39, 0]]], a("Expected float, got '%s'")], vz = [0, [11, a("Expected bool, got '"), [2, 0, [12, 39, 0]]], a("Expected bool, got '%s'")], vy = [0, [11, a("Expected int, got string '"), [2, 0, [12, 39, 0]]], a("Expected int, got string '%s'")], vx = [0, [11, a("Expected int, got '"), [2, 0, [12, 39, 0]]], a("Expected int, got '%s'")], vw = [0, [11, a("Expected int32, got string '"), [2, 0, [12, 39, 0]]], a("Expected int32, got string '%s'")], vv = [0, [11, a("Expected int32, got '"), [2, 0, [12, 39, 0]]], a("Expected int32, got '%s'")], vt = [0, [11, a("Expected int64, got string '"), [2, 0, [12, 39, 0]]], a("Expected int64, got string '%s'")], vs = [0, [11, a("Expected int64, got '"), [2, 0, [12, 39, 0]]], a("Expected int64, got '%s'")], vc = [0, a("string"), [0, a("String"), 0], [0, 5]], vd = [0, a("unit"), [0, a("Unit"), 0], 2], vW = [0, [11, a("No value found for key: '"), [2, 0, [11, a("' when unmarshalling '"), [2, 0, [12, 39, 0]]]]], a("No value found for key: '%s' when unmarshalling '%s'")], vI = [0, [11, a("Failed to unmarshal array: "), [2, 0, [11, a(" (when unmarshalling: "), [2, 0, [12, 41, 0]]]]], a("Failed to unmarshal array: %s (when unmarshalling: %s)")], vH = [0, 0], vJ = [1, [0, S, a("Expecting Array")]], vL = [1, [0, S, a(pW)]], vK = [1, [0, S, a("Expecting array")]], vN = [1, [0, S, a("Expecting something other than a Dict type")]], vM = [1, [0, S, a(pW)]], vO = [0, [11, a("Expecting an Enum value, got '"), [2, 0, [12, 39, 0]]], a("Expecting an Enum value, got '%s'")], vQ = [1, [0, S, a("Too many items in a tuple!")]], vP = [1, [0, S, a("Expecting Rpc.Enum when unmarshalling a tuple")]], vS = [1, [0, S, a("Expecting precisely 3 items when unmarshalling a Tuple3")]], vR = [1, [0, S, a("Expecting Rpc.Enum when unmarshalling a tuple3")]], vU = [1, [0, S, a("Expecting precisely 4 items in an Enum when unmarshalling a Tuple4")]], vT = [1, [0, S, a("Expecting Rpc.Enum when unmarshalling a tuple4")]], vV = [0, [11, a("Expecting Rpc.Dict when unmarshalling a '"), [2, 0, [12, 39, 0]]], a("Expecting Rpc.Dict when unmarshalling a '%s'")], vX = [1, [0, S, a("Expecting String or Enum when unmarshalling a variant")]], vY = a("Marshalling a tuple should always give an Enum"), wg = a("method: "), wh = [0, [11, a("Unknown method: "), [2, 0, [12, 32, [4, 0, 0, 0, 0]]]], a("Unknown method: %s %d")], wf = [0, 0, 0], v$ = [6, 0], wa = [0, [11, a("Expecting named argument '"), [2, 0, [12, 39, 0]]], a("Expecting named argument '%s'")], wb = [1, [0, S, a(mE)]], v_ = [1, [0, S, a("Marshalling error: Expecting dict as first argument when named parameters exist")]], wc = a("Can't happen by construction"), wd = [1, [0, S, a(mE)]], v9 = [0, [2, 0, [12, 46, [2, 0, 0]]], a("%s.%s")], v1 = [0, [11, a("IDL Error: "), [2, 0, 0]], a("IDL Error: %s")], v0 = a("Js_top_worker_rpc.Idl.Error.Make(T).Exn"), v2 = a("Js_top_worker_rpc.Idl.MarshalError"), v3 = a("Js_top_worker_rpc.Idl.UnknownMethod"), v5 = a("Js_top_worker_rpc.Idl.UnboundImplementation"), v7 = a("Js_top_worker_rpc.Idl.NoDescription"), xD = [0, [0, a("A list of pairs. The first element of the pair is a urls to a"), [0, a("cma file pre-compiled to javascript. The second item is the"), [0, a("name of the function to be invoked to load the cma file"), [0, a("(ie, the cma was compiled with --wrap-func)."), [0, a("These will be loaded synchronously during the init call."), 0]]]]]], xE = [0, a("cmas")], xF = [0, [0, a("A list of urls of cmi files. These files will be loaded on demand"), [0, a("during evaluation of toplevel phrases."), 0]]], xG = [0, a("cmis")], xH = [0, a("Initialise the toplevel."), 0], xI = a("init"), xJ = [0, a("Start the toplevel. Return value is the initial blurb "), [0, a("printed when starting a toplevel. Note that the toplevel"), [0, a("must be initialised first."), 0]]], xK = a("setup"), xL = [0, a("Execute a phrase using the toplevel. The toplevel must have been"), [0, a("Initialised first."), 0]], xM = a("exec"), xN = [0, a("Find completions of the incomplete phrase. Completion occurs at the"), [0, a("end of the phrase passed in. If completion is required at a point"), [0, a("other than the end of a string, then take the substring before calling"), [0, a("this API."), 0]]]], xO = a("complete"), xq = a("internalerror"), xs = [0, 5], xr = [0, [11, a("Unknown tag '"), [2, 0, [12, 39, 0]]], a("Unknown tag '%s'")], xc = [0, 0], xd = a(qc), xe = [2, [0, 5]], xf = a(nt), wU = [4, [0, 5]], wV = a(ky), wW = [4, [0, 5]], wX = a(pl), wY = [4, [0, 5]], wZ = a(pc), w0 = [4, [0, 5]], w1 = a(on), w2 = a(ea), wv = [0, 0], ww = a(kT), wx = [0, 0], wy = a(nq), wz = [0, 0], wA = a(mX), wB = [0, 0], wC = a(lj), wk = [0, 0], wl = a(kT), wn = [0, 0], wo = a(nq), wq = [0, 0], wr = a(mX), wt = [0, 0], wu = a(lj), wD = a(ea), wE = [0, a("An area to be highlighted"), 0], wF = a(ea), wH = [4, [0, 5]], wI = a(ky), wK = [4, [0, 5]], wL = a(pl), wN = [4, [0, 5]], wO = a(pc), wQ = [4, [0, 5]], wR = a(on), wT = a(ea), w3 = a(nL), w4 = [0, a("Represents the result of executing a toplevel phrase"), 0], w5 = a(nL), w7 = [0, 0], w8 = [0, a("The position in the input string from where the completions may be"), [0, a("inserted"), 0]], w9 = a(qc), w$ = [2, [0, 5]], xa = [0, a("The list of possible completions"), 0], xb = a(nt), xg = a(n3), xh = [0, a("The result returned by a 'complete' call."), 0], xi = a(n3), xj = [2, [0, 5]], xk = [0, a(kZ), 0], xl = a("string_list"), xm = [3, 5, [0, 5]], xn = [0, a(kZ), 0], xo = a("string_string_list"), xx = [0, 5], xy = a("InternalError"), xz = a(oP), xA = [0, a("For now we are only using a simple error type"), 0], xB = a(oP), x1 = [0, 0], x2 = [0, 1], xZ = [0, 0], x0 = [0, 1], xX = [0, 0], xY = [0, 0], xT = [0, [11, a(lK), [2, 0, 0]], a(pe)], xU = [0, [11, a(lK), [2, 0, 0]], a(pe)], xV = [0, 1], xQ = a(eb), xR = a("Lwt.Resolution_loop.Canceled"), x4 = a(cd), x$ = a(eu), x9 = a(pJ), x7 = a(cd), x6 = a("Array"), x_ = a("Jv.Error"), ys = a(pa), yo = a("documentElement"), yh = a("append"), yg = a("nodeType"), yf = a("classList"), yb = a("JSON"), ye = a("document"), yq = a("console"), yu = a("data"), yv = a("Worker"), yy = a("Js_top_worker_client.Worker_rpc.Timeout"), yE = [0, a(ph), 31, 22], yD = [0, a(ph), 45, 11], yF = a("gnapprox"), Pg = a("Union"), Xz = a("LessSlantEqual"), $J = a("Eogon"), abO = a("DDotrahd"), acQ = a("Cacute"), adl = a("Assign"), adC = a("Alpha"), adK = a("AElig"), adL = a("AMP"), adM = a("Aacute"), adN = a("Abreve"), adO = a("Acirc"), adP = a("Acy"), adQ = a("Afr"), adR = a("Agrave"), adD = a("Amacr"), adE = a("And"), adF = a("Aogon"), adG = a("Aopf"), adH = a("ApplyFunction"), adI = a("Aring"), adJ = a("Ascr"), adm = a("Beta"), adu = a("Atilde"), adv = a("Auml"), adw = a("Backslash"), adx = a("Barv"), ady = a("Barwed"), adz = a("Bcy"), adA = a("Because"), adB = a("Bernoullis"), adn = a("Bfr"), ado = a("Bopf"), adp = a("Breve"), adq = a("Bscr"), adr = a("Bumpeq"), ads = a("CHcy"), adt = a("COPY"), acR = a("ClockwiseContourIntegral"), ac7 = a("Cedilla"), add = a("Cap"), ade = a("CapitalDifferentialD"), adf = a("Cayleys"), adg = a("Ccaron"), adh = a("Ccedil"), adi = a("Ccirc"), adj = a("Cconint"), adk = a("Cdot"), ac8 = a("CenterDot"), ac9 = a("Cfr"), ac_ = a("Chi"), ac$ = a("CircleDot"), ada = a("CircleMinus"), adb = a("CirclePlus"), adc = a("CircleTimes"), acS = a("Copf"), ac0 = a("CloseCurlyDoubleQuote"), ac1 = a("CloseCurlyQuote"), ac2 = a("Colon"), ac3 = a("Colone"), ac4 = a("Congruent"), ac5 = a("Conint"), ac6 = a("ContourIntegral"), acT = a("Coproduct"), acU = a("CounterClockwiseContourIntegral"), acV = a("Cross"), acW = a("Cscr"), acX = a("Cup"), acY = a("CupCap"), acZ = a("DD"), abP = a("DoubleRightTee"), ack = a("Diamond"), acA = a("Del"), acI = a("DJcy"), acJ = a("DScy"), acK = a("DZcy"), acL = a("Dagger"), acM = a("Darr"), acN = a("Dashv"), acO = a("Dcaron"), acP = a("Dcy"), acB = a("Delta"), acC = a("Dfr"), acD = a("DiacriticalAcute"), acE = a("DiacriticalDot"), acF = a("DiacriticalDoubleAcute"), acG = a("DiacriticalGrave"), acH = a("DiacriticalTilde"), acl = a("DoubleDownArrow"), act = a("DifferentialD"), acu = a("Dopf"), acv = a("Dot"), acw = a("DotDot"), acx = a("DotEqual"), acy = a("DoubleContourIntegral"), acz = a("DoubleDot"), acm = a("DoubleLeftArrow"), acn = a("DoubleLeftRightArrow"), aco = a("DoubleLeftTee"), acp = a("DoubleLongLeftArrow"), acq = a("DoubleLongLeftRightArrow"), acr = a("DoubleLongRightArrow"), acs = a("DoubleRightArrow"), abQ = a("Downarrow"), ab6 = a("DownLeftTeeVector"), acc = a("DoubleUpArrow"), acd = a("DoubleUpDownArrow"), ace = a("DoubleVerticalBar"), acf = a("DownArrow"), acg = a("DownArrowBar"), ach = a("DownArrowUpArrow"), aci = a("DownBreve"), acj = a("DownLeftRightVector"), ab7 = a("DownLeftVector"), ab8 = a("DownLeftVectorBar"), ab9 = a("DownRightTeeVector"), ab_ = a("DownRightVector"), ab$ = a("DownRightVectorBar"), aca = a("DownTee"), acb = a("DownTeeArrow"), abR = a("Ecy"), abZ = a("Dscr"), ab0 = a("Dstrok"), ab1 = a("ENG"), ab2 = a("ETH"), ab3 = a("Eacute"), ab4 = a("Ecaron"), ab5 = a("Ecirc"), abS = a("Edot"), abT = a("Efr"), abU = a("Egrave"), abV = a("Element"), abW = a("Emacr"), abX = a("EmptySmallSquare"), abY = a("EmptyVerySmallSquare"), $K = a("Integral"), aaM = a("GreaterFullEqual"), abh = a("ForAll"), aby = a("Euml"), abG = a("Eopf"), abH = a("Epsilon"), abI = a("Equal"), abJ = a("EqualTilde"), abK = a("Equilibrium"), abL = a("Escr"), abM = a("Esim"), abN = a("Eta"), abz = a("Exists"), abA = a("ExponentialE"), abB = a("Fcy"), abC = a("Ffr"), abD = a("FilledSmallSquare"), abE = a("FilledVerySmallSquare"), abF = a("Fopf"), abi = a("Gcirc"), abq = a("Fouriertrf"), abr = a("Fscr"), abs = a("GJcy"), abt = a("GT"), abu = a("Gamma"), abv = a("Gammad"), abw = a("Gbreve"), abx = a("Gcedil"), abj = a("Gcy"), abk = a("Gdot"), abl = a("Gfr"), abm = a("Gg"), abn = a("Gopf"), abo = a("GreaterEqual"), abp = a("GreaterEqualLess"), aaN = a("HumpDownHump"), aa3 = a("Hat"), aa$ = a("GreaterGreater"), aba = a("GreaterLess"), abb = a("GreaterSlantEqual"), abc = a("GreaterTilde"), abd = a("Gscr"), abe = a("Gt"), abf = a("HARDcy"), abg = a("Hacek"), aa4 = a("Hcirc"), aa5 = a("Hfr"), aa6 = a("HilbertSpace"), aa7 = a("Hopf"), aa8 = a("HorizontalLine"), aa9 = a("Hscr"), aa_ = a("Hstrok"), aaO = a("Idot"), aaW = a("HumpEqual"), aaX = a("IEcy"), aaY = a("IJlig"), aaZ = a("IOcy"), aa0 = a("Iacute"), aa1 = a("Icirc"), aa2 = a("Icy"), aaP = a("Ifr"), aaQ = a("Igrave"), aaR = a("Im"), aaS = a("Imacr"), aaT = a("ImaginaryI"), aaU = a("Implies"), aaV = a("Int"), $L = a("Lcaron"), aag = a("Jukcy"), aaw = a("Iukcy"), aaE = a("Intersection"), aaF = a("InvisibleComma"), aaG = a("InvisibleTimes"), aaH = a("Iogon"), aaI = a("Iopf"), aaJ = a("Iota"), aaK = a("Iscr"), aaL = a("Itilde"), aax = a("Iuml"), aay = a("Jcirc"), aaz = a("Jcy"), aaA = a("Jfr"), aaB = a("Jopf"), aaC = a("Jscr"), aaD = a("Jsercy"), aah = a("Kscr"), aap = a("KHcy"), aaq = a("KJcy"), aar = a("Kappa"), aas = a("Kcedil"), aat = a("Kcy"), aau = a("Kfr"), aav = a("Kopf"), aai = a("LJcy"), aaj = a("LT"), aak = a("Lacute"), aal = a("Lambda"), aam = a("Lang"), aan = a("Laplacetrf"), aao = a("Larr"), $M = a("LeftTeeVector"), $2 = a("LeftDownTeeVector"), $_ = a("Lcedil"), $$ = a("Lcy"), aaa = a("LeftAngleBracket"), aab = a("LeftArrow"), aac = a("LeftArrowBar"), aad = a("LeftArrowRightArrow"), aae = a("LeftCeiling"), aaf = a("LeftDoubleBracket"), $3 = a("LeftDownVector"), $4 = a("LeftDownVectorBar"), $5 = a("LeftFloor"), $6 = a("LeftRightArrow"), $7 = a("LeftRightVector"), $8 = a("LeftTee"), $9 = a("LeftTeeArrow"), $N = a("LeftVector"), $V = a("LeftTriangle"), $W = a("LeftTriangleBar"), $X = a("LeftTriangleEqual"), $Y = a("LeftUpDownVector"), $Z = a("LeftUpTeeVector"), $0 = a("LeftUpVector"), $1 = a("LeftUpVectorBar"), $O = a("LeftVectorBar"), $P = a("Leftarrow"), $Q = a("Leftrightarrow"), $R = a("LessEqualGreater"), $S = a("LessFullEqual"), $T = a("LessGreater"), $U = a("LessLess"), XA = a("PrecedesSlantEqual"), ZF = a("NotLessLess"), _H = a("NegativeThickSpace"), $c = a("Lstrok"), $t = a("Longleftarrow"), $B = a("LessTilde"), $C = a("Lfr"), $D = a("Ll"), $E = a("Lleftarrow"), $F = a("Lmidot"), $G = a("LongLeftArrow"), $H = a("LongLeftRightArrow"), $I = a("LongRightArrow"), $u = a("Longleftrightarrow"), $v = a("Longrightarrow"), $w = a("Lopf"), $x = a("LowerLeftArrow"), $y = a("LowerRightArrow"), $z = a("Lscr"), $A = a("Lsh"), $d = a("Mscr"), $l = a("Lt"), $m = a("Map"), $n = a("Mcy"), $o = a("MediumSpace"), $p = a("Mellintrf"), $q = a("Mfr"), $r = a("MinusPlus"), $s = a("Mopf"), $e = a("Mu"), $f = a("NJcy"), $g = a("Nacute"), $h = a("Ncaron"), $i = a("Ncedil"), $j = a("Ncy"), $k = a("NegativeMediumSpace"), _I = a("NotExists"), _Y = a("Nopf"), _6 = a("NegativeThinSpace"), _7 = a("NegativeVeryThinSpace"), _8 = a("NestedGreaterGreater"), _9 = a("NestedLessLess"), __ = a("NewLine"), _$ = a("Nfr"), $a = a("NoBreak"), $b = a("NonBreakingSpace"), _Z = a("Not"), _0 = a("NotCongruent"), _1 = a("NotCupCap"), _2 = a("NotDoubleVerticalBar"), _3 = a("NotElement"), _4 = a("NotEqual"), _5 = a("NotEqualTilde"), _J = a("NotHumpDownHump"), _R = a("NotGreater"), _S = a("NotGreaterEqual"), _T = a("NotGreaterFullEqual"), _U = a("NotGreaterGreater"), _V = a("NotGreaterLess"), _W = a("NotGreaterSlantEqual"), _X = a("NotGreaterTilde"), _K = a("NotHumpEqual"), _L = a("NotLeftTriangle"), _M = a("NotLeftTriangleBar"), _N = a("NotLeftTriangleEqual"), _O = a("NotLess"), _P = a("NotLessEqual"), _Q = a("NotLessGreater"), ZG = a("Oacute"), _b = a("NotSubsetEqual"), _r = a("NotRightTriangle"), _z = a("NotLessSlantEqual"), _A = a("NotLessTilde"), _B = a("NotNestedGreaterGreater"), _C = a("NotNestedLessLess"), _D = a("NotPrecedes"), _E = a("NotPrecedesEqual"), _F = a("NotPrecedesSlantEqual"), _G = a("NotReverseElement"), _s = a("NotRightTriangleBar"), _t = a("NotRightTriangleEqual"), _u = a("NotSquareSubset"), _v = a("NotSquareSubsetEqual"), _w = a("NotSquareSuperset"), _x = a("NotSquareSupersetEqual"), _y = a("NotSubset"), _c = a("NotTildeEqual"), _k = a("NotSucceeds"), _l = a("NotSucceedsEqual"), _m = a("NotSucceedsSlantEqual"), _n = a("NotSucceedsTilde"), _o = a("NotSuperset"), _p = a("NotSupersetEqual"), _q = a("NotTilde"), _d = a("NotTildeFullEqual"), _e = a("NotTildeTilde"), _f = a("NotVerticalBar"), _g = a("Nscr"), _h = a("Ntilde"), _i = a("Nu"), _j = a("OElig"), ZH = a("Ouml"), ZX = a("Oopf"), Z5 = a("Ocirc"), Z6 = a("Ocy"), Z7 = a("Odblac"), Z8 = a("Ofr"), Z9 = a("Ograve"), Z_ = a("Omacr"), Z$ = a("Omega"), _a = a("Omicron"), ZY = a("OpenCurlyDoubleQuote"), ZZ = a("OpenCurlyQuote"), Z0 = a("Or"), Z1 = a("Oscr"), Z2 = a("Oslash"), Z3 = a("Otilde"), Z4 = a("Otimes"), ZI = a("Phi"), ZQ = a("OverBar"), ZR = a("OverBrace"), ZS = a("OverBracket"), ZT = a("OverParenthesis"), ZU = a("PartialD"), ZV = a("Pcy"), ZW = a("Pfr"), ZJ = a("Pi"), ZK = a("PlusMinus"), ZL = a("Poincareplane"), ZM = a("Popf"), ZN = a("Pr"), ZO = a("Precedes"), ZP = a("PrecedesEqual"), XB = a("ShortLeftArrow"), YD = a("RightDownVector"), Y_ = a("Rarrtl"), Zp = a("Qfr"), Zx = a("PrecedesTilde"), Zy = a("Prime"), Zz = a("Product"), ZA = a("Proportion"), ZB = a("Proportional"), ZC = a("Pscr"), ZD = a("Psi"), ZE = a("QUOT"), Zq = a("Qopf"), Zr = a("Qscr"), Zs = a("RBarr"), Zt = a("REG"), Zu = a("Racute"), Zv = a("Rang"), Zw = a("Rarr"), Y$ = a("Rho"), Zh = a("Rcaron"), Zi = a("Rcedil"), Zj = a("Rcy"), Zk = a("Re"), Zl = a("ReverseElement"), Zm = a("ReverseEquilibrium"), Zn = a("ReverseUpEquilibrium"), Zo = a("Rfr"), Za = a("RightAngleBracket"), Zb = a("RightArrow"), Zc = a("RightArrowBar"), Zd = a("RightArrowLeftArrow"), Ze = a("RightCeiling"), Zf = a("RightDoubleBracket"), Zg = a("RightDownTeeVector"), YE = a("RoundImplies"), YU = a("RightUpDownVector"), Y2 = a("RightDownVectorBar"), Y3 = a("RightFloor"), Y4 = a("RightTee"), Y5 = a("RightTeeArrow"), Y6 = a("RightTeeVector"), Y7 = a("RightTriangle"), Y8 = a("RightTriangleBar"), Y9 = a("RightTriangleEqual"), YV = a("RightUpTeeVector"), YW = a("RightUpVector"), YX = a("RightUpVectorBar"), YY = a("RightVector"), YZ = a("RightVectorBar"), Y0 = a("Rightarrow"), Y1 = a("Ropf"), YF = a("Sacute"), YN = a("Rrightarrow"), YO = a("Rscr"), YP = a("Rsh"), YQ = a("RuleDelayed"), YR = a("SHCHcy"), YS = a("SHcy"), YT = a("SOFTcy"), YG = a("Sc"), YH = a("Scaron"), YI = a("Scedil"), YJ = a("Scirc"), YK = a("Scy"), YL = a("Sfr"), YM = a("ShortDownArrow"), XC = a("Tab"), X9 = a("Subset"), Yn = a("SquareSubset"), Yv = a("ShortRightArrow"), Yw = a("ShortUpArrow"), Yx = a("Sigma"), Yy = a("SmallCircle"), Yz = a("Sopf"), YA = a("Sqrt"), YB = a("Square"), YC = a("SquareIntersection"), Yo = a("SquareSubsetEqual"), Yp = a("SquareSuperset"), Yq = a("SquareSupersetEqual"), Yr = a("SquareUnion"), Ys = a("Sscr"), Yt = a("Star"), Yu = a("Sub"), X_ = a("Sup"), Yg = a("SubsetEqual"), Yh = a("Succeeds"), Yi = a("SucceedsEqual"), Yj = a("SucceedsSlantEqual"), Yk = a("SucceedsTilde"), Yl = a("SuchThat"), Ym = a("Sum"), X$ = a("Superset"), Ya = a("SupersetEqual"), Yb = a("Supset"), Yc = a("THORN"), Yd = a("TRADE"), Ye = a("TSHcy"), Yf = a("TScy"), XD = a("Tstrok"), XT = a("ThinSpace"), X1 = a("Tau"), X2 = a("Tcaron"), X3 = a("Tcedil"), X4 = a("Tcy"), X5 = a("Tfr"), X6 = a("Therefore"), X7 = a("Theta"), X8 = a("ThickSpace"), XU = a("Tilde"), XV = a("TildeEqual"), XW = a("TildeFullEqual"), XX = a("TildeTilde"), XY = a("Topf"), XZ = a("TripleDot"), X0 = a("Tscr"), XE = a("Udblac"), XM = a("Uacute"), XN = a("Uarr"), XO = a("Uarrocir"), XP = a("Ubrcy"), XQ = a("Ubreve"), XR = a("Ucirc"), XS = a("Ucy"), XF = a("Ufr"), XG = a("Ugrave"), XH = a("Umacr"), XI = a("UnderBar"), XJ = a("UnderBrace"), XK = a("UnderBracket"), XL = a("UnderParenthesis"), Ph = a("checkmark"), Tq = a("barvee"), Vv = a("aacute"), Wx = a("Vfr"), W4 = a("Uring"), Xj = a("UpTee"), Xr = a("UnionPlus"), Xs = a("Uogon"), Xt = a("Uopf"), Xu = a("UpArrow"), Xv = a("UpArrowBar"), Xw = a("UpArrowDownArrow"), Xx = a("UpDownArrow"), Xy = a("UpEquilibrium"), Xk = a("UpTeeArrow"), Xl = a("Uparrow"), Xm = a("Updownarrow"), Xn = a("UpperLeftArrow"), Xo = a("UpperRightArrow"), Xp = a("Upsi"), Xq = a("Upsilon"), W5 = a("Vee"), Xb = a("Uscr"), Xc = a("Utilde"), Xd = a("Uuml"), Xe = a("VDash"), Xf = a("Vbar"), Xg = a("Vcy"), Xh = a("Vdash"), Xi = a("Vdashl"), W6 = a("Verbar"), W7 = a("Vert"), W8 = a("VerticalBar"), W9 = a("VerticalLine"), W_ = a("VerticalSeparator"), W$ = a("VerticalTilde"), Xa = a("VeryThinSpace"), Wy = a("Ycirc"), WO = a("Xfr"), WW = a("Vopf"), WX = a("Vscr"), WY = a("Vvdash"), WZ = a("Wcirc"), W0 = a("Wedge"), W1 = a("Wfr"), W2 = a("Wopf"), W3 = a("Wscr"), WP = a("Xi"), WQ = a("Xopf"), WR = a("Xscr"), WS = a("YAcy"), WT = a("YIcy"), WU = a("YUcy"), WV = a("Yacute"), Wz = a("Zcaron"), WH = a("Ycy"), WI = a("Yfr"), WJ = a("Yopf"), WK = a("Yscr"), WL = a("Yuml"), WM = a("ZHcy"), WN = a("Zacute"), WA = a("Zcy"), WB = a("Zdot"), WC = a("ZeroWidthSpace"), WD = a("Zeta"), WE = a("Zfr"), WF = a("Zopf"), WG = a("Zscr"), Vw = a("angmsdag"), V3 = a("amp"), Wh = a("af"), Wp = a("abreve"), Wq = a("ac"), Wr = a("acE"), Ws = a("acd"), Wt = a("acirc"), Wu = a("acute"), Wv = a("acy"), Ww = a("aelig"), Wi = a("afr"), Wj = a("agrave"), Wk = a("alefsym"), Wl = a("aleph"), Wm = a("alpha"), Wn = a("amacr"), Wo = a("amalg"), V4 = a("angle"), Wa = a("and"), Wb = a("andand"), Wc = a("andd"), Wd = a("andslope"), We = a("andv"), Wf = a("ang"), Wg = a("ange"), V5 = a("angmsd"), V6 = a("angmsdaa"), V7 = a("angmsdab"), V8 = a("angmsdac"), V9 = a("angmsdad"), V_ = a("angmsdae"), V$ = a("angmsdaf"), Vx = a("approxeq"), VN = a("aopf"), VV = a("angmsdah"), VW = a("angrt"), VX = a("angrtvb"), VY = a("angrtvbd"), VZ = a("angsph"), V0 = a("angst"), V1 = a("angzarr"), V2 = a("aogon"), VO = a("ap"), VP = a("apE"), VQ = a("apacir"), VR = a("ape"), VS = a("apid"), VT = a("apos"), VU = a("approx"), Vy = a("awconint"), VG = a("aring"), VH = a("ascr"), VI = a("ast"), VJ = a("asymp"), VK = a("asympeq"), VL = a("atilde"), VM = a("auml"), Vz = a("awint"), VA = a("bNot"), VB = a("backcong"), VC = a("backepsilon"), VD = a("backprime"), VE = a("backsim"), VF = a("backsimeq"), Tr = a("boxVl"), Ut = a("blacktriangledown"), U0 = a("bigcap"), Vf = a("because"), Vn = a("barwed"), Vo = a("barwedge"), Vp = a("bbrk"), Vq = a("bbrktbrk"), Vr = a("bcong"), Vs = a("bcy"), Vt = a("bdquo"), Vu = a("becaus"), Vg = a("bemptyv"), Vh = a("bepsi"), Vi = a("bernou"), Vj = a("beta"), Vk = a("beth"), Vl = a("between"), Vm = a("bfr"), U1 = a("bigtriangleup"), U9 = a("bigcirc"), U_ = a("bigcup"), U$ = a("bigodot"), Va = a("bigoplus"), Vb = a("bigotimes"), Vc = a("bigsqcup"), Vd = a("bigstar"), Ve = a("bigtriangledown"), U2 = a("biguplus"), U3 = a("bigvee"), U4 = a("bigwedge"), U5 = a("bkarow"), U6 = a("blacklozenge"), U7 = a("blacksquare"), U8 = a("blacktriangle"), Uu = a("boxDl"), UK = a("bnequiv"), US = a("blacktriangleleft"), UT = a("blacktriangleright"), UU = a("blank"), UV = a("blk12"), UW = a("blk14"), UX = a("blk34"), UY = a("block"), UZ = a("bne"), UL = a("bnot"), UM = a("bopf"), UN = a("bot"), UO = a("bottom"), UP = a("bowtie"), UQ = a("boxDL"), UR = a("boxDR"), Uv = a("boxUR"), UD = a("boxDr"), UE = a("boxH"), UF = a("boxHD"), UG = a("boxHU"), UH = a("boxHd"), UI = a("boxHu"), UJ = a("boxUL"), Uw = a("boxUl"), Ux = a("boxUr"), Uy = a("boxV"), Uz = a("boxVH"), UA = a("boxVL"), UB = a("boxVR"), UC = a("boxVh"), Ts = a("bsol"), TZ = a("boxul"), Ud = a("boxhU"), Ul = a("boxVr"), Um = a("boxbox"), Un = a("boxdL"), Uo = a("boxdR"), Up = a("boxdl"), Uq = a("boxdr"), Ur = a("boxh"), Us = a("boxhD"), Ue = a("boxhd"), Uf = a("boxhu"), Ug = a("boxminus"), Uh = a("boxplus"), Ui = a("boxtimes"), Uj = a("boxuL"), Uk = a("boxuR"), T0 = a("boxvr"), T8 = a("boxur"), T9 = a("boxv"), T_ = a("boxvH"), T$ = a("boxvL"), Ua = a("boxvR"), Ub = a("boxvh"), Uc = a("boxvl"), T1 = a("bprime"), T2 = a("breve"), T3 = a("brvbar"), T4 = a("bscr"), T5 = a("bsemi"), T6 = a("bsim"), T7 = a("bsime"), Tt = a("caret"), TJ = a("cacute"), TR = a("bsolb"), TS = a("bsolhsub"), TT = a("bull"), TU = a("bullet"), TV = a("bump"), TW = a("bumpE"), TX = a("bumpe"), TY = a("bumpeq"), TK = a("cap"), TL = a("capand"), TM = a("capbrcup"), TN = a("capcap"), TO = a("capcup"), TP = a("capdot"), TQ = a("caps"), Tu = a("cdot"), TC = a("caron"), TD = a("ccaps"), TE = a("ccaron"), TF = a("ccedil"), TG = a("ccirc"), TH = a("ccups"), TI = a("ccupssm"), Tv = a("cedil"), Tw = a("cemptyv"), Tx = a("cent"), Ty = a("centerdot"), Tz = a("cfr"), TA = a("chcy"), TB = a("check"), Pi = a("dzigrarr"), Rm = a("cwconint"), So = a("copysr"), SV = a("clubs"), Ta = a("circledS"), Ti = a("chi"), Tj = a("cir"), Tk = a("cirE"), Tl = a("circ"), Tm = a("circeq"), Tn = a("circlearrowleft"), To = a("circlearrowright"), Tp = a("circledR"), Tb = a("circledast"), Tc = a("circledcirc"), Td = a("circleddash"), Te = a("cire"), Tf = a("cirfnint"), Tg = a("cirmid"), Th = a("cirscir"), SW = a("complement"), S4 = a("clubsuit"), S5 = a("colon"), S6 = a("colone"), S7 = a("coloneq"), S8 = a("comma"), S9 = a("commat"), S_ = a("comp"), S$ = a("compfn"), SX = a("complexes"), SY = a("cong"), SZ = a("congdot"), S0 = a("conint"), S1 = a("copf"), S2 = a("coprod"), S3 = a("copy"), Sp = a("cupcap"), SF = a("cudarrl"), SN = a("crarr"), SO = a("cross"), SP = a("cscr"), SQ = a("csub"), SR = a("csube"), SS = a("csup"), ST = a("csupe"), SU = a("ctdot"), SG = a("cudarrr"), SH = a("cuepr"), SI = a("cuesc"), SJ = a("cularr"), SK = a("cularrp"), SL = a("cup"), SM = a("cupbrcap"), Sq = a("curlyeqsucc"), Sy = a("cupcup"), Sz = a("cupdot"), SA = a("cupor"), SB = a("cups"), SC = a("curarr"), SD = a("curarrm"), SE = a("curlyeqprec"), Sr = a("curlyvee"), Ss = a("curlywedge"), St = a("curren"), Su = a("curvearrowleft"), Sv = a("curvearrowright"), Sw = a("cuvee"), Sx = a("cuwed"), Rn = a("divide"), RU = a("ddotseq"), R_ = a("dashv"), Sg = a("cwint"), Sh = a("cylcty"), Si = a("dArr"), Sj = a("dHar"), Sk = a("dagger"), Sl = a("daleth"), Sm = a("darr"), Sn = a("dash"), R$ = a("dbkarow"), Sa = a("dblac"), Sb = a("dcaron"), Sc = a("dcy"), Sd = a(f9), Se = a("ddagger"), Sf = a("ddarr"), RV = a("diam"), R3 = a("deg"), R4 = a("delta"), R5 = a("demptyv"), R6 = a("dfisht"), R7 = a("dfr"), R8 = a("dharl"), R9 = a("dharr"), RW = a("diamond"), RX = a("diamondsuit"), RY = a("diams"), RZ = a("die"), R0 = a("digamma"), R1 = a("disin"), R2 = a(gh), Ro = a("downharpoonleft"), RE = a("doteq"), RM = a("divideontimes"), RN = a("divonx"), RO = a("djcy"), RP = a("dlcorn"), RQ = a("dlcrop"), RR = a("dollar"), RS = a("dopf"), RT = a("dot"), RF = a("doteqdot"), RG = a("dotminus"), RH = a("dotplus"), RI = a("dotsquare"), RJ = a("doublebarwedge"), RK = a("downarrow"), RL = a("downdownarrows"), Rp = a("dstrok"), Rx = a("downharpoonright"), Ry = a("drbkarow"), Rz = a("drcorn"), RA = a("drcrop"), RB = a("dscr"), RC = a("dscy"), RD = a("dsol"), Rq = a("dtdot"), Rr = a("dtri"), Rs = a("dtrif"), Rt = a("duarr"), Ru = a("duhar"), Rv = a("dwangle"), Rw = a("dzcy"), Pj = a("ffilig"), Ql = a("eopf"), QS = a("egsdot"), Q8 = a("ecy"), Re = a("eDDot"), Rf = a("eDot"), Rg = a("eacute"), Rh = a("easter"), Ri = a("ecaron"), Rj = a("ecir"), Rk = a("ecirc"), Rl = a("ecolon"), Q9 = a("edot"), Q_ = a("ee"), Q$ = a("efDot"), Ra = a("efr"), Rb = a("eg"), Rc = a("egrave"), Rd = a("egs"), QT = a("emptyset"), Q1 = a("el"), Q2 = a("elinters"), Q3 = a("ell"), Q4 = a("els"), Q5 = a("elsdot"), Q6 = a("emacr"), Q7 = a("empty"), QU = a("emptyv"), QV = a("emsp"), QW = a("emsp13"), QX = a("emsp14"), QY = a("eng"), QZ = a("ensp"), Q0 = a("eogon"), Qm = a("erDot"), QC = a("eqsim"), QK = a("epar"), QL = a("eparsl"), QM = a("eplus"), QN = a("epsi"), QO = a("epsilon"), QP = a("epsiv"), QQ = a("eqcirc"), QR = a("eqcolon"), QD = a("eqslantgtr"), QE = a("eqslantless"), QF = a("equals"), QG = a("equest"), QH = a("equiv"), QI = a("equivDD"), QJ = a("eqvparsl"), Qn = a("euro"), Qv = a("erarr"), Qw = a("escr"), Qx = a("esdot"), Qy = a("esim"), Qz = a("eta"), QA = a("eth"), QB = a("euml"), Qo = a("excl"), Qp = a("exist"), Qq = a("expectation"), Qr = a("exponentiale"), Qs = a("fallingdotseq"), Qt = a("fcy"), Qu = a("female"), Pk = a("gE"), PR = a("frac14"), P7 = a("fnof"), Qd = a("fflig"), Qe = a("ffllig"), Qf = a("ffr"), Qg = a("filig"), Qh = a("fjlig"), Qi = a("flat"), Qj = a("fllig"), Qk = a("fltns"), P8 = a("fopf"), P9 = a("forall"), P_ = a("fork"), P$ = a("forkv"), Qa = a("fpartint"), Qb = a("frac12"), Qc = a("frac13"), PS = a("frac38"), P0 = a("frac15"), P1 = a("frac16"), P2 = a("frac18"), P3 = a("frac23"), P4 = a("frac25"), P5 = a("frac34"), P6 = a("frac35"), PT = a("frac45"), PU = a("frac56"), PV = a("frac58"), PW = a("frac78"), PX = a("frasl"), PY = a("frown"), PZ = a("fscr"), Pl = a("gesdot"), PB = a("gdot"), PJ = a("gEl"), PK = a("gacute"), PL = a("gamma"), PM = a("gammad"), PN = a("gap"), PO = a("gbreve"), PP = a("gcirc"), PQ = a("gcy"), PC = a("ge"), PD = a("gel"), PE = a("geq"), PF = a("geqq"), PG = a("geqslant"), PH = a("ges"), PI = a("gescc"), Pm = a("gimel"), Pu = a("gesdoto"), Pv = a("gesdotol"), Pw = a("gesl"), Px = a("gesles"), Py = a("gfr"), Pz = a("gg"), PA = a("ggg"), Pn = a("gjcy"), Po = a("gl"), Pp = a("glE"), Pq = a("gla"), Pr = a("glj"), Ps = a("gnE"), Pt = a("gnap"), yG = a("parsim"), GZ = a("ltrPar"), K9 = a("lang"), Nc = a("iiota"), Oe = a("hbar"), OL = a("gtrapprox"), O2 = a("gsime"), O_ = a("gne"), O$ = a("gneq"), Pa = a("gneqq"), Pb = a("gnsim"), Pc = a("gopf"), Pd = a("grave"), Pe = a("gscr"), Pf = a("gsim"), O3 = a("gsiml"), O4 = a("gt"), O5 = a("gtcc"), O6 = a("gtcir"), O7 = a("gtdot"), O8 = a("gtlPar"), O9 = a("gtquest"), OM = a("hArr"), OU = a("gtrarr"), OV = a("gtrdot"), OW = a("gtreqless"), OX = a("gtreqqless"), OY = a("gtrless"), OZ = a("gtrsim"), O0 = a("gvertneqq"), O1 = a("gvnE"), ON = a("hairsp"), OO = a("half"), OP = a("hamilt"), OQ = a("hardcy"), OR = a("harr"), OS = a("harrcir"), OT = a("harrw"), Of = a("hstrok"), Ov = a("hoarr"), OD = a("hcirc"), OE = a("hearts"), OF = a("heartsuit"), OG = a("hellip"), OH = a("hercon"), OI = a("hfr"), OJ = a("hksearow"), OK = a("hkswarow"), Ow = a("homtht"), Ox = a("hookleftarrow"), Oy = a("hookrightarrow"), Oz = a("hopf"), OA = a("horbar"), OB = a("hscr"), OC = a("hslash"), Og = a("iexcl"), Oo = a("hybull"), Op = a("hyphen"), Oq = a("iacute"), Or = a("ic"), Os = a("icirc"), Ot = a("icy"), Ou = a("iecy"), Oh = a("iff"), Oi = a("ifr"), Oj = a("igrave"), Ok = a("ii"), Ol = a("iiiint"), Om = a("iiint"), On = a("iinfin"), Nd = a("it"), NK = a("intercal"), N0 = a("in"), N8 = a("ijlig"), N9 = a("imacr"), N_ = a("image"), N$ = a("imagline"), Oa = a("imagpart"), Ob = a("imath"), Oc = a("imof"), Od = a("imped"), N1 = a("incare"), N2 = a("infin"), N3 = a("infintie"), N4 = a("inodot"), N5 = a("int"), N6 = a("intcal"), N7 = a("integers"), NL = a("iquest"), NT = a("intlarhk"), NU = a("intprod"), NV = a("iocy"), NW = a("iogon"), NX = a("iopf"), NY = a("iota"), NZ = a("iprod"), NM = a("iscr"), NN = a("isin"), NO = a("isinE"), NP = a("isindot"), NQ = a("isins"), NR = a("isinsv"), NS = a("isinv"), Ne = a("kgreen"), Nu = a("jscr"), NC = a("itilde"), ND = a("iukcy"), NE = a("iuml"), NF = a("jcirc"), NG = a("jcy"), NH = a("jfr"), NI = a("jmath"), NJ = a("jopf"), Nv = a("jsercy"), Nw = a("jukcy"), Nx = a("kappa"), Ny = a("kappav"), Nz = a("kcedil"), NA = a("kcy"), NB = a("kfr"), Nf = a("lBarr"), Nn = a("khcy"), No = a("kjcy"), Np = a("kopf"), Nq = a("kscr"), Nr = a("lAarr"), Ns = a("lArr"), Nt = a("lAtail"), Ng = a("lE"), Nh = a("lEg"), Ni = a("lHar"), Nj = a("lacute"), Nk = a("laemptyv"), Nl = a("lagran"), Nm = a("lambda"), K_ = a("lg"), Ma = a("ldrushar"), MH = a("lates"), MY = a("larrhk"), M6 = a("langd"), M7 = a("langle"), M8 = a("lap"), M9 = a("laquo"), M_ = a("larr"), M$ = a("larrb"), Na = a("larrbfs"), Nb = a("larrfs"), MZ = a("larrlp"), M0 = a("larrpl"), M1 = a("larrsim"), M2 = a("larrtl"), M3 = a("lat"), M4 = a("latail"), M5 = a("late"), MI = a("lcedil"), MQ = a("lbarr"), MR = a("lbbrk"), MS = a("lbrace"), MT = a("lbrack"), MU = a("lbrke"), MV = a("lbrksld"), MW = a("lbrkslu"), MX = a("lcaron"), MJ = a("lceil"), MK = a("lcub"), ML = a("lcy"), MM = a("ldca"), MN = a("ldquo"), MO = a("ldquor"), MP = a("ldrdhar"), Mb = a("les"), Mr = a("leftrightarrows"), Mz = a("ldsh"), MA = a("le"), MB = a("leftarrow"), MC = a("leftarrowtail"), MD = a("leftharpoondown"), ME = a("leftharpoonup"), MF = a("leftleftarrows"), MG = a("leftrightarrow"), Ms = a("leftrightharpoons"), Mt = a("leftrightsquigarrow"), Mu = a("leftthreetimes"), Mv = a("leg"), Mw = a("leq"), Mx = a("leqq"), My = a("leqslant"), Mc = a("lessdot"), Mk = a("lescc"), Ml = a("lesdot"), Mm = a("lesdoto"), Mn = a("lesdotor"), Mo = a("lesg"), Mp = a("lesges"), Mq = a("lessapprox"), Md = a("lesseqgtr"), Me = a("lesseqqgtr"), Mf = a("lessgtr"), Mg = a("lesssim"), Mh = a("lfisht"), Mi = a("lfloor"), Mj = a("lfr"), K$ = a("loplus"), LG = a("lnapprox"), LW = a("llcorner"), L4 = a("lgE"), L5 = a("lhard"), L6 = a("lharu"), L7 = a("lharul"), L8 = a("lhblk"), L9 = a("ljcy"), L_ = a("ll"), L$ = a("llarr"), LX = a("llhard"), LY = a("lltri"), LZ = a("lmidot"), L0 = a("lmoust"), L1 = a("lmoustache"), L2 = a("lnE"), L3 = a("lnap"), LH = a("longleftarrow"), LP = a("lne"), LQ = a("lneq"), LR = a("lneqq"), LS = a("lnsim"), LT = a("loang"), LU = a("loarr"), LV = a("lobrk"), LI = a("longleftrightarrow"), LJ = a("longmapsto"), LK = a("longrightarrow"), LL = a("looparrowleft"), LM = a("looparrowright"), LN = a("lopar"), LO = a("lopf"), La = a("lsh"), Lq = a("lrarr"), Ly = a("lotimes"), Lz = a("lowast"), LA = a("lowbar"), LB = a("loz"), LC = a("lozenge"), LD = a("lozf"), LE = a("lpar"), LF = a("lparlt"), Lr = a("lrcorner"), Ls = a("lrhar"), Lt = a("lrhard"), Lu = a("lrm"), Lv = a("lrtri"), Lw = a("lsaquo"), Lx = a("lscr"), Lb = a("lt"), Lj = a("lsim"), Lk = a("lsime"), Ll = a("lsimg"), Lm = a("lsqb"), Ln = a("lsquo"), Lo = a("lsquor"), Lp = a("lstrok"), Lc = a("ltcc"), Ld = a("ltcir"), Le = a("ltdot"), Lf = a("lthree"), Lg = a("ltimes"), Lh = a("ltlarr"), Li = a("ltquest"), G0 = a("notniva"), I5 = a("nbsp"), J7 = a("mlcp"), KC = a("mapstoup"), KT = a("macr"), K1 = a("ltri"), K2 = a("ltrie"), K3 = a("ltrif"), K4 = a("lurdshar"), K5 = a("luruhar"), K6 = a("lvertneqq"), K7 = a("lvnE"), K8 = a("mDDot"), KU = a("male"), KV = a("malt"), KW = a("maltese"), KX = a("map"), KY = a("mapsto"), KZ = a("mapstodown"), K0 = a("mapstoleft"), KD = a("mid"), KL = a("marker"), KM = a("mcomma"), KN = a("mcy"), KO = a("mdash"), KP = a("measuredangle"), KQ = a("mfr"), KR = a("mho"), KS = a("micro"), KE = a("midast"), KF = a("midcir"), KG = a("middot"), KH = a("minus"), KI = a("minusb"), KJ = a("minusd"), KK = a("minusdu"), J8 = a("nLt"), Km = a("multimap"), Ku = a("mldr"), Kv = a("mnplus"), Kw = a("models"), Kx = a("mopf"), Ky = a("mp"), Kz = a("mscr"), KA = a("mstpos"), KB = a("mu"), Kn = a("mumap"), Ko = a("nGg"), Kp = a("nGt"), Kq = a("nGtv"), Kr = a("nLeftarrow"), Ks = a("nLeftrightarrow"), Kt = a("nLl"), J9 = a("nap"), Kf = a("nLtv"), Kg = a("nRightarrow"), Kh = a("nVDash"), Ki = a("nVdash"), Kj = a("nabla"), Kk = a("nacute"), Kl = a("nang"), J_ = a("napE"), J$ = a("napid"), Ka = a("napos"), Kb = a("napprox"), Kc = a("natur"), Kd = a("natural"), Ke = a("naturals"), I6 = a("nharr"), JB = a("nequiv"), JR = a("ncy"), JZ = a("nbump"), J0 = a("nbumpe"), J1 = a("ncap"), J2 = a("ncaron"), J3 = a("ncedil"), J4 = a("ncong"), J5 = a("ncongdot"), J6 = a("ncup"), JS = a("ndash"), JT = a("ne"), JU = a("neArr"), JV = a("nearhk"), JW = a("nearr"), JX = a("nearrow"), JY = a("nedot"), JC = a("ngeq"), JK = a("nesear"), JL = a("nesim"), JM = a("nexist"), JN = a("nexists"), JO = a("nfr"), JP = a("ngE"), JQ = a("nge"), JD = a("ngeqq"), JE = a("ngeqslant"), JF = a("nges"), JG = a("ngsim"), JH = a("ngt"), JI = a("ngtr"), JJ = a("nhArr"), I7 = a("nles"), Jl = a("nlarr"), Jt = a("nhpar"), Ju = a("ni"), Jv = a("nis"), Jw = a("nisd"), Jx = a("niv"), Jy = a("njcy"), Jz = a("nlArr"), JA = a("nlE"), Jm = a("nldr"), Jn = a("nle"), Jo = a("nleftarrow"), Jp = a("nleftrightarrow"), Jq = a("nleq"), Jr = a("nleqq"), Js = a("nleqslant"), I8 = a("not"), Je = a("nless"), Jf = a("nlsim"), Jg = a("nlt"), Jh = a("nltri"), Ji = a("nltrie"), Jj = a("nmid"), Jk = a("nopf"), I9 = a("notin"), I_ = a("notinE"), I$ = a("notindot"), Ja = a("notinva"), Jb = a("notinvb"), Jc = a("notinvc"), Jd = a("notni"), G1 = a("nvlt"), H3 = a("nsubE"), Iy = a("nrightarrow"), IP = a("nprcue"), IX = a("notnivb"), IY = a("notnivc"), IZ = a("npar"), I0 = a("nparallel"), I1 = a("nparsl"), I2 = a("npart"), I3 = a("npolint"), I4 = a("npr"), IQ = a("npre"), IR = a("nprec"), IS = a("npreceq"), IT = a("nrArr"), IU = a("nrarr"), IV = a("nrarrc"), IW = a("nrarrw"), Iz = a("nsim"), IH = a("nrtri"), II = a("nrtrie"), IJ = a("nsc"), IK = a("nsccue"), IL = a("nsce"), IM = a("nscr"), IN = a("nshortmid"), IO = a("nshortparallel"), IA = a("nsime"), IB = a("nsimeq"), IC = a("nsmid"), ID = a("nspar"), IE = a("nsqsube"), IF = a("nsqsupe"), IG = a("nsub"), H4 = a("ntrianglelefteq"), Ii = a("nsupe"), Iq = a("nsube"), Ir = a("nsubset"), Is = a("nsubseteq"), It = a("nsubseteqq"), Iu = a("nsucc"), Iv = a("nsucceq"), Iw = a("nsup"), Ix = a("nsupE"), Ij = a("nsupset"), Ik = a("nsupseteq"), Il = a("nsupseteqq"), Im = a("ntgl"), In = a("ntilde"), Io = a("ntlg"), Ip = a("ntriangleleft"), H5 = a("nvHarr"), Ib = a("ntriangleright"), Ic = a("ntrianglerighteq"), Id = a("nu"), Ie = a("num"), If = a("numero"), Ig = a("numsp"), Ih = a("nvDash"), H6 = a("nvap"), H7 = a("nvdash"), H8 = a("nvge"), H9 = a("nvgt"), H_ = a("nvinfin"), H$ = a("nvlArr"), Ia = a("nvle"), G2 = a("oline"), Hx = a("odblac"), HN = a("nwnear"), HV = a("nvltrie"), HW = a("nvrArr"), HX = a("nvrtrie"), HY = a("nvsim"), HZ = a("nwArr"), H0 = a("nwarhk"), H1 = a("nwarr"), H2 = a("nwarrow"), HO = a("oS"), HP = a("oacute"), HQ = a("oast"), HR = a("ocir"), HS = a("ocirc"), HT = a("ocy"), HU = a("odash"), Hy = a("ograve"), HG = a("odiv"), HH = a("odot"), HI = a("odsold"), HJ = a("oelig"), HK = a("ofcir"), HL = a("ofr"), HM = a("ogon"), Hz = a("ogt"), HA = a("ohbar"), HB = a("ohm"), HC = a("oint"), HD = a("olarr"), HE = a("olcir"), HF = a("olcross"), G3 = a("ordm"), Hh = a("operp"), Hp = a("olt"), Hq = a("omacr"), Hr = a("omega"), Hs = a("omicron"), Ht = a("omid"), Hu = a("ominus"), Hv = a("oopf"), Hw = a("opar"), Hi = a("oplus"), Hj = a("or"), Hk = a("orarr"), Hl = a("ord"), Hm = a("order"), Hn = a("orderof"), Ho = a("ordf"), G4 = a("otilde"), Ha = a("origof"), Hb = a("oror"), Hc = a("orslope"), Hd = a("orv"), He = a("oscr"), Hf = a("oslash"), Hg = a("osol"), G5 = a("otimes"), G6 = a("otimesas"), G7 = a("ouml"), G8 = a("ovbar"), G9 = a("par"), G_ = a("para"), G$ = a("parallel"), yH = a("straightepsilon"), CQ = a("rightarrow"), EV = a("qscr"), FX = a("pr"), Gs = a("planck"), GJ = a("pfr"), GR = a("parsl"), GS = a("part"), GT = a("pcy"), GU = a("percnt"), GV = a("period"), GW = a("permil"), GX = a("perp"), GY = a("pertenk"), GK = a("phi"), GL = a("phiv"), GM = a("phmmat"), GN = a("phone"), GO = a("pi"), GP = a("pitchfork"), GQ = a("piv"), Gt = a("pluse"), GB = a("planckh"), GC = a("plankv"), GD = a("plus"), GE = a("plusacir"), GF = a("plusb"), GG = a("pluscir"), GH = a("plusdo"), GI = a("plusdu"), Gu = a("plusmn"), Gv = a("plussim"), Gw = a("plustwo"), Gx = a("pm"), Gy = a("pointint"), Gz = a("popf"), GA = a("pound"), FY = a("prnsim"), Gc = a("precnapprox"), Gk = a("prE"), Gl = a("prap"), Gm = a("prcue"), Gn = a(ed), Go = a("prec"), Gp = a("precapprox"), Gq = a("preccurlyeq"), Gr = a("preceq"), Gd = a("precneqq"), Ge = a("precnsim"), Gf = a("precsim"), Gg = a("prime"), Gh = a("primes"), Gi = a("prnE"), Gj = a("prnap"), FZ = a("prurel"), F7 = a("prod"), F8 = a("profalar"), F9 = a("profline"), F_ = a("profsurf"), F$ = a("prop"), Ga = a("propto"), Gb = a("prsim"), F0 = a("pscr"), F1 = a("psi"), F2 = a("puncsp"), F3 = a("qfr"), F4 = a("qint"), F5 = a("qopf"), F6 = a("qprime"), EW = a("ratio"), Fr = a("range"), FH = a("rBarr"), FP = a("quaternions"), FQ = a("quatint"), FR = a("quest"), FS = a("questeq"), FT = a("quot"), FU = a("rAarr"), FV = a("rArr"), FW = a("rAtail"), FI = a("rHar"), FJ = a("race"), FK = a("racute"), FL = a("radic"), FM = a("raemptyv"), FN = a("rang"), FO = a("rangd"), Fs = a("rarrfs"), FA = a("rangle"), FB = a("raquo"), FC = a("rarr"), FD = a("rarrap"), FE = a("rarrb"), FF = a("rarrbfs"), FG = a("rarrc"), Ft = a("rarrhk"), Fu = a("rarrlp"), Fv = a("rarrpl"), Fw = a("rarrsim"), Fx = a("rarrtl"), Fy = a("rarrw"), Fz = a("ratail"), EX = a("rdquor"), Fb = a("rcaron"), Fj = a("rationals"), Fk = a("rbarr"), Fl = a("rbbrk"), Fm = a("rbrace"), Fn = a("rbrack"), Fo = a("rbrke"), Fp = a("rbrksld"), Fq = a("rbrkslu"), Fc = a("rcedil"), Fd = a("rceil"), Fe = a("rcub"), Ff = a("rcy"), Fg = a("rdca"), Fh = a("rdldhar"), Fi = a("rdquo"), EY = a("rfisht"), E6 = a("rdsh"), E7 = a("real"), E8 = a("realine"), E9 = a("realpart"), E_ = a("reals"), E$ = a("rect"), Fa = a("reg"), EZ = a("rfloor"), E0 = a("rfr"), E1 = a("rhard"), E2 = a("rharu"), E3 = a("rharul"), E4 = a("rho"), E5 = a("rhov"), CR = a("seswar"), DT = a("rthree"), Eo = a("roang"), EF = a("ring"), EN = a("rightarrowtail"), EO = a("rightharpoondown"), EP = a("rightharpoonup"), EQ = a("rightleftarrows"), ER = a("rightleftharpoons"), ES = a("rightrightarrows"), ET = a("rightsquigarrow"), EU = a("rightthreetimes"), EG = a("risingdotseq"), EH = a("rlarr"), EI = a("rlhar"), EJ = a("rlm"), EK = a("rmoust"), EL = a("rmoustache"), EM = a("rnmid"), Ep = a("rppolint"), Ex = a("roarr"), Ey = a("robrk"), Ez = a("ropar"), EA = a("ropf"), EB = a("roplus"), EC = a("rotimes"), ED = a("rpar"), EE = a("rpargt"), Eq = a("rrarr"), Er = a("rsaquo"), Es = a("rscr"), Et = a("rsh"), Eu = a("rsqb"), Ev = a("rsquo"), Ew = a("rsquor"), DU = a("scirc"), D_ = a("sbquo"), Eg = a("rtimes"), Eh = a("rtri"), Ei = a("rtrie"), Ej = a("rtrif"), Ek = a("rtriltri"), El = a("ruluhar"), Em = a("rx"), En = a("sacute"), D$ = a("sc"), Ea = a("scE"), Eb = a("scap"), Ec = a("scaron"), Ed = a("sccue"), Ee = a("sce"), Ef = a("scedil"), DV = a("sdotb"), D3 = a("scnE"), D4 = a("scnap"), D5 = a("scnsim"), D6 = a("scpolint"), D7 = a("scsim"), D8 = a("scy"), D9 = a("sdot"), DW = a("sdote"), DX = a("seArr"), DY = a("searhk"), DZ = a("searr"), D0 = a("searrow"), D1 = a("sect"), D2 = a("semi"), CS = a("smte"), Dn = a("sime"), DD = a("shortmid"), DL = a("setminus"), DM = a("setmn"), DN = a("sext"), DO = a("sfr"), DP = a("sfrown"), DQ = a("sharp"), DR = a("shchcy"), DS = a("shcy"), DE = a("shortparallel"), DF = a("shy"), DG = a("sigma"), DH = a("sigmaf"), DI = a("sigmav"), DJ = a("sim"), DK = a("simdot"), Do = a("simrarr"), Dw = a("simeq"), Dx = a("simg"), Dy = a("simgE"), Dz = a("siml"), DA = a("simlE"), DB = a("simne"), DC = a("simplus"), Dp = a("slarr"), Dq = a("smallsetminus"), Dr = a("smashp"), Ds = a("smeparsl"), Dt = a("smid"), Du = a("smile"), Dv = a("smt"), CT = a("sqsubseteq"), C9 = a("spar"), Df = a("smtes"), Dg = a("softcy"), Dh = a("sol"), Di = a("solb"), Dj = a("solbar"), Dk = a("sopf"), Dl = a("spades"), Dm = a("spadesuit"), C_ = a("sqcap"), C$ = a("sqcaps"), Da = a("sqcup"), Db = a("sqcups"), Dc = a("sqsub"), Dd = a("sqsube"), De = a("sqsubset"), CU = a("squf"), C2 = a("sqsup"), C3 = a("sqsupe"), C4 = a("sqsupset"), C5 = a("sqsupseteq"), C6 = a("squ"), C7 = a("square"), C8 = a("squarf"), CV = a("srarr"), CW = a("sscr"), CX = a("ssetmn"), CY = a("ssmile"), CZ = a("sstarf"), C0 = a("star"), C1 = a("starf"), yI = a("uhblk"), AM = a("tdot"), BO = a("sup3"), Cj = a("subsetneqq"), CA = a("subnE"), CI = a("straightphi"), CJ = a("strns"), CK = a(nc), CL = a("subE"), CM = a("subdot"), CN = a("sube"), CO = a("subedot"), CP = a("submult"), CB = a("subne"), CC = a("subplus"), CD = a("subrarr"), CE = a("subset"), CF = a("subseteq"), CG = a("subseteqq"), CH = a("subsetneq"), Ck = a("succneqq"), Cs = a("subsim"), Ct = a("subsub"), Cu = a("subsup"), Cv = a("succ"), Cw = a("succapprox"), Cx = a("succcurlyeq"), Cy = a("succeq"), Cz = a("succnapprox"), Cl = a("succnsim"), Cm = a("succsim"), Cn = a("sum"), Co = a("sung"), Cp = a("sup"), Cq = a("sup1"), Cr = a("sup2"), BP = a("supsetneqq"), B5 = a("supmult"), Cb = a("supE"), Cc = a("supdot"), Cd = a("supdsub"), Ce = a("supe"), Cf = a("supedot"), Cg = a("suphsol"), Ch = a("suphsub"), Ci = a("suplarr"), B6 = a("supnE"), B7 = a("supne"), B8 = a("supplus"), B9 = a("supset"), B_ = a("supseteq"), B$ = a("supseteqq"), Ca = a("supsetneq"), BQ = a("swnwar"), BY = a("supsim"), BZ = a("supsub"), B0 = a("supsup"), B1 = a("swArr"), B2 = a("swarhk"), B3 = a("swarr"), B4 = a("swarrow"), BR = a("szlig"), BS = a("target"), BT = a("tau"), BU = a("tbrk"), BV = a("tcaron"), BW = a("tcedil"), BX = a("tcy"), AN = a("triangleq"), Bi = a("timesbar"), By = a("thicksim"), BG = a("telrec"), BH = a("tfr"), BI = a("there4"), BJ = a("therefore"), BK = a("theta"), BL = a("thetasym"), BM = a("thetav"), BN = a("thickapprox"), Bz = a("thinsp"), BA = a("thkap"), BB = a("thksim"), BC = a("thorn"), BD = a("tilde"), BE = a("times"), BF = a("timesb"), Bj = a("topfork"), Br = a("timesd"), Bs = a("tint"), Bt = a("toea"), Bu = a("top"), Bv = a("topbot"), Bw = a("topcir"), Bx = a("topf"), Bk = a("tosa"), Bl = a("tprime"), Bm = a("trade"), Bn = a("triangle"), Bo = a("triangledown"), Bp = a("triangleleft"), Bq = a("trianglelefteq"), AO = a("uArr"), A4 = a("trpezium"), Ba = a("triangleright"), Bb = a("trianglerighteq"), Bc = a("tridot"), Bd = a("trie"), Be = a("triminus"), Bf = a("triplus"), Bg = a("trisb"), Bh = a("tritime"), A5 = a("tscr"), A6 = a("tscy"), A7 = a("tshcy"), A8 = a("tstrok"), A9 = a("twixt"), A_ = a("twoheadleftarrow"), A$ = a("twoheadrightarrow"), AP = a("udarr"), AX = a("uHar"), AY = a("uacute"), AZ = a("uarr"), A0 = a("ubrcy"), A1 = a("ubreve"), A2 = a("ucirc"), A3 = a("ucy"), AQ = a("udblac"), AR = a("udhar"), AS = a("ufisht"), AT = a("ufr"), AU = a("ugrave"), AV = a("uharl"), AW = a("uharr"), yJ = a("vrtri"), zL = a("vBarv"), Ag = a("upuparrows"), Aw = a("uparrow"), AE = a("ulcorn"), AF = a("ulcorner"), AG = a("ulcrop"), AH = a("ultri"), AI = a("umacr"), AJ = a("uml"), AK = a("uogon"), AL = a("uopf"), Ax = a("updownarrow"), Ay = a("upharpoonleft"), Az = a("upharpoonright"), AA = a("uplus"), AB = a("upsi"), AC = a("upsih"), AD = a("upsilon"), Ah = a("utilde"), Ap = a("urcorn"), Aq = a("urcorner"), Ar = a("urcrop"), As = a("uring"), At = a("urtri"), Au = a("uscr"), Av = a("utdot"), Ai = a("utri"), Aj = a("utrif"), Ak = a("uuarr"), Al = a("uuml"), Am = a("uwangle"), An = a("vArr"), Ao = a("vBar"), zM = a("vartriangleleft"), z2 = a("varr"), z_ = a("vDash"), z$ = a("vangrt"), Aa = a("varepsilon"), Ab = a("varkappa"), Ac = a("varnothing"), Ad = a("varphi"), Ae = a("varpi"), Af = a("varpropto"), z3 = a("varrho"), z4 = a("varsigma"), z5 = a("varsubsetneq"), z6 = a("varsubsetneqq"), z7 = a("varsupsetneq"), z8 = a("varsupsetneqq"), z9 = a("vartheta"), zN = a("verbar"), zV = a("vartriangleright"), zW = a("vcy"), zX = a("vdash"), zY = a("vee"), zZ = a("veebar"), z0 = a("veeeq"), z1 = a("vellip"), zO = a("vert"), zP = a("vfr"), zQ = a("vltri"), zR = a("vnsub"), zS = a("vnsup"), zT = a("vopf"), zU = a("vprop"), yK = a("xotime"), zf = a("wscr"), zv = a("wedge"), zD = a("vscr"), zE = a("vsubnE"), zF = a("vsubne"), zG = a("vsupnE"), zH = a("vsupne"), zI = a("vzigzag"), zJ = a("wcirc"), zK = a("wedbar"), zw = a("wedgeq"), zx = a("weierp"), zy = a("wfr"), zz = a("wopf"), zA = a("wp"), zB = a("wr"), zC = a("wreath"), zg = a("xi"), zo = a("xcap"), zp = a("xcirc"), zq = a("xcup"), zr = a("xdtri"), zs = a("xfr"), zt = a("xhArr"), zu = a("xharr"), zh = a("xlArr"), zi = a("xlarr"), zj = a("xmap"), zk = a("xnis"), zl = a("xodot"), zm = a("xopf"), zn = a("xoplus"), yL = a("yscr"), y1 = a("yacute"), y9 = a("xrArr"), y_ = a("xrarr"), y$ = a("xscr"), za = a("xsqcup"), zb = a("xuplus"), zc = a("xutri"), zd = a("xvee"), ze = a("xwedge"), y2 = a("yacy"), y3 = a("ycirc"), y4 = a("ycy"), y5 = a("yen"), y6 = a("yfr"), y7 = a("yicy"), y8 = a("yopf"), yM = a("zeta"), yU = a("yucy"), yV = a("yuml"), yW = a("zacute"), yX = a("zcaron"), yY = a("zcy"), yZ = a("zdot"), y0 = a("zeetrf"), yN = a("zfr"), yO = a("zhcy"), yP = a("zigrarr"), yQ = a("zopf"), yR = a("zscr"), yS = a("zwj"), yT = a("zwnj"), ae9 = [2, [5, 0]], ae$ = a("  "), afa = [2, [5, 0]], ae_ = [2, [6, 0]], aeT = a("mailto:"), aeQ = a("<!"), aeO = a(pE), aeN = a("<![CDATA["), aeL = a(lW), aeK = a("<?"), aeI = a(oI), aeH = a("<!--"), aew = [0, a("src/parser.ml"), 1312, 8], aet = [1, 0, a(px)], aeu = [1, 0, a("[")], aev = [1, 0, a(px)], aeo = [5, 1, [0, [0, a(lW), 0]]], aen = [5, 1, [0, [0, a(pE), 0]]], ael = [5, 1, [0, [0, a(oI), 0]]], aem = [5, 1, [0, [0, a(ga), 0]]], aek = [5, 0, 0], aeh = [5, 1, 0], aeg = [5, 1, [0, [0, a("<\/script>"), [0, a("</pre>"), [0, a("</style>"), 0]]]]], aef = [5, 0, 0], aea = [0, 0], aeb = [0, 0], ad8 = [0, 0], ad9 = [0, 0], ad_ = [0, 0], ad6 = [0, 0], ad7 = [0, 0], ad0 = a(j), ad1 = a("="), ad2 = [0, 0, 0, 0], ad4 = a(a1), ad5 = a(hp), ad3 = a("id"), adW = a(nc), adU = a("tails"), adT = a("heads"), adS = a("offset"), adX = a("Omd__Parser.Fail"), aec = aio([a("address"), a("aside"), a("base"), a("basefont"), a(oW), a("body"), a("caption"), a("center"), a("col"), a("colgroup"), a(f9), a("details"), a("dialog"), a(hy), a(gh), a(mO), a(pU), a("fieldset"), a("figcaption"), a("figure"), a("footer"), a("form"), a("frame"), a("frameset"), a(nf), a(kH), a(m4), a(lc), a(nW), a(om), a("head"), a("header"), a(lv), a("html"), a("iframe"), a("legend"), a(lN), a("link"), a("main"), a("menu"), a("menuitem"), a("meta"), a("nav"), a("noframes"), a(li), a("optgroup"), a("option"), a(en), a("param"), a("section"), a(pb), a("summary"), a("table"), a("tbody"), a("td"), a("tfoot"), a("th"), a("thead"), a(gI), a("tr"), a("track"), a(p4)]), aed = [0, a("script"), [0, a(ed), [0, a("style"), 0]]], ae1 = [0, a(j), 0], afh = a(j), aff = a(j), afg = a(j), afi = a(j), afj = [3, 0], afk = [3, 0], afl = a(bE), afm = a(j), afn = a(bE), afo = [0, 0], afc = a(bE), afd = a(bE), afx = [0, [11, a("caml_ppf: "), [2, 0, 0]], a("caml_ppf: %s")], afw = [0, [11, a("sharp_ppf: "), [2, 0, 0]], a("sharp_ppf: %s")], afv = [0, [11, a("stderr: "), [2, 0, 0]], a("stderr: %s")], afu = [0, [11, a("stdout: "), [2, 0, 0]], a("stdout: %s")], afr = a("Failed to created worker"), afp = [0, [11, a(oZ), [2, 0, 0]], a(mv)], afq = [0, [11, a(oZ), [2, 0, 0]], a(mv)], afy = a("cell_type"), afz = a(pb), afA = a("outputs"), afB = a("metadata"), afC = [0, a("skip"), 0], afD = a("execution_count"), afE = a(el), afF = a("markdown"), afH = a("cells"), afI = [0, 0], afV = a("dom"), afU = a(pM), afO = a(pM), afP = a("root"), afQ = a("dispatch"), afR = a("parent"), afN = a(m0), afM = a("__CM__state"), afJ = a(m0), afK = a("selection"), afL = a("extensions"), afS = a("__CM__view"), agA = [0, [18, [1, [0, 0, a(j)]], [12, aW, [15, [12, bD, [17, 0, 0]]]]], a("@[{%a}@]")], agx = a("TOOD"), af3 = a("step already executed"), afW = [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], afX = [0, a(hj), 19, 6], afY = [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], afZ = [0, a(hj), 99, 6], af0 = [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], af1 = [0, a(hj), md, 6], agb = a("Note.Src.Step"), agd = [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], agB = [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], agG = [0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], agK = a(cd), agL = a("addedNodes"), agM = a(cd), agQ = a("brr_add"), agN = a("removedNodes"), agO = a(cd), agP = a("brr_rem"), agI = a(cd), agR = a("MutationObserver"), agT = a(' {\n  "metadata": {\n    "kernelspec": {\n      "display_name": "OCaml 4.07.1",\n      "language": "OCaml",\n      "name": "ocaml-jupyter"\n    },\n    "language_info": {\n      "name": "OCaml",\n      "version": "4.07.1",\n      "codemirror_mode": "text/x-ocaml",\n      "file_extension": ".ml",\n      "mimetype": "text/x-ocaml",\n      "nbconverter_exporter": null,\n      "pygments_lexer": "OCaml"\n    }\n  },\n  "nbformat": 4,\n  "nbformat_minor": 2,\n  "cells": [\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "# Puttin\' on the Types\\n\\n\\n\\nLast time we created a little database capable of storing information in a structured but untyped way. Of course, being strong, statically typed OCaml engineers rather than crazy dynamically typed python people we demand a typed interface to this database, so let\'s examine how we do this today in xapi. First we\'ll pull in what we did last time:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "#require \\"astring\\";;",\n      "outputs": [],\n      "execution_count": 1\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "module StringMap = Map.Make(String)\\n\\nmodule type VAL = sig\\n  type t\\nend\\n\\nmodule Make (V : VAL) = struct\\n  type t = V.t StringMap.t\\n  let empty = StringMap.empty\\n  let add = StringMap.add\\n  let find = StringMap.find\\n  let mem = StringMap.mem\\n  let remove = StringMap.remove\\n  let update key default f t =\\n    let cur = if mem key t then find key t else default in\\n    let newv = f cur in\\n    StringMap.add key newv t\\n  let iter = StringMap.iter\\nend\\n\\nmodule Row = struct\\n  include Make(String)\\nend\\n\\nmodule Table = struct\\n  include Make(Row)\\nend\\n\\nmodule TableSet = struct\\n  include Make(Table)\\nend\\n\\nmodule Database = struct\\n  type t = TableSet.t\\n  let empty = TableSet.empty\\nend\\n\\nlet get_field tblname objref fldname db =\\n  TableSet.find tblname db |>\\n  Table.find objref |>\\n  Row.find fldname\\n\\nlet set_field tblname objref fldname v : Database.t -> Database.t =\\n  (function _ -> v)\\n  |> Row.update fldname \\"\\"\\n  |> Table.update objref Row.empty\\n  |> TableSet.update tblname Table.empty\\n\\nlet dump db =\\n  Printf.printf \\"(*\\";\\n  TableSet.iter (fun tblname table ->\\n    Printf.printf \\"\\\\n+ TABLE: %s\\\\n\\\\n\\" tblname;\\n    Table.iter (fun objref row ->\\n      Printf.printf \\"++ Object: %s\\\\n\\" objref;\\n      Row.iter (fun fldname v ->\\n        Printf.printf \\"  %s: %s\\\\n\\" fldname v) row) table) db;\\n  Printf.printf \\"*)\\\\n\\"\\n\\nlet db = ref Database.empty;;",\n      "outputs": [],\n      "execution_count": 2\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "## Datamodel\\n\\n\\n\\nWe have a large set of files in xapi that determine the datamodel of database as well as defining the API methods that form the Xen API, including everything required to generate the [online documentation](https://xapi-project.github.io/xen-api/). These are all in the xen-api source tree under the [ocaml/idl](https://github.com/xapi-project/xen-api/tree/a3d339335fd6f4d1f649a40771f0847abdc10e63/ocaml/idl) directory. These are compiled into an executable that\'s used to generate a large amount of code that actually forms the core of xapi. For example, from these definitions we generate, amongst others, `client.ml` and `server.ml` that contain functions for both ends of the Xen API. The API is quite object oriented, so we declare classes such as `VM` and `host`, and have methods that operate on them, for example, `VM.suspend` or `host.set_name_label`. These classes have fields that are defined by creating values of the [following type](https://github.com/xapi-project/xen-api/blob/a3d339335fd6f4d1f649a40771f0847abdc10e63/ocaml/idl/datamodel_types.ml#L341-L358):\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": { "skip": true },\n      "source": "type field = {\\n  release: release;\\n  lifecycle: lifecycle_transition list;\\n  field_persist: bool;\\n  default_value: api_value option;\\n  internal_only: bool;\\n  qualifier: qualifier;\\n  field_name: string;\\n  full_name: string list;\\n  ty: ty;\\n  field_description: string;\\n  field_has_effect: bool;\\n  field_ignore_foreign_key: bool;\\n  field_setter_roles: string list option;\\n  field_getter_roles: string list option;\\n  field_map_keys_roles: (string * (string list option)) list;\\n  field_doc_tags: doc_tag list;\\n}",\n      "outputs": [],\n      "execution_count": 3\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": { },\n      "source": "\\nand then these fields are gathered together along with the list of methods into a value that represents the whole class:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "type obj = {\\n  name : string;\\n  description : string;\\n  obj_lifecycle: lifecycle_transition list;\\n  contents : content list;\\n  messages : message list;\\n  doccomments : (string * string) list;\\n  msg_lifecycles: ((string * (lifecycle_transition list)) list);\\n  gen_constructor_destructor: bool;\\n  force_custom_actions: qualifier option; (* None,Some(RW),Some(StaticRO) *)\\n  obj_allowed_roles: string list option; (* for construct, destruct and explicit obj msgs*)\\n  obj_implicit_msg_allowed_roles: string list option; (* for all other implicit obj msgs*)\\n  gen_events: bool;\\n  persist: persist_option;\\n  obj_release: release;\\n  in_database: bool; (* If the object is in the database *)\\n  obj_doc_tags: doc_tag list;\\n}",\n      "outputs": [],\n      "execution_count": 4\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nWe\'ll be concentrating on the `contents` field of the object, which contains (slightly indirectly) objects of type `field`. Of the field object, we care most in this set of posts on the field `ty`.\\n\\nWe\'re also going to pick on [VMs](https://xapi-project.github.io/xen-api/classes/vm.html) (Virtual Machines) and [VBDs](https://xapi-project.github.io/xen-api/classes/vbd.html) (Virtual Block Devices - or disks!) as examples of the sorts of objects and fields we\'ll be storing in the database. For example, a VM will have a name, a field representing how much memory it should have, a list of disks (VBDs) associated with it, and other fields. A VBD might have a reference back to the VM it belongs to, a field delaring the device it should appear as, and so on.\\n\\nLet\'s see an excerpt from the [definition of the VM object](https://github.com/xapi-project/xen-api/blob/bcd3f3b7a63b420aff3b27e2993566621eb2d559/ocaml/idl/datamodel_vm.ml#L1227-L1404):\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "let t =\\n    create_obj\\n        ~in_db:true\\n        ~in_product_since:rel_rio\\n        ~in_oss_since:oss_since_303\\n        ~internal_deprecated_since:None\\n        ~persist:PersistEverything\\n        ~gen_constructor_destructor:true\\n        ~name:_vm\\n        ~descr:\\"A virtual machine (or \'guest\').\\"\\n        ~gen_events:true\\n        ~lifecycle:[\\n            Published, rel_rio, \\"\\";\\n        ]\\n        ~messages_default_allowed_roles:_R_VM_ADMIN\\n        ~messages:[\\n            snapshot;\\n            snapshot_with_quiesce;\\n(* ... *)\\n        ]\\n        ~contents:([\\n            uid _vm;\\n(* ... *)\\n            field ~qualifier:DynamicRO ~ty:(Set (Ref _vbd)) \\"VBDs\\" \\"virtual block devices\\";\\n            field  ~ty:(Map(String, String)) \\"other_config\\" \\"additional configuration\\";\\n            field ~qualifier:DynamicRO ~ty:Int \\"domid\\" \\"domain ID (if available, -1 otherwise)\\";\\n(* ... *)\\n        ])\\n        ()",\n      "outputs": [],\n      "execution_count": 5\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nWe\'re simply creating a value representing the VM object using the [`create_obj`](https://github.com/xapi-project/xen-api/blob/a3d339335fd6f4d1f649a40771f0847abdc10e63/ocaml/idl/datamodel_common.ml#L484-L532) function, to which we pass some interesting bits of metadata associated with the object - we store it in the database, it\'s been in since the Rio release (4.0) and some other miscellaneous values. We also list the API methods we might use on a VM, and importantly for the database, the `contents` argument lists all of the fields in the object - for example we\'ve got here a field called \\"VBDs\\" that has a type defined by the `ty` parameter as `Set (Ref _vbd)`, and a field `other_config` which has a type `Map (String, String)`, representing, as you might expect, a string to string map. These types are values of type [`Datamodel_types.ty`](https://github.com/xapi-project/xen-api/blob/a3d339335fd6f4d1f649a40771f0847abdc10e63/ocaml/idl/datamodel_types.ml):\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "type ty =\\n  | String\\n  | Int\\n  | Float\\n  | Bool\\n  | DateTime\\n  | Enum of string * (string * string) list\\n  | Set of ty\\n  | Map of ty * ty\\n  | Ref of string\\n  | Record of string",\n      "outputs": [],\n      "execution_count": 6\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nThe first few are obvious, then we\'ve got:\\n\\n1. An enumeration type that has a name and a list of named values it can take\\n\\n2. Sets and Maps that are used recursively\\n\\n3. References to particular object types (e.g. a \\"VM\\" reference or a \\"VBD\\" reference)\\n\\n4. A named record, for example the VM we\'re constructing above\\n\\nThis is the full set of different types of value we can currently store in our database.\\n\\nThese types all have some sort of representation in the generated OCaml code. Most of the `ty` type correspond as you might imagine to OCaml types, so `Strings` are simply OCaml strings, `Ints` are int64s and so on. We generate explicity type declarations for Enums, Sets, Maps, Refs and Records.\\n\\nEnums are expressed as polymorphic variants, so for example the `power_state` enum of a VM is declared like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "let power_state =\\n    Enum (\\"vm_power_state\\", [ \\"Halted\\", \\"VM is offline and not using any resources\\";\\n                              \\"Paused\\", \\"All resources have been allocated but the VM itself is paused and its vCPUs are not running\\";\\n                              \\"Running\\", \\"Running\\";\\n                              \\"Suspended\\", \\"VM state has been saved to disk and it is nolonger running. Note that disks remain in-use while the VM is suspended.\\"])",\n      "outputs": [],\n      "execution_count": 7\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nwhich is compiled into a type declaration looking like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "type vm_power_state = [ `Halted | `Paused | `Running | `Suspended ]",\n      "outputs": [],\n      "execution_count": 8\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nSets and Maps are declared like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "type vm_power_state_set = vm_power_state list\\ntype string_to_string_map = (string * string) list",\n      "outputs": [],\n      "execution_count": 9\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nRecords are turned into standard OCaml records, so our VM record is declared like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "type vM_t = {\\n    vM_uuid : string;\\n    vM_name_label : string;\\n    vM_VBDs : ref_VBD_set;\\n(* ... *)\\n    }",\n      "outputs": [],\n      "execution_count": 10\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nand Refs are declared like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {"skip": true },\n      "source": "type ref_VM = [`VM] Ref.t",\n      "outputs": [],\n      "execution_count": 11\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nThis looks a bit unusual, so let\'s take a look at how this works.\\n"\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "### Typesafe references\\n\\n\\n\\nReferences are implemented as strings as we saw in the previous article, but they refer to different classes of objects, so we might have a reference to a VM or a reference to a Host. We\'d like to distinguish at the type level between references to these different object types so the type checker would reject any use of a Host reference to look up a VM field. We do this by using phantom types.\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "module Ref : sig\\n  type \'a t\\n  val string_of : \'a t -> string\\n  val of_string : string -> \'a t\\n  val pp : Format.formatter -> \'a t -> unit\\nend = struct\\n  type \'a t = string\\n  let string_of v = v\\n  let of_string v = v\\n  let pp fmt v = Format.pp_print_string fmt v\\nend",\n      "outputs": [],\n      "execution_count": 12\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nPhantom type are those where a type is parameterized but the type parameter doesn\'t appear on the right hand side:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "type \'a t = string",\n      "outputs": [],\n      "execution_count": 13\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nThis says that all references are strings and actually have nothing to do with the `\'a`. However, we hide the concrete representation outside of the module by using a signature that simply exposes the Ref.t as an _opaque_ parameterized type.\\n\\nLet\'s see what happens when we try to create one of these:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let x = Ref.of_string \\"OpaqueRef:foo\\";;",\n      "outputs": [],\n      "execution_count": 14\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nSince we haven\'t told OCaml what the type parameter ought to be it doesn\'t know and leaves it unspecified. However, note that this isn\'t a _polymorphic_ value, it\'s just we haven\'t yet figure out what monomorphic type it should be. It\'s not so nice to do this since buggy code elsewhere might lead to the OCaml deciding the type is something wacky, so let\'s constrain the type at the point we create the reference from a string. We\'ll use polymorphic variants because we don\'t need to declare or namespace them.\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let vm : [`vm] Ref.t = Ref.of_string \\"OpaqueRef:abcde\\"\\nlet vbd1 : [`vbd] Ref.t = Ref.of_string \\"OpaqueRef:fghij\\"\\nlet vbd2 : [`vbd] Ref.t = Ref.of_string \\"OpaqueRef:12345\\"",\n      "outputs": [],\n      "execution_count": 15\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nand we can also use this to constrain the types our functions will accept. For example:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let function_for_VM_only : [`vm] Ref.t -> unit = fun _ -> ()",\n      "outputs": [],\n      "execution_count": 16\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nAs well as the `client.ml` and `server.ml` modules mentioned above, the code generator also generates modules to access the database in a typesafe fashion. These are:\\n\\n1. DM_to_String - containing functions to convert to strings from the OCaml representation of the datamodel types (e.g. `(Set (Ref _vbd))` or `Map(String,String)` from above)\\n\\n2. String_to_DM - containing functions to convert from strings back to the OCaml types.\\n\\n3. A module per class containing setters and getters for each field of the object.\\n\\nIn the VM object definition excerpt above we had a field called `VBDs` that had type `Set (Ref _vbd)`. The entry for that in The generated conversion modules might look like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "module DM_to_String = struct\\n  let vbd_set : [`vbd] Ref.t list -> string =\\n    fun vbds ->\\n      String.concat \\",\\" (List.map Ref.string_of vbds)\\nend\\n\\nmodule String_to_DM = struct\\n  let vbd_set : string -> [`vbd] Ref.t list =\\n    fun str ->\\n      Astring.String.cuts ~sep:\\",\\" str |> List.map Ref.of_string\\nend",\n      "outputs": [],\n      "execution_count": 17\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nand the setters and getters might look like this:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "module VM : sig\\n  val set_name_label : [`vm] Ref.t -> string -> unit\\n  val get_name_label : [`vm] Ref.t -> string\\n  val set_memory : [`vm] Ref.t -> int -> unit\\n  val get_memory : [`vm] Ref.t -> int\\n  val set_VBDs : [`vm] Ref.t -> [`vbd] Ref.t list -> unit\\n  val get_VBDs : [`vm] Ref.t -> [`vbd] Ref.t list\\nend = struct\\n  let set_name_label self v =\\n    db := set_field \\"VM\\" (Ref.string_of self) \\"name_label\\" v !db\\n\\n  let get_name_label self =\\n    get_field \\"VM\\" (Ref.string_of self) \\"name_label\\" !db\\n\\n  let set_memory self v =\\n    db := set_field \\"VM\\" (Ref.string_of self) \\"memory\\" (string_of_int v) !db\\n\\n  let get_memory self =\\n    get_field \\"VM\\" (Ref.string_of self) \\"memory\\" !db |> int_of_string\\n\\n  let set_VBDs self v =\\n    db := set_field \\"VM\\" (Ref.string_of self) \\"VBDs\\" (DM_to_String.vbd_set v) !db\\n\\n  let get_VBDs self =\\n    get_field \\"VM\\" (Ref.string_of self) \\"VBDs\\" !db |> String_to_DM.vbd_set\\nend\\n\\nmodule VBD : sig\\n  val set_VM : [`vbd] Ref.t -> [`vm] Ref.t -> unit\\n  val get_VM : [`vbd] Ref.t -> [`vm] Ref.t\\nend = struct\\n  let set_VM self v =\\n    db := set_field \\"VBD\\" (Ref.string_of self) \\"VM\\" (Ref.string_of v) !db\\n\\n  let get_VM self =\\n    get_field \\"VBD\\" (Ref.string_of self) \\"VM\\" !db |> Ref.of_string\\nend",\n      "outputs": [],\n      "execution_count": 18\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nLet\'s now give this a whirl:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let vm : [`vm] Ref.t = Ref.of_string \\"OpaqueRef:abcde\\";;",\n      "outputs": [],\n      "execution_count": 19\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let vbd1 : [`vbd] Ref.t = Ref.of_string \\"OpaqueRef:fghij\\";;",\n      "outputs": [],\n      "execution_count": 20\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let vbd2 : [`vbd] Ref.t = Ref.of_string \\"OpaqueRef:12345\\";;",\n      "outputs": [],\n      "execution_count": 21\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "let _ =\\nVM.set_name_label vm \\"my first vm\\";\\nVBD.set_VM vbd1 vm;\\nVBD.set_VM vbd2 vm;\\nVM.set_VBDs vm [vbd1; vbd2];\\nVM.set_memory vm 63356;\\ndump !db;;",\n      "outputs": [],\n      "execution_count": 22\n    },\n    {\n      "cell_type": "markdown",\n      "metadata": {},\n      "source": "\\nWe can also see how incorrect usage is rejected:\\n"\n    },\n    {\n      "cell_type": "code",\n      "metadata": {},\n      "source": "VM.set_name_label vbd1 \\"my vbd!?\\";;",\n      "outputs": [],\n      "execution_count": 23\n    }\n  ]\n}\n'), agU = a(j), agV = a(gI), agW = a("href"), agX = a("a"), agY = a(gI), agZ = a("alt"), ag0 = a("src"), ag1 = a("img"), ag2 = a("em"), ag3 = a("strong"), ag4 = a(el), ag5 = a("br"), ahn = a(f9), aho = a(pU), ag8 = a(lN), ag6 = a(en), ag7 = a(li), ag_ = a(p4), ag9 = a("start"), ag$ = a(oW), aha = a(lv), ahb = a(en), ahc = a(nf), ahd = a(kH), ahe = a(m4), ahf = a(lc), ahg = a(nW), ahh = a(om), ahi = a(j), ahl = a("language-"), ahm = a(hp), ahj = a(el), ahk = a(ed), ahp = a(mO), ahB = a("erk"), ahu = a("text-white-500"), ahv = a("text-red-500"), ahw = a("text-green-500"), ahx = a("text-blue-500"), aht = a(bE), ahs = a("__CM__markdown"), ahq = a("__CM__basic_setup"), ahz = [0, [11, a("Got "), [4, 0, 0, 0, [11, a(" entries"), 0]]], a("Got %d entries")];
    function K(a10) {
      if (typeof a10 === "number")
        return 0;
      else
        switch (a10[0]) {
          case 0:
            return [0, K(a10[1])];
          case 1:
            return [1, K(a10[1])];
          case 2:
            return [2, K(a10[1])];
          case 3:
            return [3, K(a10[1])];
          case 4:
            return [4, K(a10[1])];
          case 5:
            return [5, K(a10[1])];
          case 6:
            return [6, K(a10[1])];
          case 7:
            return [7, K(a10[1])];
          case 8:
            var c10 = a10[1];
            return [8, c10, K(a10[2])];
          case 9:
            var b10 = a10[1];
            return [9, b10, b10, K(a10[3])];
          case 10:
            return [10, K(a10[1])];
          case 11:
            return [11, K(a10[1])];
          case 12:
            return [12, K(a10[1])];
          case 13:
            return [13, K(a10[1])];
          default:
            return [14, K(a10[1])];
        }
    }
    function aq(a10, b10) {
      if (typeof a10 === "number")
        return b10;
      else
        switch (a10[0]) {
          case 0:
            return [0, aq(a10[1], b10)];
          case 1:
            return [1, aq(a10[1], b10)];
          case 2:
            return [2, aq(a10[1], b10)];
          case 3:
            return [3, aq(a10[1], b10)];
          case 4:
            return [4, aq(a10[1], b10)];
          case 5:
            return [5, aq(a10[1], b10)];
          case 6:
            return [6, aq(a10[1], b10)];
          case 7:
            return [7, aq(a10[1], b10)];
          case 8:
            var c10 = a10[1];
            return [8, c10, aq(a10[2], b10)];
          case 9:
            var d10 = a10[2], e10 = a10[1];
            return [9, e10, d10, aq(a10[3], b10)];
          case 10:
            return [10, aq(a10[1], b10)];
          case 11:
            return [11, aq(a10[1], b10)];
          case 12:
            return [12, aq(a10[1], b10)];
          case 13:
            return [13, aq(a10[1], b10)];
          default:
            return [14, aq(a10[1], b10)];
        }
    }
    function G(a10, b10) {
      if (typeof a10 === "number")
        return b10;
      else
        switch (a10[0]) {
          case 0:
            return [0, G(a10[1], b10)];
          case 1:
            return [1, G(a10[1], b10)];
          case 2:
            var c10 = a10[1];
            return [2, c10, G(a10[2], b10)];
          case 3:
            var d10 = a10[1];
            return [3, d10, G(a10[2], b10)];
          case 4:
            var e10 = a10[3], f10 = a10[2], g10 = a10[1];
            return [4, g10, f10, e10, G(a10[4], b10)];
          case 5:
            var h10 = a10[3], i10 = a10[2], j10 = a10[1];
            return [5, j10, i10, h10, G(a10[4], b10)];
          case 6:
            var k10 = a10[3], l10 = a10[2], m10 = a10[1];
            return [6, m10, l10, k10, G(a10[4], b10)];
          case 7:
            var n10 = a10[3], o10 = a10[2], p10 = a10[1];
            return [7, p10, o10, n10, G(a10[4], b10)];
          case 8:
            var q10 = a10[3], r10 = a10[2], s10 = a10[1];
            return [8, s10, r10, q10, G(a10[4], b10)];
          case 9:
            var t10 = a10[1];
            return [9, t10, G(a10[2], b10)];
          case 10:
            return [10, G(a10[1], b10)];
          case 11:
            var u10 = a10[1];
            return [11, u10, G(a10[2], b10)];
          case 12:
            var v10 = a10[1];
            return [12, v10, G(a10[2], b10)];
          case 13:
            var w10 = a10[2], x10 = a10[1];
            return [13, x10, w10, G(a10[3], b10)];
          case 14:
            var y10 = a10[2], z10 = a10[1];
            return [14, z10, y10, G(a10[3], b10)];
          case 15:
            return [15, G(a10[1], b10)];
          case 16:
            return [16, G(a10[1], b10)];
          case 17:
            var A10 = a10[1];
            return [17, A10, G(a10[2], b10)];
          case 18:
            var B10 = a10[1];
            return [18, B10, G(a10[2], b10)];
          case 19:
            return [19, G(a10[1], b10)];
          case 20:
            var C10 = a10[2], D10 = a10[1];
            return [20, D10, C10, G(a10[3], b10)];
          case 21:
            var E10 = a10[1];
            return [21, E10, G(a10[2], b10)];
          case 22:
            return [22, G(a10[1], b10)];
          case 23:
            var F10 = a10[1];
            return [23, F10, G(a10[2], b10)];
          default:
            var H10 = a10[2], I10 = a10[1];
            return [24, I10, H10, G(a10[3], b10)];
        }
    }
    function eJ(a10, c10, b10) {
      return a10[1] === c10 ? (a10[1] = b10, 1) : 0;
    }
    function bg(a10) {
      throw [0, c$, a10];
    }
    function v(a10) {
      throw [0, h9, a10];
    }
    M(0);
    function eL(b10, a10) {
      return aim(b10, a10) ? b10 : a10;
    }
    function ic(b10, a10) {
      return ahY(b10, a10) ? b10 : a10;
    }
    function da(a10) {
      return 0 <= a10 ? a10 : -a10 | 0;
    }
    var q4 = 2147483647;
    function ag(d10, c10) {
      var a10 = k(d10), e10 = k(c10), b10 = U(a10 + e10 | 0);
      aX(d10, 0, b10, 0, a10);
      aX(c10, 0, b10, a10, e10);
      return Y(b10);
    }
    function q5(a10) {
      return a10 ? q6 : q7;
    }
    function bM(a10, b10) {
      if (a10) {
        var c10 = a10[1];
        return [0, c10, bM(a10[2], b10)];
      }
      return b10;
    }
    aiv(0);
    var q_ = qS(1), ay = qS(2);
    function q$(b10) {
      function a10(b11) {
        var a11 = b11;
        for (; ; ) {
          if (a11) {
            var c10 = a11[2], d10 = a11[1];
            try {
              br(d10);
            } catch (a12) {
              a12 = p(a12);
              if (a12[1] !== ia)
                throw a12;
              var e10 = a12;
            }
            var a11 = c10;
            continue;
          }
          return 0;
        }
      }
      return a10(aiw(0));
    }
    function bN(b10, a10) {
      return h1(b10, a10, 0, k(a10));
    }
    function id(a10) {
      return bN(ay, a10);
    }
    function ie(a10) {
      bN(ay, a10);
      h2(ay, 10);
      return br(ay);
    }
    var eM = [0, q$];
    function ig(c10) {
      for (; ; ) {
        var a10 = eM[1], e10 = [0, 1], b10 = 1 - eJ(eM, a10, function(a11, b11) {
          return function(e11) {
            if (eJ(a11, 1, 0))
              d(c10, 0);
            return d(b11, 0);
          };
        }(e10, a10));
        if (b10)
          continue;
        return b10;
      }
    }
    function db(a10) {
      return d(eM[1], 0);
    }
    h6(a(kz), db);
    if (aiK(0))
      ig(function(a10) {
        return ahX(a10);
      });
    function ih(h10, g10, e10) {
      var a10 = g10, c10 = e10;
      for (; ; ) {
        var b10 = d(c10, 0);
        if (b10) {
          var i10 = b10[2], a10 = f(h10, a10, b10[1]), c10 = i10;
          continue;
        }
        return a10;
      }
    }
    function rb(a10) {
      return a10 ? a10[1] : v(rc);
    }
    function a6(b10, a10) {
      return a10 ? [0, d(b10, a10[1])] : 0;
    }
    function dc(b10, a10) {
      return a10 ? d(b10, a10[1]) : 0;
    }
    function rd(a10) {
      if (0 <= a10 && !(em < a10))
        return a10;
      return v(re);
    }
    function ii(a10) {
      return 25 < a10 + gv >>> 0 ? a10 : a10 + 32 | 0;
    }
    function rl(a10) {
      return 25 < a10 + ax >>> 0 ? a10 : a10 + cP | 0;
    }
    function cq(a10) {
      var b10 = 0 <= a10 ? 1 : 0, c10 = b10 ? a10 <= 55295 ? 1 : 0 : b10;
      if (c10)
        var d10 = c10;
      else
        var e10 = 57344 <= a10 ? 1 : 0, d10 = e10 ? a10 <= l1 ? 1 : 0 : e10;
      return d10;
    }
    function b(a10) {
      return cq(a10) ? a10 : v(ag(c6(rn, a10), rm));
    }
    var eN = aiJ(0), cr = (4 * eN | 0) - 1 | 0;
    M(0);
    function eO(c10) {
      var b10 = 0, a10 = c10;
      for (; ; ) {
        if (a10) {
          var b10 = b10 + 1 | 0, a10 = a10[2];
          continue;
        }
        return b10;
      }
    }
    function bt(d10, c10) {
      var a10 = d10, b10 = c10;
      for (; ; ) {
        if (a10) {
          var e10 = [0, a10[1], b10], a10 = a10[2], b10 = e10;
          continue;
        }
        return b10;
      }
    }
    function ab(a10) {
      return bt(a10, 0);
    }
    function ij(a10, c10, b10) {
      if (c10 <= a10)
        return 0;
      var e10 = d(b10, a10);
      return [0, e10, ij(a10 + 1 | 0, c10, b10)];
    }
    function eP(a10) {
      if (a10) {
        var b10 = a10[1];
        return bM(b10, eP(a10[2]));
      }
      return 0;
    }
    function ak(b10, a10) {
      if (a10) {
        var c10 = a10[2], e10 = d(b10, a10[1]);
        return [0, e10, ak(b10, c10)];
      }
      return 0;
    }
    function aR(c10, b10) {
      var a10 = b10;
      for (; ; ) {
        if (a10) {
          var e10 = a10[2];
          d(c10, a10[1]);
          var a10 = e10;
          continue;
        }
        return 0;
      }
    }
    function bO(e10, d10, c10) {
      var b10 = d10, a10 = c10;
      for (; ; ) {
        if (a10) {
          var g10 = a10[2], b10 = f(e10, b10, a10[1]), a10 = g10;
          continue;
        }
        return b10;
      }
    }
    function ik(d10, c10) {
      var a10 = c10;
      for (; ; ) {
        if (a10) {
          var e10 = a10[2], b10 = bp(a10[1], d10) === 0 ? 1 : 0;
          if (b10)
            return b10;
          var a10 = e10;
          continue;
        }
        return 0;
      }
    }
    function il(d10, c10) {
      var a10 = c10;
      for (; ; ) {
        if (a10) {
          var b10 = a10[1], e10 = a10[2], f10 = b10[2];
          if (bp(b10[1], d10) === 0)
            return f10;
          var a10 = e10;
          continue;
        }
        throw Q;
      }
    }
    function im(f10) {
      var g10 = 0;
      return function(h10) {
        var b10 = g10, a10 = h10;
        for (; ; ) {
          if (a10) {
            var c10 = a10[2], e10 = d(f10, a10[1]);
            if (e10) {
              var b10 = [0, e10[1], b10], a10 = c10;
              continue;
            }
            var a10 = c10;
            continue;
          }
          return ab(b10);
        }
      };
    }
    function eQ(b10, a10) {
      if (b10) {
        if (a10) {
          var c10 = a10[1], d10 = b10[1];
          return [0, [0, d10, c10], eQ(b10[2], a10[2])];
        }
      } else if (!a10)
        return 0;
      return v(rr);
    }
    function bu(a10, c10) {
      var b10 = U(a10);
      ahT(b10, 0, a10, c10);
      return b10;
    }
    var rs = U(0);
    function eR(c10, b10, a10) {
      if (0 <= b10 && 0 <= a10 && !((aj(c10) - a10 | 0) < b10)) {
        var d10 = U(a10);
        bn(c10, b10, d10, 0, a10);
        return d10;
      }
      return v(rt);
    }
    function eS(c10, b10, a10) {
      return Y(eR(c10, b10, a10));
    }
    function io(e10, c10, d10, b10, a10) {
      if (0 <= a10 && 0 <= c10 && !((aj(e10) - a10 | 0) < c10) && 0 <= b10 && !((aj(d10) - a10 | 0) < b10))
        return bn(e10, c10, d10, b10, a10);
      return v(ru);
    }
    function a7(e10, c10, d10, b10, a10) {
      if (0 <= a10 && 0 <= c10 && !((k(e10) - a10 | 0) < c10) && 0 <= b10 && !((aj(d10) - a10 | 0) < b10))
        return aX(e10, c10, d10, b10, a10);
      return v(rv);
    }
    function ip(c10) {
      var a10 = c10 - 9 | 0, b10 = 0;
      if (4 < a10 >>> 0) {
        if (a10 === 23)
          b10 = 1;
      } else if (a10 !== 2)
        b10 = 1;
      return b10 ? 1 : 0;
    }
    function iq(g10, b10) {
      var c10 = aj(b10);
      if (c10 === 0)
        return b10;
      var e10 = U(c10), f10 = c10 - 1 | 0, h10 = 0;
      if (!(f10 < 0)) {
        var a10 = h10;
        for (; ; ) {
          P(e10, a10, d(g10, aO(b10, a10)));
          var i10 = a10 + 1 | 0;
          if (f10 !== a10) {
            var a10 = i10;
            continue;
          }
          break;
        }
      }
      return e10;
    }
    function a8(b10, a10) {
      return Y(bu(b10, a10));
    }
    function aI(c10, b10, a10) {
      return Y(eR(aN(c10), b10, a10));
    }
    function bP(l10, g10) {
      if (g10) {
        var h10 = k(l10), c10 = 0, b10 = g10, q10 = 0;
        for (; ; ) {
          if (b10) {
            var i10 = b10[1];
            if (b10[2]) {
              var j10 = (k(i10) + h10 | 0) + c10 | 0, n10 = b10[2], o10 = c10 <= j10 ? j10 : v(rw), c10 = o10, b10 = n10;
              continue;
            }
            var m10 = k(i10) + c10 | 0;
          } else
            var m10 = c10;
          var f10 = U(m10), e10 = q10, d10 = g10;
          for (; ; ) {
            if (d10) {
              var a10 = d10[1];
              if (d10[2]) {
                var p10 = d10[2];
                aX(a10, 0, f10, e10, k(a10));
                aX(l10, 0, f10, e10 + k(a10) | 0, h10);
                var e10 = (e10 + k(a10) | 0) + h10 | 0, d10 = p10;
                continue;
              }
              aX(a10, 0, f10, e10, k(a10));
            }
            return Y(f10);
          }
        }
      }
      return rx;
    }
    function ir(c10) {
      var a10 = c10 - 9 | 0, b10 = 0;
      if (4 < a10 >>> 0) {
        if (a10 === 23)
          b10 = 1;
      } else if (a10 !== 2)
        b10 = 1;
      return b10 ? 1 : 0;
    }
    function dd(b10) {
      if (a5(b10, ry))
        return b10;
      if (!ir(ap(b10, 0)) && !ir(ap(b10, k(b10) - 1 | 0)))
        return b10;
      var d10 = aN(b10), e10 = aj(d10), a10 = [0, 0];
      for (; ; ) {
        if (a10[1] < e10 && ip(aO(d10, a10[1]))) {
          a10[1]++;
          continue;
        }
        var c10 = [0, e10 - 1 | 0];
        for (; ; ) {
          if (a10[1] <= c10[1] && ip(aO(d10, c10[1]))) {
            c10[1] += -1;
            continue;
          }
          var f10 = a10[1] <= c10[1] ? eR(d10, a10[1], (c10[1] - a10[1] | 0) + 1 | 0) : rs;
          return Y(f10);
        }
      }
    }
    function rz(e10, d10, c10, b10) {
      var a10 = c10;
      for (; ; ) {
        if (d10 <= a10)
          throw Q;
        if (ap(e10, a10) === b10)
          return a10;
        var a10 = a10 + 1 | 0;
        continue;
      }
    }
    function rA(b10, a10, d10) {
      var c10 = k(b10);
      if (0 <= a10 && !(c10 < a10))
        try {
          rz(b10, c10, a10, d10);
          var e10 = 1;
          return e10;
        } catch (a11) {
          a11 = p(a11);
          if (a11 === Q)
            return 0;
          throw a11;
        }
      return v(rB);
    }
    function rC(b10, a10) {
      return rA(b10, 0, a10);
    }
    function cs(a10) {
      return Y(iq(ii, aN(a10)));
    }
    function is(f10, b10) {
      var c10 = [0, 0], d10 = [0, k(b10)], e10 = k(b10) - 1 | 0;
      if (!(e10 < 0)) {
        var a10 = e10;
        for (; ; ) {
          if (ap(b10, a10) === f10) {
            var h10 = c10[1];
            c10[1] = [0, aI(b10, a10 + 1 | 0, (d10[1] - a10 | 0) - 1 | 0), h10];
            d10[1] = a10;
          }
          var i10 = a10 - 1 | 0;
          if (a10 !== 0) {
            var a10 = i10;
            continue;
          }
          break;
        }
      }
      var g10 = c10[1];
      return [0, aI(b10, 0, d10[1]), g10];
    }
    function it(c10) {
      var a10 = c10.length - 1 - 1 | 0, b10 = 0;
      for (; ; ) {
        if (0 <= a10) {
          var d10 = [0, c10[1 + a10], b10], a10 = a10 - 1 | 0, b10 = d10;
          continue;
        }
        return b10;
      }
    }
    function iu(a10) {
      if (a10) {
        var d10 = 0, c10 = a10, g10 = a10[2], h10 = a10[1];
        for (; ; ) {
          if (c10) {
            var d10 = d10 + 1 | 0, c10 = c10[2];
            continue;
          }
          var f10 = cm(d10, h10), e10 = 1, b10 = g10;
          for (; ; ) {
            if (b10) {
              var i10 = b10[2];
              f10[1 + e10] = b10[1];
              var e10 = e10 + 1 | 0, b10 = i10;
              continue;
            }
            return f10;
          }
        }
      }
      return [0];
    }
    M(0);
    function rN(c10) {
      function p10(a11) {
        return a11 ? a11[4] : 0;
      }
      function e10(b11, e11, a11) {
        var c11 = b11 ? b11[4] : 0, d10 = a11 ? a11[4] : 0, f10 = d10 <= c11 ? c11 + 1 | 0 : d10 + 1 | 0;
        return [0, b11, e11, a11, f10];
      }
      function g10(b11, f10, a11) {
        var g11 = b11 ? b11[4] : 0, h11 = a11 ? a11[4] : 0;
        if ((h11 + 2 | 0) < g11) {
          if (b11) {
            var c11 = b11[3], k11 = b11[2], i11 = b11[1], m11 = p10(c11);
            if (m11 <= p10(i11))
              return e10(i11, k11, e10(c11, f10, a11));
            if (c11) {
              var n11 = c11[2], o11 = c11[1], q11 = e10(c11[3], f10, a11);
              return e10(e10(i11, k11, o11), n11, q11);
            }
            return v(rF);
          }
          return v(rG);
        }
        if ((g11 + 2 | 0) < h11) {
          if (a11) {
            var j11 = a11[3], l11 = a11[2], d10 = a11[1], r11 = p10(d10);
            if (r11 <= p10(j11))
              return e10(e10(b11, f10, d10), l11, j11);
            if (d10) {
              var s11 = d10[2], t11 = d10[1], u11 = e10(d10[3], l11, j11);
              return e10(e10(b11, f10, t11), s11, u11);
            }
            return v(rH);
          }
          return v(rI);
        }
        var w11 = h11 <= g11 ? g11 + 1 | 0 : h11 + 1 | 0;
        return [0, b11, f10, a11, w11];
      }
      function a10(d10, b11) {
        if (b11) {
          var e11 = b11[3], h11 = b11[2], i11 = b11[1], j11 = f(c10[1], d10, h11);
          if (j11 === 0)
            return b11;
          if (0 <= j11) {
            var k11 = a10(d10, e11);
            return e11 === k11 ? b11 : g10(i11, h11, k11);
          }
          var l11 = a10(d10, i11);
          return i11 === l11 ? b11 : g10(l11, h11, e11);
        }
        return [0, 0, d10, 0, 1];
      }
      function h10(a11) {
        return [0, 0, a11, 0, 1];
      }
      function E10(b11, a11) {
        if (a11) {
          var c11 = a11[3], d10 = a11[2];
          return g10(E10(b11, a11[1]), d10, c11);
        }
        return h10(b11);
      }
      function F10(b11, a11) {
        if (a11) {
          var c11 = a11[2], d10 = a11[1];
          return g10(d10, c11, F10(b11, a11[3]));
        }
        return h10(b11);
      }
      function b10(c11, d10, a11) {
        if (c11) {
          if (a11) {
            var f10 = a11[4], h11 = c11[4], i11 = a11[3], j11 = a11[2], k11 = a11[1], l11 = c11[3], m11 = c11[2], n11 = c11[1];
            return (f10 + 2 | 0) < h11 ? g10(n11, m11, b10(l11, d10, a11)) : (h11 + 2 | 0) < f10 ? g10(b10(c11, d10, k11), j11, i11) : e10(c11, d10, a11);
          }
          return F10(d10, c11);
        }
        return E10(d10, a11);
      }
      function j10(c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var b11 = a11[1];
            if (b11) {
              var a11 = b11;
              continue;
            }
            return a11[2];
          }
          throw Q;
        }
      }
      function G10(c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var b11 = a11[1];
            if (b11) {
              var a11 = b11;
              continue;
            }
            return [0, a11[2]];
          }
          return 0;
        }
      }
      function H10(b11) {
        var a11 = b11;
        for (; ; ) {
          if (a11) {
            if (a11[3]) {
              var a11 = a11[3];
              continue;
            }
            return a11[2];
          }
          throw Q;
        }
      }
      function T10(b11) {
        var a11 = b11;
        for (; ; ) {
          if (a11) {
            if (a11[3]) {
              var a11 = a11[3];
              continue;
            }
            return [0, a11[2]];
          }
          return 0;
        }
      }
      function q10(a11) {
        if (a11) {
          var b11 = a11[1];
          if (b11) {
            var c11 = a11[3], d10 = a11[2];
            return g10(q10(b11), d10, c11);
          }
          return a11[3];
        }
        return v(rJ);
      }
      function m10(c11, a11) {
        if (c11) {
          if (a11) {
            var d10 = q10(a11);
            return b10(c11, j10(a11), d10);
          }
          return c11;
        }
        return a11;
      }
      function i10(d10, a11) {
        if (a11) {
          var e11 = a11[3], g11 = a11[2], h11 = a11[1], l11 = f(c10[1], d10, g11);
          if (l11 === 0)
            return [0, h11, 1, e11];
          if (0 <= l11) {
            var j11 = i10(d10, e11), m11 = j11[3], n11 = j11[2];
            return [0, b10(h11, g11, j11[1]), n11, m11];
          }
          var k11 = i10(d10, h11), o11 = k11[2], p11 = k11[1];
          return [0, p11, o11, b10(k11[3], g11, e11)];
        }
        return rK;
      }
      var s10 = 0;
      function U10(a11) {
        return a11 ? 0 : 1;
      }
      function V10(g11, e11) {
        var a11 = e11;
        for (; ; ) {
          if (a11) {
            var h11 = a11[3], i11 = a11[1], b11 = f(c10[1], g11, a11[2]), d10 = b11 === 0 ? 1 : 0;
            if (d10)
              return d10;
            var j11 = 0 <= b11 ? h11 : i11, a11 = j11;
            continue;
          }
          return 0;
        }
      }
      function t10(e11, b11) {
        if (b11) {
          var a11 = b11[3], h11 = b11[2], d10 = b11[1], i11 = f(c10[1], e11, h11);
          if (i11 === 0) {
            if (d10) {
              if (a11) {
                var m11 = q10(a11);
                return g10(d10, j10(a11), m11);
              }
              return d10;
            }
            return a11;
          }
          if (0 <= i11) {
            var k11 = t10(e11, a11);
            return a11 === k11 ? b11 : g10(d10, h11, k11);
          }
          var l11 = t10(e11, d10);
          return d10 === l11 ? b11 : g10(l11, h11, a11);
        }
        return 0;
      }
      function k10(d10, c11) {
        if (d10) {
          if (c11) {
            var g11 = c11[4], e11 = c11[2], h11 = d10[4], f10 = d10[2], m11 = c11[3], n11 = c11[1], o11 = d10[3], p11 = d10[1];
            if (g11 <= h11) {
              if (g11 === 1)
                return a10(e11, d10);
              var j11 = i10(f10, c11), q11 = j11[1], r11 = k10(o11, j11[3]);
              return b10(k10(p11, q11), f10, r11);
            }
            if (h11 === 1)
              return a10(f10, c11);
            var l11 = i10(e11, d10), s11 = l11[1], t11 = k10(l11[3], m11);
            return b10(k10(s11, n11), e11, t11);
          }
          return d10;
        }
        return c11;
      }
      function n10(a11, d10) {
        if (a11) {
          if (d10) {
            var e11 = a11[3], f10 = a11[2], g11 = a11[1], c11 = i10(f10, d10), h11 = c11[1];
            if (c11[2]) {
              var j11 = n10(e11, c11[3]);
              return b10(n10(g11, h11), f10, j11);
            }
            var k11 = n10(e11, c11[3]);
            return m10(n10(g11, h11), k11);
          }
          return 0;
        }
        return 0;
      }
      function u10(e11, a11) {
        if (a11) {
          var j11 = a11[3], g11 = a11[2], k11 = a11[1], l11 = f(c10[1], e11, g11);
          if (l11 === 0)
            return 0;
          if (0 <= l11) {
            var h11 = u10(e11, j11);
            if (h11) {
              var m11 = h11[2];
              return [0, b10(k11, g11, h11[1]), m11];
            }
            return 0;
          }
          var i11 = u10(e11, k11);
          if (i11) {
            var n11 = i11[2], o11 = i11[1];
            return [0, o11, function(a12) {
              return b10(d(n11, 0), g11, j11);
            }];
          }
          return 0;
        }
        return [0, 0, function(a12) {
          return 0;
        }];
      }
      function I10(g11, f10) {
        var a11 = g11, b11 = f10;
        for (; ; ) {
          if (a11 && b11) {
            var h11 = a11[3], i11 = a11[2], j11 = a11[1];
            if (a11 === b11)
              return 0;
            var c11 = u10(i11, b11);
            if (c11) {
              var k11 = c11[2], e11 = I10(j11, c11[1]);
              if (e11) {
                var a11 = h11, b11 = d(k11, 0);
                continue;
              }
              return e11;
            }
            return 0;
          }
          return 1;
        }
      }
      function o10(a11, d10) {
        if (a11) {
          if (d10) {
            var e11 = a11[3], f10 = a11[2], g11 = a11[1], c11 = i10(f10, d10), h11 = c11[1];
            if (c11[2]) {
              var j11 = o10(e11, c11[3]);
              return m10(o10(g11, h11), j11);
            }
            var k11 = o10(e11, c11[3]);
            return b10(o10(g11, h11), f10, k11);
          }
          return a11;
        }
        return 0;
      }
      function l10(d10, c11) {
        var a11 = d10, b11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = [0, a11[2], a11[3], b11], a11 = a11[1], b11 = e11;
            continue;
          }
          return b11;
        }
      }
      function J10(m11, k11) {
        var n11 = l10(k11, 0), b11 = l10(m11, 0), a11 = n11;
        for (; ; ) {
          if (b11) {
            if (a11) {
              var e11 = a11[3], g11 = a11[2], h11 = b11[3], i11 = b11[2], d10 = f(c10[1], b11[1], a11[1]);
              if (d10 === 0) {
                var j11 = l10(g11, e11), b11 = l10(i11, h11), a11 = j11;
                continue;
              }
              return d10;
            }
            return 1;
          }
          return a11 ? -1 : 0;
        }
      }
      function W10(b11, a11) {
        return J10(b11, a11) === 0 ? 1 : 0;
      }
      function r10(o11, n11) {
        var a11 = o11, b11 = n11;
        for (; ; ) {
          if (a11) {
            if (b11) {
              var h11 = b11[3], i11 = b11[1], d10 = a11[3], e11 = a11[2], g11 = a11[1], j11 = f(c10[1], e11, b11[2]);
              if (j11 === 0) {
                var k11 = r10(g11, i11);
                if (k11) {
                  var a11 = d10, b11 = h11;
                  continue;
                }
                return k11;
              }
              if (0 <= j11) {
                var l11 = r10([0, 0, e11, d10, 0], h11);
                if (l11) {
                  var a11 = g11;
                  continue;
                }
                return l11;
              }
              var m11 = r10([0, g11, e11, 0, 0], i11);
              if (m11) {
                var a11 = d10;
                continue;
              }
              return m11;
            }
            return 0;
          }
          return 1;
        }
      }
      function K10(b11, c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = a11[3], f10 = a11[2];
            K10(b11, a11[1]);
            d(b11, f10);
            var a11 = e11;
            continue;
          }
          return 0;
        }
      }
      function L10(c11, e11, d10) {
        var a11 = e11, b11 = d10;
        for (; ; ) {
          if (a11) {
            var g11 = a11[3], h11 = a11[2], i11 = f(c11, h11, L10(c11, a11[1], b11)), a11 = g11, b11 = i11;
            continue;
          }
          return b11;
        }
      }
      function M10(b11, g11) {
        var a11 = g11;
        for (; ; ) {
          if (a11) {
            var h11 = a11[3], i11 = a11[1], c11 = d(b11, a11[2]);
            if (c11) {
              var e11 = M10(b11, i11);
              if (e11) {
                var a11 = h11;
                continue;
              }
              var f10 = e11;
            } else
              var f10 = c11;
            return f10;
          }
          return 1;
        }
      }
      function N10(b11, g11) {
        var a11 = g11;
        for (; ; ) {
          if (a11) {
            var h11 = a11[3], i11 = a11[1], c11 = d(b11, a11[2]);
            if (c11)
              var e11 = c11;
            else {
              var f10 = N10(b11, i11);
              if (!f10) {
                var a11 = h11;
                continue;
              }
              var e11 = f10;
            }
            return e11;
          }
          return 0;
        }
      }
      function w10(c11, a11) {
        if (a11) {
          var g11 = a11[3], h11 = a11[2], i11 = a11[1], e11 = w10(c11, i11), j11 = d(c11, h11), f10 = w10(c11, g11);
          if (j11) {
            if (i11 === e11 && g11 === f10)
              return a11;
            return b10(e11, h11, f10);
          }
          return m10(e11, f10);
        }
        return 0;
      }
      function x10(c11, a11) {
        if (a11) {
          var e11 = a11[2], l11 = a11[3], f10 = x10(c11, a11[1]), g11 = f10[2], h11 = f10[1], n11 = d(c11, e11), i11 = x10(c11, l11), j11 = i11[2], k11 = i11[1];
          if (n11) {
            var o11 = m10(g11, j11);
            return [0, b10(h11, e11, k11), o11];
          }
          var p11 = b10(g11, e11, j11);
          return [0, m10(h11, k11), p11];
        }
        return rL;
      }
      function y10(a11) {
        if (a11) {
          var b11 = a11[1], c11 = y10(a11[3]);
          return (y10(b11) + 1 | 0) + c11 | 0;
        }
        return 0;
      }
      function O10(d10, c11) {
        var b11 = d10, a11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = a11[2], f10 = a11[1], b11 = [0, e11, O10(b11, a11[3])], a11 = f10;
            continue;
          }
          return b11;
        }
      }
      function X10(a11) {
        return O10(0, a11);
      }
      function Y10(g11, e11) {
        var a11 = e11;
        for (; ; ) {
          if (a11) {
            var b11 = a11[2], h11 = a11[3], i11 = a11[1], d10 = f(c10[1], g11, b11);
            if (d10 === 0)
              return b11;
            var j11 = 0 <= d10 ? h11 : i11, a11 = j11;
            continue;
          }
          throw Q;
        }
      }
      function Z10(f10, j11) {
        var b11 = j11;
        for (; ; ) {
          if (b11) {
            var g11 = b11[2], k11 = b11[3], l11 = b11[1];
            if (d(f10, g11)) {
              var c11 = g11, a11 = l11;
              for (; ; ) {
                if (a11) {
                  var e11 = a11[2], h11 = a11[3], i11 = a11[1];
                  if (d(f10, e11)) {
                    var c11 = e11, a11 = i11;
                    continue;
                  }
                  var a11 = h11;
                  continue;
                }
                return c11;
              }
            }
            var b11 = k11;
            continue;
          }
          throw Q;
        }
      }
      function _10(f10, j11) {
        var b11 = j11;
        for (; ; ) {
          if (b11) {
            var g11 = b11[2], k11 = b11[3], l11 = b11[1];
            if (d(f10, g11)) {
              var c11 = g11, a11 = l11;
              for (; ; ) {
                if (a11) {
                  var e11 = a11[2], h11 = a11[3], i11 = a11[1];
                  if (d(f10, e11)) {
                    var c11 = e11, a11 = i11;
                    continue;
                  }
                  var a11 = h11;
                  continue;
                }
                return [0, c11];
              }
            }
            var b11 = k11;
            continue;
          }
          return 0;
        }
      }
      function $10(f10, j11) {
        var b11 = j11;
        for (; ; ) {
          if (b11) {
            var g11 = b11[2], k11 = b11[3], l11 = b11[1];
            if (d(f10, g11)) {
              var c11 = g11, a11 = k11;
              for (; ; ) {
                if (a11) {
                  var e11 = a11[2], h11 = a11[3], i11 = a11[1];
                  if (d(f10, e11)) {
                    var c11 = e11, a11 = h11;
                    continue;
                  }
                  var a11 = i11;
                  continue;
                }
                return c11;
              }
            }
            var b11 = l11;
            continue;
          }
          throw Q;
        }
      }
      function aa10(f10, j11) {
        var b11 = j11;
        for (; ; ) {
          if (b11) {
            var g11 = b11[2], k11 = b11[3], l11 = b11[1];
            if (d(f10, g11)) {
              var c11 = g11, a11 = k11;
              for (; ; ) {
                if (a11) {
                  var e11 = a11[2], h11 = a11[3], i11 = a11[1];
                  if (d(f10, e11)) {
                    var c11 = e11, a11 = h11;
                    continue;
                  }
                  var a11 = i11;
                  continue;
                }
                return [0, c11];
              }
            }
            var b11 = l11;
            continue;
          }
          return 0;
        }
      }
      function ab10(g11, e11) {
        var a11 = e11;
        for (; ; ) {
          if (a11) {
            var b11 = a11[2], h11 = a11[3], i11 = a11[1], d10 = f(c10[1], g11, b11);
            if (d10 === 0)
              return [0, b11];
            var j11 = 0 <= d10 ? h11 : i11, a11 = j11;
            continue;
          }
          return 0;
        }
      }
      function z10(g11, e11, d10) {
        var h11 = 0;
        if (g11 !== 0) {
          var m11 = H10(g11);
          if (0 <= f(c10[1], m11, e11))
            h11 = 1;
        }
        if (!h11) {
          var i11 = 0;
          if (d10 !== 0) {
            var l11 = j10(d10);
            if (0 <= f(c10[1], e11, l11))
              i11 = 1;
          }
          if (!i11)
            return b10(g11, e11, d10);
        }
        return k10(g11, a10(e11, d10));
      }
      function A10(b11, a11) {
        if (a11) {
          var c11 = a11[3], e11 = a11[2], f10 = a11[1], g11 = A10(b11, f10), h11 = d(b11, e11), i11 = A10(b11, c11);
          if (f10 === g11 && e11 === h11 && c11 === i11)
            return a11;
          return z10(g11, h11, i11);
        }
        return 0;
      }
      function C10(e11, b11) {
        if (b11) {
          var f10 = b11[3], g11 = b11[2], h11 = b11[1], c11 = C10(e11, h11), i11 = d(e11, g11), a11 = C10(e11, f10);
          if (i11) {
            var k11 = i11[1];
            if (h11 === c11 && g11 === k11 && f10 === a11)
              return b11;
            return z10(c11, k11, a11);
          }
          if (c11) {
            if (a11) {
              var l11 = q10(a11);
              return z10(c11, j10(a11), l11);
            }
            return c11;
          }
          return a11;
        }
        return 0;
      }
      function ac10(d10) {
        if (d10) {
          var k11 = d10[2], g11 = d10[1];
          if (k11) {
            var l11 = k11[2], i11 = k11[1];
            if (l11) {
              var n11 = l11[2], o11 = l11[1];
              if (n11) {
                var p11 = n11[2], r11 = n11[1];
                if (p11) {
                  if (p11[2]) {
                    var b11 = c10[1], x11 = function(j12, g12) {
                      if (j12 === 2) {
                        if (g12) {
                          var n12 = g12[2];
                          if (n12) {
                            var o12 = n12[1], k12 = g12[1], J11 = n12[2], y11 = f(b11, k12, o12), K11 = y11 === 0 ? [0, k12, 0] : 0 < y11 ? [0, k12, [0, o12, 0]] : [0, o12, [0, k12, 0]];
                            return [0, K11, J11];
                          }
                        }
                      } else if (j12 === 3 && g12) {
                        var p12 = g12[2];
                        if (p12) {
                          var q12 = p12[2];
                          if (q12) {
                            var c11 = q12[1], a11 = p12[1], d11 = g12[1], N11 = q12[2], D11 = f(b11, d11, a11);
                            if (D11 === 0)
                              var E11 = f(b11, a11, c11), O11 = E11 === 0 ? [0, a11, 0] : 0 < E11 ? [0, a11, [0, c11, 0]] : [0, c11, [0, a11, 0]], r12 = O11;
                            else if (0 < D11) {
                              var F11 = f(b11, a11, c11);
                              if (F11 === 0)
                                var s11 = [0, d11, [0, a11, 0]];
                              else if (0 < F11)
                                var s11 = [0, d11, [0, a11, [0, c11, 0]]];
                              else
                                var G11 = f(b11, d11, c11), P11 = G11 === 0 ? [0, d11, [0, a11, 0]] : 0 < G11 ? [0, d11, [0, c11, [0, a11, 0]]] : [0, c11, [0, d11, [0, a11, 0]]], s11 = P11;
                              var r12 = s11;
                            } else {
                              var H11 = f(b11, d11, c11);
                              if (H11 === 0)
                                var t12 = [0, a11, [0, d11, 0]];
                              else if (0 < H11)
                                var t12 = [0, a11, [0, d11, [0, c11, 0]]];
                              else
                                var I11 = f(b11, a11, c11), Q10 = I11 === 0 ? [0, a11, [0, d11, 0]] : 0 < I11 ? [0, a11, [0, c11, [0, d11, 0]]] : [0, c11, [0, a11, [0, d11, 0]]], t12 = Q10;
                              var r12 = t12;
                            }
                            return [0, r12, N11];
                          }
                        }
                      }
                      var z11 = j12 >> 1, A11 = m11(z11, g12), L11 = A11[1], B10 = m11(j12 - z11 | 0, A11[2]), i12 = L11, h11 = B10[1], e11 = 0, M11 = B10[2];
                      for (; ; ) {
                        if (i12) {
                          if (h11) {
                            var u12 = h11[2], v10 = h11[1], w11 = i12[2], l12 = i12[1], x12 = f(b11, l12, v10);
                            if (x12 === 0) {
                              var i12 = w11, h11 = u12, e11 = [0, l12, e11];
                              continue;
                            }
                            if (0 <= x12) {
                              var h11 = u12, e11 = [0, v10, e11];
                              continue;
                            }
                            var i12 = w11, e11 = [0, l12, e11];
                            continue;
                          }
                          var C11 = bt(i12, e11);
                        } else
                          var C11 = bt(h11, e11);
                        return [0, C11, M11];
                      }
                    }, m11 = function(j12, g12) {
                      if (j12 === 2) {
                        if (g12) {
                          var m12 = g12[2];
                          if (m12) {
                            var n12 = m12[1], k12 = g12[1], J11 = m12[2], y11 = f(b11, k12, n12), K11 = y11 === 0 ? [0, k12, 0] : 0 <= y11 ? [0, n12, [0, k12, 0]] : [0, k12, [0, n12, 0]];
                            return [0, K11, J11];
                          }
                        }
                      } else if (j12 === 3 && g12) {
                        var o12 = g12[2];
                        if (o12) {
                          var p12 = o12[2];
                          if (p12) {
                            var c11 = p12[1], a11 = o12[1], d11 = g12[1], N11 = p12[2], D11 = f(b11, d11, a11);
                            if (D11 === 0)
                              var E11 = f(b11, a11, c11), O11 = E11 === 0 ? [0, a11, 0] : 0 <= E11 ? [0, c11, [0, a11, 0]] : [0, a11, [0, c11, 0]], q12 = O11;
                            else if (0 <= D11) {
                              var F11 = f(b11, d11, c11);
                              if (F11 === 0)
                                var r12 = [0, a11, [0, d11, 0]];
                              else if (0 <= F11)
                                var G11 = f(b11, a11, c11), P11 = G11 === 0 ? [0, a11, [0, d11, 0]] : 0 <= G11 ? [0, c11, [0, a11, [0, d11, 0]]] : [0, a11, [0, c11, [0, d11, 0]]], r12 = P11;
                              else
                                var r12 = [0, a11, [0, d11, [0, c11, 0]]];
                              var q12 = r12;
                            } else {
                              var H11 = f(b11, a11, c11);
                              if (H11 === 0)
                                var s11 = [0, d11, [0, a11, 0]];
                              else if (0 <= H11)
                                var I11 = f(b11, d11, c11), Q10 = I11 === 0 ? [0, d11, [0, a11, 0]] : 0 <= I11 ? [0, c11, [0, d11, [0, a11, 0]]] : [0, d11, [0, c11, [0, a11, 0]]], s11 = Q10;
                              else
                                var s11 = [0, d11, [0, a11, [0, c11, 0]]];
                              var q12 = s11;
                            }
                            return [0, q12, N11];
                          }
                        }
                      }
                      var z11 = j12 >> 1, A11 = x11(z11, g12), L11 = A11[1], B10 = x11(j12 - z11 | 0, A11[2]), i12 = L11, h11 = B10[1], e11 = 0, M11 = B10[2];
                      for (; ; ) {
                        if (i12) {
                          if (h11) {
                            var t12 = h11[2], u12 = h11[1], v10 = i12[2], l12 = i12[1], w11 = f(b11, l12, u12);
                            if (w11 === 0) {
                              var i12 = v10, h11 = t12, e11 = [0, l12, e11];
                              continue;
                            }
                            if (0 < w11) {
                              var i12 = v10, e11 = [0, l12, e11];
                              continue;
                            }
                            var h11 = t12, e11 = [0, u12, e11];
                            continue;
                          }
                          var C11 = bt(i12, e11);
                        } else
                          var C11 = bt(h11, e11);
                        return [0, C11, M11];
                      }
                    }, q11 = eO(d10), t11 = 2 <= q11 ? m11(q11, d10)[1] : d10, j11 = function(b12, a11) {
                      if (!(3 < b12 >>> 0))
                        switch (b12) {
                          case 0:
                            return [0, 0, a11];
                          case 1:
                            if (a11)
                              return [0, [0, 0, a11[1], 0, 1], a11[2]];
                            break;
                          case 2:
                            if (a11) {
                              var d11 = a11[2];
                              if (d11)
                                return [0, [0, [0, 0, a11[1], 0, 1], d11[1], 0, 2], d11[2]];
                            }
                            break;
                          default:
                            if (a11) {
                              var f10 = a11[2];
                              if (f10) {
                                var g12 = f10[2];
                                if (g12)
                                  return [0, [0, [0, 0, a11[1], 0, 1], f10[1], [0, 0, g12[1], 0, 1], 2], g12[2]];
                              }
                            }
                        }
                      var h11 = b12 / 2 | 0, i12 = j11(h11, a11), c11 = i12[2], l12 = i12[1];
                      if (c11) {
                        var m12 = c11[1], k12 = j11((b12 - h11 | 0) - 1 | 0, c11[2]), n12 = k12[2];
                        return [0, e10(l12, m12, k12[1]), n12];
                      }
                      throw [0, B, rM];
                    };
                    return j11(eO(t11), t11)[1];
                  }
                  var u11 = p11[1];
                  return a10(u11, a10(r11, a10(o11, a10(i11, h10(g11)))));
                }
                return a10(r11, a10(o11, a10(i11, h10(g11))));
              }
              return a10(o11, a10(i11, h10(g11)));
            }
            return a10(i11, h10(g11));
          }
          return h10(g11);
        }
        return s10;
      }
      function P10(c11, b11) {
        return ih(function(c12, b12) {
          return a10(b12, c12);
        }, b11, c11);
      }
      function ad10(a11) {
        return P10(a11, s10);
      }
      function D10(a11, d10) {
        if (a11) {
          var b11 = a11[1], c11 = l10(a11[2], a11[3]);
          return [0, b11, function(a12) {
            return D10(c11, a12);
          }];
        }
        return 0;
      }
      function ae10(a11) {
        var b11 = l10(a11, 0);
        return function(a12) {
          return D10(b11, a12);
        };
      }
      function R10(d10, c11) {
        var a11 = d10, b11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = [0, a11[2], a11[1], b11], a11 = a11[3], b11 = e11;
            continue;
          }
          return b11;
        }
      }
      function S10(a11, d10) {
        if (a11) {
          var b11 = a11[1], c11 = R10(a11[2], a11[3]);
          return [0, b11, function(a12) {
            return S10(c11, a12);
          }];
        }
        return 0;
      }
      function af10(a11) {
        var b11 = R10(a11, 0);
        return function(a12) {
          return S10(b11, a12);
        };
      }
      return [0, s10, U10, V10, a10, h10, t10, k10, n10, I10, o10, J10, W10, r10, K10, A10, L10, M10, N10, w10, C10, x10, y10, X10, j10, G10, H10, T10, j10, G10, i10, Y10, ab10, Z10, _10, $10, aa10, ac10, function(j11, i11) {
        var a11 = i11, b11 = 0;
        for (; ; ) {
          if (a11) {
            var d10 = a11[3], e11 = a11[2], k11 = a11[1], g11 = f(c10[1], e11, j11);
            if (g11 !== 0) {
              if (0 <= g11) {
                var a11 = k11, b11 = [0, e11, d10, b11];
                continue;
              }
              var a11 = d10;
              continue;
            }
            var h11 = [0, e11, d10, b11];
          } else
            var h11 = b11;
          return function(a12) {
            return D10(h11, a12);
          };
        }
      }, ae10, af10, P10, ad10];
    }
    function rW(g10) {
      function h10(a11) {
        return a11 ? a11[5] : 0;
      }
      function c10(b11, f10, e11, a11) {
        var c11 = h10(b11), d10 = h10(a11), g11 = d10 <= c11 ? c11 + 1 | 0 : d10 + 1 | 0;
        return [0, b11, f10, e11, a11, g11];
      }
      function p10(b11, a11) {
        return [0, 0, b11, a11, 0, 1];
      }
      function a10(b11, g11, f10, a11) {
        var i11 = b11 ? b11[5] : 0, j11 = a11 ? a11[5] : 0;
        if ((j11 + 2 | 0) < i11) {
          if (b11) {
            var d10 = b11[4], m11 = b11[3], n11 = b11[2], k11 = b11[1], q11 = h10(d10);
            if (q11 <= h10(k11))
              return c10(k11, n11, m11, c10(d10, g11, f10, a11));
            if (d10) {
              var r11 = d10[3], s11 = d10[2], t11 = d10[1], u11 = c10(d10[4], g11, f10, a11);
              return c10(c10(k11, n11, m11, t11), s11, r11, u11);
            }
            return v(rO);
          }
          return v(rP);
        }
        if ((i11 + 2 | 0) < j11) {
          if (a11) {
            var l11 = a11[4], o11 = a11[3], p11 = a11[2], e11 = a11[1], w11 = h10(e11);
            if (w11 <= h10(l11))
              return c10(c10(b11, g11, f10, e11), p11, o11, l11);
            if (e11) {
              var x11 = e11[3], y11 = e11[2], z11 = e11[1], A11 = c10(e11[4], p11, o11, l11);
              return c10(c10(b11, g11, f10, z11), y11, x11, A11);
            }
            return v(rQ);
          }
          return v(rR);
        }
        var B10 = j11 <= i11 ? i11 + 1 | 0 : j11 + 1 | 0;
        return [0, b11, g11, f10, a11, B10];
      }
      var C10 = 0;
      function P10(a11) {
        return a11 ? 0 : 1;
      }
      function m10(d10, c11, b11) {
        if (b11) {
          var e11 = b11[4], i11 = b11[3], j11 = b11[2], h11 = b11[1], o11 = b11[5], k11 = f(g10[1], d10, j11);
          if (k11 === 0)
            return i11 === c11 ? b11 : [0, h11, d10, c11, e11, o11];
          if (0 <= k11) {
            var l11 = m10(d10, c11, e11);
            return e11 === l11 ? b11 : a10(h11, j11, i11, l11);
          }
          var n11 = m10(d10, c11, h11);
          return h11 === n11 ? b11 : a10(n11, j11, i11, e11);
        }
        return [0, 0, d10, c11, 0, 1];
      }
      function R10(d10, c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = a11[4], h11 = a11[3], i11 = a11[1], b11 = f(g10[1], d10, a11[2]);
            if (b11 === 0)
              return h11;
            var j11 = 0 <= b11 ? e11 : i11, a11 = j11;
            continue;
          }
          throw Q;
        }
      }
      function S10(g11, l11) {
        var b11 = l11;
        for (; ; ) {
          if (b11) {
            var h11 = b11[2], m11 = b11[4], n11 = b11[3], o11 = b11[1];
            if (d(g11, h11)) {
              var e11 = h11, c11 = n11, a11 = o11;
              for (; ; ) {
                if (a11) {
                  var f10 = a11[2], i11 = a11[4], j11 = a11[3], k11 = a11[1];
                  if (d(g11, f10)) {
                    var e11 = f10, c11 = j11, a11 = k11;
                    continue;
                  }
                  var a11 = i11;
                  continue;
                }
                return [0, e11, c11];
              }
            }
            var b11 = m11;
            continue;
          }
          throw Q;
        }
      }
      function T10(g11, l11) {
        var b11 = l11;
        for (; ; ) {
          if (b11) {
            var h11 = b11[2], m11 = b11[4], n11 = b11[3], o11 = b11[1];
            if (d(g11, h11)) {
              var e11 = h11, c11 = n11, a11 = o11;
              for (; ; ) {
                if (a11) {
                  var f10 = a11[2], i11 = a11[4], j11 = a11[3], k11 = a11[1];
                  if (d(g11, f10)) {
                    var e11 = f10, c11 = j11, a11 = k11;
                    continue;
                  }
                  var a11 = i11;
                  continue;
                }
                return [0, [0, e11, c11]];
              }
            }
            var b11 = m11;
            continue;
          }
          return 0;
        }
      }
      function U10(g11, l11) {
        var b11 = l11;
        for (; ; ) {
          if (b11) {
            var h11 = b11[2], m11 = b11[4], n11 = b11[3], o11 = b11[1];
            if (d(g11, h11)) {
              var e11 = h11, c11 = n11, a11 = m11;
              for (; ; ) {
                if (a11) {
                  var f10 = a11[2], i11 = a11[4], j11 = a11[3], k11 = a11[1];
                  if (d(g11, f10)) {
                    var e11 = f10, c11 = j11, a11 = i11;
                    continue;
                  }
                  var a11 = k11;
                  continue;
                }
                return [0, e11, c11];
              }
            }
            var b11 = o11;
            continue;
          }
          throw Q;
        }
      }
      function V10(g11, l11) {
        var b11 = l11;
        for (; ; ) {
          if (b11) {
            var h11 = b11[2], m11 = b11[4], n11 = b11[3], o11 = b11[1];
            if (d(g11, h11)) {
              var e11 = h11, c11 = n11, a11 = m11;
              for (; ; ) {
                if (a11) {
                  var f10 = a11[2], i11 = a11[4], j11 = a11[3], k11 = a11[1];
                  if (d(g11, f10)) {
                    var e11 = f10, c11 = j11, a11 = i11;
                    continue;
                  }
                  var a11 = k11;
                  continue;
                }
                return [0, [0, e11, c11]];
              }
            }
            var b11 = o11;
            continue;
          }
          return 0;
        }
      }
      function W10(d10, c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = a11[4], h11 = a11[3], i11 = a11[1], b11 = f(g10[1], d10, a11[2]);
            if (b11 === 0)
              return [0, h11];
            var j11 = 0 <= b11 ? e11 : i11, a11 = j11;
            continue;
          }
          return 0;
        }
      }
      function X10(e11, d10) {
        var a11 = d10;
        for (; ; ) {
          if (a11) {
            var h11 = a11[4], i11 = a11[1], b11 = f(g10[1], e11, a11[2]), c11 = b11 === 0 ? 1 : 0;
            if (c11)
              return c11;
            var j11 = 0 <= b11 ? h11 : i11, a11 = j11;
            continue;
          }
          return 0;
        }
      }
      function n10(c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var b11 = a11[1];
            if (b11) {
              var a11 = b11;
              continue;
            }
            return [0, a11[2], a11[3]];
          }
          throw Q;
        }
      }
      function D10(c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var b11 = a11[1];
            if (b11) {
              var a11 = b11;
              continue;
            }
            return [0, [0, a11[2], a11[3]]];
          }
          return 0;
        }
      }
      function Y10(b11) {
        var a11 = b11;
        for (; ; ) {
          if (a11) {
            if (a11[4]) {
              var a11 = a11[4];
              continue;
            }
            return [0, a11[2], a11[3]];
          }
          throw Q;
        }
      }
      function Z10(b11) {
        var a11 = b11;
        for (; ; ) {
          if (a11) {
            if (a11[4]) {
              var a11 = a11[4];
              continue;
            }
            return [0, [0, a11[2], a11[3]]];
          }
          return 0;
        }
      }
      function q10(b11) {
        if (b11) {
          var c11 = b11[1];
          if (c11) {
            var d10 = b11[4], e11 = b11[3], f10 = b11[2];
            return a10(q10(c11), f10, e11, d10);
          }
          return b11[4];
        }
        return v(rS);
      }
      function E10(c11, b11) {
        if (c11) {
          if (b11) {
            var d10 = n10(b11), e11 = d10[2], f10 = d10[1];
            return a10(c11, f10, e11, q10(b11));
          }
          return c11;
        }
        return b11;
      }
      function r10(e11, b11) {
        if (b11) {
          var c11 = b11[4], i11 = b11[3], h11 = b11[2], d10 = b11[1], j11 = f(g10[1], e11, h11);
          if (j11 === 0)
            return E10(d10, c11);
          if (0 <= j11) {
            var k11 = r10(e11, c11);
            return c11 === k11 ? b11 : a10(d10, h11, i11, k11);
          }
          var l11 = r10(e11, d10);
          return d10 === l11 ? b11 : a10(l11, h11, i11, c11);
        }
        return 0;
      }
      function s10(c11, i11, b11) {
        if (b11) {
          var e11 = b11[4], j11 = b11[3], k11 = b11[2], h11 = b11[1], r11 = b11[5], l11 = f(g10[1], c11, k11);
          if (l11 === 0) {
            var m11 = d(i11, [0, j11]);
            if (m11) {
              var n11 = m11[1];
              return j11 === n11 ? b11 : [0, h11, c11, n11, e11, r11];
            }
            return E10(h11, e11);
          }
          if (0 <= l11) {
            var o11 = s10(c11, i11, e11);
            return e11 === o11 ? b11 : a10(h11, k11, j11, o11);
          }
          var p11 = s10(c11, i11, h11);
          return h11 === p11 ? b11 : a10(p11, k11, j11, e11);
        }
        var q11 = d(i11, 0);
        return q11 ? [0, 0, c11, q11[1], 0, 1] : 0;
      }
      function F10(b11, c11) {
        var a11 = c11;
        for (; ; ) {
          if (a11) {
            var d10 = a11[4], e11 = a11[3], g11 = a11[2];
            F10(b11, a11[1]);
            f(b11, g11, e11);
            var a11 = d10;
            continue;
          }
          return 0;
        }
      }
      function t10(b11, a11) {
        if (a11) {
          var c11 = a11[5], e11 = a11[4], f10 = a11[3], g11 = a11[2], h11 = t10(b11, a11[1]), i11 = d(b11, f10);
          return [0, h11, g11, i11, t10(b11, e11), c11];
        }
        return 0;
      }
      function u10(b11, a11) {
        if (a11) {
          var c11 = a11[2], d10 = a11[5], e11 = a11[4], g11 = a11[3], h11 = u10(b11, a11[1]), i11 = f(b11, c11, g11);
          return [0, h11, c11, i11, u10(b11, e11), d10];
        }
        return 0;
      }
      function G10(c11, e11, d10) {
        var a11 = e11, b11 = d10;
        for (; ; ) {
          if (a11) {
            var f10 = a11[4], g11 = a11[3], h11 = a11[2], i11 = _(c11, h11, g11, G10(c11, a11[1], b11)), a11 = f10, b11 = i11;
            continue;
          }
          return b11;
        }
      }
      function H10(b11, g11) {
        var a11 = g11;
        for (; ; ) {
          if (a11) {
            var h11 = a11[4], i11 = a11[1], c11 = f(b11, a11[2], a11[3]);
            if (c11) {
              var d10 = H10(b11, i11);
              if (d10) {
                var a11 = h11;
                continue;
              }
              var e11 = d10;
            } else
              var e11 = c11;
            return e11;
          }
          return 1;
        }
      }
      function I10(b11, g11) {
        var a11 = g11;
        for (; ; ) {
          if (a11) {
            var h11 = a11[4], i11 = a11[1], c11 = f(b11, a11[2], a11[3]);
            if (c11)
              var d10 = c11;
            else {
              var e11 = I10(b11, i11);
              if (!e11) {
                var a11 = h11;
                continue;
              }
              var d10 = e11;
            }
            return d10;
          }
          return 0;
        }
      }
      function J10(d10, c11, b11) {
        if (b11) {
          var e11 = b11[4], f10 = b11[3], g11 = b11[2];
          return a10(J10(d10, c11, b11[1]), g11, f10, e11);
        }
        return p10(d10, c11);
      }
      function K10(d10, c11, b11) {
        if (b11) {
          var e11 = b11[3], f10 = b11[2], g11 = b11[1];
          return a10(g11, f10, e11, K10(d10, c11, b11[4]));
        }
        return p10(d10, c11);
      }
      function b10(e11, g11, f10, d10) {
        if (e11) {
          if (d10) {
            var h11 = d10[5], i11 = e11[5], j11 = d10[4], k11 = d10[3], l11 = d10[2], m11 = d10[1], n11 = e11[4], o11 = e11[3], p11 = e11[2], q11 = e11[1];
            return (h11 + 2 | 0) < i11 ? a10(q11, p11, o11, b10(n11, g11, f10, d10)) : (i11 + 2 | 0) < h11 ? a10(b10(e11, g11, f10, m11), l11, k11, j11) : c10(e11, g11, f10, d10);
          }
          return K10(g11, f10, e11);
        }
        return J10(g11, f10, d10);
      }
      function j10(c11, a11) {
        if (c11) {
          if (a11) {
            var d10 = n10(a11), e11 = d10[2], f10 = d10[1];
            return b10(c11, f10, e11, q10(a11));
          }
          return c11;
        }
        return a11;
      }
      function o10(d10, e11, c11, a11) {
        return c11 ? b10(d10, e11, c11[1], a11) : j10(d10, a11);
      }
      function i10(c11, a11) {
        if (a11) {
          var d10 = a11[4], e11 = a11[3], h11 = a11[2], j11 = a11[1], m11 = f(g10[1], c11, h11);
          if (m11 === 0)
            return [0, j11, [0, e11], d10];
          if (0 <= m11) {
            var k11 = i10(c11, d10), n11 = k11[3], o11 = k11[2];
            return [0, b10(j11, h11, e11, k11[1]), o11, n11];
          }
          var l11 = i10(c11, j11), p11 = l11[2], q11 = l11[1];
          return [0, q11, p11, b10(l11[3], h11, e11, d10)];
        }
        return rT;
      }
      function k10(c11, b11, a11) {
        if (b11) {
          var d10 = b11[2], j11 = b11[5], l11 = b11[4], m11 = b11[3], n11 = b11[1];
          if (h10(a11) <= j11) {
            var e11 = i10(d10, a11), p11 = e11[2], q11 = e11[1], r11 = k10(c11, l11, e11[3]), s11 = _(c11, d10, [0, m11], p11);
            return o10(k10(c11, n11, q11), d10, s11, r11);
          }
        } else if (!a11)
          return 0;
        if (a11) {
          var f10 = a11[2], t11 = a11[4], u11 = a11[3], v10 = a11[1], g11 = i10(f10, b11), w11 = g11[2], x11 = g11[1], y11 = k10(c11, g11[3], t11), z11 = _(c11, f10, w11, [0, u11]);
          return o10(k10(c11, x11, v10), f10, z11, y11);
        }
        throw [0, B, rU];
      }
      function l10(d10, c11, a11) {
        if (c11) {
          if (a11) {
            var j11 = a11[3], e11 = a11[2], k11 = c11[3], f10 = c11[2], u11 = a11[4], v10 = a11[1], w11 = c11[4], x11 = c11[1];
            if (a11[5] <= c11[5]) {
              var g11 = i10(f10, a11), m11 = g11[2], y11 = g11[3], n11 = l10(d10, x11, g11[1]), p11 = l10(d10, w11, y11);
              return m11 ? o10(n11, f10, _(d10, f10, k11, m11[1]), p11) : b10(n11, f10, k11, p11);
            }
            var h11 = i10(e11, c11), q11 = h11[2], z11 = h11[3], r11 = l10(d10, h11[1], v10), s11 = l10(d10, z11, u11);
            return q11 ? o10(r11, e11, _(d10, e11, q11[1], j11), s11) : b10(r11, e11, j11, s11);
          }
          var t11 = c11;
        } else
          var t11 = a11;
        return t11;
      }
      function w10(c11, a11) {
        if (a11) {
          var g11 = a11[4], h11 = a11[3], i11 = a11[2], k11 = a11[1], d10 = w10(c11, k11), l11 = f(c11, i11, h11), e11 = w10(c11, g11);
          if (l11) {
            if (k11 === d10 && g11 === e11)
              return a11;
            return b10(d10, i11, h11, e11);
          }
          return j10(d10, e11);
        }
        return 0;
      }
      function x10(c11, a11) {
        if (a11) {
          var d10 = a11[2], i11 = a11[4], k11 = a11[3], e11 = x10(c11, a11[1]), g11 = f(c11, d10, k11), h11 = x10(c11, i11);
          return g11 ? b10(e11, d10, g11[1], h11) : j10(e11, h11);
        }
        return 0;
      }
      function y10(c11, a11) {
        if (a11) {
          var d10 = a11[3], e11 = a11[2], n11 = a11[4], g11 = y10(c11, a11[1]), h11 = g11[2], i11 = g11[1], o11 = f(c11, e11, d10), k11 = y10(c11, n11), l11 = k11[2], m11 = k11[1];
          if (o11) {
            var p11 = j10(h11, l11);
            return [0, b10(i11, e11, d10, m11), p11];
          }
          var q11 = b10(h11, e11, d10, l11);
          return [0, j10(i11, m11), q11];
        }
        return rV;
      }
      function e10(d10, c11) {
        var a11 = d10, b11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = [0, a11[2], a11[3], a11[4], b11], a11 = a11[1], b11 = e11;
            continue;
          }
          return b11;
        }
      }
      function $10(j11, i11, h11) {
        var r11 = e10(h11, 0), b11 = e10(i11, 0), a11 = r11;
        for (; ; ) {
          if (b11) {
            if (a11) {
              var k11 = a11[4], l11 = a11[3], m11 = a11[2], n11 = b11[4], o11 = b11[3], p11 = b11[2], c11 = f(g10[1], b11[1], a11[1]);
              if (c11 === 0) {
                var d10 = f(j11, p11, m11);
                if (d10 === 0) {
                  var q11 = e10(l11, k11), b11 = e10(o11, n11), a11 = q11;
                  continue;
                }
                return d10;
              }
              return c11;
            }
            return 1;
          }
          return a11 ? -1 : 0;
        }
      }
      function aa10(k11, j11, i11) {
        var s11 = e10(i11, 0), b11 = e10(j11, 0), a11 = s11;
        for (; ; ) {
          if (b11) {
            if (a11) {
              var l11 = a11[4], m11 = a11[3], n11 = a11[2], o11 = b11[4], p11 = b11[3], q11 = b11[2], c11 = f(g10[1], b11[1], a11[1]) === 0 ? 1 : 0;
              if (c11) {
                var d10 = f(k11, q11, n11);
                if (d10) {
                  var r11 = e10(m11, l11), b11 = e10(p11, o11), a11 = r11;
                  continue;
                }
                var h11 = d10;
              } else
                var h11 = c11;
              return h11;
            }
            return 0;
          }
          return a11 ? 0 : 1;
        }
      }
      function z10(a11) {
        if (a11) {
          var b11 = a11[1], c11 = z10(a11[4]);
          return (z10(b11) + 1 | 0) + c11 | 0;
        }
        return 0;
      }
      function L10(d10, c11) {
        var b11 = d10, a11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = a11[3], f10 = a11[2], g11 = a11[1], b11 = [0, [0, f10, e11], L10(b11, a11[4])], a11 = g11;
            continue;
          }
          return b11;
        }
      }
      function ab10(a11) {
        return L10(0, a11);
      }
      function M10(b11, a11) {
        return ih(function(b12, a12) {
          return m10(a12[1], a12[2], b12);
        }, a11, b11);
      }
      function ac10(a11) {
        return M10(a11, C10);
      }
      function A10(a11, f10) {
        if (a11) {
          var b11 = a11[2], c11 = a11[1], d10 = e10(a11[3], a11[4]);
          return [0, [0, c11, b11], function(a12) {
            return A10(d10, a12);
          }];
        }
        return 0;
      }
      function ad10(a11) {
        var b11 = e10(a11, 0);
        return function(a12) {
          return A10(b11, a12);
        };
      }
      function N10(d10, c11) {
        var a11 = d10, b11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = [0, a11[2], a11[3], a11[1], b11], a11 = a11[4], b11 = e11;
            continue;
          }
          return b11;
        }
      }
      function O10(a11, e11) {
        if (a11) {
          var b11 = a11[2], c11 = a11[1], d10 = N10(a11[3], a11[4]);
          return [0, [0, c11, b11], function(a12) {
            return O10(d10, a12);
          }];
        }
        return 0;
      }
      function ae10(a11) {
        var b11 = N10(a11, 0);
        return function(a12) {
          return O10(b11, a12);
        };
      }
      return [0, C10, P10, X10, m10, s10, p10, r10, k10, l10, $10, aa10, F10, G10, H10, I10, w10, x10, y10, z10, ab10, n10, D10, Y10, Z10, n10, D10, i10, R10, W10, S10, T10, U10, V10, t10, u10, ad10, ae10, function(k11, j11) {
        var a11 = j11, b11 = 0;
        for (; ; ) {
          if (a11) {
            var c11 = a11[4], e11 = a11[3], d10 = a11[2], l11 = a11[1], h11 = f(g10[1], d10, k11);
            if (h11 !== 0) {
              if (0 <= h11) {
                var a11 = l11, b11 = [0, d10, e11, c11, b11];
                continue;
              }
              var a11 = c11;
              continue;
            }
            var i11 = [0, d10, e11, c11, b11];
          } else
            var i11 = b11;
          return function(a12) {
            return A10(i11, a12);
          };
        }
      }, M10, ac10];
    }
    M(0);
    function ct(a10) {
      return [0, 0, 0];
    }
    function cu(a10) {
      a10[1] = 0;
      a10[2] = 0;
      return 0;
    }
    function bv(b10, a10) {
      a10[1] = [0, b10, a10[1]];
      a10[2] = a10[2] + 1 | 0;
      return 0;
    }
    function bQ(a10) {
      var b10 = a10[1];
      if (b10) {
        var c10 = b10[1];
        a10[1] = b10[2];
        a10[2] = a10[2] - 1 | 0;
        return [0, c10];
      }
      return 0;
    }
    function bR(b10) {
      var a10 = b10[1];
      return a10 ? [0, a10[1]] : 0;
    }
    var rY = [y, rX, M(0)];
    function eT(a10) {
      return [0, 0, 0, 0];
    }
    function eU(a10) {
      a10[1] = 0;
      a10[2] = 0;
      a10[3] = 0;
      return 0;
    }
    function cv(d10, a10) {
      var b10 = [0, d10, 0], c10 = a10[3];
      return c10 ? (a10[1] = a10[1] + 1 | 0, c10[2] = b10, a10[3] = b10, 0) : (a10[1] = 1, a10[2] = b10, a10[3] = b10, 0);
    }
    function iv(a10) {
      var b10 = a10[2];
      if (b10) {
        var c10 = b10[1];
        if (b10[2]) {
          var d10 = b10[2];
          a10[1] = a10[1] - 1 | 0;
          a10[2] = d10;
          return c10;
        }
        eU(a10);
        return c10;
      }
      throw rY;
    }
    function iw(a10) {
      var b10 = a10[2];
      if (b10) {
        var c10 = b10[1];
        if (b10[2]) {
          var d10 = b10[2];
          a10[1] = a10[1] - 1 | 0;
          a10[2] = d10;
          return [0, c10];
        }
        eU(a10);
        return [0, c10];
      }
      return 0;
    }
    var r0 = [y, rZ, M(0)];
    function r1(a10) {
      throw r0;
    }
    function r2(a10) {
      var c10 = a10[1];
      a10[1] = r1;
      try {
        var b10 = d(c10, 0);
        aiA(a10, b10);
        return b10;
      } catch (b11) {
        b11 = p(b11);
        a10[1] = function(a11) {
          throw b11;
        };
        throw b11;
      }
    }
    function W(a10) {
      var b10 = 1 <= a10 ? a10 : 1, c10 = cr < b10 ? cr : b10, d10 = U(c10);
      return [0, d10, 0, c10, d10];
    }
    function F(a10) {
      return eS(a10[1], 0, a10[2]);
    }
    function ix(a10) {
      a10[2] = 0;
      a10[1] = a10[4];
      a10[3] = aj(a10[1]);
      return 0;
    }
    function eV(a10, c10) {
      var d10 = a10[2], b10 = [0, a10[3]];
      for (; ; ) {
        if (b10[1] < (d10 + c10 | 0)) {
          b10[1] = 2 * b10[1] | 0;
          continue;
        }
        if (cr < b10[1])
          if ((d10 + c10 | 0) <= cr)
            b10[1] = cr;
          else
            bg(r6);
        var e10 = U(b10[1]);
        io(a10[1], 0, e10, 0, a10[2]);
        a10[1] = e10;
        a10[3] = b10[1];
        if ((a10[2] + c10 | 0) <= a10[3]) {
          if ((d10 + c10 | 0) <= a10[3])
            return 0;
          throw [0, B, r4];
        }
        throw [0, B, r5];
      }
    }
    function i(a10, c10) {
      var b10 = a10[2];
      if (a10[3] <= b10)
        eV(a10, 1);
      P(a10[1], b10, c10);
      a10[2] = b10 + 1 | 0;
      return 0;
    }
    function de(a10, d10, c10, b10) {
      var e10 = c10 < 0 ? 1 : 0;
      if (e10)
        var f10 = e10;
      else
        var h10 = b10 < 0 ? 1 : 0, f10 = h10 || ((k(d10) - b10 | 0) < c10 ? 1 : 0);
      if (f10)
        v(r7);
      var g10 = a10[2] + b10 | 0;
      if (a10[3] < g10)
        eV(a10, b10);
      aX(d10, c10, a10[1], a10[2], b10);
      a10[2] = g10;
      return 0;
    }
    function E(a10, c10) {
      var b10 = k(c10), d10 = a10[2] + b10 | 0;
      if (a10[3] < d10)
        eV(a10, b10);
      aX(c10, 0, a10[1], a10[2], b10);
      a10[2] = d10;
      return 0;
    }
    function eW(b10, a10) {
      var c10 = a10[2];
      return de(b10, Y(a10[1]), 0, c10);
    }
    function eX(a10) {
      return a10[2] === 5 ? 12 : -6;
    }
    function iy(a10) {
      return [0, 0, U(a10)];
    }
    function iz(a10, g10) {
      var b10 = aj(a10[2]), c10 = a10[1] + g10 | 0, d10 = b10 < c10 ? 1 : 0;
      if (d10) {
        var e10 = U(ic(b10 * 2 | 0, c10));
        io(a10[2], 0, e10, 0, b10);
        a10[2] = e10;
        var f10 = 0;
      } else
        var f10 = d10;
      return f10;
    }
    function bS(a10, b10) {
      iz(a10, 1);
      bG(a10[2], a10[1], b10);
      a10[1] = a10[1] + 1 | 0;
      return 0;
    }
    function ah(a10, c10) {
      var b10 = k(c10);
      iz(a10, b10);
      a7(c10, 0, a10[2], a10[1], b10);
      a10[1] = a10[1] + b10 | 0;
      return 0;
    }
    function iA(a10) {
      return eS(a10[2], 0, a10[1]);
    }
    function iB(a10) {
      if (typeof a10 === "number")
        switch (a10) {
          case 0:
            return r8;
          case 1:
            return r9;
          case 2:
            return r_;
          case 3:
            return r$;
          case 4:
            return sa;
          case 5:
            return sb;
          default:
            return sc;
        }
      else
        switch (a10[0]) {
          case 0:
            return a10[1];
          case 1:
            return a10[1];
          default:
            return ag(sd, a8(1, a10[1]));
        }
    }
    function eY(b10, c10) {
      var a10 = c10;
      for (; ; )
        if (typeof a10 === "number")
          return 0;
        else
          switch (a10[0]) {
            case 0:
              var d10 = a10[1];
              ah(b10, se);
              var a10 = d10;
              continue;
            case 1:
              var e10 = a10[1];
              ah(b10, sf);
              var a10 = e10;
              continue;
            case 2:
              var f10 = a10[1];
              ah(b10, sg);
              var a10 = f10;
              continue;
            case 3:
              var g10 = a10[1];
              ah(b10, sh);
              var a10 = g10;
              continue;
            case 4:
              var h10 = a10[1];
              ah(b10, si);
              var a10 = h10;
              continue;
            case 5:
              var i10 = a10[1];
              ah(b10, sj);
              var a10 = i10;
              continue;
            case 6:
              var j10 = a10[1];
              ah(b10, sk);
              var a10 = j10;
              continue;
            case 7:
              var k10 = a10[1];
              ah(b10, sl);
              var a10 = k10;
              continue;
            case 8:
              var l10 = a10[2], m10 = a10[1];
              ah(b10, sm);
              eY(b10, m10);
              ah(b10, sn);
              var a10 = l10;
              continue;
            case 9:
              var n10 = a10[3], o10 = a10[1];
              ah(b10, so);
              eY(b10, o10);
              ah(b10, sp);
              var a10 = n10;
              continue;
            case 10:
              var p10 = a10[1];
              ah(b10, sq);
              var a10 = p10;
              continue;
            case 11:
              var q10 = a10[1];
              ah(b10, sr);
              var a10 = q10;
              continue;
            case 12:
              var r10 = a10[1];
              ah(b10, ss);
              var a10 = r10;
              continue;
            case 13:
              var s10 = a10[1];
              ah(b10, st);
              var a10 = s10;
              continue;
            default:
              var t10 = a10[1];
              ah(b10, su);
              var a10 = t10;
              continue;
          }
    }
    function X(a10) {
      if (typeof a10 === "number")
        return 0;
      else
        switch (a10[0]) {
          case 0:
            return [0, X(a10[1])];
          case 1:
            return [1, X(a10[1])];
          case 2:
            return [2, X(a10[1])];
          case 3:
            return [3, X(a10[1])];
          case 4:
            return [4, X(a10[1])];
          case 5:
            return [5, X(a10[1])];
          case 6:
            return [6, X(a10[1])];
          case 7:
            return [7, X(a10[1])];
          case 8:
            var b10 = a10[1];
            return [8, b10, X(a10[2])];
          case 9:
            var c10 = a10[2], d10 = a10[1];
            return [9, c10, d10, X(a10[3])];
          case 10:
            return [10, X(a10[1])];
          case 11:
            return [11, X(a10[1])];
          case 12:
            return [12, X(a10[1])];
          case 13:
            return [13, X(a10[1])];
          default:
            return [14, X(a10[1])];
        }
    }
    function ai(a10) {
      if (typeof a10 === "number") {
        var s10 = function(a11) {
          return 0;
        }, t10 = function(a11) {
          return 0;
        }, u10 = function(a11) {
          return 0;
        };
        return [0, function(a11) {
          return 0;
        }, u10, t10, s10];
      } else
        switch (a10[0]) {
          case 0:
            var b10 = ai(a10[1]), v10 = b10[4], w10 = b10[3], x10 = b10[2], y10 = b10[1], z10 = function(a11) {
              d(x10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(y10, 0);
              return 0;
            }, z10, w10, v10];
          case 1:
            var c10 = ai(a10[1]), A10 = c10[4], B10 = c10[3], C10 = c10[2], D10 = c10[1], E10 = function(a11) {
              d(C10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(D10, 0);
              return 0;
            }, E10, B10, A10];
          case 2:
            var e10 = ai(a10[1]), F10 = e10[4], G10 = e10[3], H10 = e10[2], I10 = e10[1], J10 = function(a11) {
              d(H10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(I10, 0);
              return 0;
            }, J10, G10, F10];
          case 3:
            var f10 = ai(a10[1]), K10 = f10[4], L10 = f10[3], M10 = f10[2], N10 = f10[1], O10 = function(a11) {
              d(M10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(N10, 0);
              return 0;
            }, O10, L10, K10];
          case 4:
            var g10 = ai(a10[1]), P10 = g10[4], Q10 = g10[3], R10 = g10[2], S10 = g10[1], T10 = function(a11) {
              d(R10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(S10, 0);
              return 0;
            }, T10, Q10, P10];
          case 5:
            var h10 = ai(a10[1]), U10 = h10[4], V10 = h10[3], W10 = h10[2], Y10 = h10[1], _10 = function(a11) {
              d(W10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(Y10, 0);
              return 0;
            }, _10, V10, U10];
          case 6:
            var i10 = ai(a10[1]), $10 = i10[4], aa10 = i10[3], ab10 = i10[2], ac10 = i10[1], ad10 = function(a11) {
              d(ab10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(ac10, 0);
              return 0;
            }, ad10, aa10, $10];
          case 7:
            var j10 = ai(a10[1]), ae10 = j10[4], af10 = j10[3], ag10 = j10[2], ah10 = j10[1], aj2 = function(a11) {
              d(ag10, 0);
              return 0;
            };
            return [0, function(a11) {
              d(ah10, 0);
              return 0;
            }, aj2, af10, ae10];
          case 8:
            var k10 = ai(a10[2]), ak2 = k10[4], al2 = k10[3], am2 = k10[2], an2 = k10[1], ao2 = function(a11) {
              d(am2, 0);
              return 0;
            };
            return [0, function(a11) {
              d(an2, 0);
              return 0;
            }, ao2, al2, ak2];
          case 9:
            var ap2 = a10[2], aq2 = a10[1], l10 = ai(a10[3]), ar2 = l10[4], as2 = l10[3], at2 = l10[2], au2 = l10[1], m10 = ai(Z(X(aq2), ap2)), av2 = m10[4], aw2 = m10[3], ax2 = m10[2], ay2 = m10[1], az2 = function(a11) {
              d(av2, 0);
              d(ar2, 0);
              return 0;
            }, aA2 = function(a11) {
              d(as2, 0);
              d(aw2, 0);
              return 0;
            }, aB2 = function(a11) {
              d(ax2, 0);
              d(at2, 0);
              return 0;
            };
            return [0, function(a11) {
              d(au2, 0);
              d(ay2, 0);
              return 0;
            }, aB2, aA2, az2];
          case 10:
            var n10 = ai(a10[1]), aC2 = n10[4], aD2 = n10[3], aE2 = n10[2], aF2 = n10[1], aG2 = function(a11) {
              d(aE2, 0);
              return 0;
            };
            return [0, function(a11) {
              d(aF2, 0);
              return 0;
            }, aG2, aD2, aC2];
          case 11:
            var o10 = ai(a10[1]), aH2 = o10[4], aI2 = o10[3], aJ2 = o10[2], aK2 = o10[1], aL2 = function(a11) {
              d(aJ2, 0);
              return 0;
            };
            return [0, function(a11) {
              d(aK2, 0);
              return 0;
            }, aL2, aI2, aH2];
          case 12:
            var p10 = ai(a10[1]), aM2 = p10[4], aN2 = p10[3], aO2 = p10[2], aP2 = p10[1], aQ2 = function(a11) {
              d(aO2, 0);
              return 0;
            };
            return [0, function(a11) {
              d(aP2, 0);
              return 0;
            }, aQ2, aN2, aM2];
          case 13:
            var q10 = ai(a10[1]), aR2 = q10[4], aS2 = q10[3], aT2 = q10[2], aU2 = q10[1], aV2 = function(a11) {
              d(aR2, 0);
              return 0;
            }, aW2 = function(a11) {
              d(aS2, 0);
              return 0;
            }, aX2 = function(a11) {
              d(aT2, 0);
              return 0;
            };
            return [0, function(a11) {
              d(aU2, 0);
              return 0;
            }, aX2, aW2, aV2];
          default:
            var r10 = ai(a10[1]), aY2 = r10[4], aZ2 = r10[3], a02 = r10[2], a12 = r10[1], a22 = function(a11) {
              d(aY2, 0);
              return 0;
            }, a32 = function(a11) {
              d(aZ2, 0);
              return 0;
            }, a42 = function(a11) {
              d(a02, 0);
              return 0;
            };
            return [0, function(a11) {
              d(a12, 0);
              return 0;
            }, a42, a32, a22];
        }
    }
    function Z(c10, b10) {
      var a10 = 0;
      if (typeof c10 === "number")
        if (typeof b10 === "number")
          return 0;
        else
          switch (b10[0]) {
            case 10:
              break;
            case 11:
              a10 = 1;
              break;
            case 12:
              a10 = 2;
              break;
            case 13:
              a10 = 3;
              break;
            case 14:
              a10 = 4;
              break;
            case 8:
              a10 = 5;
              break;
            case 9:
              a10 = 6;
              break;
            default:
              throw [0, B, sv];
          }
      else
        switch (c10[0]) {
          case 0:
            var e10 = 0, t10 = c10[1];
            if (typeof b10 !== "number")
              switch (b10[0]) {
                case 0:
                  return [0, Z(t10, b10[1])];
                case 8:
                  a10 = 5;
                  e10 = 1;
                  break;
                case 9:
                  a10 = 6;
                  e10 = 1;
                  break;
                case 10:
                  e10 = 1;
                  break;
                case 11:
                  a10 = 1;
                  e10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  e10 = 1;
                  break;
                case 13:
                  a10 = 3;
                  e10 = 1;
                  break;
                case 14:
                  a10 = 4;
                  e10 = 1;
                  break;
              }
            if (!e10)
              a10 = 7;
            break;
          case 1:
            var f10 = 0, u10 = c10[1];
            if (typeof b10 !== "number")
              switch (b10[0]) {
                case 1:
                  return [1, Z(u10, b10[1])];
                case 8:
                  a10 = 5;
                  f10 = 1;
                  break;
                case 9:
                  a10 = 6;
                  f10 = 1;
                  break;
                case 10:
                  f10 = 1;
                  break;
                case 11:
                  a10 = 1;
                  f10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  f10 = 1;
                  break;
                case 13:
                  a10 = 3;
                  f10 = 1;
                  break;
                case 14:
                  a10 = 4;
                  f10 = 1;
                  break;
              }
            if (!f10)
              a10 = 7;
            break;
          case 2:
            var g10 = 0, v10 = c10[1];
            if (typeof b10 === "number")
              g10 = 1;
            else
              switch (b10[0]) {
                case 2:
                  return [2, Z(v10, b10[1])];
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  a10 = 6;
                  break;
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  g10 = 1;
              }
            if (g10)
              a10 = 7;
            break;
          case 3:
            var h10 = 0, w10 = c10[1];
            if (typeof b10 === "number")
              h10 = 1;
            else
              switch (b10[0]) {
                case 3:
                  return [3, Z(w10, b10[1])];
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  a10 = 6;
                  break;
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  h10 = 1;
              }
            if (h10)
              a10 = 7;
            break;
          case 4:
            var i10 = 0, x10 = c10[1];
            if (typeof b10 === "number")
              i10 = 1;
            else
              switch (b10[0]) {
                case 4:
                  return [4, Z(x10, b10[1])];
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  a10 = 6;
                  break;
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  i10 = 1;
              }
            if (i10)
              a10 = 7;
            break;
          case 5:
            var j10 = 0, y10 = c10[1];
            if (typeof b10 === "number")
              j10 = 1;
            else
              switch (b10[0]) {
                case 5:
                  return [5, Z(y10, b10[1])];
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  a10 = 6;
                  break;
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  j10 = 1;
              }
            if (j10)
              a10 = 7;
            break;
          case 6:
            var k10 = 0, z10 = c10[1];
            if (typeof b10 === "number")
              k10 = 1;
            else
              switch (b10[0]) {
                case 6:
                  return [6, Z(z10, b10[1])];
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  a10 = 6;
                  break;
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  k10 = 1;
              }
            if (k10)
              a10 = 7;
            break;
          case 7:
            var l10 = 0, A10 = c10[1];
            if (typeof b10 === "number")
              l10 = 1;
            else
              switch (b10[0]) {
                case 7:
                  return [7, Z(A10, b10[1])];
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  a10 = 6;
                  break;
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  l10 = 1;
              }
            if (l10)
              a10 = 7;
            break;
          case 8:
            var m10 = 0, C10 = c10[2], D10 = c10[1];
            if (typeof b10 === "number")
              m10 = 1;
            else
              switch (b10[0]) {
                case 8:
                  var E10 = b10[1], F10 = Z(C10, b10[2]);
                  return [8, Z(D10, E10), F10];
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  m10 = 1;
              }
            if (m10)
              throw [0, B, sE];
            break;
          case 9:
            var n10 = 0, G10 = c10[3], H10 = c10[2], I10 = c10[1];
            if (typeof b10 === "number")
              n10 = 1;
            else
              switch (b10[0]) {
                case 8:
                  a10 = 5;
                  break;
                case 9:
                  var J10 = b10[3], K10 = b10[2], L10 = b10[1], s10 = ai(Z(X(H10), L10)), M10 = s10[4];
                  d(s10[2], 0);
                  d(M10, 0);
                  return [9, I10, K10, Z(G10, J10)];
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  a10 = 4;
                  break;
                default:
                  n10 = 1;
              }
            if (n10)
              throw [0, B, sF];
            break;
          case 10:
            var N10 = c10[1];
            if (typeof b10 !== "number" && b10[0] === 10)
              return [10, Z(N10, b10[1])];
            throw [0, B, sG];
          case 11:
            var o10 = 0, O10 = c10[1];
            if (typeof b10 === "number")
              o10 = 1;
            else
              switch (b10[0]) {
                case 10:
                  break;
                case 11:
                  return [11, Z(O10, b10[1])];
                default:
                  o10 = 1;
              }
            if (o10)
              throw [0, B, sH];
            break;
          case 12:
            var p10 = 0, P10 = c10[1];
            if (typeof b10 === "number")
              p10 = 1;
            else
              switch (b10[0]) {
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  return [12, Z(P10, b10[1])];
                default:
                  p10 = 1;
              }
            if (p10)
              throw [0, B, sI];
            break;
          case 13:
            var q10 = 0, Q10 = c10[1];
            if (typeof b10 === "number")
              q10 = 1;
            else
              switch (b10[0]) {
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  return [13, Z(Q10, b10[1])];
                default:
                  q10 = 1;
              }
            if (q10)
              throw [0, B, sJ];
            break;
          default:
            var r10 = 0, R10 = c10[1];
            if (typeof b10 === "number")
              r10 = 1;
            else
              switch (b10[0]) {
                case 10:
                  break;
                case 11:
                  a10 = 1;
                  break;
                case 12:
                  a10 = 2;
                  break;
                case 13:
                  a10 = 3;
                  break;
                case 14:
                  return [14, Z(R10, b10[1])];
                default:
                  r10 = 1;
              }
            if (r10)
              throw [0, B, sK];
        }
      switch (a10) {
        case 0:
          throw [0, B, sy];
        case 1:
          throw [0, B, sz];
        case 2:
          throw [0, B, sA];
        case 3:
          throw [0, B, sB];
        case 4:
          throw [0, B, sC];
        case 5:
          throw [0, B, sw];
        case 6:
          throw [0, B, sx];
        default:
          throw [0, B, sD];
      }
    }
    var ac = [y, sL, M(0)];
    function df(b10, a10) {
      if (typeof b10 === "number")
        return [0, 0, a10];
      else {
        if (b10[0] === 0)
          return [0, [0, b10[1], b10[2]], a10];
        if (typeof a10 !== "number" && a10[0] === 2)
          return [0, [1, b10[1]], a10[1]];
        throw ac;
      }
    }
    function cw(e10, b10, d10) {
      var a10 = df(e10, d10);
      if (typeof b10 === "number") {
        if (b10) {
          var c10 = a10[2];
          if (typeof c10 !== "number" && c10[0] === 2)
            return [0, a10[1], 1, c10[1]];
          throw ac;
        }
        return [0, a10[1], 0, a10[2]];
      }
      return [0, a10[1], [0, b10[1]], a10[2]];
    }
    function aw(b10, c10, a10) {
      if (typeof b10 === "number")
        return [0, 0, C(c10, a10)];
      else
        switch (b10[0]) {
          case 0:
            if (typeof a10 !== "number" && a10[0] === 0) {
              var g10 = aw(b10[1], c10, a10[1]);
              return [0, [0, g10[1]], g10[2]];
            }
            break;
          case 1:
            if (typeof a10 !== "number" && a10[0] === 1) {
              var h10 = aw(b10[1], c10, a10[1]);
              return [0, [1, h10[1]], h10[2]];
            }
            break;
          case 2:
            if (typeof a10 !== "number" && a10[0] === 2) {
              var i10 = aw(b10[1], c10, a10[1]);
              return [0, [2, i10[1]], i10[2]];
            }
            break;
          case 3:
            if (typeof a10 !== "number" && a10[0] === 3) {
              var j10 = aw(b10[1], c10, a10[1]);
              return [0, [3, j10[1]], j10[2]];
            }
            break;
          case 4:
            if (typeof a10 !== "number" && a10[0] === 4) {
              var k10 = aw(b10[1], c10, a10[1]);
              return [0, [4, k10[1]], k10[2]];
            }
            break;
          case 5:
            if (typeof a10 !== "number" && a10[0] === 5) {
              var l10 = aw(b10[1], c10, a10[1]);
              return [0, [5, l10[1]], l10[2]];
            }
            break;
          case 6:
            if (typeof a10 !== "number" && a10[0] === 6) {
              var m10 = aw(b10[1], c10, a10[1]);
              return [0, [6, m10[1]], m10[2]];
            }
            break;
          case 7:
            if (typeof a10 !== "number" && a10[0] === 7) {
              var n10 = aw(b10[1], c10, a10[1]);
              return [0, [7, n10[1]], n10[2]];
            }
            break;
          case 8:
            if (typeof a10 !== "number" && a10[0] === 8) {
              var o10 = a10[1], w10 = a10[2], x10 = b10[2];
              if (cn([0, b10[1]], [0, o10]))
                throw ac;
              var p10 = aw(x10, c10, w10);
              return [0, [8, o10, p10[1]], p10[2]];
            }
            break;
          case 9:
            if (typeof a10 !== "number" && a10[0] === 9) {
              var e10 = a10[2], f10 = a10[1], y10 = a10[3], z10 = b10[3], A10 = b10[2], B10 = b10[1], D10 = [0, K(f10)];
              if (cn([0, K(B10)], D10))
                throw ac;
              var E10 = [0, K(e10)];
              if (cn([0, K(A10)], E10))
                throw ac;
              var q10 = ai(Z(X(f10), e10)), F10 = q10[4];
              d(q10[2], 0);
              d(F10, 0);
              var r10 = aw(K(z10), c10, y10), G10 = r10[2];
              return [0, [9, f10, e10, X(r10[1])], G10];
            }
            break;
          case 10:
            if (typeof a10 !== "number" && a10[0] === 10) {
              var s10 = aw(b10[1], c10, a10[1]);
              return [0, [10, s10[1]], s10[2]];
            }
            break;
          case 11:
            if (typeof a10 !== "number" && a10[0] === 11) {
              var t10 = aw(b10[1], c10, a10[1]);
              return [0, [11, t10[1]], t10[2]];
            }
            break;
          case 13:
            if (typeof a10 !== "number" && a10[0] === 13) {
              var u10 = aw(b10[1], c10, a10[1]);
              return [0, [13, u10[1]], u10[2]];
            }
            break;
          case 14:
            if (typeof a10 !== "number" && a10[0] === 14) {
              var v10 = aw(b10[1], c10, a10[1]);
              return [0, [14, v10[1]], v10[2]];
            }
            break;
        }
      throw ac;
    }
    function C(b10, a10) {
      if (typeof b10 === "number")
        return [0, 0, a10];
      else
        switch (b10[0]) {
          case 0:
            if (typeof a10 !== "number" && a10[0] === 0) {
              var s10 = C(b10[1], a10[1]);
              return [0, [0, s10[1]], s10[2]];
            }
            break;
          case 1:
            if (typeof a10 !== "number" && a10[0] === 0) {
              var t10 = C(b10[1], a10[1]);
              return [0, [1, t10[1]], t10[2]];
            }
            break;
          case 2:
            var ad10 = b10[2], u10 = df(b10[1], a10), e10 = u10[2], ae10 = u10[1];
            if (typeof e10 !== "number" && e10[0] === 1) {
              var v10 = C(ad10, e10[1]);
              return [0, [2, ae10, v10[1]], v10[2]];
            }
            throw ac;
          case 3:
            var af10 = b10[2], w10 = df(b10[1], a10), f10 = w10[2], ag10 = w10[1];
            if (typeof f10 !== "number" && f10[0] === 1) {
              var x10 = C(af10, f10[1]);
              return [0, [3, ag10, x10[1]], x10[2]];
            }
            throw ac;
          case 4:
            var ah10 = b10[4], ai2 = b10[1], g10 = cw(b10[2], b10[3], a10), h10 = g10[3], aj2 = g10[1];
            if (typeof h10 !== "number" && h10[0] === 2) {
              var ak2 = g10[2], y10 = C(ah10, h10[1]);
              return [0, [4, ai2, aj2, ak2, y10[1]], y10[2]];
            }
            throw ac;
          case 5:
            var al2 = b10[4], am2 = b10[1], i10 = cw(b10[2], b10[3], a10), j10 = i10[3], an2 = i10[1];
            if (typeof j10 !== "number" && j10[0] === 3) {
              var ao2 = i10[2], z10 = C(al2, j10[1]);
              return [0, [5, am2, an2, ao2, z10[1]], z10[2]];
            }
            throw ac;
          case 6:
            var ap2 = b10[4], aq2 = b10[1], k10 = cw(b10[2], b10[3], a10), l10 = k10[3], ar2 = k10[1];
            if (typeof l10 !== "number" && l10[0] === 4) {
              var as2 = k10[2], A10 = C(ap2, l10[1]);
              return [0, [6, aq2, ar2, as2, A10[1]], A10[2]];
            }
            throw ac;
          case 7:
            var at2 = b10[4], au2 = b10[1], m10 = cw(b10[2], b10[3], a10), n10 = m10[3], av2 = m10[1];
            if (typeof n10 !== "number" && n10[0] === 5) {
              var ax2 = m10[2], B10 = C(at2, n10[1]);
              return [0, [7, au2, av2, ax2, B10[1]], B10[2]];
            }
            throw ac;
          case 8:
            var ay2 = b10[4], aA2 = b10[1], o10 = cw(b10[2], b10[3], a10), p10 = o10[3], aB2 = o10[1];
            if (typeof p10 !== "number" && p10[0] === 6) {
              var aC2 = o10[2], D10 = C(ay2, p10[1]);
              return [0, [8, aA2, aB2, aC2, D10[1]], D10[2]];
            }
            throw ac;
          case 9:
            var aD2 = b10[2], E10 = df(b10[1], a10), q10 = E10[2], aE2 = E10[1];
            if (typeof q10 !== "number" && q10[0] === 7) {
              var F10 = C(aD2, q10[1]);
              return [0, [9, aE2, F10[1]], F10[2]];
            }
            throw ac;
          case 10:
            var G10 = C(b10[1], a10);
            return [0, [10, G10[1]], G10[2]];
          case 11:
            var aF2 = b10[1], H10 = C(b10[2], a10);
            return [0, [11, aF2, H10[1]], H10[2]];
          case 12:
            var aG2 = b10[1], I10 = C(b10[2], a10);
            return [0, [12, aG2, I10[1]], I10[2]];
          case 13:
            if (typeof a10 !== "number" && a10[0] === 8) {
              var J10 = a10[1], aH2 = a10[2], aI2 = b10[3], aJ2 = b10[1];
              if (cn([0, b10[2]], [0, J10]))
                throw ac;
              var L10 = C(aI2, aH2);
              return [0, [13, aJ2, J10, L10[1]], L10[2]];
            }
            break;
          case 14:
            if (typeof a10 !== "number" && a10[0] === 9) {
              var M10 = a10[1], aK2 = a10[3], aL2 = b10[3], aM2 = b10[2], aN2 = b10[1], aO2 = [0, K(M10)];
              if (cn([0, K(aM2)], aO2))
                throw ac;
              var N10 = C(aL2, K(aK2));
              return [0, [14, aN2, M10, N10[1]], N10[2]];
            }
            break;
          case 15:
            if (typeof a10 !== "number" && a10[0] === 10) {
              var O10 = C(b10[1], a10[1]);
              return [0, [15, O10[1]], O10[2]];
            }
            break;
          case 16:
            if (typeof a10 !== "number" && a10[0] === 11) {
              var P10 = C(b10[1], a10[1]);
              return [0, [16, P10[1]], P10[2]];
            }
            break;
          case 17:
            var aP2 = b10[1], Q10 = C(b10[2], a10);
            return [0, [17, aP2, Q10[1]], Q10[2]];
          case 18:
            var R10 = b10[2], r10 = b10[1];
            if (r10[0] === 0) {
              var V10 = r10[1], aT2 = V10[2], W10 = C(V10[1], a10), aU2 = W10[1], X10 = C(R10, W10[2]);
              return [0, [18, [0, [0, aU2, aT2]], X10[1]], X10[2]];
            }
            var Y10 = r10[1], aV2 = Y10[2], Z10 = C(Y10[1], a10), aW2 = Z10[1], _10 = C(R10, Z10[2]);
            return [0, [18, [1, [0, aW2, aV2]], _10[1]], _10[2]];
          case 19:
            if (typeof a10 !== "number" && a10[0] === 13) {
              var S10 = C(b10[1], a10[1]);
              return [0, [19, S10[1]], S10[2]];
            }
            break;
          case 20:
            if (typeof a10 !== "number" && a10[0] === 1) {
              var aQ2 = b10[2], aR2 = b10[1], T10 = C(b10[3], a10[1]);
              return [0, [20, aR2, aQ2, T10[1]], T10[2]];
            }
            break;
          case 21:
            if (typeof a10 !== "number" && a10[0] === 2) {
              var aS2 = b10[1], U10 = C(b10[2], a10[1]);
              return [0, [21, aS2, U10[1]], U10[2]];
            }
            break;
          case 23:
            var d10 = b10[2], c10 = b10[1];
            if (typeof c10 === "number")
              switch (c10) {
                case 0:
                  return az(c10, d10, a10);
                case 1:
                  return az(c10, d10, a10);
                case 2:
                  if (typeof a10 !== "number" && a10[0] === 14) {
                    var $10 = C(d10, a10[1]);
                    return [0, [23, 2, $10[1]], $10[2]];
                  }
                  throw ac;
                default:
                  return az(c10, d10, a10);
              }
            else
              switch (c10[0]) {
                case 0:
                  return az(c10, d10, a10);
                case 1:
                  return az(c10, d10, a10);
                case 2:
                  return az(c10, d10, a10);
                case 3:
                  return az(c10, d10, a10);
                case 4:
                  return az(c10, d10, a10);
                case 5:
                  return az(c10, d10, a10);
                case 6:
                  return az(c10, d10, a10);
                case 7:
                  return az(c10, d10, a10);
                case 8:
                  return az([8, c10[1], c10[2]], d10, a10);
                case 9:
                  var aX2 = c10[1], aa10 = aw(c10[2], d10, a10), ab10 = aa10[2];
                  return [0, [23, [9, aX2, aa10[1]], ab10[1]], ab10[2]];
                case 10:
                  return az(c10, d10, a10);
                default:
                  return az(c10, d10, a10);
              }
        }
      throw ac;
    }
    function az(d10, c10, b10) {
      var a10 = C(c10, b10);
      return [0, [23, d10, a10[1]], a10[2]];
    }
    function aA(l10, g10, a10) {
      var b10 = k(a10), h10 = 0 <= g10 ? l10 : 0, d10 = da(g10);
      if (d10 <= b10)
        return a10;
      var m10 = h10 === 2 ? 48 : 32, c10 = bu(d10, m10);
      switch (h10) {
        case 0:
          a7(a10, 0, c10, 0, b10);
          break;
        case 1:
          a7(a10, 0, c10, d10 - b10 | 0, b10);
          break;
        default:
          var e10 = 0;
          if (0 < b10) {
            var i10 = 0;
            if (u(a10, 0) !== 43 && u(a10, 0) !== 45 && u(a10, 0) !== 32) {
              e10 = 1;
              i10 = 1;
            }
            if (!i10) {
              bG(c10, 0, u(a10, 0));
              a7(a10, 1, c10, (d10 - b10 | 0) + 1 | 0, b10 - 1 | 0);
            }
          } else
            e10 = 1;
          if (e10) {
            var f10 = 0;
            if (1 < b10 && u(a10, 0) === 48) {
              var j10 = 0;
              if (gM !== u(a10, 1) && u(a10, 1) !== 88) {
                f10 = 1;
                j10 = 1;
              }
              if (!j10) {
                bG(c10, 1, u(a10, 1));
                a7(a10, 2, c10, (d10 - b10 | 0) + 2 | 0, b10 - 2 | 0);
              }
            } else
              f10 = 1;
            if (f10)
              a7(a10, 0, c10, d10 - b10 | 0, b10);
          }
      }
      return Y(c10);
    }
    function bT(l10, b10) {
      var c10 = da(l10), a10 = k(b10), d10 = u(b10, 0), e10 = 0;
      if (58 <= d10) {
        if (71 <= d10) {
          if (!(5 < d10 + ax >>> 0))
            e10 = 1;
        } else if (65 <= d10)
          e10 = 1;
      } else {
        var f10 = 0;
        if (d10 !== 32)
          if (43 <= d10)
            switch (d10 - 43 | 0) {
              case 5:
                if (a10 < (c10 + 2 | 0) && 1 < a10) {
                  var j10 = 0;
                  if (gM === u(b10, 1) || u(b10, 1) === 88)
                    j10 = 1;
                  if (j10) {
                    var h10 = bu(c10 + 2 | 0, 48);
                    bG(h10, 1, u(b10, 1));
                    a7(b10, 2, h10, (c10 - a10 | 0) + 4 | 0, a10 - 2 | 0);
                    return Y(h10);
                  }
                }
                e10 = 1;
                f10 = 1;
                break;
              case 0:
              case 2:
                break;
              case 1:
              case 3:
              case 4:
                f10 = 1;
                break;
              default:
                e10 = 1;
                f10 = 1;
            }
          else
            f10 = 1;
        if (!f10 && a10 < (c10 + 1 | 0)) {
          var g10 = bu(c10 + 1 | 0, 48);
          bG(g10, 0, d10);
          a7(b10, 1, g10, (c10 - a10 | 0) + 2 | 0, a10 - 1 | 0);
          return Y(g10);
        }
      }
      if (e10 && a10 < c10) {
        var i10 = bu(c10, 48);
        a7(b10, 0, i10, c10 - a10 | 0, a10);
        return Y(i10);
      }
      return b10;
    }
    function sM(l10) {
      var j10 = 0, D10 = k(l10);
      for (; ; ) {
        if (D10 <= j10)
          var p10 = l10;
        else {
          var o10 = ap(l10, j10) + cP | 0, q10 = 0;
          if (59 < o10 >>> 0) {
            if (33 < o10 + k8 >>> 0)
              q10 = 1;
          } else if (o10 === 2)
            q10 = 1;
          if (!q10) {
            var j10 = j10 + 1 | 0;
            continue;
          }
          var e10 = aN(l10), a10 = [0, 0], u10 = aj(e10) - 1 | 0, z10 = 0;
          if (!(u10 < 0)) {
            var i10 = z10;
            for (; ; ) {
              var f10 = aO(e10, i10), g10 = 0;
              if (32 <= f10) {
                var m10 = f10 + lV | 0, r10 = 0;
                if (58 < m10 >>> 0) {
                  if (93 <= m10)
                    r10 = 1;
                } else if (56 < m10 - 1 >>> 0) {
                  g10 = 1;
                  r10 = 1;
                }
                if (!r10) {
                  var n10 = 1;
                  g10 = 2;
                }
              } else if (11 <= f10) {
                if (f10 === 13)
                  g10 = 1;
              } else if (8 <= f10)
                g10 = 1;
              switch (g10) {
                case 0:
                  var n10 = 4;
                  break;
                case 1:
                  var n10 = 2;
                  break;
              }
              a10[1] = a10[1] + n10 | 0;
              var C10 = i10 + 1 | 0;
              if (u10 !== i10) {
                var i10 = C10;
                continue;
              }
              break;
            }
          }
          if (a10[1] === aj(e10)) {
            var s10 = aj(e10), t10 = U(s10);
            bn(e10, 0, t10, 0, s10);
            var w10 = t10;
          } else {
            var b10 = U(a10[1]);
            a10[1] = 0;
            var v10 = aj(e10) - 1 | 0, A10 = 0;
            if (!(v10 < 0)) {
              var h10 = A10;
              for (; ; ) {
                var c10 = aO(e10, h10), d10 = 0;
                if (35 <= c10)
                  if (c10 === 92)
                    d10 = 2;
                  else if (b5 <= c10)
                    d10 = 1;
                  else
                    d10 = 3;
                else if (32 <= c10)
                  if (34 <= c10)
                    d10 = 2;
                  else
                    d10 = 3;
                else if (14 <= c10)
                  d10 = 1;
                else
                  switch (c10) {
                    case 8:
                      P(b10, a10[1], 92);
                      a10[1]++;
                      P(b10, a10[1], 98);
                      break;
                    case 9:
                      P(b10, a10[1], 92);
                      a10[1]++;
                      P(b10, a10[1], 116);
                      break;
                    case 10:
                      P(b10, a10[1], 92);
                      a10[1]++;
                      P(b10, a10[1], 110);
                      break;
                    case 13:
                      P(b10, a10[1], 92);
                      a10[1]++;
                      P(b10, a10[1], 114);
                      break;
                    default:
                      d10 = 1;
                  }
                switch (d10) {
                  case 1:
                    P(b10, a10[1], 92);
                    a10[1]++;
                    P(b10, a10[1], 48 + (c10 / c0 | 0) | 0);
                    a10[1]++;
                    P(b10, a10[1], 48 + ((c10 / 10 | 0) % 10 | 0) | 0);
                    a10[1]++;
                    P(b10, a10[1], 48 + (c10 % 10 | 0) | 0);
                    break;
                  case 2:
                    P(b10, a10[1], 92);
                    a10[1]++;
                    P(b10, a10[1], c10);
                    break;
                  case 3:
                    P(b10, a10[1], c10);
                    break;
                }
                a10[1]++;
                var B10 = h10 + 1 | 0;
                if (v10 !== h10) {
                  var h10 = B10;
                  continue;
                }
                break;
              }
            }
            var w10 = b10;
          }
          var p10 = Y(w10);
        }
        var x10 = k(p10), y10 = bu(x10 + 2 | 0, 34);
        aX(p10, 0, y10, 1, x10);
        return Y(y10);
      }
    }
    function iC(d10, f10) {
      var g10 = da(f10), e10 = tB[1];
      switch (d10[2]) {
        case 0:
          var b10 = mk;
          break;
        case 1:
          var b10 = 101;
          break;
        case 2:
          var b10 = 69;
          break;
        case 3:
          var b10 = pT;
          break;
        case 4:
          var b10 = 71;
          break;
        case 5:
          var b10 = e10;
          break;
        case 6:
          var b10 = 104;
          break;
        case 7:
          var b10 = 72;
          break;
        default:
          var b10 = 70;
      }
      var c10 = iy(16);
      bS(c10, 37);
      switch (d10[1]) {
        case 0:
          break;
        case 1:
          bS(c10, 43);
          break;
        default:
          bS(c10, 32);
      }
      if (8 <= d10[2])
        bS(c10, 35);
      bS(c10, 46);
      ah(c10, a(j + g10));
      bS(c10, b10);
      return iA(c10);
    }
    function dg(n10, a10) {
      if (13 <= n10) {
        var g10 = [0, 0], h10 = k(a10) - 1 | 0, o10 = 0;
        if (!(h10 < 0)) {
          var c10 = o10;
          for (; ; ) {
            if (!(9 < ap(a10, c10) + l2 >>> 0))
              g10[1]++;
            var r10 = c10 + 1 | 0;
            if (h10 !== c10) {
              var c10 = r10;
              continue;
            }
            break;
          }
        }
        var i10 = g10[1], j10 = U(k(a10) + ((i10 - 1 | 0) / 3 | 0) | 0), l10 = [0, 0], d10 = function(a11) {
          bG(j10, l10[1], a11);
          l10[1]++;
          return 0;
        }, e10 = [0, ((i10 - 1 | 0) % 3 | 0) + 1 | 0], m10 = k(a10) - 1 | 0, p10 = 0;
        if (!(m10 < 0)) {
          var b10 = p10;
          for (; ; ) {
            var f10 = ap(a10, b10);
            if (9 < f10 + l2 >>> 0)
              d10(f10);
            else {
              if (e10[1] === 0) {
                d10(95);
                e10[1] = 3;
              }
              e10[1] += -1;
              d10(f10);
            }
            var q10 = b10 + 1 | 0;
            if (m10 !== b10) {
              var b10 = q10;
              continue;
            }
            break;
          }
        }
        return Y(j10);
      }
      return a10;
    }
    function tC(b10, c10) {
      switch (b10) {
        case 1:
          var a10 = sO;
          break;
        case 2:
          var a10 = sP;
          break;
        case 4:
          var a10 = sR;
          break;
        case 5:
          var a10 = sS;
          break;
        case 6:
          var a10 = sT;
          break;
        case 7:
          var a10 = sU;
          break;
        case 8:
          var a10 = sV;
          break;
        case 9:
          var a10 = sW;
          break;
        case 10:
          var a10 = sX;
          break;
        case 11:
          var a10 = sY;
          break;
        case 0:
        case 13:
          var a10 = sN;
          break;
        case 3:
        case 14:
          var a10 = sQ;
          break;
        default:
          var a10 = sZ;
      }
      return dg(b10, c6(a10, c10));
    }
    function tD(b10, c10) {
      switch (b10) {
        case 1:
          var a10 = tc;
          break;
        case 2:
          var a10 = td;
          break;
        case 4:
          var a10 = tf;
          break;
        case 5:
          var a10 = tg;
          break;
        case 6:
          var a10 = th;
          break;
        case 7:
          var a10 = ti;
          break;
        case 8:
          var a10 = tj;
          break;
        case 9:
          var a10 = tk;
          break;
        case 10:
          var a10 = tl;
          break;
        case 11:
          var a10 = tm;
          break;
        case 0:
        case 13:
          var a10 = tb;
          break;
        case 3:
        case 14:
          var a10 = te;
          break;
        default:
          var a10 = tn;
      }
      return dg(b10, c6(a10, c10));
    }
    function tE(b10, c10) {
      switch (b10) {
        case 1:
          var a10 = tp;
          break;
        case 2:
          var a10 = tq;
          break;
        case 4:
          var a10 = ts;
          break;
        case 5:
          var a10 = tt;
          break;
        case 6:
          var a10 = tu;
          break;
        case 7:
          var a10 = tv;
          break;
        case 8:
          var a10 = tw;
          break;
        case 9:
          var a10 = tx;
          break;
        case 10:
          var a10 = ty;
          break;
        case 11:
          var a10 = tz;
          break;
        case 0:
        case 13:
          var a10 = to;
          break;
        case 3:
        case 14:
          var a10 = tr;
          break;
        default:
          var a10 = tA;
      }
      return dg(b10, c6(a10, c10));
    }
    function tF(b10, c10) {
      switch (b10) {
        case 1:
          var a10 = s1;
          break;
        case 2:
          var a10 = s2;
          break;
        case 4:
          var a10 = s4;
          break;
        case 5:
          var a10 = s5;
          break;
        case 6:
          var a10 = s6;
          break;
        case 7:
          var a10 = s7;
          break;
        case 8:
          var a10 = s8;
          break;
        case 9:
          var a10 = s9;
          break;
        case 10:
          var a10 = s_;
          break;
        case 11:
          var a10 = s$;
          break;
        case 0:
        case 13:
          var a10 = s0;
          break;
        case 3:
        case 14:
          var a10 = s3;
          break;
        default:
          var a10 = ta;
      }
      return dg(b10, ah$(a10, c10));
    }
    function a9(b10, e10, a10) {
      function f10(d11) {
        switch (b10[1]) {
          case 0:
            var c11 = 45;
            break;
          case 1:
            var c11 = 43;
            break;
          default:
            var c11 = 32;
        }
        return ah4(a10, e10, c11);
      }
      function j10(c11) {
        var b11 = ahQ(a10);
        return b11 === 3 ? a10 < 0 ? tH : tI : 4 <= b11 ? tJ : c11;
      }
      switch (b10[2]) {
        case 5:
          var d10 = hP(iC(b10, e10), a10), c10 = 0, l10 = k(d10);
          for (; ; ) {
            if (c10 === l10)
              var i10 = 0;
            else {
              var g10 = u(d10, c10) - 46 | 0, h10 = 0;
              if (23 < g10 >>> 0) {
                if (g10 === 55)
                  h10 = 1;
              } else if (21 < g10 - 1 >>> 0)
                h10 = 1;
              if (!h10) {
                var c10 = c10 + 1 | 0;
                continue;
              }
              var i10 = 1;
            }
            var m10 = i10 ? d10 : ag(d10, tG);
            return j10(m10);
          }
        case 6:
          return f10(0);
        case 7:
          return Y(iq(rl, aN(f10(0))));
        case 8:
          return j10(f10(0));
        default:
          return hP(iC(b10, e10), a10);
      }
    }
    function cI(e10, E10, D10, A10) {
      var b10 = E10, a10 = D10, c10 = A10;
      for (; ; )
        if (typeof c10 === "number")
          return d(b10, a10);
        else
          switch (c10[0]) {
            case 0:
              var F10 = c10[1];
              return function(c11) {
                return s(b10, [5, a10, c11], F10);
              };
            case 1:
              var H10 = c10[1];
              return function(c11) {
                var e11 = 0;
                if (40 <= c11)
                  if (c11 === 92)
                    var d10 = rf;
                  else if (b5 <= c11)
                    e11 = 1;
                  else
                    e11 = 2;
                else if (32 <= c11)
                  if (39 <= c11)
                    var d10 = rg;
                  else
                    e11 = 2;
                else if (14 <= c11)
                  e11 = 1;
                else
                  switch (c11) {
                    case 8:
                      var d10 = rh;
                      break;
                    case 9:
                      var d10 = ri;
                      break;
                    case 10:
                      var d10 = rj;
                      break;
                    case 13:
                      var d10 = rk;
                      break;
                    default:
                      e11 = 1;
                  }
                switch (e11) {
                  case 1:
                    var f10 = U(4);
                    P(f10, 0, 92);
                    P(f10, 1, 48 + (c11 / c0 | 0) | 0);
                    P(f10, 2, 48 + ((c11 / 10 | 0) % 10 | 0) | 0);
                    P(f10, 3, 48 + (c11 % 10 | 0) | 0);
                    var d10 = Y(f10);
                    break;
                  case 2:
                    var g11 = U(1);
                    P(g11, 0, c11);
                    var d10 = Y(g11);
                    break;
                }
                var h11 = k(d10), i11 = bu(h11 + 2 | 0, 39);
                aX(d10, 0, i11, 1, h11);
                return s(b10, [4, a10, Y(i11)], H10);
              };
            case 2:
              var I10 = c10[2], J10 = c10[1];
              return eZ(b10, a10, I10, J10, function(a11) {
                return a11;
              });
            case 3:
              return eZ(b10, a10, c10[2], c10[1], sM);
            case 4:
              return dh(b10, a10, c10[4], c10[2], c10[3], tC, c10[1]);
            case 5:
              return dh(b10, a10, c10[4], c10[2], c10[3], tD, c10[1]);
            case 6:
              return dh(b10, a10, c10[4], c10[2], c10[3], tE, c10[1]);
            case 7:
              return dh(b10, a10, c10[4], c10[2], c10[3], tF, c10[1]);
            case 8:
              var i10 = c10[4], j10 = c10[3], l10 = c10[2], h10 = c10[1];
              if (typeof l10 === "number") {
                if (typeof j10 === "number")
                  return j10 ? function(d10, c11) {
                    return s(b10, [4, a10, a9(h10, d10, c11)], i10);
                  } : function(c11) {
                    return s(b10, [4, a10, a9(h10, eX(h10), c11)], i10);
                  };
                var ae10 = j10[1];
                return function(c11) {
                  return s(b10, [4, a10, a9(h10, ae10, c11)], i10);
                };
              } else {
                if (l10[0] === 0) {
                  var o10 = l10[2], p10 = l10[1];
                  if (typeof j10 === "number")
                    return j10 ? function(d10, c11) {
                      return s(b10, [4, a10, aA(p10, o10, a9(h10, d10, c11))], i10);
                    } : function(c11) {
                      return s(b10, [4, a10, aA(p10, o10, a9(h10, eX(h10), c11))], i10);
                    };
                  var af10 = j10[1];
                  return function(c11) {
                    return s(b10, [4, a10, aA(p10, o10, a9(h10, af10, c11))], i10);
                  };
                }
                var q10 = l10[1];
                if (typeof j10 === "number")
                  return j10 ? function(e11, d10, c11) {
                    return s(b10, [4, a10, aA(q10, e11, a9(h10, d10, c11))], i10);
                  } : function(d10, c11) {
                    return s(b10, [4, a10, aA(q10, d10, a9(h10, eX(h10), c11))], i10);
                  };
                var ag10 = j10[1];
                return function(d10, c11) {
                  return s(b10, [4, a10, aA(q10, d10, a9(h10, ag10, c11))], i10);
                };
              }
            case 9:
              return eZ(b10, a10, c10[2], c10[1], q5);
            case 10:
              var a10 = [7, a10], c10 = c10[1];
              continue;
            case 11:
              var a10 = [2, a10, c10[1]], c10 = c10[2];
              continue;
            case 12:
              var a10 = [3, a10, c10[1]], c10 = c10[2];
              continue;
            case 13:
              var L10 = c10[3], M10 = c10[2], r10 = iy(16);
              eY(r10, M10);
              var y10 = iA(r10);
              return function(c11) {
                return s(b10, [4, a10, y10], L10);
              };
            case 14:
              var N10 = c10[3], O10 = c10[2];
              return function(d10) {
                var e11 = d10[1], c11 = C(e11, K(X(O10)));
                if (typeof c11[2] === "number")
                  return s(b10, a10, G(c11[1], N10));
                throw ac;
              };
            case 15:
              var Q10 = c10[1];
              return function(d10, c11) {
                return s(b10, [6, a10, function(a11) {
                  return f(d10, a11, c11);
                }], Q10);
              };
            case 16:
              var R10 = c10[1];
              return function(c11) {
                return s(b10, [6, a10, c11], R10);
              };
            case 17:
              var a10 = [0, a10, c10[1]], c10 = c10[2];
              continue;
            case 18:
              var n10 = c10[1];
              if (n10[0] === 0) {
                var S10 = c10[2], T10 = n10[1][1], V10 = 0, b10 = function(b11, c11, d10) {
                  return function(a11) {
                    return s(c11, [1, b11, [0, a11]], d10);
                  };
                }(a10, b10, S10), a10 = V10, c10 = T10;
                continue;
              }
              var W10 = c10[2], Z10 = n10[1][1], _10 = 0, b10 = function(b11, c11, d10) {
                return function(a11) {
                  return s(c11, [1, b11, [1, a11]], d10);
                };
              }(a10, b10, W10), a10 = _10, c10 = Z10;
              continue;
            case 19:
              throw [0, B, tL];
            case 20:
              var $10 = c10[3], aa10 = [8, a10, tM];
              return function(a11) {
                return s(b10, aa10, $10);
              };
            case 21:
              var ab10 = c10[2];
              return function(c11) {
                return s(b10, [4, a10, c6(tN, c11)], ab10);
              };
            case 22:
              var ad10 = c10[1];
              return function(c11) {
                return s(b10, [5, a10, c11], ad10);
              };
            case 23:
              var g10 = c10[2], m10 = c10[1];
              if (typeof m10 === "number")
                switch (m10) {
                  case 0:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 1:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 2:
                    throw [0, B, tO];
                  default:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                }
              else
                switch (m10[0]) {
                  case 0:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 1:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 2:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 3:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 4:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 5:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 6:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 7:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 8:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  case 9:
                    var x10 = m10[2];
                    return e10 < 50 ? fJ(e10 + 1 | 0, b10, a10, x10, g10) : w(fJ, [0, b10, a10, x10, g10]);
                  case 10:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                  default:
                    return e10 < 50 ? z(e10 + 1 | 0, b10, a10, g10) : w(z, [0, b10, a10, g10]);
                }
            default:
              var t10 = c10[3], u10 = c10[1], v10 = d(c10[2], 0);
              return e10 < 50 ? fI(e10 + 1 | 0, b10, a10, t10, u10, v10) : w(fI, [0, b10, a10, t10, u10, v10]);
          }
    }
    function fJ(e10, d10, c10, a10, b10) {
      if (typeof a10 === "number")
        return e10 < 50 ? z(e10 + 1 | 0, d10, c10, b10) : w(z, [0, d10, c10, b10]);
      else
        switch (a10[0]) {
          case 0:
            var f10 = a10[1];
            return function(a11) {
              return aE(d10, c10, f10, b10);
            };
          case 1:
            var g10 = a10[1];
            return function(a11) {
              return aE(d10, c10, g10, b10);
            };
          case 2:
            var h10 = a10[1];
            return function(a11) {
              return aE(d10, c10, h10, b10);
            };
          case 3:
            var i10 = a10[1];
            return function(a11) {
              return aE(d10, c10, i10, b10);
            };
          case 4:
            var j10 = a10[1];
            return function(a11) {
              return aE(d10, c10, j10, b10);
            };
          case 5:
            var k10 = a10[1];
            return function(a11) {
              return aE(d10, c10, k10, b10);
            };
          case 6:
            var l10 = a10[1];
            return function(a11) {
              return aE(d10, c10, l10, b10);
            };
          case 7:
            var m10 = a10[1];
            return function(a11) {
              return aE(d10, c10, m10, b10);
            };
          case 8:
            var n10 = a10[2];
            return function(a11) {
              return aE(d10, c10, n10, b10);
            };
          case 9:
            var o10 = a10[3], p10 = a10[2], q10 = Z(X(a10[1]), p10);
            return function(a11) {
              return aE(d10, c10, aq(q10, o10), b10);
            };
          case 10:
            var r10 = a10[1];
            return function(e11, a11) {
              return aE(d10, c10, r10, b10);
            };
          case 11:
            var s10 = a10[1];
            return function(a11) {
              return aE(d10, c10, s10, b10);
            };
          case 12:
            var t10 = a10[1];
            return function(a11) {
              return aE(d10, c10, t10, b10);
            };
          case 13:
            throw [0, B, tP];
          default:
            throw [0, B, tQ];
        }
    }
    function z(d10, b10, e10, a10) {
      var c10 = [8, e10, tR];
      return d10 < 50 ? cI(d10 + 1 | 0, b10, c10, a10) : w(cI, [0, b10, c10, a10]);
    }
    function fI(h10, b10, f10, a10, e10, c10) {
      if (e10) {
        var i10 = e10[1];
        return function(e11) {
          return tK(b10, f10, a10, i10, d(c10, e11));
        };
      }
      var g10 = [4, f10, c10];
      return h10 < 50 ? cI(h10 + 1 | 0, b10, g10, a10) : w(cI, [0, b10, g10, a10]);
    }
    function s(a10, b10, c10) {
      return bs(cI(0, a10, b10, c10));
    }
    function aE(a10, b10, c10, d10) {
      return bs(fJ(0, a10, b10, c10, d10));
    }
    function tK(a10, b10, c10, d10, e10) {
      return bs(fI(0, a10, b10, c10, d10, e10));
    }
    function eZ(f10, e10, c10, a10, b10) {
      if (typeof a10 === "number")
        return function(a11) {
          return s(f10, [4, e10, d(b10, a11)], c10);
        };
      else {
        if (a10[0] === 0) {
          var g10 = a10[2], h10 = a10[1];
          return function(a11) {
            return s(f10, [4, e10, aA(h10, g10, d(b10, a11))], c10);
          };
        }
        var i10 = a10[1];
        return function(g11, a11) {
          return s(f10, [4, e10, aA(i10, g11, d(b10, a11))], c10);
        };
      }
    }
    function dh(g10, e10, d10, h10, c10, b10, a10) {
      if (typeof h10 === "number") {
        if (typeof c10 === "number")
          return c10 ? function(h11, c11) {
            return s(g10, [4, e10, bT(h11, f(b10, a10, c11))], d10);
          } : function(c11) {
            return s(g10, [4, e10, f(b10, a10, c11)], d10);
          };
        var l10 = c10[1];
        return function(c11) {
          return s(g10, [4, e10, bT(l10, f(b10, a10, c11))], d10);
        };
      } else {
        if (h10[0] === 0) {
          var i10 = h10[2], j10 = h10[1];
          if (typeof c10 === "number")
            return c10 ? function(h11, c11) {
              return s(g10, [4, e10, aA(j10, i10, bT(h11, f(b10, a10, c11)))], d10);
            } : function(c11) {
              return s(g10, [4, e10, aA(j10, i10, f(b10, a10, c11))], d10);
            };
          var m10 = c10[1];
          return function(c11) {
            return s(g10, [4, e10, aA(j10, i10, bT(m10, f(b10, a10, c11)))], d10);
          };
        }
        var k10 = h10[1];
        if (typeof c10 === "number")
          return c10 ? function(i11, h11, c11) {
            return s(g10, [4, e10, aA(k10, i11, bT(h11, f(b10, a10, c11)))], d10);
          } : function(h11, c11) {
            return s(g10, [4, e10, aA(k10, h11, f(b10, a10, c11))], d10);
          };
        var n10 = c10[1];
        return function(h11, c11) {
          return s(g10, [4, e10, aA(k10, h11, bT(n10, f(b10, a10, c11)))], d10);
        };
      }
    }
    function a_(b10, f10) {
      var a10 = f10;
      for (; ; )
        if (typeof a10 === "number")
          return 0;
        else
          switch (a10[0]) {
            case 0:
              var g10 = a10[1], h10 = iB(a10[2]);
              a_(b10, g10);
              return bN(b10, h10);
            case 1:
              var c10 = a10[2], e10 = a10[1];
              if (c10[0] === 0) {
                var i10 = c10[1];
                a_(b10, e10);
                bN(b10, tS);
                var a10 = i10;
                continue;
              }
              var j10 = c10[1];
              a_(b10, e10);
              bN(b10, tT);
              var a10 = j10;
              continue;
            case 6:
              var m10 = a10[2];
              a_(b10, a10[1]);
              return d(m10, b10);
            case 7:
              a_(b10, a10[1]);
              return br(b10);
            case 8:
              var n10 = a10[2];
              a_(b10, a10[1]);
              return v(n10);
            case 2:
            case 4:
              var k10 = a10[2];
              a_(b10, a10[1]);
              return bN(b10, k10);
            default:
              var l10 = a10[2];
              a_(b10, a10[1]);
              return h2(b10, l10);
          }
    }
    function a$(b10, f10) {
      var a10 = f10;
      for (; ; )
        if (typeof a10 === "number")
          return 0;
        else
          switch (a10[0]) {
            case 0:
              var g10 = a10[1], h10 = iB(a10[2]);
              a$(b10, g10);
              return E(b10, h10);
            case 1:
              var c10 = a10[2], e10 = a10[1];
              if (c10[0] === 0) {
                var j10 = c10[1];
                a$(b10, e10);
                E(b10, tU);
                var a10 = j10;
                continue;
              }
              var k10 = c10[1];
              a$(b10, e10);
              E(b10, tV);
              var a10 = k10;
              continue;
            case 6:
              var n10 = a10[2];
              a$(b10, a10[1]);
              return E(b10, d(n10, 0));
            case 7:
              var a10 = a10[1];
              continue;
            case 8:
              var o10 = a10[2];
              a$(b10, a10[1]);
              return v(o10);
            case 2:
            case 4:
              var l10 = a10[2];
              a$(b10, a10[1]);
              return E(b10, l10);
            default:
              var m10 = a10[2];
              a$(b10, a10[1]);
              return i(b10, m10);
          }
    }
    function tW(a10) {
      if (a5(a10, tX))
        return tY;
      var f10 = k(a10);
      function h10(e11) {
        var c10 = tZ[1], b11 = W(b8);
        return d(s(function(a11) {
          a$(b11, a11);
          return bg(F(b11));
        }, 0, c10), a10);
      }
      function i10(d10) {
        var b11 = d10;
        for (; ; ) {
          if (b11 === f10)
            return b11;
          var c10 = u(a10, b11);
          if (c10 !== 9 && c10 !== 32)
            return b11;
          var b11 = b11 + 1 | 0;
          continue;
        }
      }
      function q10(d10, c10) {
        var b11 = c10;
        for (; ; ) {
          if (b11 === f10)
            return b11;
          if (25 < u(a10, b11) + ax >>> 0)
            return b11;
          var b11 = b11 + 1 | 0;
          continue;
        }
      }
      function r10(g11, e11) {
        var b11 = e11;
        for (; ; ) {
          if (b11 === f10)
            return b11;
          var c10 = u(a10, b11), d10 = 0;
          if (48 <= c10) {
            if (!(58 <= c10))
              d10 = 1;
          } else if (c10 === 45)
            d10 = 1;
          if (d10) {
            var b11 = b11 + 1 | 0;
            continue;
          }
          return b11;
        }
      }
      var g10 = i10(0), m10 = q10(g10, g10), b10 = aI(a10, g10, m10 - g10 | 0), e10 = i10(m10), j10 = r10(e10, e10);
      if (e10 === j10)
        var l10 = 0;
      else
        try {
          var t10 = h0(aI(a10, e10, j10 - e10 | 0)), l10 = t10;
        } catch (a11) {
          a11 = p(a11);
          if (a11[1] !== c$)
            throw a11;
          var l10 = h10(0);
        }
      if (i10(j10) !== f10)
        h10(0);
      var o10 = 0;
      if (c(b10, t0) && c(b10, t1))
        var n10 = c(b10, t2) ? c(b10, t3) ? c(b10, t4) ? c(b10, t5) ? h10(0) : 1 : 2 : 3 : 0;
      else
        o10 = 1;
      if (o10)
        var n10 = 4;
      return [0, l10, n10];
    }
    function iD(d10, c10) {
      var a10 = c10[1], b10 = 0;
      return s(function(a11) {
        a_(d10, a11);
        return 0;
      }, b10, a10);
    }
    function e0(a10) {
      return iD(ay, a10);
    }
    function e1(b10, a10) {
      var c10 = a10[1];
      return s(function(c11) {
        var a11 = W(64);
        a$(a11, c11);
        return d(b10, F(a11));
      }, 0, c10);
    }
    function q(a10) {
      return e1(function(a11) {
        return a11;
      }, a10);
    }
    var e2 = [0, 0];
    function e4(i10, h10) {
      var a10 = i10[1 + h10];
      if (1 - (typeof a10 === "number" ? 1 : 0)) {
        if (c9(a10) === cL)
          return d(q(t6), a10);
        if (c9(a10) === oM) {
          var c10 = hP(q9, a10), b10 = 0, g10 = k(c10);
          for (; ; ) {
            if (g10 <= b10)
              return ag(c10, q8);
            var e10 = u(c10, b10), f10 = 0;
            if (48 <= e10) {
              if (!(58 <= e10))
                f10 = 1;
            } else if (e10 === 45)
              f10 = 1;
            if (f10) {
              var b10 = b10 + 1 | 0;
              continue;
            }
            return c10;
          }
        }
        return t7;
      }
      return d(q(t8), a10);
    }
    function iE(b10, a10) {
      if (b10.length - 1 <= a10)
        return t9;
      var c10 = iE(b10, a10 + 1 | 0), d10 = e4(b10, a10);
      return f(q(t_), d10, c10);
    }
    function bU(a10) {
      function p10(f10) {
        var b11 = f10;
        for (; ; ) {
          if (b11) {
            var g11 = b11[2], h11 = b11[1];
            try {
              var e11 = 0, c11 = d(h11, a10);
              e11 = 1;
            } catch (a11) {
            }
            if (e11 && c11)
              return [0, c11[1]];
            var b11 = g11;
            continue;
          }
          return 0;
        }
      }
      var i10 = p10(e2[1]);
      if (i10)
        return i10[1];
      if (a10 === eK)
        return ud;
      if (a10 === h$)
        return ue;
      if (a10[1] === h_) {
        var c10 = a10[2], j10 = c10[3], r10 = c10[2], s10 = c10[1];
        return dP(q(e3), s10, r10, j10, j10 + 5 | 0, uf);
      }
      if (a10[1] === B) {
        var e10 = a10[2], k10 = e10[3], t10 = e10[2], u10 = e10[1];
        return dP(q(e3), u10, t10, k10, k10 + 6 | 0, ug);
      }
      if (a10[1] === ib) {
        var g10 = a10[2], l10 = g10[3], v10 = g10[2], w10 = g10[1];
        return dP(q(e3), w10, v10, l10, l10 + 6 | 0, uh);
      }
      if (c9(a10) === 0) {
        var h10 = a10.length - 1, x10 = a10[1][1];
        if (2 < h10 >>> 0)
          var m10 = iE(a10, 2), n10 = e4(a10, 1), b10 = f(q(t$), n10, m10);
        else
          switch (h10) {
            case 0:
              var b10 = ua;
              break;
            case 1:
              var b10 = ub;
              break;
            default:
              var o10 = e4(a10, 1), b10 = d(q(uc), o10);
          }
        return ag(x10, b10);
      }
      return a10[1];
    }
    function di(u10, t10) {
      var e10 = ahR(t10), g10 = e10.length - 1 - 1 | 0, p10 = 0;
      if (!(g10 < 0)) {
        var b10 = p10;
        for (; ; ) {
          var a10 = T(e10, b10)[1 + b10], f10 = function(a11) {
            return function(b11) {
              return b11 ? a11 === 0 ? ui : uj : a11 === 0 ? uk : ul;
            };
          }(b10);
          if (a10[0] === 0)
            var h10 = a10[5], i10 = a10[4], j10 = a10[3], k10 = a10[6] ? um : uo, l10 = a10[2], m10 = a10[7], n10 = f10(a10[1]), c10 = [0, ahH(q(un), n10, m10, l10, k10, j10, i10, h10)];
          else if (a10[1])
            var c10 = 0;
          else
            var o10 = f10(0), c10 = [0, d(q(up), o10)];
          if (c10) {
            var r10 = c10[1];
            d(iD(u10, uq), r10);
          }
          var s10 = b10 + 1 | 0;
          if (g10 !== b10) {
            var b10 = s10;
            continue;
          }
          break;
        }
      }
      return 0;
    }
    function dj(c10) {
      for (; ; ) {
        var a10 = e2[1], b10 = 1 - eJ(e2, a10, [0, c10, a10]);
        if (b10)
          continue;
        return b10;
      }
    }
    var us = ur.slice();
    function ut(e10, c10) {
      var f10 = bU(e10);
      d(e0(uu), f10);
      di(ay, c10);
      var a10 = aiu(0);
      if (a10 < 0) {
        var b10 = da(a10);
        ie(T(us, b10)[1 + b10]);
      }
      return br(ay);
    }
    var uv = [0];
    h6(a(mL), function(e10, i10) {
      try {
        try {
          var b10 = i10 ? uv : hQ(0);
          try {
            db(0);
          } catch (a11) {
          }
          try {
            var a10 = ut(e10, b10), c10 = a10;
          } catch (a11) {
            a11 = p(a11);
            var g10 = bU(e10);
            d(e0(ux), g10);
            di(ay, b10);
            var h10 = bU(a11);
            d(e0(uy), h10);
            di(ay, hQ(0));
            var c10 = br(ay);
          }
          var f10 = c10;
        } catch (a11) {
          a11 = p(a11);
          if (a11 !== eK)
            throw a11;
          var f10 = ie(uw);
        }
        return f10;
      } catch (a11) {
        return 0;
      }
    });
    var uA = [y, uz, M(0)];
    dj(function(a10) {
      return a10[1] === uA ? [0, ag(uB, bU(a10[2]))] : 0;
    });
    function e5(a10) {
      var b10 = a10.length - 1 < 4 ? 1 : 0, c10 = b10 || (a10[4] < 0 ? 1 : 0);
      return c10;
    }
    function bV(a10) {
      a10[4] = -a10[4] | 0;
      return 0;
    }
    try {
      var ahF = qZ(ahE), iG = ahF;
    } catch (a10) {
      a10 = p(a10);
      if (a10 !== Q)
        throw a10;
      try {
        var ahD = qZ(ahC), iF = ahD;
      } catch (a11) {
        a11 = p(a11);
        if (a11 !== Q)
          throw a11;
        var iF = uD;
      }
      var iG = iF;
    }
    var uE = rC(iG, 82), dk = [dT, function(z10) {
      var o10 = aiM(0), c10 = [0, cm(55, 0), 0], i10 = o10.length - 1 === 0 ? [0, 0] : o10, l10 = i10.length - 1, b10 = 0;
      for (; ; ) {
        T(c10[1], b10)[1 + b10] = b10;
        var y10 = b10 + 1 | 0;
        if (b10 !== 54) {
          var b10 = y10;
          continue;
        }
        var g10 = [0, uC], m10 = 54 + ic(55, l10) | 0, t10 = 0;
        if (!(m10 < 0)) {
          var d10 = t10;
          for (; ; ) {
            var e10 = d10 % 55 | 0, n10 = aiy(d10, l10), v10 = T(i10, n10)[1 + n10], h10 = ag(g10[1], a(j + v10));
            g10[1] = ait(h10, 0, k(h10));
            var f10 = g10[1], p10 = u(f10, 3) << 24, q10 = u(f10, 2) << 16, r10 = u(f10, 1) << 8, s10 = ((u(f10, 0) + r10 | 0) + q10 | 0) + p10 | 0, w10 = (T(c10[1], e10)[1 + e10] ^ s10) & pY;
            T(c10[1], e10)[1 + e10] = w10;
            var x10 = d10 + 1 | 0;
            if (m10 !== d10) {
              var d10 = x10;
              continue;
            }
            break;
          }
        }
        c10[2] = 0;
        return c10;
      }
    }];
    function e6(h10, k10) {
      var l10 = h10 ? h10[1] : uE, b10 = 16;
      for (; ; ) {
        if (!(k10 <= b10) && !(eN < (b10 * 2 | 0))) {
          var b10 = b10 * 2 | 0;
          continue;
        }
        if (l10) {
          var i10 = c9(dk), a10 = cJ === i10 ? dk[1] : dT === i10 ? r2(dk) : dk;
          a10[2] = (a10[2] + 1 | 0) % 55 | 0;
          var c10 = a10[2], d10 = T(a10[1], c10)[1 + c10], e10 = (a10[2] + 24 | 0) % 55 | 0, f10 = (T(a10[1], e10)[1 + e10] + (d10 ^ (d10 >>> 25 | 0) & 31) | 0) & pY, g10 = a10[2];
          T(a10[1], g10)[1 + g10] = f10;
          var j10 = f10;
        } else
          var j10 = 0;
        return [0, 0, cm(b10, 0), j10, b10];
      }
    }
    function iH(h10, a10) {
      function i10(b11) {
        var a11 = b11;
        for (; ; ) {
          if (a11) {
            var c11 = a11[3];
            f(h10, a11[1], a11[2]);
            var a11 = c11;
            continue;
          }
          return 0;
        }
      }
      var c10 = e5(a10);
      if (1 - c10)
        bV(a10);
      try {
        var d10 = a10[2], e10 = d10.length - 1 - 1 | 0, j10 = 0;
        if (!(e10 < 0)) {
          var b10 = j10;
          for (; ; ) {
            i10(T(d10, b10)[1 + b10]);
            var l10 = b10 + 1 | 0;
            if (e10 !== b10) {
              var b10 = l10;
              continue;
            }
            break;
          }
        }
        var g10 = 1 - c10, k10 = g10 ? bV(a10) : g10;
        return k10;
      } catch (b11) {
        b11 = p(b11);
        if (c10)
          throw b11;
        bV(a10);
        throw b11;
      }
    }
    function uF(h10, a10, g10) {
      function i10(d11, c11) {
        var a11 = d11, b11 = c11;
        for (; ; ) {
          if (a11) {
            var e11 = a11[3], f11 = _(h10, a11[1], a11[2], b11), a11 = e11, b11 = f11;
            continue;
          }
          return b11;
        }
      }
      var c10 = e5(a10);
      if (1 - c10)
        bV(a10);
      try {
        var e10 = a10[2], d10 = [0, g10], f10 = e10.length - 1 - 1 | 0, j10 = 0;
        if (!(f10 < 0)) {
          var b10 = j10;
          for (; ; ) {
            var l10 = d10[1];
            d10[1] = i10(T(e10, b10)[1 + b10], l10);
            var m10 = b10 + 1 | 0;
            if (f10 !== b10) {
              var b10 = m10;
              continue;
            }
            break;
          }
        }
        if (1 - c10)
          bV(a10);
        var k10 = d10[1];
        return k10;
      } catch (b11) {
        b11 = p(b11);
        if (c10)
          throw b11;
        bV(a10);
        throw b11;
      }
    }
    function dl(a10, b10) {
      return 4 <= a10.length - 1 ? hR(10, c0, a10[3], b10) & (a10[2].length - 1 - 1 | 0) : v(uG);
    }
    function dm(a10, u10, C10) {
      var f10 = dl(a10, u10), D10 = [0, u10, C10, T(a10[2], f10)[1 + f10]];
      T(a10[2], f10)[1 + f10] = D10;
      a10[1] = a10[1] + 1 | 0;
      var v10 = a10[2].length - 1 << 1 < a10[1] ? 1 : 0;
      if (v10) {
        var i10 = a10[2], s10 = (i10.length - 1) * 2 | 0, t10 = s10 < eN ? 1 : 0;
        if (t10) {
          var j10 = cm(s10, 0), k10 = 1 - e5(a10);
          a10[2] = j10;
          var l10 = j10.length - 1, g10 = cm(l10, 0), o10 = i10.length - 1 - 1 | 0, y10 = 0;
          if (!(o10 < 0)) {
            var e10 = y10;
            a:
              for (; ; ) {
                var b10 = T(i10, e10)[1 + e10];
                for (; ; ) {
                  if (b10) {
                    var m10 = b10[1], w10 = b10[2], x10 = b10[3], h10 = k10 ? b10 : [0, m10, w10, 0], c10 = dl(a10, m10), n10 = T(g10, c10)[1 + c10];
                    if (n10)
                      n10[3] = h10;
                    else
                      T(j10, c10)[1 + c10] = h10;
                    T(g10, c10)[1 + c10] = h10;
                    var b10 = x10;
                    continue;
                  }
                  var B10 = e10 + 1 | 0;
                  if (o10 !== e10) {
                    var e10 = B10;
                    continue a;
                  }
                  break;
                }
                break;
              }
          }
          if (k10) {
            var p10 = l10 - 1 | 0, z10 = 0;
            if (!(p10 < 0)) {
              var d10 = z10;
              for (; ; ) {
                var r10 = T(g10, d10)[1 + d10];
                if (r10)
                  r10[3] = 0;
                var A10 = d10 + 1 | 0;
                if (p10 !== d10) {
                  var d10 = A10;
                  continue;
                }
                break;
              }
            }
            var q10 = 0;
          } else
            var q10 = k10;
          return q10;
        }
        return t10;
      }
      return v10;
    }
    function uH(f10, b10) {
      var g10 = dl(f10, b10), c10 = T(f10[2], g10)[1 + g10];
      if (c10) {
        var d10 = c10[3], j10 = c10[2];
        if (bp(b10, c10[1]) === 0)
          return j10;
        if (d10) {
          var e10 = d10[3], k10 = d10[2];
          if (bp(b10, d10[1]) === 0)
            return k10;
          if (e10) {
            var l10 = e10[2], m10 = e10[3];
            if (bp(b10, e10[1]) === 0)
              return l10;
            var a10 = m10;
            for (; ; ) {
              if (a10) {
                var h10 = a10[2], i10 = a10[3];
                if (bp(b10, a10[1]) === 0)
                  return h10;
                var a10 = i10;
                continue;
              }
              throw Q;
            }
          }
          throw Q;
        }
        throw Q;
      }
      throw Q;
    }
    var e7 = [y, uI, M(0)], dn = 0, iI = -1;
    function cx(a10, b10) {
      a10[13] = a10[13] + b10[3] | 0;
      return cv(b10, a10[28]);
    }
    var iJ = 1000000010;
    function e8(b10, a10) {
      return _(b10[17], a10, 0, k(a10));
    }
    function dp(a10) {
      return d(a10[19], 0);
    }
    function iK(a10, c10, b10) {
      a10[9] = a10[9] - c10 | 0;
      e8(a10, b10);
      a10[11] = 0;
      return 0;
    }
    function dq(d10, a10) {
      var b10 = c(a10, uJ);
      return b10 ? iK(d10, k(a10), a10) : b10;
    }
    function bW(a10, b10, c10) {
      var e10 = b10[3], f10 = b10[2];
      dq(a10, b10[1]);
      dp(a10);
      a10[11] = 1;
      a10[10] = eL(a10[8], (a10[6] - c10 | 0) + f10 | 0);
      a10[9] = a10[6] - a10[10] | 0;
      d(a10[21], a10[10]);
      return dq(a10, e10);
    }
    function iL(b10, a10) {
      return bW(b10, uK, a10);
    }
    function cy(a10, b10) {
      var c10 = b10[2], e10 = b10[3];
      dq(a10, b10[1]);
      a10[9] = a10[9] - c10 | 0;
      d(a10[20], c10);
      return dq(a10, e10);
    }
    function iM(a10) {
      for (; ; ) {
        var n10 = a10[28][2], J10 = n10 ? [0, n10[1]] : 0;
        if (J10) {
          var l10 = J10[1], m10 = l10[1], b10 = l10[2], X10 = 0 <= m10 ? 1 : 0, V10 = l10[3], W10 = a10[13] - a10[12] | 0, K10 = X10 || (a10[9] <= W10 ? 1 : 0);
          if (K10) {
            iv(a10[28]);
            var h10 = 0 <= m10 ? m10 : iJ;
            if (typeof b10 === "number")
              switch (b10) {
                case 0:
                  var t10 = bR(a10[3]);
                  if (t10) {
                    var u10 = t10[1][1], v10 = function(b11, a11) {
                      if (a11) {
                        var c11 = a11[1], d10 = a11[2];
                        return ain(b11, c11) ? [0, b11, a11] : [0, c11, v10(b11, d10)];
                      }
                      return [0, b11, 0];
                    };
                    u10[1] = v10(a10[6] - a10[9] | 0, u10[1]);
                  }
                  break;
                case 1:
                  bQ(a10[2]);
                  break;
                case 2:
                  bQ(a10[3]);
                  break;
                case 3:
                  var w10 = bR(a10[2]);
                  if (w10)
                    iL(a10, w10[1][2]);
                  else
                    dp(a10);
                  break;
                case 4:
                  if (a10[10] !== (a10[6] - a10[9] | 0)) {
                    var r10 = iw(a10[28]);
                    if (r10) {
                      var s10 = r10[1], M10 = s10[1];
                      a10[12] = a10[12] - s10[3] | 0;
                      a10[9] = a10[9] + M10 | 0;
                    }
                  }
                  break;
                default:
                  var x10 = bQ(a10[5]);
                  if (x10)
                    e8(a10, d(a10[25], x10[1]));
              }
            else
              switch (b10[0]) {
                case 0:
                  iK(a10, h10, b10[1]);
                  break;
                case 1:
                  var c10 = b10[2], f10 = b10[1], y10 = c10[1], N10 = c10[2], z10 = bR(a10[2]);
                  if (z10) {
                    var A10 = z10[1], e10 = A10[2];
                    switch (A10[1]) {
                      case 0:
                        cy(a10, f10);
                        break;
                      case 1:
                        bW(a10, c10, e10);
                        break;
                      case 2:
                        bW(a10, c10, e10);
                        break;
                      case 3:
                        if (a10[9] < (h10 + k(y10) | 0))
                          bW(a10, c10, e10);
                        else
                          cy(a10, f10);
                        break;
                      case 4:
                        if (a10[11] || !(a10[9] < (h10 + k(y10) | 0) || ((a10[6] - e10 | 0) + N10 | 0) < a10[10]))
                          cy(a10, f10);
                        else
                          bW(a10, c10, e10);
                        break;
                      default:
                        cy(a10, f10);
                    }
                  }
                  break;
                case 2:
                  var i10 = a10[6] - a10[9] | 0, O10 = b10[2], P10 = b10[1], B10 = bR(a10[3]);
                  if (B10) {
                    var C10 = B10[1][1], D10 = C10[1];
                    if (D10) {
                      var g10 = C10[1], Q10 = D10[1];
                      for (; ; ) {
                        if (g10) {
                          var E10 = g10[1], R10 = g10[2];
                          if (!(i10 <= E10)) {
                            var g10 = R10;
                            continue;
                          }
                          var F10 = E10;
                        } else
                          var F10 = Q10;
                        var j10 = F10;
                        break;
                      }
                    } else
                      var j10 = i10;
                    var G10 = j10 - i10 | 0;
                    if (0 <= G10)
                      cy(a10, [0, uM, G10 + P10 | 0, uL]);
                    else
                      bW(a10, [0, uO, j10 + O10 | 0, uN], a10[6]);
                  }
                  break;
                case 3:
                  var H10 = b10[2], S10 = b10[1];
                  if (a10[8] < (a10[6] - a10[9] | 0)) {
                    var o10 = bR(a10[2]);
                    if (o10) {
                      var p10 = o10[1], q10 = p10[2], L10 = p10[1];
                      if (a10[9] < q10 && !(3 < L10 - 1 >>> 0))
                        iL(a10, q10);
                    } else
                      dp(a10);
                  }
                  var T10 = a10[9] - S10 | 0, U10 = H10 === 1 ? 1 : a10[9] < h10 ? H10 : 5;
                  bv([0, U10, T10], a10[2]);
                  break;
                case 4:
                  bv(b10[1], a10[3]);
                  break;
                default:
                  var I10 = b10[1];
                  e8(a10, d(a10[24], I10));
                  bv(I10, a10[5]);
              }
            a10[12] = V10 + a10[12] | 0;
            continue;
          }
          return K10;
        }
        return 0;
      }
    }
    function iN(a10, b10) {
      cx(a10, b10);
      return iM(a10);
    }
    function iO(c10, a10, b10) {
      return iN(c10, [0, a10, [0, b10], a10]);
    }
    function e9(a10) {
      cu(a10);
      return bv([0, -1, [0, iI, uP, 0]], a10);
    }
    function e_(a10, c10) {
      var d10 = bR(a10[1]);
      if (d10) {
        var e10 = d10[1], b10 = e10[2], f10 = b10[1];
        if (e10[1] < a10[12])
          return e9(a10[1]);
        var g10 = b10[2];
        if (typeof g10 !== "number")
          switch (g10[0]) {
            case 3:
              var h10 = 1 - c10;
              return h10 ? (b10[1] = a10[13] + f10 | 0, bQ(a10[1]), 0) : h10;
            case 1:
            case 2:
              return c10 ? (b10[1] = a10[13] + f10 | 0, bQ(a10[1]), 0) : c10;
          }
        return 0;
      }
      return 0;
    }
    function iP(a10, c10, b10) {
      cx(a10, b10);
      if (c10)
        e_(a10, 1);
      return bv([0, a10[13], b10], a10[1]);
    }
    function iQ(a10, e10, d10) {
      a10[14] = a10[14] + 1 | 0;
      if (a10[14] < a10[15])
        return iP(a10, 0, [0, -a10[13] | 0, [3, e10, d10], 0]);
      var b10 = a10[14] === a10[15] ? 1 : 0;
      if (b10) {
        var c10 = a10[16];
        return iO(a10, k(c10), c10);
      }
      return b10;
    }
    function iR(a10, d10) {
      var b10 = 1 < a10[14] ? 1 : 0;
      if (b10) {
        if (a10[14] < a10[15]) {
          cx(a10, [0, dn, 1, 0]);
          e_(a10, 1);
          e_(a10, 0);
        }
        a10[14] = a10[14] - 1 | 0;
        var c10 = 0;
      } else
        var c10 = b10;
      return c10;
    }
    function iS(a10, f10) {
      if (a10[23])
        cx(a10, [0, dn, 5, 0]);
      var b10 = a10[22];
      if (b10) {
        var c10 = bQ(a10[4]);
        if (c10)
          return d(a10[27], c10[1]);
        var e10 = 0;
      } else
        var e10 = b10;
      return e10;
    }
    function e$(a10, d10) {
      var b10 = a10[4];
      function c10(b11) {
        return iS(a10, 0);
      }
      aR(c10, b10[1]);
      for (; ; ) {
        if (1 < a10[14]) {
          iR(a10, 0);
          continue;
        }
        a10[13] = iJ;
        iM(a10);
        if (d10)
          dp(a10);
        a10[12] = 1;
        a10[13] = 1;
        eU(a10[28]);
        e9(a10[1]);
        cu(a10[2]);
        cu(a10[3]);
        cu(a10[4]);
        cu(a10[5]);
        a10[10] = 0;
        a10[14] = 0;
        a10[9] = a10[6];
        return iQ(a10, 0, 3);
      }
    }
    function fa(a10, d10, c10) {
      var b10 = a10[14] < a10[15] ? 1 : 0;
      return b10 ? iO(a10, d10, c10) : b10;
    }
    function iT(c10, b10, a10) {
      return fa(c10, b10, a10);
    }
    function iU(b10, a10) {
      return iT(b10, k(a10), a10);
    }
    function iV(c10, b10) {
      return iU(c10, a(j + b10));
    }
    function cz(b10, a10) {
      return iT(b10, 1, a8(1, a10));
    }
    function cA(a10, b10) {
      e$(a10, 0);
      return d(a10[18], 0);
    }
    function iW(a10, h10, g10) {
      var b10 = [0, uT, h10, uS], c10 = a10[14] < a10[15] ? 1 : 0, i10 = [0, uR, g10, uQ], d10 = b10[3], e10 = b10[2], f10 = b10[1];
      return c10 ? iP(a10, 1, [0, -a10[13] | 0, [1, b10, i10], (k(f10) + e10 | 0) + k(d10) | 0]) : c10;
    }
    var iX = a8(80, 32);
    function iY(b10, d10) {
      var a10 = d10;
      for (; ; ) {
        var c10 = 0 < a10 ? 1 : 0;
        if (c10) {
          if (80 < a10) {
            _(b10[17], iX, 0, 80);
            var a10 = a10 - 80 | 0;
            continue;
          }
          return _(b10[17], iX, 0, a10);
        }
        return c10;
      }
    }
    function uV(a10) {
      return a10[1] === e7 ? ag(uX, ag(a10[2], uW)) : uY;
    }
    function uZ(a10) {
      return a10[1] === e7 ? ag(u1, ag(a10[2], u0)) : u2;
    }
    function u3(a10) {
      return 0;
    }
    function u4(a10) {
      return 0;
    }
    function iZ(i10, h10) {
      function j10(a11) {
        return 0;
      }
      function k10(a11) {
        return 0;
      }
      function l10(a11) {
        return 0;
      }
      var c10 = eT(0), d10 = [0, iI, u5, 0];
      cv(d10, c10);
      var b10 = ct(0);
      e9(b10);
      bv([0, 1, d10], b10);
      var e10 = ct(0), f10 = ct(0), g10 = ct(0), a10 = [0, b10, ct(0), g10, f10, e10, 78, 10, 68, 78, 0, 1, 1, 1, 1, q4, u6, i10, h10, l10, k10, j10, 0, 0, uV, uZ, u3, u4, c10];
      a10[19] = function(b11) {
        return _(a10[17], uU, 0, 1);
      };
      a10[20] = function(b11) {
        return iY(a10, b11);
      };
      a10[21] = function(b11) {
        return iY(a10, b11);
      };
      return a10;
    }
    function i0(c10) {
      function a10(a11) {
        return br(c10);
      }
      return iZ(function(d10, a11, b10) {
        if (0 <= a11 && 0 <= b10 && !((k(d10) - b10 | 0) < a11))
          return h1(c10, d10, a11, b10);
        return v(ra);
      }, a10);
    }
    function fb(a10) {
      function b10(a11) {
        return 0;
      }
      return iZ(function(b11, c10, d10) {
        return de(a10, b11, c10, d10);
      }, b10);
    }
    var u7 = ge;
    function i1(a10) {
      return W(u7);
    }
    var u8 = i1(0), u9 = i0(q_), u_ = i0(ay);
    fb(u8);
    function i2(g10, e10) {
      var a10 = W(16), c10 = fb(a10);
      f(g10, c10, e10);
      cA(c10, 0);
      var d10 = a10[2];
      if (2 <= d10) {
        var b10 = d10 - 2 | 0, h10 = 1;
        if (0 <= b10 && !((a10[2] - b10 | 0) < 1))
          return eS(a10[1], h10, b10);
        return v(r3);
      }
      return F(a10);
    }
    function aB(a10, b10) {
      var c10 = 0;
      if (typeof b10 === "number")
        return 0;
      else
        switch (b10[0]) {
          case 0:
            var e10 = b10[2];
            aB(a10, b10[1]);
            if (typeof e10 === "number")
              switch (e10) {
                case 0:
                  return iR(a10, 0);
                case 1:
                  return iS(a10, 0);
                case 2:
                  return cA(a10, 0);
                case 3:
                  var r10 = a10[14] < a10[15] ? 1 : 0;
                  return r10 ? iN(a10, [0, dn, 3, 0]) : r10;
                case 4:
                  e$(a10, 1);
                  return d(a10[18], 0);
                case 5:
                  return cz(a10, 64);
                default:
                  return cz(a10, 37);
              }
            else
              switch (e10[0]) {
                case 0:
                  return iW(a10, e10[2], e10[3]);
                case 1:
                  return 0;
                default:
                  var J10 = e10[1];
                  cz(a10, 64);
                  return cz(a10, J10);
              }
          case 1:
            var j10 = b10[2], s10 = b10[1];
            if (j10[0] === 0) {
              var K10 = j10[1];
              aB(a10, s10);
              var k10 = [0, e7, i2(aB, K10)];
              if (a10[22]) {
                bv(k10, a10[4]);
                d(a10[26], k10);
              }
              var q10 = a10[23];
              return q10 ? cx(a10, [0, dn, [5, k10], 0]) : q10;
            }
            var L10 = j10[1];
            aB(a10, s10);
            var t10 = tW(i2(aB, L10));
            return iQ(a10, t10[1], t10[2]);
          case 2:
            var f10 = b10[1], F10 = 0;
            if (typeof f10 !== "number" && f10[0] === 0) {
              var l10 = f10[2], O10 = 0;
              if (typeof l10 !== "number" && l10[0] === 1) {
                var z10 = b10[2], y10 = l10[2], x10 = f10[1];
                F10 = 1;
                O10 = 1;
              }
            }
            if (!F10) {
              var w10 = b10[2], u10 = f10;
              c10 = 2;
            }
            break;
          case 3:
            var g10 = b10[1], G10 = 0;
            if (typeof g10 !== "number" && g10[0] === 0) {
              var m10 = g10[2], P10 = 0;
              if (typeof m10 !== "number" && m10[0] === 1) {
                var E10 = b10[2], D10 = m10[2], C10 = g10[1];
                c10 = 1;
                G10 = 1;
                P10 = 1;
              }
            }
            if (!G10) {
              var B10 = b10[2], A10 = g10;
              c10 = 3;
            }
            break;
          case 4:
            var h10 = b10[1], H10 = 0;
            if (typeof h10 !== "number" && h10[0] === 0) {
              var n10 = h10[2], Q10 = 0;
              if (typeof n10 !== "number" && n10[0] === 1) {
                var z10 = b10[2], y10 = n10[2], x10 = h10[1];
                H10 = 1;
                Q10 = 1;
              }
            }
            if (!H10) {
              var w10 = b10[2], u10 = h10;
              c10 = 2;
            }
            break;
          case 5:
            var i10 = b10[1], p10 = 0;
            if (typeof i10 === "number" || !(i10[0] === 0))
              p10 = 1;
            else {
              var o10 = i10[2], I10 = 0;
              if (typeof o10 !== "number" && o10[0] === 1) {
                var E10 = b10[2], D10 = o10[2], C10 = i10[1];
                c10 = 1;
                I10 = 1;
              }
              if (!I10)
                p10 = 1;
            }
            if (p10) {
              var B10 = b10[2], A10 = i10;
              c10 = 3;
            }
            break;
          case 6:
            var M10 = b10[2];
            aB(a10, b10[1]);
            return d(M10, a10);
          case 7:
            aB(a10, b10[1]);
            return cA(a10, 0);
          default:
            var N10 = b10[2];
            aB(a10, b10[1]);
            return v(N10);
        }
      switch (c10) {
        case 0:
          aB(a10, x10);
          return fa(a10, y10, z10);
        case 1:
          aB(a10, C10);
          return fa(a10, D10, a8(1, E10));
        case 2:
          aB(a10, u10);
          return iU(a10, w10);
        default:
          aB(a10, A10);
          return cz(a10, B10);
      }
    }
    ig(function(a10) {
      cA(u9, 0);
      return cA(u_, 0);
    });
    function i3(b10, a10) {
      var c10 = c9(a10) === y ? a10 : a10[1];
      return h6(b10, c10);
    }
    var fd = qy, fc = ahI, u$ = o.Array, i4 = [y, va, M(0)];
    i3(vb, [0, i4, {}]);
    (function(a10) {
      throw a10;
    });
    dj(function(a10) {
      return a10[1] === i4 ? [0, av(a10[2].toString())] : 0;
    });
    dj(function(a10) {
      return a10 instanceof u$ ? 0 : [0, av(a10.toString())];
    });
    var bw = aik(0);
    function aJ(a10, b10) {
      return a10[0] === 0 ? d(b10, a10[1]) : a10;
    }
    M(0);
    M(0);
    function i5(c10, b10, a10) {
      return bP(c10, ak(b10, a10));
    }
    function aF(a10) {
      if (typeof a10 === "number")
        return ve;
      else
        switch (a10[0]) {
          case 0:
            var b10 = a10[1];
            return d(q(vf), b10);
          case 1:
            var c10 = a10[1];
            return d(q(vg), c10);
          case 2:
            var e10 = a10[1];
            return d(q(vh), e10);
          case 3:
            var g10 = a10[1];
            return d(q(vi), g10);
          case 4:
            var h10 = a10[1];
            return d(q(vj), h10);
          case 5:
            var i10 = a10[1];
            return d(q(vk), i10);
          case 6:
            var j10 = i5(vl, aF, a10[1]);
            return d(q(vm), j10);
          case 7:
            var k10 = a10[1], l10 = i5(vo, function(a11) {
              var b11 = a11[1], c11 = aF(a11[2]);
              return f(q(vn), b11, c11);
            }, k10);
            return d(q(vp), l10);
          default:
            var m10 = a10[1];
            return d(q(vq), m10);
        }
    }
    function i6(a10) {
      return [0, cl(a10)];
    }
    function aG(a10) {
      return [1, [0, S, a10]];
    }
    function vr(a10) {
      if (typeof a10 !== "number")
        switch (a10[0]) {
          case 0:
            return [0, a10[1]];
          case 4:
            var b10 = a10[1];
            try {
              var e10 = [0, aif(b10)];
              return e10;
            } catch (a11) {
              return aG(d(q(vt), b10));
            }
        }
      var c10 = aF(a10);
      return aG(d(q(vs), c10));
    }
    function vu(a10) {
      if (typeof a10 !== "number")
        switch (a10[0]) {
          case 0:
            return [0, hY(a10[1])];
          case 4:
            var b10 = a10[1];
            try {
              var e10 = [0, h0(b10)];
              return e10;
            } catch (a11) {
              return aG(d(q(vw), b10));
            }
        }
      var c10 = aF(a10);
      return aG(d(q(vv), c10));
    }
    function i7(a10) {
      if (typeof a10 !== "number")
        switch (a10[0]) {
          case 0:
            return [0, hY(a10[1])];
          case 4:
            var b10 = a10[1];
            try {
              var e10 = [0, h0(b10)];
              return e10;
            } catch (a11) {
              return aG(d(q(vy), b10));
            }
        }
      var c10 = aF(a10);
      return aG(d(q(vx), c10));
    }
    function vA(a10) {
      if (typeof a10 !== "number")
        switch (a10[0]) {
          case 0:
            return [0, aig(a10[1])];
          case 1:
            return [0, a10[1]];
          case 3:
            return [0, a10[1]];
          case 4:
            var b10 = a10[1];
            try {
              var e10 = [0, ahU(b10)];
              return e10;
            } catch (a11) {
              return aG(d(q(vC), b10));
            }
        }
      var c10 = aF(a10);
      return aG(d(q(vB), c10));
    }
    function ba(f10, e10) {
      var b10 = 0, a10 = e10;
      for (; ; ) {
        if (a10) {
          var c10 = a10[2], b10 = [0, d(f10, a10[1]), b10], a10 = c10;
          continue;
        }
        return ab(b10);
      }
    }
    function fe(a10, b10) {
      return a10[0] === 0 ? [0, d(b10, a10[1])] : [1, a10[1]];
    }
    function ar(a10, b10) {
      return a10[0] === 0 ? d(b10, a10[1]) : [1, a10[1]];
    }
    function ad(b10, a10) {
      function g10(d10, a11) {
        return fe(bO(function(b11, c11) {
          var a12 = ad(d10, c11);
          if (b11[0] === 0) {
            var e11 = b11[1];
            if (a12[0] === 0)
              return [0, [0, a12[1], e11]];
          }
          if (a12[0] === 0)
            return b11;
          var g11 = a12[1][2], h11 = aF(c11);
          return [1, [0, S, f(q(vI), g11, h11)]];
        }, vH, a11), ab);
      }
      if (typeof b10 === "number")
        switch (b10) {
          case 0:
            if (typeof a10 !== "number" && a10[0] === 5)
              return [0, a10[1]];
            var I10 = aF(a10);
            return aG(d(q(vE), I10));
          case 1:
            return aG(vF);
          default:
            if (typeof a10 === "number")
              return [0, 0];
            var J10 = aF(a10);
            return aG(d(q(vG), J10));
        }
      else
        switch (b10[0]) {
          case 0:
            switch (b10[1]) {
              case 0:
                return i7(a10);
              case 1:
                return vu(a10);
              case 2:
                return vr(a10);
              case 3:
                if (typeof a10 !== "number" && a10[0] === 2)
                  return [0, a10[1]];
                var G10 = aF(a10);
                return aG(d(q(vz), G10));
              case 4:
                return vA(a10);
              case 5:
                if (typeof a10 !== "number" && a10[0] === 4)
                  return [0, a10[1]];
                var H10 = aF(a10);
                return aG(d(q(vD), H10));
              default:
                return fe(i7(a10), rd);
            }
          case 1:
            var K10 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 6)
              return fe(g10(K10, a10[1]), iu);
            return vJ;
          case 2:
            var e10 = b10[1];
            if (typeof e10 !== "number" && e10[0] === 5) {
              var i10 = e10[1], aB2 = 0;
              if (typeof i10 === "number" || !(i10[0] === 0))
                aB2 = 1;
              else if (i10[1] === 5) {
                var L10 = e10[2];
                if (typeof a10 !== "number" && a10[0] === 7) {
                  var z10 = a10[1], M10 = ba(function(a11) {
                    return a11[1];
                  }, z10), N10 = ba(function(a11) {
                    return a11[2];
                  }, z10), O10 = function(a11) {
                    return [0, eQ(M10, a11)];
                  };
                  return ar(g10(L10, N10), O10);
                }
                return vL;
              }
            }
            if (typeof a10 !== "number" && a10[0] === 6)
              return g10(e10, a10[1]);
            return vK;
          case 3:
            var P10 = b10[2], R10 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 7) {
              var A10 = a10[1];
              if (R10 === 5) {
                var T10 = ba(function(a11) {
                  return a11[1];
                }, A10), U10 = ba(function(a11) {
                  return a11[2];
                }, A10), V10 = function(a11) {
                  return [0, eQ(T10, a11)];
                };
                return ar(g10(P10, U10), V10);
              }
              return vN;
            }
            return vM;
          case 4:
            var W10 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 6) {
              var j10 = a10[1];
              if (!j10)
                return [0, 0];
              if (!j10[2]) {
                var Y10 = j10[1], Z10 = function(a11) {
                  return [0, [0, a11]];
                };
                return ar(ad(W10, Y10), Z10);
              }
            }
            var X10 = aF(a10);
            return [1, [0, S, d(q(vO), X10)]];
          case 5:
            var h10 = b10[2], B10 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 6) {
              var c10 = a10[1];
              if (typeof h10 !== "number" && h10[0] === 5) {
                var ac10 = function(a11) {
                  function b11(b12) {
                    return [0, [0, a11, b12]];
                  }
                  var d10 = c10 ? c10[2] : bg(rp);
                  return ar(ad(h10, [6, d10]), b11);
                }, ae10 = c10 ? c10[1] : bg(ro);
                return ar(ad(B10, ae10), ac10);
              }
              if (c10) {
                var k10 = c10[2];
                if (k10 && !k10[2]) {
                  var _10 = k10[1], $10 = c10[1], aa10 = function(a11) {
                    function b11(b12) {
                      return [0, [0, a11, b12]];
                    }
                    return ar(ad(h10, _10), b11);
                  };
                  return ar(ad(B10, $10), aa10);
                }
              }
              return vQ;
            }
            return vP;
          case 6:
            var af10 = b10[3], ag10 = b10[2], ah10 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 6) {
              var l10 = a10[1];
              if (l10) {
                var m10 = l10[2];
                if (m10) {
                  var n10 = m10[2];
                  if (n10 && !n10[2]) {
                    var ai2 = n10[1], aj2 = m10[1], al2 = l10[1], am2 = function(a11) {
                      function b11(b12) {
                        function c11(c12) {
                          return [0, [0, a11, b12, c12]];
                        }
                        return ar(ad(af10, ai2), c11);
                      }
                      return ar(ad(ag10, aj2), b11);
                    };
                    return ar(ad(ah10, al2), am2);
                  }
                }
              }
              return vS;
            }
            return vR;
          case 7:
            var an2 = b10[4], ao2 = b10[3], ap2 = b10[2], aq2 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 6) {
              var o10 = a10[1];
              if (o10) {
                var r10 = o10[2];
                if (r10) {
                  var s10 = r10[2];
                  if (s10) {
                    var t10 = s10[2];
                    if (t10 && !t10[2]) {
                      var as2 = t10[1], at2 = s10[1], au2 = r10[1], av2 = o10[1], aw2 = function(a11) {
                        function b11(b12) {
                          function c11(c12) {
                            function d10(d11) {
                              return [0, [0, a11, b12, c12, d11]];
                            }
                            return ar(ad(an2, as2), d10);
                          }
                          return ar(ad(ao2, at2), c11);
                        }
                        return ar(ad(ap2, au2), b11);
                      };
                      return ar(ad(aq2, av2), aw2);
                    }
                  }
                }
              }
              return vU;
            }
            return vT;
          case 8:
            var C10 = b10[1], D10 = C10[1], ax2 = C10[4];
            if (typeof a10 !== "number" && a10[0] === 7) {
              var ay2 = a10[1], E10 = ak(function(a11) {
                var b11 = a11[2];
                return [0, cs(a11[1]), b11];
              }, ay2);
              return d(ax2, [0, function(c11, a11) {
                var b11 = cs(c11);
                if (typeof a11 !== "number" && a11[0] === 4) {
                  var e11 = a11[1];
                  try {
                    var g11 = function(a12) {
                      return [0, [0, a12]];
                    }, h11 = ar(ad(e11, il(b11, E10)), g11);
                    return h11;
                  } catch (a12) {
                    return [0, 0];
                  }
                }
                try {
                  var d10 = ad(a11, il(b11, E10));
                  return d10;
                } catch (a12) {
                  a12 = p(a12);
                  if (a12 === Q)
                    return [1, [0, S, f(q(vW), b11, D10)]];
                  throw a12;
                }
              }]);
            }
            return [1, [0, S, d(q(vV), D10)]];
          case 9:
            var az2 = b10[1][5], y10 = 0, aA2 = function(a11) {
              var b11 = a11[2], c11 = a11[1];
              return f(az2, c11, [0, function(a12) {
                return ad(a12, b11);
              }]);
            };
            if (typeof a10 !== "number")
              switch (a10[0]) {
                case 4:
                  var u10 = [0, [0, a10[1], 0]];
                  y10 = 1;
                  break;
                case 6:
                  var v10 = a10[1];
                  if (v10) {
                    var w10 = v10[1], F10 = 0;
                    if (typeof w10 !== "number" && w10[0] === 4) {
                      var x10 = v10[2];
                      if (x10 && !x10[2]) {
                        var u10 = [0, [0, w10[1], x10[1]]];
                        y10 = 1;
                        F10 = 1;
                      } else
                        F10 = 1;
                    }
                  }
                  break;
              }
            if (!y10)
              var u10 = vX;
            return ar(u10, aA2);
          default:
            return d(b10[1][4], a10);
        }
    }
    function H(b10, a10) {
      function h10(b11, a11) {
        switch (b11) {
          case 0:
            return i6(a11);
          case 1:
            return [0, cl(a11)];
          case 2:
            return [0, a11];
          case 3:
            return [2, a11];
          case 4:
            return [3, a11];
          case 5:
            return [4, a11];
          default:
            return i6(a11);
        }
      }
      if (typeof b10 === "number")
        switch (b10) {
          case 0:
            return [5, a10];
          case 1:
            return [8, a10];
          default:
            return 0;
        }
      else
        switch (b10[0]) {
          case 0:
            return h10(b10[1], a10);
          case 1:
            var k10 = b10[1], l10 = it(a10);
            return [6, ba(function(a11) {
              return H(k10, a11);
            }, l10)];
          case 2:
            var c10 = b10[1];
            if (typeof c10 !== "number" && c10[0] === 5) {
              var e10 = c10[1], N10 = 0;
              if (typeof e10 === "number" || !(e10[0] === 0))
                N10 = 1;
              else if (e10[1] === 5) {
                var m10 = c10[2];
                return [7, ba(function(a11) {
                  var b11 = a11[1];
                  return [0, b11, H(m10, a11[2])];
                }, a10)];
              }
            }
            return [6, ba(function(a11) {
              return H(c10, a11);
            }, a10)];
          case 3:
            var i10 = b10[1];
            if (i10 === 5) {
              var n10 = b10[2];
              return [7, ba(function(a11) {
                var b11 = a11[1];
                return [0, b11, H(n10, a11[2])];
              }, a10)];
            }
            var o10 = b10[2];
            return [6, ba(function(a11) {
              var b11 = a11[1], c11 = [0, H(o10, a11[2]), 0];
              return [6, [0, h10(i10, b11), c11]];
            }, a10)];
          case 4:
            var p10 = b10[1], q10 = a10 ? [0, H(p10, a10[1]), 0] : 0;
            return [6, q10];
          case 5:
            var j10 = b10[1], f10 = b10[2];
            if (typeof f10 !== "number" && f10[0] === 5) {
              var g10 = H(f10, a10[2]);
              if (typeof g10 !== "number" && g10[0] === 6) {
                var s10 = g10[1];
                return [6, [0, H(j10, a10[1]), s10]];
              }
              return bg(vY);
            }
            var r10 = [0, H(b10[2], a10[2]), 0];
            return [6, [0, H(j10, a10[1]), r10]];
          case 6:
            var t10 = b10[2], u10 = b10[1], v10 = a10[2], w10 = a10[1], x10 = [0, H(b10[3], a10[3]), 0], y10 = [0, H(t10, v10), x10];
            return [6, [0, H(u10, w10), y10]];
          case 7:
            var z10 = b10[3], A10 = b10[2], B10 = b10[1], C10 = a10[3], D10 = a10[2], E10 = a10[1], F10 = [0, H(b10[4], a10[4]), 0], G10 = [0, H(z10, C10), F10], I10 = [0, H(A10, D10), G10];
            return [6, [0, H(B10, E10), I10]];
          case 8:
            var J10 = b10[1][2], K10 = 0;
            return [7, bO(function(e11, h11) {
              var b11 = h11[1], i11 = d(b11[6], a10), c11 = H(b11[4], i11), g11 = b11[4];
              if (typeof g11 !== "number" && g11[0] === 4 && typeof c11 !== "number" && c11[0] === 6) {
                var f11 = c11[1];
                if (!f11)
                  return e11;
                if (!f11[2])
                  return [0, [0, b11[1], f11[1]], e11];
              }
              return [0, [0, b11[1], c11], e11];
            }, K10, J10)];
          case 9:
            var L10 = b10[1][2], M10 = 0;
            return bO(function(g11, f11) {
              var b11 = f11[1], c11 = d(b11[5], a10);
              if (c11) {
                var e11 = H(b11[4], c11[1]);
                return typeof e11 === "number" ? [4, b11[1]] : [6, [0, [4, b11[1]], [0, e11, 0]]];
              }
              return g11;
            }, M10, L10);
          default:
            return d(b10[1][3], a10);
        }
    }
    function bX(d10, b10, c10, a10) {
      var e10 = b10 ? b10[1] : a10[2];
      return [0, d10, e10, a10, c10];
    }
    function vZ(b10) {
      var a10 = [y, v0, M(0)];
      dj(function(c11) {
        if (c11[1] === a10) {
          var e11 = aF(H(b10[1][3], c11[2]));
          return [0, d(q(v1), e11)];
        }
        return 0;
      });
      function c10(c11) {
        return c11[1] === a10 ? [0, c11[2]] : d(b10[2], c11);
      }
      function e10(b11) {
        return [0, a10, b11];
      }
      return [0, a10, [0, b10[1], e10, c10]];
    }
    var dr = [y, v2, M(0)], v4 = [y, v3, M(0)], v6 = [y, v5, M(0)], v8 = [y, v7, M(0)];
    function i8(b10, a10) {
      if (b10) {
        var c10 = b10[1][2];
        if (c10) {
          var d10 = c10[1];
          return f(q(v9), d10, a10);
        }
        return a10;
      }
      return a10;
    }
    function we(b10) {
      function l10(b11, a10) {
        return [0, d(b11, a10)];
      }
      function m10(c11, a10) {
        return [0, f(b10[2], c11[1], a10)];
      }
      function n10(a10) {
        return [0, d(b10[1], a10)];
      }
      function e10(a10) {
        return a10[1];
      }
      function g10(a10) {
        return [0, a10];
      }
      var c10 = [0, l10, m10, n10, e10, e10, g10, g10];
      function o10(a10) {
        var e11 = d(b10[1], [0, a10]);
        return d(c10[6], e11);
      }
      function h10(a10) {
        var e11 = d(b10[1], [1, a10]);
        return d(c10[6], e11);
      }
      function i10(a10, e11, b11) {
        function g11(a11) {
          if (a11[0] === 0) {
            var f10 = d(e11, a11[1]);
            return d(c10[5], f10);
          }
          var g12 = d(b11, a11[1]);
          return d(c10[5], g12);
        }
        return f(c10[2], a10, g11);
      }
      function k10(b11, a10) {
        return i10(b11, a10, h10);
      }
      var r10 = [0, o10, h10, i10, k10, function(b11, a10) {
        return k10(b11, a10);
      }];
      function s10(m11) {
        var j10 = [0, 0], k11 = [0, 0];
        function e11(a11) {
          k11[1] = 1;
          return 0;
        }
        function g11(a11) {
          j10[1] = [0, a11];
          return 0;
        }
        function h11(b11, a11) {
          return [1, [0, b11, a11]];
        }
        function i11(b11, a11) {
          return [0, b11, a11];
        }
        function a10(t11, s11, g12, a11, r11) {
          function e12(n11, h12) {
            var a12 = n11[2], g13 = n11[1];
            if (h12[0] === 0) {
              var i12 = h12[2], l12 = h12[1], m12 = g13 ? g13[1] : 0;
              return function(b11) {
                var d10 = l12[1];
                if (d10) {
                  var f10 = d10[1], c11 = l12[3][3];
                  if (typeof c11 !== "number" && c11[0] === 4) {
                    var h13 = c11[1];
                    return b11 ? e12([0, [0, [0, [0, f10, H(h13, b11[1])], m12]], a12], i12) : e12([0, [0, m12], a12], i12);
                  }
                  return e12([0, [0, [0, [0, f10, H(c11, b11)], m12]], a12], i12);
                }
                return e12([0, g13, [0, H(l12[3][3], b11), a12]], i12);
              };
            }
            var o11 = h12[1], p10 = o11[2], u11 = o11[1], v10 = i8(j10[1], s11);
            if (g13)
              var w10 = g13[1], q10 = [0, [7, w10], ab(a12)];
            else
              var q10 = ab(a12);
            var x10 = d(r11, [0, v10, q10, t11]), y10 = d(c10[6], x10);
            function z10(a13) {
              if (a13[1]) {
                var c11 = ad(u11[3][3], a13[2]);
                return c11[0] === 0 ? d(b10[1], [0, c11[1]]) : d(b10[3], [0, dr, c11[1][2]]);
              }
              var e13 = ad(p10[1][3], a13[2]);
              if (e13[0] === 0) {
                var f10 = e13[1];
                if (k11[1]) {
                  var g14 = d(p10[2], f10);
                  return d(b10[3], g14);
                }
                return d(b10[1], [1, f10]);
              }
              return d(b10[3], [0, dr, e13[1][2]]);
            }
            return f(c10[2], y10, z10);
          }
          return e12(wf, a11);
        }
        function l11(e12, d10, c11, b11) {
          return a10(1, e12, d10, c11, b11);
        }
        return [0, j10, k11, e11, g11, h11, i11, a10, l11, function(e12, d10, c11, b11) {
          return a10(0, e12, d10, c11, b11);
        }];
      }
      function t10(b11) {
        var e11 = e6(0, b11[1]), g11 = 0, c11 = uF(function(c12, b12, a10) {
          return b12 ? (dm(e11, c12, b12[1]), a10) : [0, c12, a10];
        }, b11, g11);
        if (c11 !== 0)
          throw [0, v6, c11];
        return function(b12) {
          try {
            var c12 = uH(e11, b12[1]);
          } catch (c13) {
            c13 = p(c13);
            if (c13 === Q) {
              iH(function(b13, c14) {
                ag(wg, ag(b13, a(j + hR(10, c0, 0, b13))));
                return 0;
              }, e11);
              var g12 = hR(10, c0, 0, b12[1]), h11 = b12[1];
              f(q(wh), h11, g12);
              throw [0, v4, b12[1]];
            }
            throw c13;
          }
          return d(c12, b12);
        };
      }
      function u10(b11) {
        var a10 = e6(0, 16);
        function c11(c12, b12) {
          return dm(a10, c12, b12);
        }
        aR(function(a11) {
          return iH(c11, a11);
        }, b11);
        return a10;
      }
      return [0, c10, r10, s10, t10, u10, function(m11) {
        var a10 = e6(0, 20), h11 = [0, 0];
        function g11(b11) {
          h11[1] = [0, b11];
          return a10;
        }
        function i11(b11, a11) {
          return [1, [0, b11, a11]];
        }
        function j10(b11, a11) {
          return [0, b11, a11];
        }
        function l11(b11) {
          var a11 = b11;
          for (; ; ) {
            if (a11[0] === 0) {
              var c11 = a11[2];
              if (a11[1][1])
                return 1;
              var a11 = c11;
              continue;
            }
            return 0;
          }
        }
        function e11(C10, i12, e12, m12) {
          var U10 = b10[2];
          dm(a10, i12, 0);
          return function(n11) {
            if (h11[1]) {
              var V10 = l11(m12), D10 = function(l12, E10, a11) {
                if (l12[0] === 0) {
                  var t11 = l12[1], K10 = 0, W10 = l12[2], F10 = t11[3][3];
                  if (typeof F10 !== "number" && F10[0] === 4) {
                    var u11 = 1;
                    K10 = 1;
                  }
                  if (!K10)
                    var u11 = 0;
                  var X10 = function(c11) {
                    var e15 = c11[2], a12 = ad(t11[3][3], c11[1]);
                    return a12[0] === 0 ? D10(W10, d(E10, a12[1]), e15) : d(b10[3], [0, dr, a12[1][2]]);
                  }, v10 = t11[1], g13 = a11[2];
                  if (V10) {
                    var i13 = 0;
                    if (v10)
                      if (g13) {
                        var p10 = g13[1], j12 = 0;
                        if (typeof p10 !== "number" && p10[0] === 7) {
                          var z10 = g13[2], A10 = v10[1], n12 = 0, m13 = 0, h12 = p10[1];
                          for (; ; ) {
                            if (h12) {
                              var x10 = h12[2], o12 = h12[1];
                              if (a5(o12[1], A10)) {
                                var n12 = [0, o12, n12], h12 = x10;
                                continue;
                              }
                              var m13 = [0, o12, m13], h12 = x10;
                              continue;
                            }
                            var y10 = ab(m13), k13 = ab(n12);
                            if (k13) {
                              var B10 = k13[1], L10 = k13[2], M10 = B10[2];
                              if (u11) {
                                var N10 = a11[3], O10 = [0, [7, bM(L10, y10)], z10], e14 = [0, [0, [6, [0, M10, 0]], [0, a11[1], O10, N10]]];
                                j12 = 1;
                              } else {
                                var P10 = B10[2], Q10 = a11[3], R10 = [0, [7, bM(k13[2], y10)], z10], e14 = [0, [0, P10, [0, a11[1], R10, Q10]]];
                                j12 = 1;
                              }
                            } else if (u11) {
                              var e14 = [0, [0, v$, a11]];
                              j12 = 1;
                            } else {
                              var e14 = [1, [0, S, d(q(wa), A10)]];
                              j12 = 1;
                            }
                            break;
                          }
                        }
                        if (!j12)
                          i13 = 1;
                      } else
                        i13 = 1;
                    else if (g13) {
                      var r11 = g13[1], w10 = 0;
                      if (typeof r11 !== "number" && r11[0] === 7) {
                        var s11 = g13[2], T10 = r11[1];
                        if (s11) {
                          var e14 = [0, [0, s11[1], [0, a11[1], [0, [7, T10], s11[2]], a11[3]]]];
                          w10 = 1;
                        } else {
                          var e14 = wb;
                          w10 = 1;
                        }
                      }
                      if (!w10)
                        i13 = 1;
                    } else
                      i13 = 1;
                    if (i13)
                      var e14 = v_;
                  } else
                    var e14 = v10 ? bg(wc) : g13 ? [0, [0, g13[1], [0, a11[1], g13[2], a11[3]]]] : wd;
                  if (e14[0] === 0)
                    var G10 = e14[1], I10 = d(b10[1], [0, G10[1], G10[2]]);
                  else
                    var I10 = d(b10[3], [0, dr, e14[1][2]]);
                  return f(U10, I10, X10);
                }
                var J10 = l12[1], Y10 = J10[2], Z10 = J10[1];
                function _10(a12) {
                  if (a12[0] === 0) {
                    var c11 = [0, 1, H(Z10[3][3], a12[1]), C10];
                    return d(b10[1], c11);
                  }
                  var e15 = [0, 0, H(Y10[1][3], a12[1]), C10];
                  return d(b10[1], e15);
                }
                var $10 = f(c10[2], E10, _10);
                return d(c10[4], $10);
              }, o11 = function(a11) {
                return D10(m12, n11, a11);
              }, g12 = dl(a10, i12), j11 = 0, e13 = T(a10[2], g12)[1 + g12];
              for (; ; ) {
                if (e13) {
                  var k12 = e13[3];
                  if (bp(e13[1], i12) !== 0) {
                    var j11 = e13, e13 = k12;
                    continue;
                  }
                  a10[1] = a10[1] - 1 | 0;
                  if (j11)
                    j11[3] = k12;
                  else
                    T(a10[2], g12)[1 + g12] = k12;
                }
                return dm(a10, i8(h11[1], i12), [0, o11]);
              }
            }
            throw v8;
          };
        }
        function k11(c11, b11, a11) {
          return e11(1, c11, b11, a11);
        }
        return [0, a10, h11, g11, i11, j10, l11, e11, k11, function(c11, b11, a11) {
          return e11(0, c11, b11, a11);
        }];
      }];
    }
    M(0);
    var i9 = [], i_ = [], i$ = [], ja = [], ds = [], wi = [];
    function wj(b10, a10) {
      return [0, b10, a10[2], a10[3], a10[4]];
    }
    O(i9, [0, wl, 0, 0, wk, 0, function(a10) {
      return a10[1];
    }, wj]);
    function wm(b10, a10) {
      return [0, a10[1], b10, a10[3], a10[4]];
    }
    O(i_, [0, wo, 0, 0, wn, 0, function(a10) {
      return a10[2];
    }, wm]);
    function wp(b10, a10) {
      return [0, a10[1], a10[2], b10, a10[4]];
    }
    O(i$, [0, wr, 0, 0, wq, 0, function(a10) {
      return a10[3];
    }, wp]);
    function ws(b10, a10) {
      return [0, a10[1], a10[2], a10[3], b10];
    }
    O(ja, [0, wu, 0, 0, wt, 0, function(a10) {
      return a10[4];
    }, ws]);
    O(ds, [8, [0, wD, [0, [0, i9], [0, [0, i_], [0, [0, i$], [0, [0, ja], 0]]]], 0, function(a10) {
      function b10(b11) {
        function c10(c11) {
          function d10(d11) {
            function e10(a11) {
              return [0, [0, a11, d11, c11, b11]];
            }
            return aJ(f(a10[1], ww, wv), e10);
          }
          return aJ(f(a10[1], wy, wx), d10);
        }
        return aJ(f(a10[1], wA, wz), c10);
      }
      return aJ(f(a10[1], wC, wB), b10);
    }]]);
    O(wi, [0, wF, wE, ds]);
    var jb = [], jc = [], jd = [], je = [], jf = [], jg = [], jh = [];
    function wG(b10, a10) {
      return [0, b10, a10[2], a10[3], a10[4], a10[5]];
    }
    O(jb, [0, wI, 0, 0, wH, 0, function(a10) {
      return a10[1];
    }, wG]);
    function wJ(b10, a10) {
      return [0, a10[1], b10, a10[3], a10[4], a10[5]];
    }
    O(jc, [0, wL, 0, 0, wK, 0, function(a10) {
      return a10[2];
    }, wJ]);
    function wM(b10, a10) {
      return [0, a10[1], a10[2], b10, a10[4], a10[5]];
    }
    O(jd, [0, wO, 0, 0, wN, 0, function(a10) {
      return a10[3];
    }, wM]);
    function wP(b10, a10) {
      return [0, a10[1], a10[2], a10[3], b10, a10[5]];
    }
    O(je, [0, wR, 0, 0, wQ, 0, function(a10) {
      return a10[4];
    }, wP]);
    function wS(b10, a10) {
      return [0, a10[1], a10[2], a10[3], a10[4], b10];
    }
    O(jf, [0, wT, 0, 0, [4, ds], 0, function(a10) {
      return a10[5];
    }, wS]);
    O(jg, [8, [0, w3, [0, [0, jb], [0, [0, jc], [0, [0, jd], [0, [0, je], [0, [0, jf], 0]]]]], 0, function(a10) {
      function b10(b11) {
        function c10(c11) {
          function d10(d11) {
            function e10(e11) {
              function g10(a11) {
                return [0, [0, a11, e11, d11, c11, b11]];
              }
              return aJ(f(a10[1], wV, wU), g10);
            }
            return aJ(f(a10[1], wX, wW), e10);
          }
          return aJ(f(a10[1], wZ, wY), d10);
        }
        return aJ(f(a10[1], w1, w0), c10);
      }
      return aJ(f(a10[1], w2, [4, ds]), b10);
    }]]);
    O(jh, [0, w5, w4, jg]);
    var ji = [], jj = [], jk = [], jl = [];
    function w6(b10, a10) {
      return [0, b10, a10[2]];
    }
    O(ji, [0, w9, w8, 0, w7, 0, function(a10) {
      return a10[1];
    }, w6]);
    function w_(b10, a10) {
      return [0, a10[1], b10];
    }
    O(jj, [0, xb, xa, 0, w$, 0, function(a10) {
      return a10[2];
    }, w_]);
    O(jk, [8, [0, xg, [0, [0, ji], [0, [0, jj], 0]], 0, function(a10) {
      function b10(b11) {
        function c10(a11) {
          return [0, [0, a11, b11]];
        }
        return aJ(f(a10[1], xd, xc), c10);
      }
      return aJ(f(a10[1], xf, xe), b10);
    }]]);
    O(jl, [0, xi, xh, jk]);
    var jm = [];
    O(jm, [0, xl, xk, xj]);
    var jn = [];
    O(jn, [0, xo, xn, xm]);
    var jo = [], jp = [];
    function xp(e10, b10) {
      var a10 = cs(e10);
      if (c(a10, xq))
        return [1, [0, S, d(q(xr), a10)]];
      function f10(a11) {
        return [0, [0, a11]];
      }
      return aJ(d(b10[1], xs), f10);
    }
    var xt = 0, xu = 0, xv = 0;
    function xw(a10) {
      return [0, a10];
    }
    O(jo, [9, [0, xz, [0, [0, [0, xy, 0, 0, xx, function(a10) {
      return [0, a10[1]];
    }, xw]], xv], xu, xt, xp]]);
    O(jp, [0, xB, xA, jo]);
    var dt = vZ([0, jp, function(a10) {
      return [0, [0, bU(a10)]];
    }])[2];
    function xC(a10) {
      var j10 = d(a10[1], jq), b10 = bX(0, 0, 0, vd), c10 = bX(0, 0, 0, vc), e10 = bX(0, 0, 0, jh), g10 = bX(0, 0, 0, jl), h10 = bX(xE, xD, 0, jn), i10 = bX(xG, xF, 0, jm), k10 = f(a10[3], b10, dt), l10 = f(a10[2], i10, k10), m10 = f(a10[2], h10, l10), n10 = _(a10[4], xI, xH, m10), o10 = f(a10[3], e10, dt), p10 = f(a10[2], b10, o10), q10 = _(a10[4], xK, xJ, p10), r10 = f(a10[3], e10, dt), s10 = f(a10[2], c10, r10), t10 = _(a10[4], xM, xL, s10), u10 = f(a10[3], g10, dt), v10 = f(a10[2], c10, u10);
      return [0, jq, j10, b10, c10, e10, g10, h10, i10, n10, q10, t10, _(a10[4], xO, xN, v10)];
    }
    M(0);
    function ff(a10) {
      var b10 = a10[4], c10 = b10 ? (a10[4] = 0, a10[1][2] = a10[2], a10[2][1] = a10[1], 0) : b10;
      return c10;
    }
    function fg(b10) {
      var a10 = [];
      O(a10, [0, a10, a10]);
      return a10;
    }
    function jr(c10, a10) {
      var b10 = [0, a10[1], a10, c10, 1];
      a10[1][2] = b10;
      a10[1] = b10;
      return b10;
    }
    function js(a10) {
      if (a10[2] === a10)
        return 0;
      var b10 = a10[2];
      ff(b10);
      return [0, b10[3]];
    }
    var xP = rW([0, bp]);
    function bh(a10) {
      var c10 = a10[1];
      switch (c10[0]) {
        case 0:
          return a10;
        case 1:
          return a10;
        case 2:
          return a10;
        default:
          var d10 = c10[1], b10 = bh(d10);
          if (1 - (b10 === d10 ? 1 : 0))
            a10[1] = [3, b10];
          return b10;
      }
    }
    function jt(a10, b10) {
      a10[1] = b10;
      return a10;
    }
    var bY = [0, xP[1]];
    function ju(b10, a10) {
      return typeof b10 === "number" ? a10 : typeof a10 === "number" ? b10 : [0, b10, a10];
    }
    function fh(a10) {
      if (typeof a10 !== "number")
        switch (a10[0]) {
          case 0:
            var b10 = a10[2], c10 = fh(a10[1]);
            return ju(c10, fh(b10));
          case 2:
            if (!a10[1][1])
              return 0;
            break;
        }
      return a10;
    }
    function jv(b10, e10) {
      var c10 = [1, e10], a10 = b10[1], d10 = typeof a10 === "number" ? c10 : [0, c10, a10];
      b10[1] = d10;
      return 0;
    }
    function fi(a10) {
      id(xQ);
      id(bU(a10));
      h2(ay, 10);
      di(ay, hQ(0));
      br(ay);
      db(0);
      return aiL(2);
    }
    function fj(b10, a10) {
      try {
        var c10 = d(b10, a10);
        return c10;
      } catch (a11) {
        a11 = p(a11);
        return fi(a11);
      }
    }
    var fk = [y, xR, M(0)];
    function jw(a10, f10) {
      if (f10[0] === 1)
        var k10 = f10[1] === fk ? 1 : 0, h10 = k10;
      else
        var h10 = 0;
      if (h10) {
        var i10 = a10[2], g10 = function(c11, f11, d10) {
          var b11 = f11, a11 = d10;
          for (; ; )
            if (typeof b11 === "number")
              return c11 < 50 ? e10(c11 + 1 | 0, a11) : w(e10, [0, a11]);
            else
              switch (b11[0]) {
                case 0:
                  var g11 = [0, b11[2], a11], b11 = b11[1], a11 = g11;
                  continue;
                case 1:
                  var h11 = b11[2];
                  bY[1] = b11[1];
                  fj(h11, 0);
                  return c11 < 50 ? e10(c11 + 1 | 0, a11) : w(e10, [0, a11]);
                default:
                  ff(b11[1]);
                  return c11 < 50 ? e10(c11 + 1 | 0, a11) : w(e10, [0, a11]);
              }
        }, e10 = function(d10, a11) {
          if (a11) {
            var b11 = a11[2], c11 = a11[1];
            return d10 < 50 ? g10(d10 + 1 | 0, c11, b11) : w(g10, [0, c11, b11]);
          }
          return 0;
        };
        (function(a11, b11) {
          return bs(g10(0, a11, b11));
        })(i10, 0);
      }
      var j10 = a10[1];
      function b10(b11, i11, h11) {
        var e11 = i11, a11 = h11;
        for (; ; )
          if (typeof e11 === "number")
            return b11 < 50 ? c10(b11 + 1 | 0, a11) : w(c10, [0, a11]);
          else
            switch (e11[0]) {
              case 0:
                var j11 = [0, e11[2], a11], e11 = e11[1], a11 = j11;
                continue;
              case 1:
                d(e11[1], f10);
                return b11 < 50 ? c10(b11 + 1 | 0, a11) : w(c10, [0, a11]);
              default:
                var g11 = e11[1][1];
                return g11 ? (d(g11[1], f10), b11 < 50 ? c10(b11 + 1 | 0, a11) : w(c10, [0, a11])) : b11 < 50 ? c10(b11 + 1 | 0, a11) : w(c10, [0, a11]);
            }
      }
      function c10(e11, a11) {
        if (a11) {
          var c11 = a11[2], d10 = a11[1];
          return e11 < 50 ? b10(e11 + 1 | 0, d10, c11) : w(b10, [0, d10, c11]);
        }
        return 0;
      }
      return function(a11, c11) {
        return bs(b10(0, a11, c11));
      }(j10, 0);
    }
    var bx = [0, 0], du = eT(0), xS = 42;
    function jx(c10) {
      bx[1] = bx[1] + 1 | 0;
      var b10 = bY[1], e10 = d(c10, 0);
      if (bx[1] === 1)
        for (; ; ) {
          if (du[1] !== 0) {
            var a10 = iv(du);
            jw(a10[1], a10[2]);
            continue;
          }
          break;
        }
      bx[1] = bx[1] - 1 | 0;
      bY[1] = b10;
      return e10;
    }
    function dv(e10, d10, c10, a10) {
      var f10 = c10[1][1], i10 = jt(c10, a10), b10 = e10 ? e10[1] : 1, g10 = d10 ? d10[1] : xS, h10 = b10 ? g10 <= bx[1] ? 1 : 0 : b10;
      if (h10)
        cv([0, f10, a10], du);
      else
        jx(function(b11) {
          return jw(f10, a10);
        });
      return i10;
    }
    function jy(c10, b10, e10) {
      var f10 = c10 ? c10[1] : 0;
      if (f10)
        return d(b10, 0);
      if (42 <= bx[1]) {
        var a10 = d(e10, 0), g10 = a10[1];
        cv([0, [0, [1, a10[2]], 0, 0, 0], a10[3]], du);
        return g10;
      }
      return jx(function(a11) {
        return d(b10, 0);
      });
    }
    function jz(e10, c10) {
      var a10 = bh(e10), b10 = a10[1];
      switch (b10[0]) {
        case 1:
          return b10[1] === fk ? 0 : d(e1(v, xU), jA);
        case 2:
          dv(0, xV, a10, [0, c10]);
          return 0;
        default:
          return d(e1(v, xT), jA);
      }
    }
    function aY(a10) {
      return [0, [0, a10]];
    }
    function bZ(a10) {
      return [0, [1, a10]];
    }
    var jB = aY(0);
    function fl(a10) {
      return [0, [2, [0, 0, 0, a10, 0]]];
    }
    function xW(b10, m10) {
      var c10 = bh(m10);
      if (c10 === b10)
        return c10;
      var k10 = c10[1];
      switch (k10[0]) {
        case 1:
          return dv(xY, 0, b10, c10[1]);
        case 2:
          var d10 = k10[1], a10 = b10[1][1], g10 = ju(a10[1], d10[1]), h10 = a10[4] + d10[4] | 0;
          if (42 < h10)
            var j10 = 0, i10 = fh(g10);
          else
            var j10 = h10, i10 = g10;
          var e10 = d10[2], f10 = a10[2], l10 = typeof f10 === "number" ? e10 : typeof e10 === "number" ? f10 : [0, f10, e10];
          a10[1] = i10;
          a10[2] = l10;
          a10[4] = j10;
          a10[3] = d10[3];
          jt(c10, [3, b10]);
          return b10;
        default:
          return dv(xX, 0, b10, c10[1]);
      }
    }
    function by(g10, c10) {
      var b10 = bh(g10);
      function e10(e11) {
        var a11 = fl([0, b10]), f11 = bY[1];
        return [0, a11, function(b11) {
          if (b11[0] === 1) {
            dv(xZ, 0, bh(a11), b11);
            return 0;
          }
          var g11 = b11[1];
          bY[1] = f11;
          try {
            var h11 = d(c10, g11), e12 = h11;
          } catch (a12) {
            a12 = p(a12);
            var e12 = bZ(a12);
          }
          xW(bh(a11), e12);
          return 0;
        }];
      }
      var a10 = b10[1];
      switch (a10[0]) {
        case 1:
          return [0, a10];
        case 2:
          var j10 = a10[1], f10 = e10(0), k10 = f10[1];
          jv(j10, f10[2]);
          return k10;
        default:
          var h10 = a10[1], i10 = function(c11) {
            var a11 = e10(0);
            return [0, a11[1], a11[2], b10[1]];
          };
          return jy(x0, function(a11) {
            return d(c10, h10);
          }, i10);
      }
    }
    function jC(c10) {
      try {
        var f10 = d(c10, 0), b10 = f10;
      } catch (a11) {
        a11 = p(a11);
        var b10 = bZ(a11);
      }
      var a10 = bh(b10)[1];
      switch (a10[0]) {
        case 1:
          return fi(a10[1]);
        case 2:
          var e10 = a10[1];
          return jv(e10, function(a11) {
            return a11[0] === 1 ? fi(a11[1]) : 0;
          });
        default:
          return 0;
      }
    }
    function x3(b10, a10) {
      try {
        var c10 = d(b10, a10);
        return c10;
      } catch (a11) {
        a11 = p(a11);
        return bZ(a11);
      }
    }
    fg(0);
    function jD(b10, a10) {
      if (a10) {
        var c10 = a10[2], d10 = a10[1], e10 = function(a11) {
          return jD(b10, c10);
        };
        return by(x3(b10, d10), e10);
      }
      return jB;
    }
    function jE(a10, e10) {
      if (a10[1]) {
        var b10 = fl(1), k10 = jr([0, e10, b10], a10[2]), f10 = function(a11) {
          return ff(k10);
        }, c10 = bh(b10)[1];
        switch (c10[0]) {
          case 1:
            if (c10[1] === fk) {
              var j10 = function(a11) {
                return [0, 0, function(a12) {
                  return fj(f10, 0);
                }, x1];
              };
              jy(x2, function(a11) {
                return fj(f10, 0);
              }, j10);
            }
            break;
          case 2:
            var d10 = c10[1], g10 = [1, bY[1], f10], i10 = typeof d10[2] === "number" ? g10 : [0, g10, d10[2]];
            d10[2] = i10;
            break;
        }
        return b10;
      }
      var h10 = js(a10[3]);
      if (h10)
        jz(h10[1], e10);
      else
        a10[1] = [0, e10];
      return jB;
    }
    var fm = void 0, x5 = null;
    function jF(a10) {
      return a10 === x5 ? 1 : 0;
    }
    function jG(a10) {
      return a10 === fm ? 1 : 0;
    }
    function jH(a10) {
      var b10 = jF(a10);
      return b10 ? b10 : jG(a10);
    }
    var aK = globalThis;
    function b0(c10, b10, a10) {
      return a10 ? c10[b10] = a10[1] : 0;
    }
    function bz(c10, b10) {
      var a10 = c10[b10];
      return jH(a10) ? 0 : [0, a10];
    }
    var jI = true;
    function jJ(a10) {
      return new aK[x6](a10);
    }
    function x8(a10) {
      return a10[x9];
    }
    var fn = [y, x_, M(0)];
    (function(a10) {
      return i3(x$, [0, fn, {}]);
    })(0);
    var fo = av;
    function jK(a10, d10, c10, b10) {
      var e10 = a10 ? a10[1] : {};
      b10.addEventListener(d10, c10, e10);
      return 0;
    }
    var ya = "click", yc = aK[yb], jL = hp;
    function yd(a10) {
      try {
        var b10 = yc.parse(a10);
      } catch (a11) {
        a11 = p(a11);
        if (a11[1] === fn)
          return [1, a11[2]];
        throw a11;
      }
      return [0, b10];
    }
    function jM(a10) {
      return [0, jL, a10];
    }
    var b1 = aK[ye];
    function jN(c10, b10, e10, d10) {
      var f10 = c10 ? c10[1] : b1, g10 = b10 ? b10[1] : 0, a10 = f10.createElement(e10);
      aR(function(d11) {
        var b11 = d11[2], c11 = d11[1];
        return c5(c11, jL) ? b11[x4] === 0 ? 0 : (a10[yf].add(b11), 0) : (a10.setAttribute(c11, b11), 0);
      }, g10);
      aR(function(b11) {
        a10.appendChild(b11);
        return 0;
      }, d10);
      return a10;
    }
    function jO(a10, b10) {
      var c10 = a10 ? a10[1] : b1;
      return c10.createTextNode(b10);
    }
    function fp(a10, b10) {
      var c10 = a10 ? a10[1] : b1;
      return c10.createTextNode(aH(b10));
    }
    function jP(b10, a10) {
      qQ(b10, yh, iu(a10));
      return 0;
    }
    var yi = "button", yj = el, yk = gh, yl = ed, ym = "span";
    function cB(d10, c10, b10, a10) {
      return jN(c10, b10, d10, a10);
    }
    function dw(a10, b10, c10) {
      return cB(yk, a10, b10, c10);
    }
    function yn(a10) {
      return a10[yo];
    }
    function yp(c10, b10) {
      var a10 = c10.getElementById(b10);
      return jH(a10) ? 0 : [0, a10];
    }
    var yr = aK[yq], yt = pJ, yw = aK[yv];
    function yx(a10, b10) {
      var c10 = a10 ? a10[1] : fm;
      return new yw(b10, c10);
    }
    var yz = [y, yy, M(0)];
    function yA(a10, c10, b10) {
      var d10 = [0, a10, c10, b10, eT(0)];
      jK(0, yt, function(g10) {
        return jC(function(h10) {
          var b11 = iw(d10[4]);
          if (b11) {
            var c11 = b11[1], e10 = c11[1];
            aK.clearTimeout(c11[2]);
            var a11 = aN(g10[yu]), f10 = (aj(a11) - 20 | 0) < 0 ? v(rD) : (aj(a11) - (20 + air(a11, 0) | 0) | 0) < 0 ? v(rE) : ah5(a11, 0);
            return jE(e10, [0, f10]);
          }
          return aY(0);
        });
      }, a10);
      return d10;
    }
    var yB = [0], yC = function(e10) {
      var a10 = [0], b10 = [0];
      function c10(b11, a11) {
        switch (a11[0]) {
          case 0:
            var e11 = a11[1];
            return [0, e11, d(b11, a11[2])];
          case 1:
            var f10 = a11[4], g10 = a11[3], h10 = a11[2], i10 = a11[1], j10 = function(a12) {
              return c10(b11, a12);
            };
            return [1, i10, h10, g10, ak(function(a12) {
              return ak(j10, a12);
            }, f10)];
          case 2:
            var k10 = a11[2], l10 = a11[1];
            return [2, l10, ak(function(a12) {
              return c10(b11, a12);
            }, k10)];
          case 3:
            return [3, a11[1]];
          case 4:
            var m10 = a11[2], n10 = a11[1];
            return [4, n10, m10, d(b11, a11[3])];
          case 5:
            return [5, a11[1], a11[2], a11[3]];
          case 6:
            return [6, a11[1], a11[2]];
          default:
            var o10 = a11[2], p10 = a11[1];
            return [7, p10, ak(function(a12) {
              var c11 = a12[1], e12 = ak(b11, a12[2]);
              return [0, d(b11, c11), e12];
            }, o10)];
        }
      }
      return [0, a10, b10, c10];
    }(yB), dx = b(65533);
    function jQ(e10, c10) {
      var a10 = c10;
      for (; ; ) {
        if (a10) {
          var b10 = a10[1], f10 = a10[2];
          if (d(e10, b10))
            return [0, b10];
          var a10 = f10;
          continue;
        }
        return 0;
      }
    }
    function dy(b10, a10) {
      if (0 <= a10) {
        if (b5 < a10) {
          if (og < a10) {
            if (65535 < a10) {
              if (l1 < a10)
                throw [0, B, yD];
              i(b10, nF | a10 >>> 18 | 0);
              i(b10, aM | (a10 >>> 12 | 0) & 63);
              i(b10, aM | (a10 >>> 6 | 0) & 63);
              return i(b10, aM | a10 & 63);
            }
            i(b10, p2 | a10 >>> 12 | 0);
            i(b10, aM | (a10 >>> 6 | 0) & 63);
            return i(b10, aM | a10 & 63);
          }
          i(b10, lT | a10 >>> 6 | 0);
          return i(b10, aM | a10 & 63);
        }
        return i(b10, a10);
      }
      throw [0, B, yE];
    }
    function jR(a10) {
      var d10 = e(a10, yF);
      if (0 <= d10) {
        if (!(0 < d10))
          return [0, b(lA), 0];
        var f10 = e(a10, yG);
        if (0 <= f10) {
          if (!(0 < f10))
            return [0, b(10995), 0];
          var g10 = e(a10, yH);
          if (0 <= g10) {
            if (!(0 < g10))
              return [0, b(gc), 0];
            var h10 = e(a10, yI);
            if (0 <= h10) {
              if (!(0 < h10))
                return [0, b(9600), 0];
              var i10 = e(a10, yJ);
              if (0 <= i10) {
                if (!(0 < i10))
                  return [0, b(hr), 0];
                var j10 = e(a10, yK);
                if (0 <= j10) {
                  if (!(0 < j10))
                    return [0, b(nX), 0];
                  var k10 = e(a10, yL);
                  if (0 <= k10) {
                    if (!(0 < k10))
                      return [0, b(120014), 0];
                    var l10 = e(a10, yM);
                    if (0 <= l10) {
                      if (!(0 < l10))
                        return [0, b(950), 0];
                      if (!c(a10, yN))
                        return [0, b(120119), 0];
                      if (!c(a10, yO))
                        return [0, b(1078), 0];
                      if (!c(a10, yP))
                        return [0, b(8669), 0];
                      if (!c(a10, yQ))
                        return [0, b(120171), 0];
                      if (!c(a10, yR))
                        return [0, b(120015), 0];
                      if (!c(a10, yS))
                        return [0, b(8205), 0];
                      if (!c(a10, yT))
                        return [0, b(8204), 0];
                    } else {
                      if (!c(a10, yU))
                        return [0, b(1102), 0];
                      if (!c(a10, yV))
                        return [0, b(em), 0];
                      if (!c(a10, yW))
                        return [0, b(378), 0];
                      if (!c(a10, yX))
                        return [0, b(382), 0];
                      if (!c(a10, yY))
                        return [0, b(1079), 0];
                      if (!c(a10, yZ))
                        return [0, b(380), 0];
                      if (!c(a10, y0))
                        return [0, b(mN), 0];
                    }
                  } else {
                    var m10 = e(a10, y1);
                    if (0 <= m10) {
                      if (!(0 < m10))
                        return [0, b(oM), 0];
                      if (!c(a10, y2))
                        return [0, b(1103), 0];
                      if (!c(a10, y3))
                        return [0, b(375), 0];
                      if (!c(a10, y4))
                        return [0, b(1099), 0];
                      if (!c(a10, y5))
                        return [0, b(165), 0];
                      if (!c(a10, y6))
                        return [0, b(120118), 0];
                      if (!c(a10, y7))
                        return [0, b(1111), 0];
                      if (!c(a10, y8))
                        return [0, b(120170), 0];
                    } else {
                      if (!c(a10, y9))
                        return [0, b(fO), 0];
                      if (!c(a10, y_))
                        return [0, b(hc), 0];
                      if (!c(a10, y$))
                        return [0, b(120013), 0];
                      if (!c(a10, za))
                        return [0, b(kS), 0];
                      if (!c(a10, zb))
                        return [0, b(n8), 0];
                      if (!c(a10, zc))
                        return [0, b(k7), 0];
                      if (!c(a10, zd))
                        return [0, b(g$), 0];
                      if (!c(a10, ze))
                        return [0, b(hf), 0];
                    }
                  }
                } else {
                  var o10 = e(a10, zf);
                  if (0 <= o10) {
                    if (!(0 < o10))
                      return [0, b(120012), 0];
                    var p10 = e(a10, zg);
                    if (0 <= p10) {
                      if (!(0 < p10))
                        return [0, b(958), 0];
                      if (!c(a10, zh))
                        return [0, b(fR), 0];
                      if (!c(a10, zi))
                        return [0, b(fQ), 0];
                      if (!c(a10, zj))
                        return [0, b(qe), 0];
                      if (!c(a10, zk))
                        return [0, b(8955), 0];
                      if (!c(a10, zl))
                        return [0, b(qm), 0];
                      if (!c(a10, zm))
                        return [0, b(120169), 0];
                      if (!c(a10, zn))
                        return [0, b(mK), 0];
                    } else {
                      if (!c(a10, zo))
                        return [0, b(g1), 0];
                      if (!c(a10, zp))
                        return [0, b(m8), 0];
                      if (!c(a10, zq))
                        return [0, b(f1), 0];
                      if (!c(a10, zr))
                        return [0, b(pq), 0];
                      if (!c(a10, zs))
                        return [0, b(120117), 0];
                      if (!c(a10, zt))
                        return [0, b(fY), 0];
                      if (!c(a10, zu))
                        return [0, b(fP), 0];
                    }
                  } else {
                    var q10 = e(a10, zv);
                    if (0 <= q10) {
                      if (!(0 < q10))
                        return [0, b(pK), 0];
                      if (!c(a10, zw))
                        return [0, b(8793), 0];
                      if (!c(a10, zx))
                        return [0, b(o5), 0];
                      if (!c(a10, zy))
                        return [0, b(120116), 0];
                      if (!c(a10, zz))
                        return [0, b(120168), 0];
                      if (!c(a10, zA))
                        return [0, b(o5), 0];
                      if (!c(a10, zB) || !c(a10, zC))
                        return [0, b(lz), 0];
                    } else {
                      if (!c(a10, zD))
                        return [0, b(120011), 0];
                      if (!c(a10, zE)) {
                        var ed2 = [0, b(aa), 0];
                        return [0, b(d6), ed2];
                      }
                      if (!c(a10, zF)) {
                        var eb2 = [0, b(aa), 0];
                        return [0, b(ei), eb2];
                      }
                      if (!c(a10, zG)) {
                        var ea2 = [0, b(aa), 0];
                        return [0, b(dS), ea2];
                      }
                      if (!c(a10, zH)) {
                        var d92 = [0, b(aa), 0];
                        return [0, b(dU), d92];
                      }
                      if (!c(a10, zI))
                        return [0, b(10650), 0];
                      if (!c(a10, zJ))
                        return [0, b(373), 0];
                      if (!c(a10, zK))
                        return [0, b(10847), 0];
                    }
                  }
                }
              } else {
                var r10 = e(a10, zL);
                if (0 <= r10) {
                  if (!(0 < r10))
                    return [0, b(10985), 0];
                  var s10 = e(a10, zM);
                  if (0 <= s10) {
                    if (!(0 < s10))
                      return [0, b(gi), 0];
                    var t10 = e(a10, zN);
                    if (0 <= t10) {
                      if (!(0 < t10))
                        return [0, b(hl), 0];
                      if (!c(a10, zO))
                        return [0, b(hl), 0];
                      if (!c(a10, zP))
                        return [0, b(120115), 0];
                      if (!c(a10, zQ))
                        return [0, b(gi), 0];
                      if (!c(a10, zR)) {
                        var en2 = [0, b(am), 0];
                        return [0, b(cT), en2];
                      }
                      if (!c(a10, zS)) {
                        var el2 = [0, b(am), 0];
                        return [0, b(b9), el2];
                      }
                      if (!c(a10, zT))
                        return [0, b(120167), 0];
                      if (!c(a10, zU))
                        return [0, b(cV), 0];
                    } else {
                      if (!c(a10, zV))
                        return [0, b(hr), 0];
                      if (!c(a10, zW))
                        return [0, b(1074), 0];
                      if (!c(a10, zX))
                        return [0, b(oB), 0];
                      if (!c(a10, zY))
                        return [0, b(lg), 0];
                      if (!c(a10, zZ))
                        return [0, b(8891), 0];
                      if (!c(a10, z0))
                        return [0, b(8794), 0];
                      if (!c(a10, z1))
                        return [0, b(8942), 0];
                    }
                  } else {
                    var u10 = e(a10, z2);
                    if (0 <= u10) {
                      if (!(0 < u10))
                        return [0, b(hK), 0];
                      if (!c(a10, z3))
                        return [0, b(qp), 0];
                      if (!c(a10, z4))
                        return [0, b(ha), 0];
                      if (!c(a10, z5)) {
                        var eA2 = [0, b(aa), 0];
                        return [0, b(ei), eA2];
                      }
                      if (!c(a10, z6)) {
                        var ex2 = [0, b(aa), 0];
                        return [0, b(d6), ex2];
                      }
                      if (!c(a10, z7)) {
                        var eu2 = [0, b(aa), 0];
                        return [0, b(dU), eu2];
                      }
                      if (!c(a10, z8)) {
                        var et2 = [0, b(aa), 0];
                        return [0, b(dS), et2];
                      }
                      if (!c(a10, z9))
                        return [0, b(g2), 0];
                    } else {
                      if (!c(a10, z_))
                        return [0, b(m$), 0];
                      if (!c(a10, z$))
                        return [0, b(10652), 0];
                      if (!c(a10, Aa))
                        return [0, b(gc), 0];
                      if (!c(a10, Ab))
                        return [0, b(qd), 0];
                      if (!c(a10, Ac))
                        return [0, b(eo), 0];
                      if (!c(a10, Ad))
                        return [0, b(gO), 0];
                      if (!c(a10, Ae))
                        return [0, b(ln), 0];
                      if (!c(a10, Af))
                        return [0, b(cV), 0];
                    }
                  }
                } else {
                  var v10 = e(a10, Ag);
                  if (0 <= v10) {
                    if (!(0 < v10))
                      return [0, b(oy), 0];
                    var w10 = e(a10, Ah);
                    if (0 <= w10) {
                      if (!(0 < w10))
                        return [0, b(361), 0];
                      if (!c(a10, Ai))
                        return [0, b(lX), 0];
                      if (!c(a10, Aj))
                        return [0, b(oG), 0];
                      if (!c(a10, Ak))
                        return [0, b(oy), 0];
                      if (!c(a10, Al))
                        return [0, b(cL), 0];
                      if (!c(a10, Am))
                        return [0, b(10663), 0];
                      if (!c(a10, An))
                        return [0, b(gb), 0];
                      if (!c(a10, Ao))
                        return [0, b(10984), 0];
                    } else {
                      if (!c(a10, Ap))
                        return [0, b(kP), 0];
                      if (!c(a10, Aq))
                        return [0, b(kP), 0];
                      if (!c(a10, Ar))
                        return [0, b(8974), 0];
                      if (!c(a10, As))
                        return [0, b(367), 0];
                      if (!c(a10, At))
                        return [0, b(9721), 0];
                      if (!c(a10, Au))
                        return [0, b(120010), 0];
                      if (!c(a10, Av))
                        return [0, b(8944), 0];
                    }
                  } else {
                    var x10 = e(a10, Aw);
                    if (0 <= x10) {
                      if (!(0 < x10))
                        return [0, b(d1), 0];
                      if (!c(a10, Ax))
                        return [0, b(hK), 0];
                      if (!c(a10, Ay))
                        return [0, b(fV), 0];
                      if (!c(a10, Az))
                        return [0, b(he), 0];
                      if (!c(a10, AA))
                        return [0, b(p8), 0];
                      if (!c(a10, AB))
                        return [0, b(qg), 0];
                      if (!c(a10, AC))
                        return [0, b(lu), 0];
                      if (!c(a10, AD))
                        return [0, b(qg), 0];
                    } else {
                      if (!c(a10, AE))
                        return [0, b(kD), 0];
                      if (!c(a10, AF))
                        return [0, b(kD), 0];
                      if (!c(a10, AG))
                        return [0, b(8975), 0];
                      if (!c(a10, AH))
                        return [0, b(9720), 0];
                      if (!c(a10, AI))
                        return [0, b(363), 0];
                      if (!c(a10, AJ))
                        return [0, b(eh), 0];
                      if (!c(a10, AK))
                        return [0, b(371), 0];
                      if (!c(a10, AL))
                        return [0, b(120166), 0];
                    }
                  }
                }
              }
            } else {
              var z10 = e(a10, AM);
              if (0 <= z10) {
                if (!(0 < z10))
                  return [0, b(mu), 0];
                var A10 = e(a10, AN);
                if (0 <= A10) {
                  if (!(0 < A10))
                    return [0, b(oq), 0];
                  var B10 = e(a10, AO);
                  if (0 <= B10) {
                    if (!(0 < B10))
                      return [0, b(gT), 0];
                    var C10 = e(a10, AP);
                    if (0 <= C10) {
                      if (!(0 < C10))
                        return [0, b(mh), 0];
                      if (!c(a10, AQ))
                        return [0, b(369), 0];
                      if (!c(a10, AR))
                        return [0, b(lp), 0];
                      if (!c(a10, AS))
                        return [0, b(10622), 0];
                      if (!c(a10, AT))
                        return [0, b(120114), 0];
                      if (!c(a10, AU))
                        return [0, b(249), 0];
                      if (!c(a10, AV))
                        return [0, b(fV), 0];
                      if (!c(a10, AW))
                        return [0, b(he), 0];
                    } else {
                      if (!c(a10, AX))
                        return [0, b(10595), 0];
                      if (!c(a10, AY))
                        return [0, b(cJ), 0];
                      if (!c(a10, AZ))
                        return [0, b(d1), 0];
                      if (!c(a10, A0))
                        return [0, b(1118), 0];
                      if (!c(a10, A1))
                        return [0, b(365), 0];
                      if (!c(a10, A2))
                        return [0, b(pQ), 0];
                      if (!c(a10, A3))
                        return [0, b(1091), 0];
                    }
                  } else {
                    var D10 = e(a10, A4);
                    if (0 <= D10) {
                      if (!(0 < D10))
                        return [0, b(9186), 0];
                      if (!c(a10, A5))
                        return [0, b(120009), 0];
                      if (!c(a10, A6))
                        return [0, b(1094), 0];
                      if (!c(a10, A7))
                        return [0, b(1115), 0];
                      if (!c(a10, A8))
                        return [0, b(359), 0];
                      if (!c(a10, A9))
                        return [0, b(kB), 0];
                      if (!c(a10, A_))
                        return [0, b(kF), 0];
                      if (!c(a10, A$))
                        return [0, b(oD), 0];
                    } else {
                      if (!c(a10, Ba))
                        return [0, b(nU), 0];
                      if (!c(a10, Bb))
                        return [0, b(er), 0];
                      if (!c(a10, Bc))
                        return [0, b(9708), 0];
                      if (!c(a10, Bd))
                        return [0, b(oq), 0];
                      if (!c(a10, Be))
                        return [0, b(10810), 0];
                      if (!c(a10, Bf))
                        return [0, b(10809), 0];
                      if (!c(a10, Bg))
                        return [0, b(10701), 0];
                      if (!c(a10, Bh))
                        return [0, b(10811), 0];
                    }
                  }
                } else {
                  var E10 = e(a10, Bi);
                  if (0 <= E10) {
                    if (!(0 < E10))
                      return [0, b(10801), 0];
                    var F10 = e(a10, Bj);
                    if (0 <= F10) {
                      if (!(0 < F10))
                        return [0, b(10970), 0];
                      if (!c(a10, Bk))
                        return [0, b(lO), 0];
                      if (!c(a10, Bl))
                        return [0, b(8244), 0];
                      if (!c(a10, Bm))
                        return [0, b(p3), 0];
                      if (!c(a10, Bn))
                        return [0, b(lX), 0];
                      if (!c(a10, Bo))
                        return [0, b(lb), 0];
                      if (!c(a10, Bp))
                        return [0, b(pt), 0];
                      if (!c(a10, Bq))
                        return [0, b(dW), 0];
                    } else {
                      if (!c(a10, Br))
                        return [0, b(10800), 0];
                      if (!c(a10, Bs))
                        return [0, b(kW), 0];
                      if (!c(a10, Bt))
                        return [0, b(mQ), 0];
                      if (!c(a10, Bu))
                        return [0, b(lM), 0];
                      if (!c(a10, Bv))
                        return [0, b(9014), 0];
                      if (!c(a10, Bw))
                        return [0, b(10993), 0];
                      if (!c(a10, Bx))
                        return [0, b(120165), 0];
                    }
                  } else {
                    var G10 = e(a10, By);
                    if (0 <= G10) {
                      if (!(0 < G10))
                        return [0, b(cK), 0];
                      if (!c(a10, Bz))
                        return [0, b(nT), 0];
                      if (!c(a10, BA))
                        return [0, b(ca), 0];
                      if (!c(a10, BB))
                        return [0, b(cK), 0];
                      if (!c(a10, BC))
                        return [0, b(bf), 0];
                      if (!c(a10, BD))
                        return [0, b(kJ), 0];
                      if (!c(a10, BE))
                        return [0, b(215), 0];
                      if (!c(a10, BF))
                        return [0, b(nV), 0];
                    } else {
                      if (!c(a10, BG))
                        return [0, b(8981), 0];
                      if (!c(a10, BH))
                        return [0, b(120113), 0];
                      if (!c(a10, BI))
                        return [0, b(gC), 0];
                      if (!c(a10, BJ))
                        return [0, b(gC), 0];
                      if (!c(a10, BK))
                        return [0, b(952), 0];
                      if (!c(a10, BL))
                        return [0, b(g2), 0];
                      if (!c(a10, BM))
                        return [0, b(g2), 0];
                      if (!c(a10, BN))
                        return [0, b(ca), 0];
                    }
                  }
                }
              } else {
                var H10 = e(a10, BO);
                if (0 <= H10) {
                  if (!(0 < H10))
                    return [0, b(179), 0];
                  var I10 = e(a10, BP);
                  if (0 <= I10) {
                    if (!(0 < I10))
                      return [0, b(dS), 0];
                    var J10 = e(a10, BQ);
                    if (0 <= J10) {
                      if (!(0 < J10))
                        return [0, b(10538), 0];
                      if (!c(a10, BR))
                        return [0, b(223), 0];
                      if (!c(a10, BS))
                        return [0, b(8982), 0];
                      if (!c(a10, BT))
                        return [0, b(964), 0];
                      if (!c(a10, BU))
                        return [0, b(mj), 0];
                      if (!c(a10, BV))
                        return [0, b(357), 0];
                      if (!c(a10, BW))
                        return [0, b(355), 0];
                      if (!c(a10, BX))
                        return [0, b(1090), 0];
                    } else {
                      if (!c(a10, BY))
                        return [0, b(10952), 0];
                      if (!c(a10, BZ))
                        return [0, b(10964), 0];
                      if (!c(a10, B0))
                        return [0, b(10966), 0];
                      if (!c(a10, B1))
                        return [0, b(8665), 0];
                      if (!c(a10, B2))
                        return [0, b(mR), 0];
                      if (!c(a10, B3) || !c(a10, B4))
                        return [0, b(nw), 0];
                    }
                  } else {
                    var K10 = e(a10, B5);
                    if (0 <= K10) {
                      if (!(0 < K10))
                        return [0, b(10946), 0];
                      if (!c(a10, B6))
                        return [0, b(dS), 0];
                      if (!c(a10, B7))
                        return [0, b(dU), 0];
                      if (!c(a10, B8))
                        return [0, b(10944), 0];
                      if (!c(a10, B9))
                        return [0, b(b9), 0];
                      if (!c(a10, B_))
                        return [0, b(fM), 0];
                      if (!c(a10, B$))
                        return [0, b(ej), 0];
                      if (!c(a10, Ca))
                        return [0, b(dU), 0];
                    } else {
                      if (!c(a10, Cb))
                        return [0, b(ej), 0];
                      if (!c(a10, Cc))
                        return [0, b(10942), 0];
                      if (!c(a10, Cd))
                        return [0, b(10968), 0];
                      if (!c(a10, Ce))
                        return [0, b(fM), 0];
                      if (!c(a10, Cf))
                        return [0, b(10948), 0];
                      if (!c(a10, Cg))
                        return [0, b(10185), 0];
                      if (!c(a10, Ch))
                        return [0, b(10967), 0];
                      if (!c(a10, Ci))
                        return [0, b(10619), 0];
                    }
                  }
                } else {
                  var L10 = e(a10, Cj);
                  if (0 <= L10) {
                    if (!(0 < L10))
                      return [0, b(d6), 0];
                    var M10 = e(a10, Ck);
                    if (0 <= M10) {
                      if (!(0 < M10))
                        return [0, b(oj), 0];
                      if (!c(a10, Cl))
                        return [0, b(pG), 0];
                      if (!c(a10, Cm))
                        return [0, b(ep), 0];
                      if (!c(a10, Cn))
                        return [0, b(pp), 0];
                      if (!c(a10, Co))
                        return [0, b(9834), 0];
                      if (!c(a10, Cp))
                        return [0, b(b9), 0];
                      if (!c(a10, Cq))
                        return [0, b(185), 0];
                      if (!c(a10, Cr))
                        return [0, b(178), 0];
                    } else {
                      if (!c(a10, Cs))
                        return [0, b(10951), 0];
                      if (!c(a10, Ct))
                        return [0, b(10965), 0];
                      if (!c(a10, Cu))
                        return [0, b(10963), 0];
                      if (!c(a10, Cv))
                        return [0, b(hq), 0];
                      if (!c(a10, Cw))
                        return [0, b(qq), 0];
                      if (!c(a10, Cx))
                        return [0, b(g_), 0];
                      if (!c(a10, Cy))
                        return [0, b(b7), 0];
                      if (!c(a10, Cz))
                        return [0, b(oL), 0];
                    }
                  } else {
                    var N10 = e(a10, CA);
                    if (0 <= N10) {
                      if (!(0 < N10))
                        return [0, b(d6), 0];
                      if (!c(a10, CB))
                        return [0, b(ei), 0];
                      if (!c(a10, CC))
                        return [0, b(10943), 0];
                      if (!c(a10, CD))
                        return [0, b(10617), 0];
                      if (!c(a10, CE))
                        return [0, b(cT), 0];
                      if (!c(a10, CF))
                        return [0, b(gA), 0];
                      if (!c(a10, CG))
                        return [0, b(ev), 0];
                      if (!c(a10, CH))
                        return [0, b(ei), 0];
                    } else {
                      if (!c(a10, CI))
                        return [0, b(gO), 0];
                      if (!c(a10, CJ))
                        return [0, b(mz), 0];
                      if (!c(a10, CK))
                        return [0, b(cT), 0];
                      if (!c(a10, CL))
                        return [0, b(ev), 0];
                      if (!c(a10, CM))
                        return [0, b(10941), 0];
                      if (!c(a10, CN))
                        return [0, b(gA), 0];
                      if (!c(a10, CO))
                        return [0, b(10947), 0];
                      if (!c(a10, CP))
                        return [0, b(10945), 0];
                    }
                  }
                }
              }
            }
          } else {
            var O10 = e(a10, CQ);
            if (0 <= O10) {
              if (!(0 < O10))
                return [0, b(cS), 0];
              var P10 = e(a10, CR);
              if (0 <= P10) {
                if (!(0 < P10))
                  return [0, b(lO), 0];
                var Q10 = e(a10, CS);
                if (0 <= Q10) {
                  if (!(0 < Q10))
                    return [0, b(qj), 0];
                  var R10 = e(a10, CT);
                  if (0 <= R10) {
                    if (!(0 < R10))
                      return [0, b(hk), 0];
                    var S10 = e(a10, CU);
                    if (0 <= S10) {
                      if (!(0 < S10))
                        return [0, b(ey), 0];
                      if (!c(a10, CV))
                        return [0, b(cS), 0];
                      if (!c(a10, CW))
                        return [0, b(120008), 0];
                      if (!c(a10, CX))
                        return [0, b(cQ), 0];
                      if (!c(a10, CY))
                        return [0, b(kE), 0];
                      if (!c(a10, CZ))
                        return [0, b(qu), 0];
                      if (!c(a10, C0))
                        return [0, b(9734), 0];
                      if (!c(a10, C1))
                        return [0, b(kV), 0];
                    } else {
                      if (!c(a10, C2))
                        return [0, b(ee), 0];
                      if (!c(a10, C3))
                        return [0, b(hh), 0];
                      if (!c(a10, C4))
                        return [0, b(ee), 0];
                      if (!c(a10, C5))
                        return [0, b(hh), 0];
                      if (!c(a10, C6))
                        return [0, b(gU), 0];
                      if (!c(a10, C7))
                        return [0, b(gU), 0];
                      if (!c(a10, C8))
                        return [0, b(ey), 0];
                    }
                  } else {
                    var T10 = e(a10, C9);
                    if (0 <= T10) {
                      if (!(0 < T10))
                        return [0, b(cX), 0];
                      if (!c(a10, C_))
                        return [0, b(gG), 0];
                      if (!c(a10, C$)) {
                        var eC2 = [0, b(aa), 0];
                        return [0, b(gG), eC2];
                      }
                      if (!c(a10, Da))
                        return [0, b(f0), 0];
                      if (!c(a10, Db)) {
                        var eB2 = [0, b(aa), 0];
                        return [0, b(f0), eB2];
                      }
                      if (!c(a10, Dc))
                        return [0, b(d8), 0];
                      if (!c(a10, Dd))
                        return [0, b(hk), 0];
                      if (!c(a10, De))
                        return [0, b(d8), 0];
                    } else {
                      if (!c(a10, Df)) {
                        var eD2 = [0, b(aa), 0];
                        return [0, b(qj), eD2];
                      }
                      if (!c(a10, Dg))
                        return [0, b(1100), 0];
                      if (!c(a10, Dh))
                        return [0, b(47), 0];
                      if (!c(a10, Di))
                        return [0, b(10692), 0];
                      if (!c(a10, Dj))
                        return [0, b(9023), 0];
                      if (!c(a10, Dk))
                        return [0, b(120164), 0];
                      if (!c(a10, Dl) || !c(a10, Dm))
                        return [0, b(9824), 0];
                    }
                  }
                } else {
                  var U10 = e(a10, Dn);
                  if (0 <= U10) {
                    if (!(0 < U10))
                      return [0, b(hs), 0];
                    var V10 = e(a10, Do);
                    if (0 <= V10) {
                      if (!(0 < V10))
                        return [0, b(10610), 0];
                      if (!c(a10, Dp))
                        return [0, b(cR), 0];
                      if (!c(a10, Dq))
                        return [0, b(cQ), 0];
                      if (!c(a10, Dr))
                        return [0, b(10803), 0];
                      if (!c(a10, Ds))
                        return [0, b(10724), 0];
                      if (!c(a10, Dt))
                        return [0, b(eq), 0];
                      if (!c(a10, Du))
                        return [0, b(kE), 0];
                      if (!c(a10, Dv))
                        return [0, b(10922), 0];
                    } else {
                      if (!c(a10, Dw))
                        return [0, b(hs), 0];
                      if (!c(a10, Dx))
                        return [0, b(10910), 0];
                      if (!c(a10, Dy))
                        return [0, b(10912), 0];
                      if (!c(a10, Dz))
                        return [0, b(10909), 0];
                      if (!c(a10, DA))
                        return [0, b(10911), 0];
                      if (!c(a10, DB))
                        return [0, b(8774), 0];
                      if (!c(a10, DC))
                        return [0, b(10788), 0];
                    }
                  } else {
                    var W10 = e(a10, DD);
                    if (0 <= W10) {
                      if (!(0 < W10))
                        return [0, b(eq), 0];
                      if (!c(a10, DE))
                        return [0, b(cX), 0];
                      if (!c(a10, DF))
                        return [0, b(173), 0];
                      if (!c(a10, DG))
                        return [0, b(963), 0];
                      if (!c(a10, DH))
                        return [0, b(ha), 0];
                      if (!c(a10, DI))
                        return [0, b(ha), 0];
                      if (!c(a10, DJ))
                        return [0, b(cK), 0];
                      if (!c(a10, DK))
                        return [0, b(10858), 0];
                    } else {
                      if (!c(a10, DL))
                        return [0, b(cQ), 0];
                      if (!c(a10, DM))
                        return [0, b(cQ), 0];
                      if (!c(a10, DN))
                        return [0, b(10038), 0];
                      if (!c(a10, DO))
                        return [0, b(120112), 0];
                      if (!c(a10, DP))
                        return [0, b(lw), 0];
                      if (!c(a10, DQ))
                        return [0, b(9839), 0];
                      if (!c(a10, DR))
                        return [0, b(1097), 0];
                      if (!c(a10, DS))
                        return [0, b(1096), 0];
                    }
                  }
                }
              } else {
                var X10 = e(a10, DT);
                if (0 <= X10) {
                  if (!(0 < X10))
                    return [0, b(lH), 0];
                  var Y10 = e(a10, DU);
                  if (0 <= Y10) {
                    if (!(0 < Y10))
                      return [0, b(349), 0];
                    var Z10 = e(a10, DV);
                    if (0 <= Z10) {
                      if (!(0 < Z10))
                        return [0, b(nN), 0];
                      if (!c(a10, DW))
                        return [0, b(10854), 0];
                      if (!c(a10, DX))
                        return [0, b(8664), 0];
                      if (!c(a10, DY))
                        return [0, b(oe), 0];
                      if (!c(a10, DZ))
                        return [0, b(hD), 0];
                      if (!c(a10, D0))
                        return [0, b(hD), 0];
                      if (!c(a10, D1))
                        return [0, b(167), 0];
                      if (!c(a10, D2))
                        return [0, b(59), 0];
                    } else {
                      if (!c(a10, D3))
                        return [0, b(oj), 0];
                      if (!c(a10, D4))
                        return [0, b(oL), 0];
                      if (!c(a10, D5))
                        return [0, b(pG), 0];
                      if (!c(a10, D6))
                        return [0, b(10771), 0];
                      if (!c(a10, D7))
                        return [0, b(ep), 0];
                      if (!c(a10, D8))
                        return [0, b(1089), 0];
                      if (!c(a10, D9))
                        return [0, b(8901), 0];
                    }
                  } else {
                    var _10 = e(a10, D_);
                    if (0 <= _10) {
                      if (!(0 < _10))
                        return [0, b(pu), 0];
                      if (!c(a10, D$))
                        return [0, b(hq), 0];
                      if (!c(a10, Ea))
                        return [0, b(10932), 0];
                      if (!c(a10, Eb))
                        return [0, b(qq), 0];
                      if (!c(a10, Ec))
                        return [0, b(353), 0];
                      if (!c(a10, Ed))
                        return [0, b(g_), 0];
                      if (!c(a10, Ee))
                        return [0, b(b7), 0];
                      if (!c(a10, Ef))
                        return [0, b(351), 0];
                    } else {
                      if (!c(a10, Eg))
                        return [0, b(8906), 0];
                      if (!c(a10, Eh))
                        return [0, b(nU), 0];
                      if (!c(a10, Ei))
                        return [0, b(er), 0];
                      if (!c(a10, Ej))
                        return [0, b(pr), 0];
                      if (!c(a10, Ek))
                        return [0, b(10702), 0];
                      if (!c(a10, El))
                        return [0, b(10600), 0];
                      if (!c(a10, Em))
                        return [0, b(8478), 0];
                      if (!c(a10, En))
                        return [0, b(347), 0];
                    }
                  }
                } else {
                  var $10 = e(a10, Eo);
                  if (0 <= $10) {
                    if (!(0 < $10))
                      return [0, b(10221), 0];
                    var ab10 = e(a10, Ep);
                    if (0 <= ab10) {
                      if (!(0 < ab10))
                        return [0, b(10770), 0];
                      if (!c(a10, Eq))
                        return [0, b(n4), 0];
                      if (!c(a10, Er))
                        return [0, b(8250), 0];
                      if (!c(a10, Es))
                        return [0, b(120007), 0];
                      if (!c(a10, Et))
                        return [0, b(k2), 0];
                      if (!c(a10, Eu))
                        return [0, b(93), 0];
                      if (!c(a10, Ev) || !c(a10, Ew))
                        return [0, b(l8), 0];
                    } else {
                      if (!c(a10, Ex))
                        return [0, b(8702), 0];
                      if (!c(a10, Ey))
                        return [0, b(mV), 0];
                      if (!c(a10, Ez))
                        return [0, b(10630), 0];
                      if (!c(a10, EA))
                        return [0, b(120163), 0];
                      if (!c(a10, EB))
                        return [0, b(10798), 0];
                      if (!c(a10, EC))
                        return [0, b(10805), 0];
                      if (!c(a10, ED))
                        return [0, b(41), 0];
                      if (!c(a10, EE))
                        return [0, b(10644), 0];
                    }
                  } else {
                    var ac10 = e(a10, EF);
                    if (0 <= ac10) {
                      if (!(0 < ac10))
                        return [0, b(730), 0];
                      if (!c(a10, EG))
                        return [0, b(qn), 0];
                      if (!c(a10, EH))
                        return [0, b(hx), 0];
                      if (!c(a10, EI))
                        return [0, b(fN), 0];
                      if (!c(a10, EJ))
                        return [0, b(8207), 0];
                      if (!c(a10, EK))
                        return [0, b(o0), 0];
                      if (!c(a10, EL))
                        return [0, b(o0), 0];
                      if (!c(a10, EM))
                        return [0, b(10990), 0];
                    } else {
                      if (!c(a10, EN))
                        return [0, b(mZ), 0];
                      if (!c(a10, EO))
                        return [0, b(gm), 0];
                      if (!c(a10, EP))
                        return [0, b(gR), 0];
                      if (!c(a10, EQ))
                        return [0, b(hx), 0];
                      if (!c(a10, ER))
                        return [0, b(fN), 0];
                      if (!c(a10, ES))
                        return [0, b(n4), 0];
                      if (!c(a10, ET))
                        return [0, b(hm), 0];
                      if (!c(a10, EU))
                        return [0, b(lH), 0];
                    }
                  }
                }
              }
            } else {
              var ad10 = e(a10, EV);
              if (0 <= ad10) {
                if (!(0 < ad10))
                  return [0, b(120006), 0];
                var ae10 = e(a10, EW);
                if (0 <= ae10) {
                  if (!(0 < ae10))
                    return [0, b(8758), 0];
                  var af10 = e(a10, EX);
                  if (0 <= af10) {
                    if (!(0 < af10))
                      return [0, b(hb), 0];
                    var ag10 = e(a10, EY);
                    if (0 <= ag10) {
                      if (!(0 < ag10))
                        return [0, b(10621), 0];
                      if (!c(a10, EZ))
                        return [0, b(m_), 0];
                      if (!c(a10, E0))
                        return [0, b(120111), 0];
                      if (!c(a10, E1))
                        return [0, b(gm), 0];
                      if (!c(a10, E2))
                        return [0, b(gR), 0];
                      if (!c(a10, E3))
                        return [0, b(10604), 0];
                      if (!c(a10, E4))
                        return [0, b(961), 0];
                      if (!c(a10, E5))
                        return [0, b(qp), 0];
                    } else {
                      if (!c(a10, E6))
                        return [0, b(8627), 0];
                      if (!c(a10, E7))
                        return [0, b(dQ), 0];
                      if (!c(a10, E8))
                        return [0, b(oC), 0];
                      if (!c(a10, E9))
                        return [0, b(dQ), 0];
                      if (!c(a10, E_))
                        return [0, b(pd), 0];
                      if (!c(a10, E$))
                        return [0, b(9645), 0];
                      if (!c(a10, Fa))
                        return [0, b(hz), 0];
                    }
                  } else {
                    var ah10 = e(a10, Fb);
                    if (0 <= ah10) {
                      if (!(0 < ah10))
                        return [0, b(345), 0];
                      if (!c(a10, Fc))
                        return [0, b(343), 0];
                      if (!c(a10, Fd))
                        return [0, b(oV), 0];
                      if (!c(a10, Fe))
                        return [0, b(bD), 0];
                      if (!c(a10, Ff))
                        return [0, b(1088), 0];
                      if (!c(a10, Fg))
                        return [0, b(10551), 0];
                      if (!c(a10, Fh))
                        return [0, b(10601), 0];
                      if (!c(a10, Fi))
                        return [0, b(hb), 0];
                    } else {
                      if (!c(a10, Fj))
                        return [0, b(mg), 0];
                      if (!c(a10, Fk))
                        return [0, b(mc), 0];
                      if (!c(a10, Fl))
                        return [0, b(10099), 0];
                      if (!c(a10, Fm))
                        return [0, b(bD), 0];
                      if (!c(a10, Fn))
                        return [0, b(93), 0];
                      if (!c(a10, Fo))
                        return [0, b(10636), 0];
                      if (!c(a10, Fp))
                        return [0, b(10638), 0];
                      if (!c(a10, Fq))
                        return [0, b(10640), 0];
                    }
                  }
                } else {
                  var ai2 = e(a10, Fr);
                  if (0 <= ai2) {
                    if (!(0 < ai2))
                      return [0, b(10661), 0];
                    var aj2 = e(a10, Fs);
                    if (0 <= aj2) {
                      if (!(0 < aj2))
                        return [0, b(10526), 0];
                      if (!c(a10, Ft))
                        return [0, b(od), 0];
                      if (!c(a10, Fu))
                        return [0, b(op), 0];
                      if (!c(a10, Fv))
                        return [0, b(10565), 0];
                      if (!c(a10, Fw))
                        return [0, b(10612), 0];
                      if (!c(a10, Fx))
                        return [0, b(mZ), 0];
                      if (!c(a10, Fy))
                        return [0, b(hm), 0];
                      if (!c(a10, Fz))
                        return [0, b(10522), 0];
                    } else {
                      if (!c(a10, FA))
                        return [0, b(gY), 0];
                      if (!c(a10, FB))
                        return [0, b(187), 0];
                      if (!c(a10, FC))
                        return [0, b(cS), 0];
                      if (!c(a10, FD))
                        return [0, b(10613), 0];
                      if (!c(a10, FE))
                        return [0, b(nd), 0];
                      if (!c(a10, FF))
                        return [0, b(10528), 0];
                      if (!c(a10, FG))
                        return [0, b(mp), 0];
                    }
                  } else {
                    var ak2 = e(a10, FH);
                    if (0 <= ak2) {
                      if (!(0 < ak2))
                        return [0, b(pv), 0];
                      if (!c(a10, FI))
                        return [0, b(10596), 0];
                      if (!c(a10, FJ)) {
                        var eE2 = [0, b(817), 0];
                        return [0, b(hv), eE2];
                      }
                      if (!c(a10, FK))
                        return [0, b(341), 0];
                      if (!c(a10, FL))
                        return [0, b(n9), 0];
                      if (!c(a10, FM))
                        return [0, b(10675), 0];
                      if (!c(a10, FN))
                        return [0, b(gY), 0];
                      if (!c(a10, FO))
                        return [0, b(10642), 0];
                    } else {
                      if (!c(a10, FP))
                        return [0, b(mD), 0];
                      if (!c(a10, FQ))
                        return [0, b(10774), 0];
                      if (!c(a10, FR))
                        return [0, b(63), 0];
                      if (!c(a10, FS))
                        return [0, b(l3), 0];
                      if (!c(a10, FT))
                        return [0, b(34), 0];
                      if (!c(a10, FU))
                        return [0, b(o8), 0];
                      if (!c(a10, FV))
                        return [0, b(d7), 0];
                      if (!c(a10, FW))
                        return [0, b(10524), 0];
                    }
                  }
                }
              } else {
                var al2 = e(a10, FX);
                if (0 <= al2) {
                  if (!(0 < al2))
                    return [0, b(gW), 0];
                  var an2 = e(a10, FY);
                  if (0 <= an2) {
                    if (!(0 < an2))
                      return [0, b(pR), 0];
                    var ao2 = e(a10, FZ);
                    if (0 <= ao2) {
                      if (!(0 < ao2))
                        return [0, b(8880), 0];
                      if (!c(a10, F0))
                        return [0, b(120005), 0];
                      if (!c(a10, F1))
                        return [0, b(968), 0];
                      if (!c(a10, F2))
                        return [0, b(8200), 0];
                      if (!c(a10, F3))
                        return [0, b(120110), 0];
                      if (!c(a10, F4))
                        return [0, b(lh), 0];
                      if (!c(a10, F5))
                        return [0, b(120162), 0];
                      if (!c(a10, F6))
                        return [0, b(8279), 0];
                    } else {
                      if (!c(a10, F7))
                        return [0, b(oU), 0];
                      if (!c(a10, F8))
                        return [0, b(9006), 0];
                      if (!c(a10, F9))
                        return [0, b(8978), 0];
                      if (!c(a10, F_))
                        return [0, b(8979), 0];
                      if (!c(a10, F$))
                        return [0, b(cV), 0];
                      if (!c(a10, Ga))
                        return [0, b(cV), 0];
                      if (!c(a10, Gb))
                        return [0, b(f4), 0];
                    }
                  } else {
                    var ap2 = e(a10, Gc);
                    if (0 <= ap2) {
                      if (!(0 < ap2))
                        return [0, b(nO), 0];
                      if (!c(a10, Gd))
                        return [0, b(pD), 0];
                      if (!c(a10, Ge))
                        return [0, b(pR), 0];
                      if (!c(a10, Gf))
                        return [0, b(f4), 0];
                      if (!c(a10, Gg))
                        return [0, b(8242), 0];
                      if (!c(a10, Gh))
                        return [0, b(k4), 0];
                      if (!c(a10, Gi))
                        return [0, b(pD), 0];
                      if (!c(a10, Gj))
                        return [0, b(nO), 0];
                    } else {
                      if (!c(a10, Gk))
                        return [0, b(10931), 0];
                      if (!c(a10, Gl))
                        return [0, b(ow), 0];
                      if (!c(a10, Gm))
                        return [0, b(hF), 0];
                      if (!c(a10, Gn))
                        return [0, b(cb), 0];
                      if (!c(a10, Go))
                        return [0, b(gW), 0];
                      if (!c(a10, Gp))
                        return [0, b(ow), 0];
                      if (!c(a10, Gq))
                        return [0, b(hF), 0];
                      if (!c(a10, Gr))
                        return [0, b(cb), 0];
                    }
                  }
                } else {
                  var aq2 = e(a10, Gs);
                  if (0 <= aq2) {
                    if (!(0 < aq2))
                      return [0, b(d0), 0];
                    var ar2 = e(a10, Gt);
                    if (0 <= ar2) {
                      if (!(0 < ar2))
                        return [0, b(10866), 0];
                      if (!c(a10, Gu))
                        return [0, b(gd), 0];
                      if (!c(a10, Gv))
                        return [0, b(10790), 0];
                      if (!c(a10, Gw))
                        return [0, b(10791), 0];
                      if (!c(a10, Gx))
                        return [0, b(gd), 0];
                      if (!c(a10, Gy))
                        return [0, b(10773), 0];
                      if (!c(a10, Gz))
                        return [0, b(120161), 0];
                      if (!c(a10, GA))
                        return [0, b(163), 0];
                    } else {
                      if (!c(a10, GB))
                        return [0, b(8462), 0];
                      if (!c(a10, GC))
                        return [0, b(d0), 0];
                      if (!c(a10, GD))
                        return [0, b(43), 0];
                      if (!c(a10, GE))
                        return [0, b(10787), 0];
                      if (!c(a10, GF))
                        return [0, b(o4), 0];
                      if (!c(a10, GG))
                        return [0, b(10786), 0];
                      if (!c(a10, GH))
                        return [0, b(nj), 0];
                      if (!c(a10, GI))
                        return [0, b(10789), 0];
                    }
                  } else {
                    var as2 = e(a10, GJ);
                    if (0 <= as2) {
                      if (!(0 < as2))
                        return [0, b(120109), 0];
                      if (!c(a10, GK))
                        return [0, b(966), 0];
                      if (!c(a10, GL))
                        return [0, b(gO), 0];
                      if (!c(a10, GM))
                        return [0, b(g4), 0];
                      if (!c(a10, GN))
                        return [0, b(9742), 0];
                      if (!c(a10, GO))
                        return [0, b(960), 0];
                      if (!c(a10, GP))
                        return [0, b(lq), 0];
                      if (!c(a10, GQ))
                        return [0, b(ln), 0];
                    } else {
                      if (!c(a10, GR))
                        return [0, b(pX), 0];
                      if (!c(a10, GS))
                        return [0, b(hL), 0];
                      if (!c(a10, GT))
                        return [0, b(1087), 0];
                      if (!c(a10, GU))
                        return [0, b(37), 0];
                      if (!c(a10, GV))
                        return [0, b(46), 0];
                      if (!c(a10, GW))
                        return [0, b(8240), 0];
                      if (!c(a10, GX))
                        return [0, b(ef), 0];
                      if (!c(a10, GY))
                        return [0, b(8241), 0];
                    }
                  }
                }
              }
            }
          }
        } else {
          var at2 = e(a10, GZ);
          if (0 <= at2) {
            if (!(0 < at2))
              return [0, b(10646), 0];
            var au2 = e(a10, G0);
            if (0 <= au2) {
              if (!(0 < au2))
                return [0, b(f2), 0];
              var av2 = e(a10, G1);
              if (0 <= av2) {
                if (!(0 < av2)) {
                  var eI2 = [0, b(am), 0];
                  return [0, b(60), eI2];
                }
                var aw2 = e(a10, G2);
                if (0 <= aw2) {
                  if (!(0 < aw2))
                    return [0, b(ms), 0];
                  var ax2 = e(a10, G3);
                  if (0 <= ax2) {
                    if (!(0 < ax2))
                      return [0, b(186), 0];
                    var ay2 = e(a10, G4);
                    if (0 <= ay2) {
                      if (!(0 < ay2))
                        return [0, b(245), 0];
                      if (!c(a10, G5))
                        return [0, b(oH), 0];
                      if (!c(a10, G6))
                        return [0, b(10806), 0];
                      if (!c(a10, G7))
                        return [0, b(dT), 0];
                      if (!c(a10, G8))
                        return [0, b(9021), 0];
                      if (!c(a10, G9))
                        return [0, b(cX), 0];
                      if (!c(a10, G_))
                        return [0, b(182), 0];
                      if (!c(a10, G$))
                        return [0, b(cX), 0];
                    } else {
                      if (!c(a10, Ha))
                        return [0, b(8886), 0];
                      if (!c(a10, Hb))
                        return [0, b(10838), 0];
                      if (!c(a10, Hc))
                        return [0, b(10839), 0];
                      if (!c(a10, Hd))
                        return [0, b(10843), 0];
                      if (!c(a10, He))
                        return [0, b(gf), 0];
                      if (!c(a10, Hf))
                        return [0, b(y), 0];
                      if (!c(a10, Hg))
                        return [0, b(8856), 0];
                    }
                  } else {
                    var az2 = e(a10, Hh);
                    if (0 <= az2) {
                      if (!(0 < az2))
                        return [0, b(10681), 0];
                      if (!c(a10, Hi))
                        return [0, b(nC), 0];
                      if (!c(a10, Hj))
                        return [0, b(lg), 0];
                      if (!c(a10, Hk))
                        return [0, b(ng), 0];
                      if (!c(a10, Hl))
                        return [0, b(10845), 0];
                      if (!c(a10, Hm))
                        return [0, b(gf), 0];
                      if (!c(a10, Hn))
                        return [0, b(gf), 0];
                      if (!c(a10, Ho))
                        return [0, b(170), 0];
                    } else {
                      if (!c(a10, Hp))
                        return [0, b(10688), 0];
                      if (!c(a10, Hq))
                        return [0, b(333), 0];
                      if (!c(a10, Hr))
                        return [0, b(969), 0];
                      if (!c(a10, Hs))
                        return [0, b(959), 0];
                      if (!c(a10, Ht))
                        return [0, b(10678), 0];
                      if (!c(a10, Hu))
                        return [0, b(lJ), 0];
                      if (!c(a10, Hv))
                        return [0, b(120160), 0];
                      if (!c(a10, Hw))
                        return [0, b(10679), 0];
                    }
                  }
                } else {
                  var aA2 = e(a10, Hx);
                  if (0 <= aA2) {
                    if (!(0 < aA2))
                      return [0, b(337), 0];
                    var aB2 = e(a10, Hy);
                    if (0 <= aB2) {
                      if (!(0 < aB2))
                        return [0, b(242), 0];
                      if (!c(a10, Hz))
                        return [0, b(10689), 0];
                      if (!c(a10, HA))
                        return [0, b(10677), 0];
                      if (!c(a10, HB))
                        return [0, b(lD), 0];
                      if (!c(a10, HC))
                        return [0, b(gL), 0];
                      if (!c(a10, HD))
                        return [0, b(oO), 0];
                      if (!c(a10, HE))
                        return [0, b(10686), 0];
                      if (!c(a10, HF))
                        return [0, b(10683), 0];
                    } else {
                      if (!c(a10, HG))
                        return [0, b(10808), 0];
                      if (!c(a10, HH))
                        return [0, b(pC), 0];
                      if (!c(a10, HI))
                        return [0, b(10684), 0];
                      if (!c(a10, HJ))
                        return [0, b(339), 0];
                      if (!c(a10, HK))
                        return [0, b(10687), 0];
                      if (!c(a10, HL))
                        return [0, b(120108), 0];
                      if (!c(a10, HM))
                        return [0, b(731), 0];
                    }
                  } else {
                    var aC2 = e(a10, HN);
                    if (0 <= aC2) {
                      if (!(0 < aC2))
                        return [0, b(10535), 0];
                      if (!c(a10, HO))
                        return [0, b(mP), 0];
                      if (!c(a10, HP))
                        return [0, b(243), 0];
                      if (!c(a10, HQ))
                        return [0, b(pj), 0];
                      if (!c(a10, HR))
                        return [0, b(mB), 0];
                      if (!c(a10, HS))
                        return [0, b(244), 0];
                      if (!c(a10, HT))
                        return [0, b(1086), 0];
                      if (!c(a10, HU))
                        return [0, b(k1), 0];
                    } else {
                      if (!c(a10, HV)) {
                        var eH2 = [0, b(am), 0];
                        return [0, b(dW), eH2];
                      }
                      if (!c(a10, HW))
                        return [0, b(10499), 0];
                      if (!c(a10, HX)) {
                        var eG2 = [0, b(am), 0];
                        return [0, b(er), eG2];
                      }
                      if (!c(a10, HY)) {
                        var eF2 = [0, b(am), 0];
                        return [0, b(cK), eF2];
                      }
                      if (!c(a10, HZ))
                        return [0, b(8662), 0];
                      if (!c(a10, H0))
                        return [0, b(10531), 0];
                      if (!c(a10, H1) || !c(a10, H2))
                        return [0, b(m6), 0];
                    }
                  }
                }
              } else {
                var aD2 = e(a10, H3);
                if (0 <= aD2) {
                  if (!(0 < aD2)) {
                    var eT2 = [0, b(n), 0];
                    return [0, b(ev), eT2];
                  }
                  var aE2 = e(a10, H4);
                  if (0 <= aE2) {
                    if (!(0 < aE2))
                      return [0, b(gQ), 0];
                    var aF2 = e(a10, H5);
                    if (0 <= aF2) {
                      if (!(0 < aF2))
                        return [0, b(10500), 0];
                      if (!c(a10, H6)) {
                        var eM2 = [0, b(am), 0];
                        return [0, b(fT), eM2];
                      }
                      if (!c(a10, H7))
                        return [0, b(8876), 0];
                      if (!c(a10, H8)) {
                        var eL2 = [0, b(am), 0];
                        return [0, b(eg), eL2];
                      }
                      if (!c(a10, H9)) {
                        var eK2 = [0, b(am), 0];
                        return [0, b(62), eK2];
                      }
                      if (!c(a10, H_))
                        return [0, b(10718), 0];
                      if (!c(a10, H$))
                        return [0, b(10498), 0];
                      if (!c(a10, Ia)) {
                        var eJ2 = [0, b(am), 0];
                        return [0, b(hB), eJ2];
                      }
                    } else {
                      if (!c(a10, Ib))
                        return [0, b(gX), 0];
                      if (!c(a10, Ic))
                        return [0, b(ht), 0];
                      if (!c(a10, Id))
                        return [0, b(957), 0];
                      if (!c(a10, Ie))
                        return [0, b(35), 0];
                      if (!c(a10, If))
                        return [0, b(8470), 0];
                      if (!c(a10, Ig))
                        return [0, b(8199), 0];
                      if (!c(a10, Ih))
                        return [0, b(8877), 0];
                    }
                  } else {
                    var aG2 = e(a10, Ii);
                    if (0 <= aG2) {
                      if (!(0 < aG2))
                        return [0, b(fS), 0];
                      if (!c(a10, Ij)) {
                        var eO2 = [0, b(am), 0];
                        return [0, b(b9), eO2];
                      }
                      if (!c(a10, Ik))
                        return [0, b(fS), 0];
                      if (!c(a10, Il)) {
                        var eN2 = [0, b(n), 0];
                        return [0, b(ej), eN2];
                      }
                      if (!c(a10, Im))
                        return [0, b(lY), 0];
                      if (!c(a10, In))
                        return [0, b(241), 0];
                      if (!c(a10, Io))
                        return [0, b(mo), 0];
                      if (!c(a10, Ip))
                        return [0, b(g8), 0];
                    } else {
                      if (!c(a10, Iq))
                        return [0, b(g6), 0];
                      if (!c(a10, Ir)) {
                        var eS2 = [0, b(am), 0];
                        return [0, b(cT), eS2];
                      }
                      if (!c(a10, Is))
                        return [0, b(g6), 0];
                      if (!c(a10, It)) {
                        var eR2 = [0, b(n), 0];
                        return [0, b(ev), eR2];
                      }
                      if (!c(a10, Iu))
                        return [0, b(f$), 0];
                      if (!c(a10, Iv)) {
                        var eQ2 = [0, b(n), 0];
                        return [0, b(b7), eQ2];
                      }
                      if (!c(a10, Iw))
                        return [0, b(8837), 0];
                      if (!c(a10, Ix)) {
                        var eP2 = [0, b(n), 0];
                        return [0, b(ej), eP2];
                      }
                    }
                  }
                } else {
                  var aH2 = e(a10, Iy);
                  if (0 <= aH2) {
                    if (!(0 < aH2))
                      return [0, b(l5), 0];
                    var aI2 = e(a10, Iz);
                    if (0 <= aI2) {
                      if (!(0 < aI2))
                        return [0, b(la), 0];
                      if (!c(a10, IA))
                        return [0, b(fU), 0];
                      if (!c(a10, IB))
                        return [0, b(fU), 0];
                      if (!c(a10, IC))
                        return [0, b(es), 0];
                      if (!c(a10, ID))
                        return [0, b(cY), 0];
                      if (!c(a10, IE))
                        return [0, b(kx), 0];
                      if (!c(a10, IF))
                        return [0, b(mI), 0];
                      if (!c(a10, IG))
                        return [0, b(8836), 0];
                    } else {
                      if (!c(a10, IH))
                        return [0, b(gX), 0];
                      if (!c(a10, II))
                        return [0, b(ht), 0];
                      if (!c(a10, IJ))
                        return [0, b(f$), 0];
                      if (!c(a10, IK))
                        return [0, b(l9), 0];
                      if (!c(a10, IL)) {
                        var eU2 = [0, b(n), 0];
                        return [0, b(b7), eU2];
                      }
                      if (!c(a10, IM))
                        return [0, b(120003), 0];
                      if (!c(a10, IN))
                        return [0, b(es), 0];
                      if (!c(a10, IO))
                        return [0, b(cY), 0];
                    }
                  } else {
                    var aJ2 = e(a10, IP);
                    if (0 <= aJ2) {
                      if (!(0 < aJ2))
                        return [0, b(pm), 0];
                      if (!c(a10, IQ)) {
                        var eY2 = [0, b(n), 0];
                        return [0, b(cb), eY2];
                      }
                      if (!c(a10, IR))
                        return [0, b(gP), 0];
                      if (!c(a10, IS)) {
                        var eX2 = [0, b(n), 0];
                        return [0, b(cb), eX2];
                      }
                      if (!c(a10, IT))
                        return [0, b(oz), 0];
                      if (!c(a10, IU))
                        return [0, b(l5), 0];
                      if (!c(a10, IV)) {
                        var eW2 = [0, b(n), 0];
                        return [0, b(mp), eW2];
                      }
                      if (!c(a10, IW)) {
                        var eV2 = [0, b(n), 0];
                        return [0, b(hm), eV2];
                      }
                    } else {
                      if (!c(a10, IX))
                        return [0, b(8958), 0];
                      if (!c(a10, IY))
                        return [0, b(8957), 0];
                      if (!c(a10, IZ))
                        return [0, b(cY), 0];
                      if (!c(a10, I0))
                        return [0, b(cY), 0];
                      if (!c(a10, I1)) {
                        var e02 = [0, b(gD), 0];
                        return [0, b(pX), e02];
                      }
                      if (!c(a10, I2)) {
                        var eZ2 = [0, b(n), 0];
                        return [0, b(hL), eZ2];
                      }
                      if (!c(a10, I3))
                        return [0, b(10772), 0];
                      if (!c(a10, I4))
                        return [0, b(gP), 0];
                    }
                  }
                }
              }
            } else {
              var aK2 = e(a10, I5);
              if (0 <= aK2) {
                if (!(0 < aK2))
                  return [0, b(ew), 0];
                var aL2 = e(a10, I6);
                if (0 <= aL2) {
                  if (!(0 < aL2))
                    return [0, b(ot), 0];
                  var aM2 = e(a10, I7);
                  if (0 <= aM2) {
                    if (!(0 < aM2)) {
                      var e32 = [0, b(n), 0];
                      return [0, b(cf), e32];
                    }
                    var aN2 = e(a10, I8);
                    if (0 <= aN2) {
                      if (!(0 < aN2))
                        return [0, b(172), 0];
                      if (!c(a10, I9))
                        return [0, b(f6), 0];
                      if (!c(a10, I_)) {
                        var e22 = [0, b(n), 0];
                        return [0, b(kL), e22];
                      }
                      if (!c(a10, I$)) {
                        var e12 = [0, b(n), 0];
                        return [0, b(me), e12];
                      }
                      if (!c(a10, Ja))
                        return [0, b(f6), 0];
                      if (!c(a10, Jb))
                        return [0, b(8951), 0];
                      if (!c(a10, Jc))
                        return [0, b(8950), 0];
                      if (!c(a10, Jd))
                        return [0, b(f2), 0];
                    } else {
                      if (!c(a10, Je))
                        return [0, b(gs), 0];
                      if (!c(a10, Jf))
                        return [0, b(mb), 0];
                      if (!c(a10, Jg))
                        return [0, b(gs), 0];
                      if (!c(a10, Jh))
                        return [0, b(g8), 0];
                      if (!c(a10, Ji))
                        return [0, b(gQ), 0];
                      if (!c(a10, Jj))
                        return [0, b(es), 0];
                      if (!c(a10, Jk))
                        return [0, b(120159), 0];
                    }
                  } else {
                    var aO2 = e(a10, Jl);
                    if (0 <= aO2) {
                      if (!(0 < aO2))
                        return [0, b(py), 0];
                      if (!c(a10, Jm))
                        return [0, b(8229), 0];
                      if (!c(a10, Jn))
                        return [0, b(g0), 0];
                      if (!c(a10, Jo))
                        return [0, b(py), 0];
                      if (!c(a10, Jp))
                        return [0, b(ot), 0];
                      if (!c(a10, Jq))
                        return [0, b(g0), 0];
                      if (!c(a10, Jr)) {
                        var e52 = [0, b(n), 0];
                        return [0, b(cM), e52];
                      }
                      if (!c(a10, Js)) {
                        var e42 = [0, b(n), 0];
                        return [0, b(cf), e42];
                      }
                    } else {
                      if (!c(a10, Jt))
                        return [0, b(10994), 0];
                      if (!c(a10, Ju))
                        return [0, b(d2), 0];
                      if (!c(a10, Jv))
                        return [0, b(8956), 0];
                      if (!c(a10, Jw))
                        return [0, b(8954), 0];
                      if (!c(a10, Jx))
                        return [0, b(d2), 0];
                      if (!c(a10, Jy))
                        return [0, b(1114), 0];
                      if (!c(a10, Jz))
                        return [0, b(p_), 0];
                      if (!c(a10, JA)) {
                        var e62 = [0, b(n), 0];
                        return [0, b(cM), e62];
                      }
                    }
                  }
                } else {
                  var aP2 = e(a10, JB);
                  if (0 <= aP2) {
                    if (!(0 < aP2))
                      return [0, b(n7), 0];
                    var aQ2 = e(a10, JC);
                    if (0 <= aQ2) {
                      if (!(0 < aQ2))
                        return [0, b(hg), 0];
                      if (!c(a10, JD)) {
                        var e92 = [0, b(n), 0];
                        return [0, b(b_), e92];
                      }
                      if (!c(a10, JE)) {
                        var e82 = [0, b(n), 0];
                        return [0, b(b6), e82];
                      }
                      if (!c(a10, JF)) {
                        var e72 = [0, b(n), 0];
                        return [0, b(b6), e72];
                      }
                      if (!c(a10, JG))
                        return [0, b(k5), 0];
                      if (!c(a10, JH))
                        return [0, b(gt), 0];
                      if (!c(a10, JI))
                        return [0, b(gt), 0];
                      if (!c(a10, JJ))
                        return [0, b(pw), 0];
                    } else {
                      if (!c(a10, JK))
                        return [0, b(mQ), 0];
                      if (!c(a10, JL)) {
                        var e$2 = [0, b(n), 0];
                        return [0, b(cO), e$2];
                      }
                      if (!c(a10, JM))
                        return [0, b(gH), 0];
                      if (!c(a10, JN))
                        return [0, b(gH), 0];
                      if (!c(a10, JO))
                        return [0, b(120107), 0];
                      if (!c(a10, JP)) {
                        var e_2 = [0, b(n), 0];
                        return [0, b(b_), e_2];
                      }
                      if (!c(a10, JQ))
                        return [0, b(hg), 0];
                    }
                  } else {
                    var aR2 = e(a10, JR);
                    if (0 <= aR2) {
                      if (!(0 < aR2))
                        return [0, b(1085), 0];
                      if (!c(a10, JS))
                        return [0, b(8211), 0];
                      if (!c(a10, JT))
                        return [0, b(nl), 0];
                      if (!c(a10, JU))
                        return [0, b(8663), 0];
                      if (!c(a10, JV))
                        return [0, b(10532), 0];
                      if (!c(a10, JW))
                        return [0, b(gn), 0];
                      if (!c(a10, JX))
                        return [0, b(gn), 0];
                      if (!c(a10, JY)) {
                        var fa2 = [0, b(n), 0];
                        return [0, b(d3), fa2];
                      }
                    } else {
                      if (!c(a10, JZ)) {
                        var fd2 = [0, b(n), 0];
                        return [0, b(cN), fd2];
                      }
                      if (!c(a10, J0)) {
                        var fc2 = [0, b(n), 0];
                        return [0, b(ec), fc2];
                      }
                      if (!c(a10, J1))
                        return [0, b(10819), 0];
                      if (!c(a10, J2))
                        return [0, b(328), 0];
                      if (!c(a10, J3))
                        return [0, b(326), 0];
                      if (!c(a10, J4))
                        return [0, b(pB), 0];
                      if (!c(a10, J5)) {
                        var fb2 = [0, b(n), 0];
                        return [0, b(mx), fb2];
                      }
                      if (!c(a10, J6))
                        return [0, b(10818), 0];
                    }
                  }
                }
              } else {
                var aS2 = e(a10, J7);
                if (0 <= aS2) {
                  if (!(0 < aS2))
                    return [0, b(10971), 0];
                  var aT2 = e(a10, J8);
                  if (0 <= aT2) {
                    if (!(0 < aT2)) {
                      var fi2 = [0, b(am), 0];
                      return [0, b(cg), fi2];
                    }
                    var aU2 = e(a10, J9);
                    if (0 <= aU2) {
                      if (!(0 < aU2))
                        return [0, b(gF), 0];
                      if (!c(a10, J_)) {
                        var ff2 = [0, b(n), 0];
                        return [0, b(lk), ff2];
                      }
                      if (!c(a10, J$)) {
                        var fe2 = [0, b(n), 0];
                        return [0, b(ny), fe2];
                      }
                      if (!c(a10, Ka))
                        return [0, b(329), 0];
                      if (!c(a10, Kb))
                        return [0, b(gF), 0];
                      if (!c(a10, Kc))
                        return [0, b(mm), 0];
                      if (!c(a10, Kd))
                        return [0, b(mm), 0];
                      if (!c(a10, Ke))
                        return [0, b(pn), 0];
                    } else {
                      if (!c(a10, Kf)) {
                        var fh2 = [0, b(n), 0];
                        return [0, b(cg), fh2];
                      }
                      if (!c(a10, Kg))
                        return [0, b(oz), 0];
                      if (!c(a10, Kh))
                        return [0, b(8879), 0];
                      if (!c(a10, Ki))
                        return [0, b(8878), 0];
                      if (!c(a10, Kj))
                        return [0, b(pL), 0];
                      if (!c(a10, Kk))
                        return [0, b(324), 0];
                      if (!c(a10, Kl)) {
                        var fg2 = [0, b(am), 0];
                        return [0, b(gj), fg2];
                      }
                    }
                  } else {
                    var aV2 = e(a10, Km);
                    if (0 <= aV2) {
                      if (!(0 < aV2))
                        return [0, b(mS), 0];
                      if (!c(a10, Kn))
                        return [0, b(mS), 0];
                      if (!c(a10, Ko)) {
                        var fm2 = [0, b(n), 0];
                        return [0, b(gp), fm2];
                      }
                      if (!c(a10, Kp)) {
                        var fl2 = [0, b(am), 0];
                        return [0, b(ce), fl2];
                      }
                      if (!c(a10, Kq)) {
                        var fk2 = [0, b(n), 0];
                        return [0, b(ce), fk2];
                      }
                      if (!c(a10, Kr))
                        return [0, b(p_), 0];
                      if (!c(a10, Ks))
                        return [0, b(pw), 0];
                      if (!c(a10, Kt)) {
                        var fj2 = [0, b(n), 0];
                        return [0, b(oY), fj2];
                      }
                    } else {
                      if (!c(a10, Ku))
                        return [0, b(oE), 0];
                      if (!c(a10, Kv))
                        return [0, b(go), 0];
                      if (!c(a10, Kw))
                        return [0, b(8871), 0];
                      if (!c(a10, Kx))
                        return [0, b(120158), 0];
                      if (!c(a10, Ky))
                        return [0, b(go), 0];
                      if (!c(a10, Kz))
                        return [0, b(120002), 0];
                      if (!c(a10, KA))
                        return [0, b(hd), 0];
                      if (!c(a10, KB))
                        return [0, b(956), 0];
                    }
                  }
                } else {
                  var aX2 = e(a10, KC);
                  if (0 <= aX2) {
                    if (!(0 < aX2))
                      return [0, b(m1), 0];
                    var aY2 = e(a10, KD);
                    if (0 <= aY2) {
                      if (!(0 < aY2))
                        return [0, b(eq), 0];
                      if (!c(a10, KE))
                        return [0, b(42), 0];
                      if (!c(a10, KF))
                        return [0, b(10992), 0];
                      if (!c(a10, KG))
                        return [0, b(gu), 0];
                      if (!c(a10, KH))
                        return [0, b(8722), 0];
                      if (!c(a10, KI))
                        return [0, b(ps), 0];
                      if (!c(a10, KJ))
                        return [0, b(le), 0];
                      if (!c(a10, KK))
                        return [0, b(10794), 0];
                    } else {
                      if (!c(a10, KL))
                        return [0, b(9646), 0];
                      if (!c(a10, KM))
                        return [0, b(10793), 0];
                      if (!c(a10, KN))
                        return [0, b(1084), 0];
                      if (!c(a10, KO))
                        return [0, b(8212), 0];
                      if (!c(a10, KP))
                        return [0, b(mF), 0];
                      if (!c(a10, KQ))
                        return [0, b(120106), 0];
                      if (!c(a10, KR))
                        return [0, b(8487), 0];
                      if (!c(a10, KS))
                        return [0, b(181), 0];
                    }
                  } else {
                    var aZ2 = e(a10, KT);
                    if (0 <= aZ2) {
                      if (!(0 < aZ2))
                        return [0, b(mz), 0];
                      if (!c(a10, KU))
                        return [0, b(9794), 0];
                      if (!c(a10, KV))
                        return [0, b(ok), 0];
                      if (!c(a10, KW))
                        return [0, b(ok), 0];
                      if (!c(a10, KX))
                        return [0, b(fW), 0];
                      if (!c(a10, KY))
                        return [0, b(fW), 0];
                      if (!c(a10, KZ))
                        return [0, b(qr), 0];
                      if (!c(a10, K0))
                        return [0, b(lI), 0];
                    } else {
                      if (!c(a10, K1))
                        return [0, b(pt), 0];
                      if (!c(a10, K2))
                        return [0, b(dW), 0];
                      if (!c(a10, K3))
                        return [0, b(ld), 0];
                      if (!c(a10, K4))
                        return [0, b(10570), 0];
                      if (!c(a10, K5))
                        return [0, b(10598), 0];
                      if (!c(a10, K6)) {
                        var fo2 = [0, b(aa), 0];
                        return [0, b(d_), fo2];
                      }
                      if (!c(a10, K7)) {
                        var fn2 = [0, b(aa), 0];
                        return [0, b(d_), fn2];
                      }
                      if (!c(a10, K8))
                        return [0, b(8762), 0];
                    }
                  }
                }
              }
            }
          } else {
            var a02 = e(a10, K9);
            if (0 <= a02) {
              if (!(0 < a02))
                return [0, b(gx), 0];
              var a12 = e(a10, K_);
              if (0 <= a12) {
                if (!(0 < a12))
                  return [0, b(f_), 0];
                var a22 = e(a10, K$);
                if (0 <= a22) {
                  if (!(0 < a22))
                    return [0, b(10797), 0];
                  var a32 = e(a10, La);
                  if (0 <= a32) {
                    if (!(0 < a32))
                      return [0, b(k$), 0];
                    var a42 = e(a10, Lb);
                    if (0 <= a42) {
                      if (!(0 < a42))
                        return [0, b(60), 0];
                      if (!c(a10, Lc))
                        return [0, b(10918), 0];
                      if (!c(a10, Ld))
                        return [0, b(10873), 0];
                      if (!c(a10, Le))
                        return [0, b(nu), 0];
                      if (!c(a10, Lf))
                        return [0, b(oA), 0];
                      if (!c(a10, Lg))
                        return [0, b(8905), 0];
                      if (!c(a10, Lh))
                        return [0, b(10614), 0];
                      if (!c(a10, Li))
                        return [0, b(10875), 0];
                    } else {
                      if (!c(a10, Lj))
                        return [0, b(f5), 0];
                      if (!c(a10, Lk))
                        return [0, b(10893), 0];
                      if (!c(a10, Ll))
                        return [0, b(10895), 0];
                      if (!c(a10, Lm))
                        return [0, b(91), 0];
                      if (!c(a10, Ln))
                        return [0, b(o2), 0];
                      if (!c(a10, Lo))
                        return [0, b(pu), 0];
                      if (!c(a10, Lp))
                        return [0, b(322), 0];
                    }
                  } else {
                    var a52 = e(a10, Lq);
                    if (0 <= a52) {
                      if (!(0 < a52))
                        return [0, b(g7), 0];
                      if (!c(a10, Lr))
                        return [0, b(p9), 0];
                      if (!c(a10, Ls))
                        return [0, b(gk), 0];
                      if (!c(a10, Lt))
                        return [0, b(10605), 0];
                      if (!c(a10, Lu))
                        return [0, b(8206), 0];
                      if (!c(a10, Lv))
                        return [0, b(8895), 0];
                      if (!c(a10, Lw))
                        return [0, b(8249), 0];
                      if (!c(a10, Lx))
                        return [0, b(120001), 0];
                    } else {
                      if (!c(a10, Ly))
                        return [0, b(10804), 0];
                      if (!c(a10, Lz))
                        return [0, b(8727), 0];
                      if (!c(a10, LA))
                        return [0, b(95), 0];
                      if (!c(a10, LB))
                        return [0, b(pZ), 0];
                      if (!c(a10, LC))
                        return [0, b(pZ), 0];
                      if (!c(a10, LD))
                        return [0, b(n2), 0];
                      if (!c(a10, LE))
                        return [0, b(40), 0];
                      if (!c(a10, LF))
                        return [0, b(10643), 0];
                    }
                  }
                } else {
                  var a62 = e(a10, LG);
                  if (0 <= a62) {
                    if (!(0 < a62))
                      return [0, b(mU), 0];
                    var a72 = e(a10, LH);
                    if (0 <= a72) {
                      if (!(0 < a72))
                        return [0, b(fQ), 0];
                      if (!c(a10, LI))
                        return [0, b(fP), 0];
                      if (!c(a10, LJ))
                        return [0, b(qe), 0];
                      if (!c(a10, LK))
                        return [0, b(hc), 0];
                      if (!c(a10, LL))
                        return [0, b(ma), 0];
                      if (!c(a10, LM))
                        return [0, b(op), 0];
                      if (!c(a10, LN))
                        return [0, b(10629), 0];
                      if (!c(a10, LO))
                        return [0, b(120157), 0];
                    } else {
                      if (!c(a10, LP))
                        return [0, b(nr), 0];
                      if (!c(a10, LQ))
                        return [0, b(nr), 0];
                      if (!c(a10, LR))
                        return [0, b(d_), 0];
                      if (!c(a10, LS))
                        return [0, b(8934), 0];
                      if (!c(a10, LT))
                        return [0, b(10220), 0];
                      if (!c(a10, LU))
                        return [0, b(8701), 0];
                      if (!c(a10, LV))
                        return [0, b(n1), 0];
                    }
                  } else {
                    var a82 = e(a10, LW);
                    if (0 <= a82) {
                      if (!(0 < a82))
                        return [0, b(kK), 0];
                      if (!c(a10, LX))
                        return [0, b(10603), 0];
                      if (!c(a10, LY))
                        return [0, b(9722), 0];
                      if (!c(a10, LZ))
                        return [0, b(320), 0];
                      if (!c(a10, L0))
                        return [0, b(ne), 0];
                      if (!c(a10, L1))
                        return [0, b(ne), 0];
                      if (!c(a10, L2))
                        return [0, b(d_), 0];
                      if (!c(a10, L3))
                        return [0, b(mU), 0];
                    } else {
                      if (!c(a10, L4))
                        return [0, b(10897), 0];
                      if (!c(a10, L5))
                        return [0, b(ho), 0];
                      if (!c(a10, L6))
                        return [0, b(g5), 0];
                      if (!c(a10, L7))
                        return [0, b(10602), 0];
                      if (!c(a10, L8))
                        return [0, b(9604), 0];
                      if (!c(a10, L9))
                        return [0, b(1113), 0];
                      if (!c(a10, L_))
                        return [0, b(cg), 0];
                      if (!c(a10, L$))
                        return [0, b(k_), 0];
                    }
                  }
                }
              } else {
                var a92 = e(a10, Ma);
                if (0 <= a92) {
                  if (!(0 < a92))
                    return [0, b(10571), 0];
                  var a_2 = e(a10, Mb);
                  if (0 <= a_2) {
                    if (!(0 < a_2))
                      return [0, b(cf), 0];
                    var a$2 = e(a10, Mc);
                    if (0 <= a$2) {
                      if (!(0 < a$2))
                        return [0, b(nu), 0];
                      if (!c(a10, Md))
                        return [0, b(d$), 0];
                      if (!c(a10, Me))
                        return [0, b(m2), 0];
                      if (!c(a10, Mf))
                        return [0, b(f_), 0];
                      if (!c(a10, Mg))
                        return [0, b(f5), 0];
                      if (!c(a10, Mh))
                        return [0, b(10620), 0];
                      if (!c(a10, Mi))
                        return [0, b(oF), 0];
                      if (!c(a10, Mj))
                        return [0, b(120105), 0];
                    } else {
                      if (!c(a10, Mk))
                        return [0, b(10920), 0];
                      if (!c(a10, Ml))
                        return [0, b(10879), 0];
                      if (!c(a10, Mm))
                        return [0, b(10881), 0];
                      if (!c(a10, Mn))
                        return [0, b(10883), 0];
                      if (!c(a10, Mo)) {
                        var fp2 = [0, b(aa), 0];
                        return [0, b(d$), fp2];
                      }
                      if (!c(a10, Mp))
                        return [0, b(10899), 0];
                      if (!c(a10, Mq))
                        return [0, b(k6), 0];
                    }
                  } else {
                    var ba2 = e(a10, Mr);
                    if (0 <= ba2) {
                      if (!(0 < ba2))
                        return [0, b(g7), 0];
                      if (!c(a10, Ms))
                        return [0, b(gk), 0];
                      if (!c(a10, Mt))
                        return [0, b(o3), 0];
                      if (!c(a10, Mu))
                        return [0, b(oA), 0];
                      if (!c(a10, Mv))
                        return [0, b(d$), 0];
                      if (!c(a10, Mw))
                        return [0, b(hB), 0];
                      if (!c(a10, Mx))
                        return [0, b(cM), 0];
                      if (!c(a10, My))
                        return [0, b(cf), 0];
                    } else {
                      if (!c(a10, Mz))
                        return [0, b(8626), 0];
                      if (!c(a10, MA))
                        return [0, b(hB), 0];
                      if (!c(a10, MB))
                        return [0, b(cR), 0];
                      if (!c(a10, MC))
                        return [0, b(oS), 0];
                      if (!c(a10, MD))
                        return [0, b(ho), 0];
                      if (!c(a10, ME))
                        return [0, b(g5), 0];
                      if (!c(a10, MF))
                        return [0, b(k_), 0];
                      if (!c(a10, MG))
                        return [0, b(gq), 0];
                    }
                  }
                } else {
                  var bb2 = e(a10, MH);
                  if (0 <= bb2) {
                    if (!(0 < bb2)) {
                      var fq2 = [0, b(aa), 0];
                      return [0, b(n0), fq2];
                    }
                    var bc2 = e(a10, MI);
                    if (0 <= bc2) {
                      if (!(0 < bc2))
                        return [0, b(316), 0];
                      if (!c(a10, MJ))
                        return [0, b(lE), 0];
                      if (!c(a10, MK))
                        return [0, b(aW), 0];
                      if (!c(a10, ML))
                        return [0, b(1083), 0];
                      if (!c(a10, MM))
                        return [0, b(10550), 0];
                      if (!c(a10, MN))
                        return [0, b(mG), 0];
                      if (!c(a10, MO))
                        return [0, b(pk), 0];
                      if (!c(a10, MP))
                        return [0, b(10599), 0];
                    } else {
                      if (!c(a10, MQ))
                        return [0, b(10508), 0];
                      if (!c(a10, MR))
                        return [0, b(10098), 0];
                      if (!c(a10, MS))
                        return [0, b(aW), 0];
                      if (!c(a10, MT))
                        return [0, b(91), 0];
                      if (!c(a10, MU))
                        return [0, b(10635), 0];
                      if (!c(a10, MV))
                        return [0, b(10639), 0];
                      if (!c(a10, MW))
                        return [0, b(10637), 0];
                      if (!c(a10, MX))
                        return [0, b(318), 0];
                    }
                  } else {
                    var bd2 = e(a10, MY);
                    if (0 <= bd2) {
                      if (!(0 < bd2))
                        return [0, b(mi), 0];
                      if (!c(a10, MZ))
                        return [0, b(ma), 0];
                      if (!c(a10, M0))
                        return [0, b(10553), 0];
                      if (!c(a10, M1))
                        return [0, b(10611), 0];
                      if (!c(a10, M2))
                        return [0, b(oS), 0];
                      if (!c(a10, M3))
                        return [0, b(10923), 0];
                      if (!c(a10, M4))
                        return [0, b(10521), 0];
                      if (!c(a10, M5))
                        return [0, b(n0), 0];
                    } else {
                      if (!c(a10, M6))
                        return [0, b(10641), 0];
                      if (!c(a10, M7))
                        return [0, b(gx), 0];
                      if (!c(a10, M8))
                        return [0, b(k6), 0];
                      if (!c(a10, M9))
                        return [0, b(171), 0];
                      if (!c(a10, M_))
                        return [0, b(cR), 0];
                      if (!c(a10, M$))
                        return [0, b(lF), 0];
                      if (!c(a10, Na))
                        return [0, b(10527), 0];
                      if (!c(a10, Nb))
                        return [0, b(10525), 0];
                    }
                  }
                }
              }
            } else {
              var be2 = e(a10, Nc);
              if (0 <= be2) {
                if (!(0 < be2))
                  return [0, b(8489), 0];
                var bg2 = e(a10, Nd);
                if (0 <= bg2) {
                  if (!(0 < bg2))
                    return [0, b(o1), 0];
                  var bh2 = e(a10, Ne);
                  if (0 <= bh2) {
                    if (!(0 < bh2))
                      return [0, b(312), 0];
                    var bi2 = e(a10, Nf);
                    if (0 <= bi2) {
                      if (!(0 < bi2))
                        return [0, b(10510), 0];
                      if (!c(a10, Ng))
                        return [0, b(cM), 0];
                      if (!c(a10, Nh))
                        return [0, b(m2), 0];
                      if (!c(a10, Ni))
                        return [0, b(10594), 0];
                      if (!c(a10, Nj))
                        return [0, b(314), 0];
                      if (!c(a10, Nk))
                        return [0, b(10676), 0];
                      if (!c(a10, Nl))
                        return [0, b(fZ), 0];
                      if (!c(a10, Nm))
                        return [0, b(955), 0];
                    } else {
                      if (!c(a10, Nn))
                        return [0, b(1093), 0];
                      if (!c(a10, No))
                        return [0, b(1116), 0];
                      if (!c(a10, Np))
                        return [0, b(120156), 0];
                      if (!c(a10, Nq))
                        return [0, b(12e4), 0];
                      if (!c(a10, Nr))
                        return [0, b(kM), 0];
                      if (!c(a10, Ns))
                        return [0, b(gV), 0];
                      if (!c(a10, Nt))
                        return [0, b(10523), 0];
                    }
                  } else {
                    var bj2 = e(a10, Nu);
                    if (0 <= bj2) {
                      if (!(0 < bj2))
                        return [0, b(119999), 0];
                      if (!c(a10, Nv))
                        return [0, b(1112), 0];
                      if (!c(a10, Nw))
                        return [0, b(1108), 0];
                      if (!c(a10, Nx))
                        return [0, b(954), 0];
                      if (!c(a10, Ny))
                        return [0, b(qd), 0];
                      if (!c(a10, Nz))
                        return [0, b(311), 0];
                      if (!c(a10, NA))
                        return [0, b(1082), 0];
                      if (!c(a10, NB))
                        return [0, b(120104), 0];
                    } else {
                      if (!c(a10, NC))
                        return [0, b(297), 0];
                      if (!c(a10, ND))
                        return [0, b(1110), 0];
                      if (!c(a10, NE))
                        return [0, b(239), 0];
                      if (!c(a10, NF))
                        return [0, b(309), 0];
                      if (!c(a10, NG))
                        return [0, b(1081), 0];
                      if (!c(a10, NH))
                        return [0, b(120103), 0];
                      if (!c(a10, NI))
                        return [0, b(567), 0];
                      if (!c(a10, NJ))
                        return [0, b(120155), 0];
                    }
                  }
                } else {
                  var bk2 = e(a10, NK);
                  if (0 <= bk2) {
                    if (!(0 < bk2))
                      return [0, b(oh), 0];
                    var bl2 = e(a10, NL);
                    if (0 <= bl2) {
                      if (!(0 < bl2))
                        return [0, b(191), 0];
                      if (!c(a10, NM))
                        return [0, b(119998), 0];
                      if (!c(a10, NN))
                        return [0, b(dZ), 0];
                      if (!c(a10, NO))
                        return [0, b(kL), 0];
                      if (!c(a10, NP))
                        return [0, b(me), 0];
                      if (!c(a10, NQ))
                        return [0, b(8948), 0];
                      if (!c(a10, NR))
                        return [0, b(8947), 0];
                      if (!c(a10, NS))
                        return [0, b(dZ), 0];
                    } else {
                      if (!c(a10, NT))
                        return [0, b(10775), 0];
                      if (!c(a10, NU))
                        return [0, b(lL), 0];
                      if (!c(a10, NV))
                        return [0, b(1105), 0];
                      if (!c(a10, NW))
                        return [0, b(303), 0];
                      if (!c(a10, NX))
                        return [0, b(120154), 0];
                      if (!c(a10, NY))
                        return [0, b(953), 0];
                      if (!c(a10, NZ))
                        return [0, b(lL), 0];
                    }
                  } else {
                    var bm2 = e(a10, N0);
                    if (0 <= bm2) {
                      if (!(0 < bm2))
                        return [0, b(dZ), 0];
                      if (!c(a10, N1))
                        return [0, b(8453), 0];
                      if (!c(a10, N2))
                        return [0, b(8734), 0];
                      if (!c(a10, N3))
                        return [0, b(10717), 0];
                      if (!c(a10, N4))
                        return [0, b(nh), 0];
                      if (!c(a10, N5))
                        return [0, b(mM), 0];
                      if (!c(a10, N6))
                        return [0, b(oh), 0];
                      if (!c(a10, N7))
                        return [0, b(mW), 0];
                    } else {
                      if (!c(a10, N8))
                        return [0, b(307), 0];
                      if (!c(a10, N9))
                        return [0, b(299), 0];
                      if (!c(a10, N_))
                        return [0, b(d5), 0];
                      if (!c(a10, N$))
                        return [0, b(nz), 0];
                      if (!c(a10, Oa))
                        return [0, b(d5), 0];
                      if (!c(a10, Ob))
                        return [0, b(nh), 0];
                      if (!c(a10, Oc))
                        return [0, b(8887), 0];
                      if (!c(a10, Od))
                        return [0, b(437), 0];
                    }
                  }
                }
              } else {
                var bn2 = e(a10, Oe);
                if (0 <= bn2) {
                  if (!(0 < bn2))
                    return [0, b(d0), 0];
                  var bo2 = e(a10, Of);
                  if (0 <= bo2) {
                    if (!(0 < bo2))
                      return [0, b(295), 0];
                    var bp2 = e(a10, Og);
                    if (0 <= bp2) {
                      if (!(0 < bp2))
                        return [0, b(161), 0];
                      if (!c(a10, Oh))
                        return [0, b(d4), 0];
                      if (!c(a10, Oi))
                        return [0, b(120102), 0];
                      if (!c(a10, Oj))
                        return [0, b(236), 0];
                      if (!c(a10, Ok))
                        return [0, b(mJ), 0];
                      if (!c(a10, Ol))
                        return [0, b(lh), 0];
                      if (!c(a10, Om))
                        return [0, b(kW), 0];
                      if (!c(a10, On))
                        return [0, b(10716), 0];
                    } else {
                      if (!c(a10, Oo))
                        return [0, b(8259), 0];
                      if (!c(a10, Op))
                        return [0, b(pA), 0];
                      if (!c(a10, Oq))
                        return [0, b(237), 0];
                      if (!c(a10, Or))
                        return [0, b(ll), 0];
                      if (!c(a10, Os))
                        return [0, b(238), 0];
                      if (!c(a10, Ot))
                        return [0, b(1080), 0];
                      if (!c(a10, Ou))
                        return [0, b(1077), 0];
                    }
                  } else {
                    var bq2 = e(a10, Ov);
                    if (0 <= bq2) {
                      if (!(0 < bq2))
                        return [0, b(8703), 0];
                      if (!c(a10, Ow))
                        return [0, b(8763), 0];
                      if (!c(a10, Ox))
                        return [0, b(mi), 0];
                      if (!c(a10, Oy))
                        return [0, b(od), 0];
                      if (!c(a10, Oz))
                        return [0, b(120153), 0];
                      if (!c(a10, OA))
                        return [0, b(8213), 0];
                      if (!c(a10, OB))
                        return [0, b(119997), 0];
                      if (!c(a10, OC))
                        return [0, b(d0), 0];
                    } else {
                      if (!c(a10, OD))
                        return [0, b(293), 0];
                      if (!c(a10, OE))
                        return [0, b(of), 0];
                      if (!c(a10, OF))
                        return [0, b(of), 0];
                      if (!c(a10, OG))
                        return [0, b(oE), 0];
                      if (!c(a10, OH))
                        return [0, b(8889), 0];
                      if (!c(a10, OI))
                        return [0, b(120101), 0];
                      if (!c(a10, OJ))
                        return [0, b(oe), 0];
                      if (!c(a10, OK))
                        return [0, b(mR), 0];
                    }
                  }
                } else {
                  var br2 = e(a10, OL);
                  if (0 <= br2) {
                    if (!(0 < br2))
                      return [0, b(my), 0];
                    var bs2 = e(a10, OM);
                    if (0 <= bs2) {
                      if (!(0 < bs2))
                        return [0, b(d4), 0];
                      if (!c(a10, ON))
                        return [0, b(gS), 0];
                      if (!c(a10, OO))
                        return [0, b(pN), 0];
                      if (!c(a10, OP))
                        return [0, b(gB), 0];
                      if (!c(a10, OQ))
                        return [0, b(1098), 0];
                      if (!c(a10, OR))
                        return [0, b(gq), 0];
                      if (!c(a10, OS))
                        return [0, b(10568), 0];
                      if (!c(a10, OT))
                        return [0, b(o3), 0];
                    } else {
                      if (!c(a10, OU))
                        return [0, b(10616), 0];
                      if (!c(a10, OV))
                        return [0, b(l6), 0];
                      if (!c(a10, OW))
                        return [0, b(ez), 0];
                      if (!c(a10, OX))
                        return [0, b(kU), 0];
                      if (!c(a10, OY))
                        return [0, b(hI), 0];
                      if (!c(a10, OZ))
                        return [0, b(gN), 0];
                      if (!c(a10, O0)) {
                        var fs2 = [0, b(aa), 0];
                        return [0, b(dX), fs2];
                      }
                      if (!c(a10, O1)) {
                        var fr2 = [0, b(aa), 0];
                        return [0, b(dX), fr2];
                      }
                    }
                  } else {
                    var bt2 = e(a10, O2);
                    if (0 <= bt2) {
                      if (!(0 < bt2))
                        return [0, b(10894), 0];
                      if (!c(a10, O3))
                        return [0, b(10896), 0];
                      if (!c(a10, O4))
                        return [0, b(62), 0];
                      if (!c(a10, O5))
                        return [0, b(10919), 0];
                      if (!c(a10, O6))
                        return [0, b(10874), 0];
                      if (!c(a10, O7))
                        return [0, b(l6), 0];
                      if (!c(a10, O8))
                        return [0, b(10645), 0];
                      if (!c(a10, O9))
                        return [0, b(10876), 0];
                    } else {
                      if (!c(a10, O_))
                        return [0, b(qf), 0];
                      if (!c(a10, O$))
                        return [0, b(qf), 0];
                      if (!c(a10, Pa))
                        return [0, b(dX), 0];
                      if (!c(a10, Pb))
                        return [0, b(8935), 0];
                      if (!c(a10, Pc))
                        return [0, b(120152), 0];
                      if (!c(a10, Pd))
                        return [0, b(96), 0];
                      if (!c(a10, Pe))
                        return [0, b(8458), 0];
                      if (!c(a10, Pf))
                        return [0, b(gN), 0];
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        var bu2 = e(a10, Pg);
        if (0 <= bu2) {
          if (!(0 < bu2))
            return [0, b(f1), 0];
          var bv2 = e(a10, Ph);
          if (0 <= bv2) {
            if (!(0 < bv2))
              return [0, b(oa), 0];
            var bw2 = e(a10, Pi);
            if (0 <= bw2) {
              if (!(0 < bw2))
                return [0, b(10239), 0];
              var bx2 = e(a10, Pj);
              if (0 <= bx2) {
                if (!(0 < bx2))
                  return [0, b(64259), 0];
                var by2 = e(a10, Pk);
                if (0 <= by2) {
                  if (!(0 < by2))
                    return [0, b(b_), 0];
                  var bz2 = e(a10, Pl);
                  if (0 <= bz2) {
                    if (!(0 < bz2))
                      return [0, b(10880), 0];
                    var bA2 = e(a10, Pm);
                    if (0 <= bA2) {
                      if (!(0 < bA2))
                        return [0, b(8503), 0];
                      if (!c(a10, Pn))
                        return [0, b(1107), 0];
                      if (!c(a10, Po))
                        return [0, b(hI), 0];
                      if (!c(a10, Pp))
                        return [0, b(10898), 0];
                      if (!c(a10, Pq))
                        return [0, b(10917), 0];
                      if (!c(a10, Pr))
                        return [0, b(10916), 0];
                      if (!c(a10, Ps))
                        return [0, b(dX), 0];
                      if (!c(a10, Pt))
                        return [0, b(lA), 0];
                    } else {
                      if (!c(a10, Pu))
                        return [0, b(10882), 0];
                      if (!c(a10, Pv))
                        return [0, b(10884), 0];
                      if (!c(a10, Pw)) {
                        var ft2 = [0, b(aa), 0];
                        return [0, b(ez), ft2];
                      }
                      if (!c(a10, Px))
                        return [0, b(10900), 0];
                      if (!c(a10, Py))
                        return [0, b(120100), 0];
                      if (!c(a10, Pz))
                        return [0, b(ce), 0];
                      if (!c(a10, PA))
                        return [0, b(gp), 0];
                    }
                  } else {
                    var bB2 = e(a10, PB);
                    if (0 <= bB2) {
                      if (!(0 < bB2))
                        return [0, b(289), 0];
                      if (!c(a10, PC))
                        return [0, b(eg), 0];
                      if (!c(a10, PD))
                        return [0, b(ez), 0];
                      if (!c(a10, PE))
                        return [0, b(eg), 0];
                      if (!c(a10, PF))
                        return [0, b(b_), 0];
                      if (!c(a10, PG))
                        return [0, b(b6), 0];
                      if (!c(a10, PH))
                        return [0, b(b6), 0];
                      if (!c(a10, PI))
                        return [0, b(10921), 0];
                    } else {
                      if (!c(a10, PJ))
                        return [0, b(kU), 0];
                      if (!c(a10, PK))
                        return [0, b(501), 0];
                      if (!c(a10, PL))
                        return [0, b(947), 0];
                      if (!c(a10, PM))
                        return [0, b(qt), 0];
                      if (!c(a10, PN))
                        return [0, b(my), 0];
                      if (!c(a10, PO))
                        return [0, b(287), 0];
                      if (!c(a10, PP))
                        return [0, b(285), 0];
                      if (!c(a10, PQ))
                        return [0, b(1075), 0];
                    }
                  }
                } else {
                  var bC2 = e(a10, PR);
                  if (0 <= bC2) {
                    if (!(0 < bC2))
                      return [0, b(188), 0];
                    var bE2 = e(a10, PS);
                    if (0 <= bE2) {
                      if (!(0 < bE2))
                        return [0, b(8540), 0];
                      if (!c(a10, PT))
                        return [0, b(8536), 0];
                      if (!c(a10, PU))
                        return [0, b(8538), 0];
                      if (!c(a10, PV))
                        return [0, b(8541), 0];
                      if (!c(a10, PW))
                        return [0, b(8542), 0];
                      if (!c(a10, PX))
                        return [0, b(8260), 0];
                      if (!c(a10, PY))
                        return [0, b(lw), 0];
                      if (!c(a10, PZ))
                        return [0, b(119995), 0];
                    } else {
                      if (!c(a10, P0))
                        return [0, b(8533), 0];
                      if (!c(a10, P1))
                        return [0, b(8537), 0];
                      if (!c(a10, P2))
                        return [0, b(8539), 0];
                      if (!c(a10, P3))
                        return [0, b(8532), 0];
                      if (!c(a10, P4))
                        return [0, b(8534), 0];
                      if (!c(a10, P5))
                        return [0, b(190), 0];
                      if (!c(a10, P6))
                        return [0, b(8535), 0];
                    }
                  } else {
                    var bF2 = e(a10, P7);
                    if (0 <= bF2) {
                      if (!(0 < bF2))
                        return [0, b(402), 0];
                      if (!c(a10, P8))
                        return [0, b(120151), 0];
                      if (!c(a10, P9))
                        return [0, b(nR), 0];
                      if (!c(a10, P_))
                        return [0, b(lq), 0];
                      if (!c(a10, P$))
                        return [0, b(10969), 0];
                      if (!c(a10, Qa))
                        return [0, b(10765), 0];
                      if (!c(a10, Qb))
                        return [0, b(pN), 0];
                      if (!c(a10, Qc))
                        return [0, b(8531), 0];
                    } else {
                      if (!c(a10, Qd))
                        return [0, b(64256), 0];
                      if (!c(a10, Qe))
                        return [0, b(64260), 0];
                      if (!c(a10, Qf))
                        return [0, b(120099), 0];
                      if (!c(a10, Qg))
                        return [0, b(64257), 0];
                      if (!c(a10, Qh)) {
                        var fu2 = [0, b(106), 0];
                        return [0, b(mk), fu2];
                      }
                      if (!c(a10, Qi))
                        return [0, b(9837), 0];
                      if (!c(a10, Qj))
                        return [0, b(64258), 0];
                      if (!c(a10, Qk))
                        return [0, b(9649), 0];
                    }
                  }
                }
              } else {
                var bG2 = e(a10, Ql);
                if (0 <= bG2) {
                  if (!(0 < bG2))
                    return [0, b(120150), 0];
                  var bH2 = e(a10, Qm);
                  if (0 <= bH2) {
                    if (!(0 < bH2))
                      return [0, b(qn), 0];
                    var bI2 = e(a10, Qn);
                    if (0 <= bI2) {
                      if (!(0 < bI2))
                        return [0, b(8364), 0];
                      if (!c(a10, Qo))
                        return [0, b(33), 0];
                      if (!c(a10, Qp))
                        return [0, b(qi), 0];
                      if (!c(a10, Qq))
                        return [0, b(p$), 0];
                      if (!c(a10, Qr))
                        return [0, b(fX), 0];
                      if (!c(a10, Qs))
                        return [0, b(ml), 0];
                      if (!c(a10, Qt))
                        return [0, b(1092), 0];
                      if (!c(a10, Qu))
                        return [0, b(9792), 0];
                    } else {
                      if (!c(a10, Qv))
                        return [0, b(10609), 0];
                      if (!c(a10, Qw))
                        return [0, b(8495), 0];
                      if (!c(a10, Qx))
                        return [0, b(d3), 0];
                      if (!c(a10, Qy))
                        return [0, b(cO), 0];
                      if (!c(a10, Qz))
                        return [0, b(951), 0];
                      if (!c(a10, QA))
                        return [0, b(nF), 0];
                      if (!c(a10, QB))
                        return [0, b(235), 0];
                    }
                  } else {
                    var bJ2 = e(a10, QC);
                    if (0 <= bJ2) {
                      if (!(0 < bJ2))
                        return [0, b(cO), 0];
                      if (!c(a10, QD))
                        return [0, b(pH), 0];
                      if (!c(a10, QE))
                        return [0, b(n$), 0];
                      if (!c(a10, QF))
                        return [0, b(61), 0];
                      if (!c(a10, QG))
                        return [0, b(l3), 0];
                      if (!c(a10, QH))
                        return [0, b(gy), 0];
                      if (!c(a10, QI))
                        return [0, b(10872), 0];
                      if (!c(a10, QJ))
                        return [0, b(10725), 0];
                    } else {
                      if (!c(a10, QK))
                        return [0, b(8917), 0];
                      if (!c(a10, QL))
                        return [0, b(10723), 0];
                      if (!c(a10, QM))
                        return [0, b(10865), 0];
                      if (!c(a10, QN))
                        return [0, b(lr), 0];
                      if (!c(a10, QO))
                        return [0, b(lr), 0];
                      if (!c(a10, QP))
                        return [0, b(gc), 0];
                      if (!c(a10, QQ))
                        return [0, b(p7), 0];
                      if (!c(a10, QR))
                        return [0, b(lS), 0];
                    }
                  }
                } else {
                  var bK2 = e(a10, QS);
                  if (0 <= bK2) {
                    if (!(0 < bK2))
                      return [0, b(10904), 0];
                    var bL2 = e(a10, QT);
                    if (0 <= bL2) {
                      if (!(0 < bL2))
                        return [0, b(eo), 0];
                      if (!c(a10, QU))
                        return [0, b(eo), 0];
                      if (!c(a10, QV))
                        return [0, b(8195), 0];
                      if (!c(a10, QW))
                        return [0, b(8196), 0];
                      if (!c(a10, QX))
                        return [0, b(8197), 0];
                      if (!c(a10, QY))
                        return [0, b(331), 0];
                      if (!c(a10, QZ))
                        return [0, b(8194), 0];
                      if (!c(a10, Q0))
                        return [0, b(281), 0];
                    } else {
                      if (!c(a10, Q1))
                        return [0, b(10905), 0];
                      if (!c(a10, Q2))
                        return [0, b(9191), 0];
                      if (!c(a10, Q3))
                        return [0, b(8467), 0];
                      if (!c(a10, Q4))
                        return [0, b(n$), 0];
                      if (!c(a10, Q5))
                        return [0, b(10903), 0];
                      if (!c(a10, Q6))
                        return [0, b(275), 0];
                      if (!c(a10, Q7))
                        return [0, b(eo), 0];
                    }
                  } else {
                    var bM2 = e(a10, Q8);
                    if (0 <= bM2) {
                      if (!(0 < bM2))
                        return [0, b(1101), 0];
                      if (!c(a10, Q9))
                        return [0, b(279), 0];
                      if (!c(a10, Q_))
                        return [0, b(fX), 0];
                      if (!c(a10, Q$))
                        return [0, b(ml), 0];
                      if (!c(a10, Ra))
                        return [0, b(120098), 0];
                      if (!c(a10, Rb))
                        return [0, b(10906), 0];
                      if (!c(a10, Rc))
                        return [0, b(md), 0];
                      if (!c(a10, Rd))
                        return [0, b(pH), 0];
                    } else {
                      if (!c(a10, Re))
                        return [0, b(o6), 0];
                      if (!c(a10, Rf))
                        return [0, b(oT), 0];
                      if (!c(a10, Rg))
                        return [0, b(233), 0];
                      if (!c(a10, Rh))
                        return [0, b(10862), 0];
                      if (!c(a10, Ri))
                        return [0, b(283), 0];
                      if (!c(a10, Rj))
                        return [0, b(p7), 0];
                      if (!c(a10, Rk))
                        return [0, b(234), 0];
                      if (!c(a10, Rl))
                        return [0, b(lS), 0];
                    }
                  }
                }
              }
            } else {
              var bN2 = e(a10, Rm);
              if (0 <= bN2) {
                if (!(0 < bN2))
                  return [0, b(kG), 0];
                var bO2 = e(a10, Rn);
                if (0 <= bO2) {
                  if (!(0 < bO2))
                    return [0, b(hu), 0];
                  var bP2 = e(a10, Ro);
                  if (0 <= bP2) {
                    if (!(0 < bP2))
                      return [0, b(gl), 0];
                    var bQ2 = e(a10, Rp);
                    if (0 <= bQ2) {
                      if (!(0 < bQ2))
                        return [0, b(273), 0];
                      if (!c(a10, Rq))
                        return [0, b(8945), 0];
                      if (!c(a10, Rr))
                        return [0, b(lb), 0];
                      if (!c(a10, Rs))
                        return [0, b(os), 0];
                      if (!c(a10, Rt))
                        return [0, b(o$), 0];
                      if (!c(a10, Ru))
                        return [0, b(mT), 0];
                      if (!c(a10, Rv))
                        return [0, b(10662), 0];
                      if (!c(a10, Rw))
                        return [0, b(1119), 0];
                    } else {
                      if (!c(a10, Rx))
                        return [0, b(gJ), 0];
                      if (!c(a10, Ry))
                        return [0, b(p1), 0];
                      if (!c(a10, Rz))
                        return [0, b(p9), 0];
                      if (!c(a10, RA))
                        return [0, b(8972), 0];
                      if (!c(a10, RB))
                        return [0, b(119993), 0];
                      if (!c(a10, RC))
                        return [0, b(1109), 0];
                      if (!c(a10, RD))
                        return [0, b(10742), 0];
                    }
                  } else {
                    var bR2 = e(a10, RE);
                    if (0 <= bR2) {
                      if (!(0 < bR2))
                        return [0, b(d3), 0];
                      if (!c(a10, RF))
                        return [0, b(oT), 0];
                      if (!c(a10, RG))
                        return [0, b(le), 0];
                      if (!c(a10, RH))
                        return [0, b(nj), 0];
                      if (!c(a10, RI))
                        return [0, b(nN), 0];
                      if (!c(a10, RJ))
                        return [0, b(m5), 0];
                      if (!c(a10, RK))
                        return [0, b(ek), 0];
                      if (!c(a10, RL))
                        return [0, b(mt), 0];
                    } else {
                      if (!c(a10, RM))
                        return [0, b(oX), 0];
                      if (!c(a10, RN))
                        return [0, b(oX), 0];
                      if (!c(a10, RO))
                        return [0, b(1106), 0];
                      if (!c(a10, RP))
                        return [0, b(kK), 0];
                      if (!c(a10, RQ))
                        return [0, b(8973), 0];
                      if (!c(a10, RR))
                        return [0, b(36), 0];
                      if (!c(a10, RS))
                        return [0, b(120149), 0];
                      if (!c(a10, RT))
                        return [0, b(oQ), 0];
                    }
                  }
                } else {
                  var bS2 = e(a10, RU);
                  if (0 <= bS2) {
                    if (!(0 < bS2))
                      return [0, b(o6), 0];
                    var bT2 = e(a10, RV);
                    if (0 <= bT2) {
                      if (!(0 < bT2))
                        return [0, b(f3), 0];
                      if (!c(a10, RW))
                        return [0, b(f3), 0];
                      if (!c(a10, RX))
                        return [0, b(qs), 0];
                      if (!c(a10, RY))
                        return [0, b(qs), 0];
                      if (!c(a10, RZ))
                        return [0, b(eh), 0];
                      if (!c(a10, R0))
                        return [0, b(qt), 0];
                      if (!c(a10, R1))
                        return [0, b(8946), 0];
                      if (!c(a10, R2))
                        return [0, b(hu), 0];
                    } else {
                      if (!c(a10, R3))
                        return [0, b(176), 0];
                      if (!c(a10, R4))
                        return [0, b(948), 0];
                      if (!c(a10, R5))
                        return [0, b(10673), 0];
                      if (!c(a10, R6))
                        return [0, b(10623), 0];
                      if (!c(a10, R7))
                        return [0, b(120097), 0];
                      if (!c(a10, R8))
                        return [0, b(gl), 0];
                      if (!c(a10, R9))
                        return [0, b(gJ), 0];
                    }
                  } else {
                    var bU2 = e(a10, R_);
                    if (0 <= bU2) {
                      if (!(0 < bU2))
                        return [0, b(mA), 0];
                      if (!c(a10, R$))
                        return [0, b(pv), 0];
                      if (!c(a10, Sa))
                        return [0, b(no), 0];
                      if (!c(a10, Sb))
                        return [0, b(271), 0];
                      if (!c(a10, Sc))
                        return [0, b(1076), 0];
                      if (!c(a10, Sd))
                        return [0, b(pP), 0];
                      if (!c(a10, Se))
                        return [0, b(kO), 0];
                      if (!c(a10, Sf))
                        return [0, b(mt), 0];
                    } else {
                      if (!c(a10, Sg))
                        return [0, b(8753), 0];
                      if (!c(a10, Sh))
                        return [0, b(9005), 0];
                      if (!c(a10, Si))
                        return [0, b(g9), 0];
                      if (!c(a10, Sj))
                        return [0, b(10597), 0];
                      if (!c(a10, Sk))
                        return [0, b(8224), 0];
                      if (!c(a10, Sl))
                        return [0, b(8504), 0];
                      if (!c(a10, Sm))
                        return [0, b(ek), 0];
                      if (!c(a10, Sn))
                        return [0, b(pA), 0];
                    }
                  }
                }
              } else {
                var bV2 = e(a10, So);
                if (0 <= bV2) {
                  if (!(0 < bV2))
                    return [0, b(8471), 0];
                  var bW2 = e(a10, Sp);
                  if (0 <= bW2) {
                    if (!(0 < bW2))
                      return [0, b(10822), 0];
                    var bX2 = e(a10, Sq);
                    if (0 <= bX2) {
                      if (!(0 < bX2))
                        return [0, b(nb), 0];
                      if (!c(a10, Sr))
                        return [0, b(lC), 0];
                      if (!c(a10, Ss))
                        return [0, b(qv), 0];
                      if (!c(a10, St))
                        return [0, b(164), 0];
                      if (!c(a10, Su))
                        return [0, b(pF), 0];
                      if (!c(a10, Sv))
                        return [0, b(nQ), 0];
                      if (!c(a10, Sw))
                        return [0, b(lC), 0];
                      if (!c(a10, Sx))
                        return [0, b(qv), 0];
                    } else {
                      if (!c(a10, Sy))
                        return [0, b(10826), 0];
                      if (!c(a10, Sz))
                        return [0, b(8845), 0];
                      if (!c(a10, SA))
                        return [0, b(10821), 0];
                      if (!c(a10, SB)) {
                        var fv2 = [0, b(aa), 0];
                        return [0, b(nB), fv2];
                      }
                      if (!c(a10, SC))
                        return [0, b(nQ), 0];
                      if (!c(a10, SD))
                        return [0, b(10556), 0];
                      if (!c(a10, SE))
                        return [0, b(n_), 0];
                    }
                  } else {
                    var bY2 = e(a10, SF);
                    if (0 <= bY2) {
                      if (!(0 < bY2))
                        return [0, b(10552), 0];
                      if (!c(a10, SG))
                        return [0, b(10549), 0];
                      if (!c(a10, SH))
                        return [0, b(n_), 0];
                      if (!c(a10, SI))
                        return [0, b(nb), 0];
                      if (!c(a10, SJ))
                        return [0, b(pF), 0];
                      if (!c(a10, SK))
                        return [0, b(10557), 0];
                      if (!c(a10, SL))
                        return [0, b(nB), 0];
                      if (!c(a10, SM))
                        return [0, b(10824), 0];
                    } else {
                      if (!c(a10, SN))
                        return [0, b(8629), 0];
                      if (!c(a10, SO))
                        return [0, b(10007), 0];
                      if (!c(a10, SP))
                        return [0, b(119992), 0];
                      if (!c(a10, SQ))
                        return [0, b(10959), 0];
                      if (!c(a10, SR))
                        return [0, b(10961), 0];
                      if (!c(a10, SS))
                        return [0, b(10960), 0];
                      if (!c(a10, ST))
                        return [0, b(10962), 0];
                      if (!c(a10, SU))
                        return [0, b(8943), 0];
                    }
                  }
                } else {
                  var bZ2 = e(a10, SV);
                  if (0 <= bZ2) {
                    if (!(0 < bZ2))
                      return [0, b(p5), 0];
                    var b02 = e(a10, SW);
                    if (0 <= b02) {
                      if (!(0 < b02))
                        return [0, b(nJ), 0];
                      if (!c(a10, SX))
                        return [0, b(pI), 0];
                      if (!c(a10, SY))
                        return [0, b(na), 0];
                      if (!c(a10, SZ))
                        return [0, b(mx), 0];
                      if (!c(a10, S0))
                        return [0, b(gL), 0];
                      if (!c(a10, S1))
                        return [0, b(120148), 0];
                      if (!c(a10, S2))
                        return [0, b(k3), 0];
                      if (!c(a10, S3))
                        return [0, b(n6), 0];
                    } else {
                      if (!c(a10, S4))
                        return [0, b(p5), 0];
                      if (!c(a10, S5))
                        return [0, b(58), 0];
                      if (!c(a10, S6))
                        return [0, b(gz), 0];
                      if (!c(a10, S7))
                        return [0, b(gz), 0];
                      if (!c(a10, S8))
                        return [0, b(44), 0];
                      if (!c(a10, S9))
                        return [0, b(64), 0];
                      if (!c(a10, S_))
                        return [0, b(nJ), 0];
                      if (!c(a10, S$))
                        return [0, b(kC), 0];
                    }
                  } else {
                    var b12 = e(a10, Ta);
                    if (0 <= b12) {
                      if (!(0 < b12))
                        return [0, b(mP), 0];
                      if (!c(a10, Tb))
                        return [0, b(pj), 0];
                      if (!c(a10, Tc))
                        return [0, b(mB), 0];
                      if (!c(a10, Td))
                        return [0, b(k1), 0];
                      if (!c(a10, Te))
                        return [0, b(ly), 0];
                      if (!c(a10, Tf))
                        return [0, b(10768), 0];
                      if (!c(a10, Tg))
                        return [0, b(10991), 0];
                      if (!c(a10, Th))
                        return [0, b(10690), 0];
                    } else {
                      if (!c(a10, Ti))
                        return [0, b(967), 0];
                      if (!c(a10, Tj))
                        return [0, b(9675), 0];
                      if (!c(a10, Tk))
                        return [0, b(10691), 0];
                      if (!c(a10, Tl))
                        return [0, b(710), 0];
                      if (!c(a10, Tm))
                        return [0, b(ly), 0];
                      if (!c(a10, Tn))
                        return [0, b(oO), 0];
                      if (!c(a10, To))
                        return [0, b(ng), 0];
                      if (!c(a10, Tp))
                        return [0, b(hz), 0];
                    }
                  }
                }
              }
            }
          } else {
            var b22 = e(a10, Tq);
            if (0 <= b22) {
              if (!(0 < b22))
                return [0, b(8893), 0];
              var b32 = e(a10, Tr);
              if (0 <= b32) {
                if (!(0 < b32))
                  return [0, b(9570), 0];
                var b42 = e(a10, Ts);
                if (0 <= b42) {
                  if (!(0 < b42))
                    return [0, b(92), 0];
                  var b52 = e(a10, Tt);
                  if (0 <= b52) {
                    if (!(0 < b52))
                      return [0, b(8257), 0];
                    var b$2 = e(a10, Tu);
                    if (0 <= b$2) {
                      if (!(0 < b$2))
                        return [0, b(267), 0];
                      if (!c(a10, Tv))
                        return [0, b(p6), 0];
                      if (!c(a10, Tw))
                        return [0, b(10674), 0];
                      if (!c(a10, Tx))
                        return [0, b(162), 0];
                      if (!c(a10, Ty))
                        return [0, b(gu), 0];
                      if (!c(a10, Tz))
                        return [0, b(120096), 0];
                      if (!c(a10, TA))
                        return [0, b(1095), 0];
                      if (!c(a10, TB))
                        return [0, b(oa), 0];
                    } else {
                      if (!c(a10, TC))
                        return [0, b(po), 0];
                      if (!c(a10, TD))
                        return [0, b(10829), 0];
                      if (!c(a10, TE))
                        return [0, b(269), 0];
                      if (!c(a10, TF))
                        return [0, b(231), 0];
                      if (!c(a10, TG))
                        return [0, b(265), 0];
                      if (!c(a10, TH))
                        return [0, b(10828), 0];
                      if (!c(a10, TI))
                        return [0, b(10832), 0];
                    }
                  } else {
                    var cc2 = e(a10, TJ);
                    if (0 <= cc2) {
                      if (!(0 < cc2))
                        return [0, b(263), 0];
                      if (!c(a10, TK))
                        return [0, b(l_), 0];
                      if (!c(a10, TL))
                        return [0, b(10820), 0];
                      if (!c(a10, TM))
                        return [0, b(10825), 0];
                      if (!c(a10, TN))
                        return [0, b(10827), 0];
                      if (!c(a10, TO))
                        return [0, b(10823), 0];
                      if (!c(a10, TP))
                        return [0, b(10816), 0];
                      if (!c(a10, TQ)) {
                        var fw2 = [0, b(aa), 0];
                        return [0, b(l_), fw2];
                      }
                    } else {
                      if (!c(a10, TR))
                        return [0, b(10693), 0];
                      if (!c(a10, TS))
                        return [0, b(10184), 0];
                      if (!c(a10, TT))
                        return [0, b(mY), 0];
                      if (!c(a10, TU))
                        return [0, b(mY), 0];
                      if (!c(a10, TV))
                        return [0, b(cN), 0];
                      if (!c(a10, TW))
                        return [0, b(10926), 0];
                      if (!c(a10, TX) || !c(a10, TY))
                        return [0, b(ec), 0];
                    }
                  }
                } else {
                  var cd2 = e(a10, TZ);
                  if (0 <= cd2) {
                    if (!(0 < cd2))
                      return [0, b(9496), 0];
                    var ch2 = e(a10, T0);
                    if (0 <= ch2) {
                      if (!(0 < ch2))
                        return [0, b(9500), 0];
                      if (!c(a10, T1))
                        return [0, b(mf), 0];
                      if (!c(a10, T2))
                        return [0, b(nP), 0];
                      if (!c(a10, T3))
                        return [0, b(166), 0];
                      if (!c(a10, T4))
                        return [0, b(119991), 0];
                      if (!c(a10, T5))
                        return [0, b(8271), 0];
                      if (!c(a10, T6))
                        return [0, b(hv), 0];
                      if (!c(a10, T7))
                        return [0, b(lU), 0];
                    } else {
                      if (!c(a10, T8))
                        return [0, b(9492), 0];
                      if (!c(a10, T9))
                        return [0, b(9474), 0];
                      if (!c(a10, T_))
                        return [0, b(9578), 0];
                      if (!c(a10, T$))
                        return [0, b(9569), 0];
                      if (!c(a10, Ua))
                        return [0, b(9566), 0];
                      if (!c(a10, Ub))
                        return [0, b(9532), 0];
                      if (!c(a10, Uc))
                        return [0, b(9508), 0];
                    }
                  } else {
                    var ci2 = e(a10, Ud);
                    if (0 <= ci2) {
                      if (!(0 < ci2))
                        return [0, b(9576), 0];
                      if (!c(a10, Ue))
                        return [0, b(9516), 0];
                      if (!c(a10, Uf))
                        return [0, b(9524), 0];
                      if (!c(a10, Ug))
                        return [0, b(ps), 0];
                      if (!c(a10, Uh))
                        return [0, b(o4), 0];
                      if (!c(a10, Ui))
                        return [0, b(nV), 0];
                      if (!c(a10, Uj))
                        return [0, b(9563), 0];
                      if (!c(a10, Uk))
                        return [0, b(9560), 0];
                    } else {
                      if (!c(a10, Ul))
                        return [0, b(9567), 0];
                      if (!c(a10, Um))
                        return [0, b(10697), 0];
                      if (!c(a10, Un))
                        return [0, b(9557), 0];
                      if (!c(a10, Uo))
                        return [0, b(9554), 0];
                      if (!c(a10, Up))
                        return [0, b(9488), 0];
                      if (!c(a10, Uq))
                        return [0, b(9484), 0];
                      if (!c(a10, Ur))
                        return [0, b(lx), 0];
                      if (!c(a10, Us))
                        return [0, b(9573), 0];
                    }
                  }
                }
              } else {
                var cj2 = e(a10, Ut);
                if (0 <= cj2) {
                  if (!(0 < cj2))
                    return [0, b(os), 0];
                  var ck2 = e(a10, Uu);
                  if (0 <= ck2) {
                    if (!(0 < ck2))
                      return [0, b(9558), 0];
                    var cl2 = e(a10, Uv);
                    if (0 <= cl2) {
                      if (!(0 < cl2))
                        return [0, b(9562), 0];
                      if (!c(a10, Uw))
                        return [0, b(9564), 0];
                      if (!c(a10, Ux))
                        return [0, b(9561), 0];
                      if (!c(a10, Uy))
                        return [0, b(9553), 0];
                      if (!c(a10, Uz))
                        return [0, b(9580), 0];
                      if (!c(a10, UA))
                        return [0, b(9571), 0];
                      if (!c(a10, UB))
                        return [0, b(9568), 0];
                      if (!c(a10, UC))
                        return [0, b(9579), 0];
                    } else {
                      if (!c(a10, UD))
                        return [0, b(9555), 0];
                      if (!c(a10, UE))
                        return [0, b(9552), 0];
                      if (!c(a10, UF))
                        return [0, b(9574), 0];
                      if (!c(a10, UG))
                        return [0, b(9577), 0];
                      if (!c(a10, UH))
                        return [0, b(9572), 0];
                      if (!c(a10, UI))
                        return [0, b(9575), 0];
                      if (!c(a10, UJ))
                        return [0, b(9565), 0];
                    }
                  } else {
                    var cm2 = e(a10, UK);
                    if (0 <= cm2) {
                      if (!(0 < cm2)) {
                        var fx2 = [0, b(gD), 0];
                        return [0, b(gy), fx2];
                      }
                      if (!c(a10, UL))
                        return [0, b(8976), 0];
                      if (!c(a10, UM))
                        return [0, b(120147), 0];
                      if (!c(a10, UN))
                        return [0, b(ef), 0];
                      if (!c(a10, UO))
                        return [0, b(ef), 0];
                      if (!c(a10, UP))
                        return [0, b(8904), 0];
                      if (!c(a10, UQ))
                        return [0, b(9559), 0];
                      if (!c(a10, UR))
                        return [0, b(9556), 0];
                    } else {
                      if (!c(a10, US))
                        return [0, b(ld), 0];
                      if (!c(a10, UT))
                        return [0, b(pr), 0];
                      if (!c(a10, UU))
                        return [0, b(9251), 0];
                      if (!c(a10, UV))
                        return [0, b(9618), 0];
                      if (!c(a10, UW))
                        return [0, b(9617), 0];
                      if (!c(a10, UX))
                        return [0, b(9619), 0];
                      if (!c(a10, UY))
                        return [0, b(9608), 0];
                      if (!c(a10, UZ)) {
                        var fy2 = [0, b(gD), 0];
                        return [0, b(61), fy2];
                      }
                    }
                  }
                } else {
                  var cn2 = e(a10, U0);
                  if (0 <= cn2) {
                    if (!(0 < cn2))
                      return [0, b(g1), 0];
                    var co2 = e(a10, U1);
                    if (0 <= co2) {
                      if (!(0 < co2))
                        return [0, b(k7), 0];
                      if (!c(a10, U2))
                        return [0, b(n8), 0];
                      if (!c(a10, U3))
                        return [0, b(g$), 0];
                      if (!c(a10, U4))
                        return [0, b(hf), 0];
                      if (!c(a10, U5))
                        return [0, b(mc), 0];
                      if (!c(a10, U6))
                        return [0, b(n2), 0];
                      if (!c(a10, U7))
                        return [0, b(ey), 0];
                      if (!c(a10, U8))
                        return [0, b(oG), 0];
                    } else {
                      if (!c(a10, U9))
                        return [0, b(m8), 0];
                      if (!c(a10, U_))
                        return [0, b(f1), 0];
                      if (!c(a10, U$))
                        return [0, b(qm), 0];
                      if (!c(a10, Va))
                        return [0, b(mK), 0];
                      if (!c(a10, Vb))
                        return [0, b(nX), 0];
                      if (!c(a10, Vc))
                        return [0, b(kS), 0];
                      if (!c(a10, Vd))
                        return [0, b(kV), 0];
                      if (!c(a10, Ve))
                        return [0, b(pq), 0];
                    }
                  } else {
                    var cp2 = e(a10, Vf);
                    if (0 <= cp2) {
                      if (!(0 < cp2))
                        return [0, b(hG), 0];
                      if (!c(a10, Vg))
                        return [0, b(10672), 0];
                      if (!c(a10, Vh))
                        return [0, b(mH), 0];
                      if (!c(a10, Vi))
                        return [0, b(gw), 0];
                      if (!c(a10, Vj))
                        return [0, b(946), 0];
                      if (!c(a10, Vk))
                        return [0, b(8502), 0];
                      if (!c(a10, Vl))
                        return [0, b(kB), 0];
                      if (!c(a10, Vm))
                        return [0, b(120095), 0];
                    } else {
                      if (!c(a10, Vn))
                        return [0, b(pO), 0];
                      if (!c(a10, Vo))
                        return [0, b(pO), 0];
                      if (!c(a10, Vp))
                        return [0, b(lZ), 0];
                      if (!c(a10, Vq))
                        return [0, b(9142), 0];
                      if (!c(a10, Vr))
                        return [0, b(l0), 0];
                      if (!c(a10, Vs))
                        return [0, b(1073), 0];
                      if (!c(a10, Vt))
                        return [0, b(pk), 0];
                      if (!c(a10, Vu))
                        return [0, b(hG), 0];
                    }
                  }
                }
              }
            } else {
              var cq2 = e(a10, Vv);
              if (0 <= cq2) {
                if (!(0 < cq2))
                  return [0, b(225), 0];
                var cr2 = e(a10, Vw);
                if (0 <= cr2) {
                  if (!(0 < cr2))
                    return [0, b(10670), 0];
                  var cs2 = e(a10, Vx);
                  if (0 <= cs2) {
                    if (!(0 < cs2))
                      return [0, b(oo), 0];
                    var ct2 = e(a10, Vy);
                    if (0 <= ct2) {
                      if (!(0 < ct2))
                        return [0, b(o9), 0];
                      if (!c(a10, Vz))
                        return [0, b(10769), 0];
                      if (!c(a10, VA))
                        return [0, b(10989), 0];
                      if (!c(a10, VB))
                        return [0, b(l0), 0];
                      if (!c(a10, VC))
                        return [0, b(mH), 0];
                      if (!c(a10, VD))
                        return [0, b(mf), 0];
                      if (!c(a10, VE))
                        return [0, b(hv), 0];
                      if (!c(a10, VF))
                        return [0, b(lU), 0];
                    } else {
                      if (!c(a10, VG))
                        return [0, b(229), 0];
                      if (!c(a10, VH))
                        return [0, b(119990), 0];
                      if (!c(a10, VI))
                        return [0, b(42), 0];
                      if (!c(a10, VJ))
                        return [0, b(ca), 0];
                      if (!c(a10, VK))
                        return [0, b(fT), 0];
                      if (!c(a10, VL))
                        return [0, b(227), 0];
                      if (!c(a10, VM))
                        return [0, b(228), 0];
                    }
                  } else {
                    var cu2 = e(a10, VN);
                    if (0 <= cu2) {
                      if (!(0 < cu2))
                        return [0, b(120146), 0];
                      if (!c(a10, VO))
                        return [0, b(ca), 0];
                      if (!c(a10, VP))
                        return [0, b(lk), 0];
                      if (!c(a10, VQ))
                        return [0, b(10863), 0];
                      if (!c(a10, VR))
                        return [0, b(oo), 0];
                      if (!c(a10, VS))
                        return [0, b(ny), 0];
                      if (!c(a10, VT))
                        return [0, b(39), 0];
                      if (!c(a10, VU))
                        return [0, b(ca), 0];
                    } else {
                      if (!c(a10, VV))
                        return [0, b(10671), 0];
                      if (!c(a10, VW))
                        return [0, b(8735), 0];
                      if (!c(a10, VX))
                        return [0, b(8894), 0];
                      if (!c(a10, VY))
                        return [0, b(10653), 0];
                      if (!c(a10, VZ))
                        return [0, b(8738), 0];
                      if (!c(a10, V0))
                        return [0, b(nK), 0];
                      if (!c(a10, V1))
                        return [0, b(9084), 0];
                      if (!c(a10, V2))
                        return [0, b(261), 0];
                    }
                  }
                } else {
                  var cv2 = e(a10, V3);
                  if (0 <= cv2) {
                    if (!(0 < cv2))
                      return [0, b(38), 0];
                    var cw2 = e(a10, V4);
                    if (0 <= cw2) {
                      if (!(0 < cw2))
                        return [0, b(gj), 0];
                      if (!c(a10, V5))
                        return [0, b(mF), 0];
                      if (!c(a10, V6))
                        return [0, b(10664), 0];
                      if (!c(a10, V7))
                        return [0, b(10665), 0];
                      if (!c(a10, V8))
                        return [0, b(10666), 0];
                      if (!c(a10, V9))
                        return [0, b(10667), 0];
                      if (!c(a10, V_))
                        return [0, b(10668), 0];
                      if (!c(a10, V$))
                        return [0, b(10669), 0];
                    } else {
                      if (!c(a10, Wa))
                        return [0, b(pK), 0];
                      if (!c(a10, Wb))
                        return [0, b(10837), 0];
                      if (!c(a10, Wc))
                        return [0, b(10844), 0];
                      if (!c(a10, Wd))
                        return [0, b(10840), 0];
                      if (!c(a10, We))
                        return [0, b(10842), 0];
                      if (!c(a10, Wf))
                        return [0, b(gj), 0];
                      if (!c(a10, Wg))
                        return [0, b(10660), 0];
                    }
                  } else {
                    var cx2 = e(a10, Wh);
                    if (0 <= cx2) {
                      if (!(0 < cx2))
                        return [0, b(lG), 0];
                      if (!c(a10, Wi))
                        return [0, b(120094), 0];
                      if (!c(a10, Wj))
                        return [0, b(p2), 0];
                      if (!c(a10, Wk))
                        return [0, b(kX), 0];
                      if (!c(a10, Wl))
                        return [0, b(kX), 0];
                      if (!c(a10, Wm))
                        return [0, b(945), 0];
                      if (!c(a10, Wn))
                        return [0, b(257), 0];
                      if (!c(a10, Wo))
                        return [0, b(10815), 0];
                    } else {
                      if (!c(a10, Wp))
                        return [0, b(259), 0];
                      if (!c(a10, Wq))
                        return [0, b(hd), 0];
                      if (!c(a10, Wr)) {
                        var fz2 = [0, b(k0), 0];
                        return [0, b(hd), fz2];
                      }
                      if (!c(a10, Ws))
                        return [0, b(8767), 0];
                      if (!c(a10, Wt))
                        return [0, b(226), 0];
                      if (!c(a10, Wu))
                        return [0, b(lP), 0];
                      if (!c(a10, Wv))
                        return [0, b(1072), 0];
                      if (!c(a10, Ww))
                        return [0, b(230), 0];
                    }
                  }
                }
              } else {
                var cy2 = e(a10, Wx);
                if (0 <= cy2) {
                  if (!(0 < cy2))
                    return [0, b(120089), 0];
                  var cz2 = e(a10, Wy);
                  if (0 <= cz2) {
                    if (!(0 < cz2))
                      return [0, b(374), 0];
                    var cA2 = e(a10, Wz);
                    if (0 <= cA2) {
                      if (!(0 < cA2))
                        return [0, b(381), 0];
                      if (!c(a10, WA))
                        return [0, b(1047), 0];
                      if (!c(a10, WB))
                        return [0, b(379), 0];
                      if (!c(a10, WC))
                        return [0, b(c1), 0];
                      if (!c(a10, WD))
                        return [0, b(918), 0];
                      if (!c(a10, WE))
                        return [0, b(mN), 0];
                      if (!c(a10, WF))
                        return [0, b(mW), 0];
                      if (!c(a10, WG))
                        return [0, b(119989), 0];
                    } else {
                      if (!c(a10, WH))
                        return [0, b(1067), 0];
                      if (!c(a10, WI))
                        return [0, b(120092), 0];
                      if (!c(a10, WJ))
                        return [0, b(120144), 0];
                      if (!c(a10, WK))
                        return [0, b(119988), 0];
                      if (!c(a10, WL))
                        return [0, b(376), 0];
                      if (!c(a10, WM))
                        return [0, b(1046), 0];
                      if (!c(a10, WN))
                        return [0, b(377), 0];
                    }
                  } else {
                    var cB2 = e(a10, WO);
                    if (0 <= cB2) {
                      if (!(0 < cB2))
                        return [0, b(120091), 0];
                      if (!c(a10, WP))
                        return [0, b(926), 0];
                      if (!c(a10, WQ))
                        return [0, b(120143), 0];
                      if (!c(a10, WR))
                        return [0, b(119987), 0];
                      if (!c(a10, WS))
                        return [0, b(1071), 0];
                      if (!c(a10, WT))
                        return [0, b(1031), 0];
                      if (!c(a10, WU))
                        return [0, b(1070), 0];
                      if (!c(a10, WV))
                        return [0, b(221), 0];
                    } else {
                      if (!c(a10, WW))
                        return [0, b(120141), 0];
                      if (!c(a10, WX))
                        return [0, b(119985), 0];
                      if (!c(a10, WY))
                        return [0, b(8874), 0];
                      if (!c(a10, WZ))
                        return [0, b(372), 0];
                      if (!c(a10, W0))
                        return [0, b(hf), 0];
                      if (!c(a10, W1))
                        return [0, b(120090), 0];
                      if (!c(a10, W2))
                        return [0, b(120142), 0];
                      if (!c(a10, W3))
                        return [0, b(119986), 0];
                    }
                  }
                } else {
                  var cC2 = e(a10, W4);
                  if (0 <= cC2) {
                    if (!(0 < cC2))
                      return [0, b(366), 0];
                    var cD2 = e(a10, W5);
                    if (0 <= cD2) {
                      if (!(0 < cD2))
                        return [0, b(g$), 0];
                      if (!c(a10, W6))
                        return [0, b(ni), 0];
                      if (!c(a10, W7))
                        return [0, b(ni), 0];
                      if (!c(a10, W8))
                        return [0, b(eq), 0];
                      if (!c(a10, W9))
                        return [0, b(hl), 0];
                      if (!c(a10, W_))
                        return [0, b(10072), 0];
                      if (!c(a10, W$))
                        return [0, b(lz), 0];
                      if (!c(a10, Xa))
                        return [0, b(gS), 0];
                    } else {
                      if (!c(a10, Xb))
                        return [0, b(119984), 0];
                      if (!c(a10, Xc))
                        return [0, b(360), 0];
                      if (!c(a10, Xd))
                        return [0, b(220), 0];
                      if (!c(a10, Xe))
                        return [0, b(8875), 0];
                      if (!c(a10, Xf))
                        return [0, b(10987), 0];
                      if (!c(a10, Xg))
                        return [0, b(1042), 0];
                      if (!c(a10, Xh))
                        return [0, b(8873), 0];
                      if (!c(a10, Xi))
                        return [0, b(10982), 0];
                    }
                  } else {
                    var cE2 = e(a10, Xj);
                    if (0 <= cE2) {
                      if (!(0 < cE2))
                        return [0, b(ef), 0];
                      if (!c(a10, Xk))
                        return [0, b(m1), 0];
                      if (!c(a10, Xl))
                        return [0, b(gT), 0];
                      if (!c(a10, Xm))
                        return [0, b(gb), 0];
                      if (!c(a10, Xn))
                        return [0, b(m6), 0];
                      if (!c(a10, Xo))
                        return [0, b(gn), 0];
                      if (!c(a10, Xp))
                        return [0, b(lu), 0];
                      if (!c(a10, Xq))
                        return [0, b(933), 0];
                    } else {
                      if (!c(a10, Xr))
                        return [0, b(p8), 0];
                      if (!c(a10, Xs))
                        return [0, b(370), 0];
                      if (!c(a10, Xt))
                        return [0, b(120140), 0];
                      if (!c(a10, Xu))
                        return [0, b(d1), 0];
                      if (!c(a10, Xv))
                        return [0, b(10514), 0];
                      if (!c(a10, Xw))
                        return [0, b(mh), 0];
                      if (!c(a10, Xx))
                        return [0, b(hK), 0];
                      if (!c(a10, Xy))
                        return [0, b(lp), 0];
                    }
                  }
                }
              }
            }
          }
        } else {
          var cF2 = e(a10, Xz);
          if (0 <= cF2) {
            if (!(0 < cF2))
              return [0, b(cf), 0];
            var cG2 = e(a10, XA);
            if (0 <= cG2) {
              if (!(0 < cG2))
                return [0, b(hF), 0];
              var cH2 = e(a10, XB);
              if (0 <= cH2) {
                if (!(0 < cH2))
                  return [0, b(cR), 0];
                var cI2 = e(a10, XC);
                if (0 <= cI2) {
                  if (!(0 < cI2))
                    return [0, b(9), 0];
                  var cP2 = e(a10, XD);
                  if (0 <= cP2) {
                    if (!(0 < cP2))
                      return [0, b(358), 0];
                    var cU2 = e(a10, XE);
                    if (0 <= cU2) {
                      if (!(0 < cU2))
                        return [0, b(368), 0];
                      if (!c(a10, XF))
                        return [0, b(120088), 0];
                      if (!c(a10, XG))
                        return [0, b(217), 0];
                      if (!c(a10, XH))
                        return [0, b(362), 0];
                      if (!c(a10, XI))
                        return [0, b(95), 0];
                      if (!c(a10, XJ))
                        return [0, b(9183), 0];
                      if (!c(a10, XK))
                        return [0, b(lZ), 0];
                      if (!c(a10, XL))
                        return [0, b(9181), 0];
                    } else {
                      if (!c(a10, XM))
                        return [0, b(218), 0];
                      if (!c(a10, XN))
                        return [0, b(8607), 0];
                      if (!c(a10, XO))
                        return [0, b(10569), 0];
                      if (!c(a10, XP))
                        return [0, b(1038), 0];
                      if (!c(a10, XQ))
                        return [0, b(364), 0];
                      if (!c(a10, XR))
                        return [0, b(219), 0];
                      if (!c(a10, XS))
                        return [0, b(1059), 0];
                    }
                  } else {
                    var cW2 = e(a10, XT);
                    if (0 <= cW2) {
                      if (!(0 < cW2))
                        return [0, b(nT), 0];
                      if (!c(a10, XU))
                        return [0, b(cK), 0];
                      if (!c(a10, XV))
                        return [0, b(hs), 0];
                      if (!c(a10, XW))
                        return [0, b(na), 0];
                      if (!c(a10, XX))
                        return [0, b(ca), 0];
                      if (!c(a10, XY))
                        return [0, b(120139), 0];
                      if (!c(a10, XZ))
                        return [0, b(mu), 0];
                      if (!c(a10, X0))
                        return [0, b(119983), 0];
                    } else {
                      if (!c(a10, X1))
                        return [0, b(932), 0];
                      if (!c(a10, X2))
                        return [0, b(356), 0];
                      if (!c(a10, X3))
                        return [0, b(354), 0];
                      if (!c(a10, X4))
                        return [0, b(1058), 0];
                      if (!c(a10, X5))
                        return [0, b(120087), 0];
                      if (!c(a10, X6))
                        return [0, b(gC), 0];
                      if (!c(a10, X7))
                        return [0, b(920), 0];
                      if (!c(a10, X8)) {
                        var fA2 = [0, b(gS), 0];
                        return [0, b(oJ), fA2];
                      }
                    }
                  }
                } else {
                  var cZ2 = e(a10, X9);
                  if (0 <= cZ2) {
                    if (!(0 < cZ2))
                      return [0, b(o_), 0];
                    var c02 = e(a10, X_);
                    if (0 <= c02) {
                      if (!(0 < c02))
                        return [0, b(ob), 0];
                      if (!c(a10, X$))
                        return [0, b(b9), 0];
                      if (!c(a10, Ya))
                        return [0, b(fM), 0];
                      if (!c(a10, Yb))
                        return [0, b(ob), 0];
                      if (!c(a10, Yc))
                        return [0, b(222), 0];
                      if (!c(a10, Yd))
                        return [0, b(p3), 0];
                      if (!c(a10, Ye))
                        return [0, b(1035), 0];
                      if (!c(a10, Yf))
                        return [0, b(1062), 0];
                    } else {
                      if (!c(a10, Yg))
                        return [0, b(gA), 0];
                      if (!c(a10, Yh))
                        return [0, b(hq), 0];
                      if (!c(a10, Yi))
                        return [0, b(b7), 0];
                      if (!c(a10, Yj))
                        return [0, b(g_), 0];
                      if (!c(a10, Yk))
                        return [0, b(ep), 0];
                      if (!c(a10, Yl))
                        return [0, b(d2), 0];
                      if (!c(a10, Ym))
                        return [0, b(pp), 0];
                    }
                  } else {
                    var c22 = e(a10, Yn);
                    if (0 <= c22) {
                      if (!(0 < c22))
                        return [0, b(d8), 0];
                      if (!c(a10, Yo))
                        return [0, b(hk), 0];
                      if (!c(a10, Yp))
                        return [0, b(ee), 0];
                      if (!c(a10, Yq))
                        return [0, b(hh), 0];
                      if (!c(a10, Yr))
                        return [0, b(f0), 0];
                      if (!c(a10, Ys))
                        return [0, b(119982), 0];
                      if (!c(a10, Yt))
                        return [0, b(qu), 0];
                      if (!c(a10, Yu))
                        return [0, b(o_), 0];
                    } else {
                      if (!c(a10, Yv))
                        return [0, b(cS), 0];
                      if (!c(a10, Yw))
                        return [0, b(d1), 0];
                      if (!c(a10, Yx))
                        return [0, b(931), 0];
                      if (!c(a10, Yy))
                        return [0, b(kC), 0];
                      if (!c(a10, Yz))
                        return [0, b(120138), 0];
                      if (!c(a10, YA))
                        return [0, b(n9), 0];
                      if (!c(a10, YB))
                        return [0, b(gU), 0];
                      if (!c(a10, YC))
                        return [0, b(gG), 0];
                    }
                  }
                }
              } else {
                var c32 = e(a10, YD);
                if (0 <= c32) {
                  if (!(0 < c32))
                    return [0, b(gJ), 0];
                  var c42 = e(a10, YE);
                  if (0 <= c42) {
                    if (!(0 < c42))
                      return [0, b(10608), 0];
                    var c52 = e(a10, YF);
                    if (0 <= c52) {
                      if (!(0 < c52))
                        return [0, b(346), 0];
                      if (!c(a10, YG))
                        return [0, b(10940), 0];
                      if (!c(a10, YH))
                        return [0, b(352), 0];
                      if (!c(a10, YI))
                        return [0, b(350), 0];
                      if (!c(a10, YJ))
                        return [0, b(348), 0];
                      if (!c(a10, YK))
                        return [0, b(1057), 0];
                      if (!c(a10, YL))
                        return [0, b(120086), 0];
                      if (!c(a10, YM))
                        return [0, b(ek), 0];
                    } else {
                      if (!c(a10, YN))
                        return [0, b(o8), 0];
                      if (!c(a10, YO))
                        return [0, b(oC), 0];
                      if (!c(a10, YP))
                        return [0, b(k2), 0];
                      if (!c(a10, YQ))
                        return [0, b(10740), 0];
                      if (!c(a10, YR))
                        return [0, b(1065), 0];
                      if (!c(a10, YS))
                        return [0, b(1064), 0];
                      if (!c(a10, YT))
                        return [0, b(1068), 0];
                    }
                  } else {
                    var c62 = e(a10, YU);
                    if (0 <= c62) {
                      if (!(0 < c62))
                        return [0, b(10575), 0];
                      if (!c(a10, YV))
                        return [0, b(10588), 0];
                      if (!c(a10, YW))
                        return [0, b(he), 0];
                      if (!c(a10, YX))
                        return [0, b(10580), 0];
                      if (!c(a10, YY))
                        return [0, b(gR), 0];
                      if (!c(a10, YZ))
                        return [0, b(10579), 0];
                      if (!c(a10, Y0))
                        return [0, b(d7), 0];
                      if (!c(a10, Y1))
                        return [0, b(pd), 0];
                    } else {
                      if (!c(a10, Y2))
                        return [0, b(10581), 0];
                      if (!c(a10, Y3))
                        return [0, b(m_), 0];
                      if (!c(a10, Y4))
                        return [0, b(oB), 0];
                      if (!c(a10, Y5))
                        return [0, b(fW), 0];
                      if (!c(a10, Y6))
                        return [0, b(10587), 0];
                      if (!c(a10, Y7))
                        return [0, b(hr), 0];
                      if (!c(a10, Y8))
                        return [0, b(nH), 0];
                      if (!c(a10, Y9))
                        return [0, b(er), 0];
                    }
                  }
                } else {
                  var c72 = e(a10, Y_);
                  if (0 <= c72) {
                    if (!(0 < c72))
                      return [0, b(10518), 0];
                    var c82 = e(a10, Y$);
                    if (0 <= c82) {
                      if (!(0 < c82))
                        return [0, b(929), 0];
                      if (!c(a10, Za))
                        return [0, b(gY), 0];
                      if (!c(a10, Zb))
                        return [0, b(cS), 0];
                      if (!c(a10, Zc))
                        return [0, b(nd), 0];
                      if (!c(a10, Zd))
                        return [0, b(hx), 0];
                      if (!c(a10, Ze))
                        return [0, b(oV), 0];
                      if (!c(a10, Zf))
                        return [0, b(mV), 0];
                      if (!c(a10, Zg))
                        return [0, b(10589), 0];
                    } else {
                      if (!c(a10, Zh))
                        return [0, b(344), 0];
                      if (!c(a10, Zi))
                        return [0, b(342), 0];
                      if (!c(a10, Zj))
                        return [0, b(1056), 0];
                      if (!c(a10, Zk))
                        return [0, b(dQ), 0];
                      if (!c(a10, Zl))
                        return [0, b(d2), 0];
                      if (!c(a10, Zm))
                        return [0, b(gk), 0];
                      if (!c(a10, Zn))
                        return [0, b(mT), 0];
                      if (!c(a10, Zo))
                        return [0, b(dQ), 0];
                    }
                  } else {
                    var c92 = e(a10, Zp);
                    if (0 <= c92) {
                      if (!(0 < c92))
                        return [0, b(120084), 0];
                      if (!c(a10, Zq))
                        return [0, b(mg), 0];
                      if (!c(a10, Zr))
                        return [0, b(119980), 0];
                      if (!c(a10, Zs))
                        return [0, b(p1), 0];
                      if (!c(a10, Zt))
                        return [0, b(hz), 0];
                      if (!c(a10, Zu))
                        return [0, b(340), 0];
                      if (!c(a10, Zv))
                        return [0, b(10219), 0];
                      if (!c(a10, Zw))
                        return [0, b(oD), 0];
                    } else {
                      if (!c(a10, Zx))
                        return [0, b(f4), 0];
                      if (!c(a10, Zy))
                        return [0, b(8243), 0];
                      if (!c(a10, Zz))
                        return [0, b(oU), 0];
                      if (!c(a10, ZA))
                        return [0, b(lo), 0];
                      if (!c(a10, ZB))
                        return [0, b(cV), 0];
                      if (!c(a10, ZC))
                        return [0, b(119979), 0];
                      if (!c(a10, ZD))
                        return [0, b(936), 0];
                      if (!c(a10, ZE))
                        return [0, b(34), 0];
                    }
                  }
                }
              }
            } else {
              var c_2 = e(a10, ZF);
              if (0 <= c_2) {
                if (!(0 < c_2)) {
                  var f82 = [0, b(n), 0];
                  return [0, b(cg), f82];
                }
                var c$2 = e(a10, ZG);
                if (0 <= c$2) {
                  if (!(0 < c$2))
                    return [0, b(211), 0];
                  var da2 = e(a10, ZH);
                  if (0 <= da2) {
                    if (!(0 < da2))
                      return [0, b(214), 0];
                    var db2 = e(a10, ZI);
                    if (0 <= db2) {
                      if (!(0 < db2))
                        return [0, b(934), 0];
                      if (!c(a10, ZJ))
                        return [0, b(928), 0];
                      if (!c(a10, ZK))
                        return [0, b(gd), 0];
                      if (!c(a10, ZL))
                        return [0, b(pi), 0];
                      if (!c(a10, ZM))
                        return [0, b(k4), 0];
                      if (!c(a10, ZN))
                        return [0, b(10939), 0];
                      if (!c(a10, ZO))
                        return [0, b(gW), 0];
                      if (!c(a10, ZP))
                        return [0, b(cb), 0];
                    } else {
                      if (!c(a10, ZQ))
                        return [0, b(ms), 0];
                      if (!c(a10, ZR))
                        return [0, b(9182), 0];
                      if (!c(a10, ZS))
                        return [0, b(mj), 0];
                      if (!c(a10, ZT))
                        return [0, b(9180), 0];
                      if (!c(a10, ZU))
                        return [0, b(hL), 0];
                      if (!c(a10, ZV))
                        return [0, b(1055), 0];
                      if (!c(a10, ZW))
                        return [0, b(120083), 0];
                    }
                  } else {
                    var dc2 = e(a10, ZX);
                    if (0 <= dc2) {
                      if (!(0 < dc2))
                        return [0, b(120134), 0];
                      if (!c(a10, ZY))
                        return [0, b(mG), 0];
                      if (!c(a10, ZZ))
                        return [0, b(o2), 0];
                      if (!c(a10, Z0))
                        return [0, b(10836), 0];
                      if (!c(a10, Z1))
                        return [0, b(119978), 0];
                      if (!c(a10, Z2))
                        return [0, b(216), 0];
                      if (!c(a10, Z3))
                        return [0, b(213), 0];
                      if (!c(a10, Z4))
                        return [0, b(10807), 0];
                    } else {
                      if (!c(a10, Z5))
                        return [0, b(212), 0];
                      if (!c(a10, Z6))
                        return [0, b(1054), 0];
                      if (!c(a10, Z7))
                        return [0, b(336), 0];
                      if (!c(a10, Z8))
                        return [0, b(120082), 0];
                      if (!c(a10, Z9))
                        return [0, b(210), 0];
                      if (!c(a10, Z_))
                        return [0, b(332), 0];
                      if (!c(a10, Z$))
                        return [0, b(lD), 0];
                      if (!c(a10, _a))
                        return [0, b(927), 0];
                    }
                  }
                } else {
                  var dd2 = e(a10, _b);
                  if (0 <= dd2) {
                    if (!(0 < dd2))
                      return [0, b(g6), 0];
                    var de2 = e(a10, _c);
                    if (0 <= de2) {
                      if (!(0 < de2))
                        return [0, b(fU), 0];
                      if (!c(a10, _d))
                        return [0, b(pB), 0];
                      if (!c(a10, _e))
                        return [0, b(gF), 0];
                      if (!c(a10, _f))
                        return [0, b(es), 0];
                      if (!c(a10, _g))
                        return [0, b(119977), 0];
                      if (!c(a10, _h))
                        return [0, b(209), 0];
                      if (!c(a10, _i))
                        return [0, b(925), 0];
                      if (!c(a10, _j))
                        return [0, b(338), 0];
                    } else {
                      if (!c(a10, _k))
                        return [0, b(f$), 0];
                      if (!c(a10, _l)) {
                        var fD2 = [0, b(n), 0];
                        return [0, b(b7), fD2];
                      }
                      if (!c(a10, _m))
                        return [0, b(l9), 0];
                      if (!c(a10, _n)) {
                        var fC2 = [0, b(n), 0];
                        return [0, b(ep), fC2];
                      }
                      if (!c(a10, _o)) {
                        var fB2 = [0, b(am), 0];
                        return [0, b(b9), fB2];
                      }
                      if (!c(a10, _p))
                        return [0, b(fS), 0];
                      if (!c(a10, _q))
                        return [0, b(la), 0];
                    }
                  } else {
                    var df2 = e(a10, _r);
                    if (0 <= df2) {
                      if (!(0 < df2))
                        return [0, b(gX), 0];
                      if (!c(a10, _s)) {
                        var fH2 = [0, b(n), 0];
                        return [0, b(nH), fH2];
                      }
                      if (!c(a10, _t))
                        return [0, b(ht), 0];
                      if (!c(a10, _u)) {
                        var fG2 = [0, b(n), 0];
                        return [0, b(d8), fG2];
                      }
                      if (!c(a10, _v))
                        return [0, b(kx), 0];
                      if (!c(a10, _w)) {
                        var fF2 = [0, b(n), 0];
                        return [0, b(ee), fF2];
                      }
                      if (!c(a10, _x))
                        return [0, b(mI), 0];
                      if (!c(a10, _y)) {
                        var fE2 = [0, b(am), 0];
                        return [0, b(cT), fE2];
                      }
                    } else {
                      if (!c(a10, _z)) {
                        var fL2 = [0, b(n), 0];
                        return [0, b(cf), fL2];
                      }
                      if (!c(a10, _A))
                        return [0, b(mb), 0];
                      if (!c(a10, _B)) {
                        var fK2 = [0, b(n), 0];
                        return [0, b(nk), fK2];
                      }
                      if (!c(a10, _C)) {
                        var fJ2 = [0, b(n), 0];
                        return [0, b(kI), fJ2];
                      }
                      if (!c(a10, _D))
                        return [0, b(gP), 0];
                      if (!c(a10, _E)) {
                        var fI2 = [0, b(n), 0];
                        return [0, b(cb), fI2];
                      }
                      if (!c(a10, _F))
                        return [0, b(pm), 0];
                      if (!c(a10, _G))
                        return [0, b(f2), 0];
                    }
                  }
                }
              } else {
                var dg2 = e(a10, _H);
                if (0 <= dg2) {
                  if (!(0 < dg2))
                    return [0, b(c1), 0];
                  var dh2 = e(a10, _I);
                  if (0 <= dh2) {
                    if (!(0 < dh2))
                      return [0, b(gH), 0];
                    var di2 = e(a10, _J);
                    if (0 <= di2) {
                      if (!(0 < di2)) {
                        var ge2 = [0, b(n), 0];
                        return [0, b(cN), ge2];
                      }
                      if (!c(a10, _K)) {
                        var ga2 = [0, b(n), 0];
                        return [0, b(ec), ga2];
                      }
                      if (!c(a10, _L))
                        return [0, b(g8), 0];
                      if (!c(a10, _M)) {
                        var f92 = [0, b(n), 0];
                        return [0, b(mn), f92];
                      }
                      if (!c(a10, _N))
                        return [0, b(gQ), 0];
                      if (!c(a10, _O))
                        return [0, b(gs), 0];
                      if (!c(a10, _P))
                        return [0, b(g0), 0];
                      if (!c(a10, _Q))
                        return [0, b(mo), 0];
                    } else {
                      if (!c(a10, _R))
                        return [0, b(gt), 0];
                      if (!c(a10, _S))
                        return [0, b(hg), 0];
                      if (!c(a10, _T)) {
                        var gr2 = [0, b(n), 0];
                        return [0, b(b_), gr2];
                      }
                      if (!c(a10, _U)) {
                        var gh2 = [0, b(n), 0];
                        return [0, b(ce), gh2];
                      }
                      if (!c(a10, _V))
                        return [0, b(lY), 0];
                      if (!c(a10, _W)) {
                        var gg2 = [0, b(n), 0];
                        return [0, b(b6), gg2];
                      }
                      if (!c(a10, _X))
                        return [0, b(k5), 0];
                    }
                  } else {
                    var dj2 = e(a10, _Y);
                    if (0 <= dj2) {
                      if (!(0 < dj2))
                        return [0, b(pn), 0];
                      if (!c(a10, _Z))
                        return [0, b(10988), 0];
                      if (!c(a10, _0))
                        return [0, b(n7), 0];
                      if (!c(a10, _1))
                        return [0, b(8813), 0];
                      if (!c(a10, _2))
                        return [0, b(cY), 0];
                      if (!c(a10, _3))
                        return [0, b(f6), 0];
                      if (!c(a10, _4))
                        return [0, b(nl), 0];
                      if (!c(a10, _5)) {
                        var gv2 = [0, b(n), 0];
                        return [0, b(cO), gv2];
                      }
                    } else {
                      if (!c(a10, _6))
                        return [0, b(c1), 0];
                      if (!c(a10, _7))
                        return [0, b(c1), 0];
                      if (!c(a10, _8))
                        return [0, b(ce), 0];
                      if (!c(a10, _9))
                        return [0, b(cg), 0];
                      if (!c(a10, __))
                        return [0, b(10), 0];
                      if (!c(a10, _$))
                        return [0, b(120081), 0];
                      if (!c(a10, $a))
                        return [0, b(8288), 0];
                      if (!c(a10, $b))
                        return [0, b(ew), 0];
                    }
                  }
                } else {
                  var dk2 = e(a10, $c);
                  if (0 <= dk2) {
                    if (!(0 < dk2))
                      return [0, b(321), 0];
                    var dl2 = e(a10, $d);
                    if (0 <= dl2) {
                      if (!(0 < dl2))
                        return [0, b(g4), 0];
                      if (!c(a10, $e))
                        return [0, b(924), 0];
                      if (!c(a10, $f))
                        return [0, b(1034), 0];
                      if (!c(a10, $g))
                        return [0, b(323), 0];
                      if (!c(a10, $h))
                        return [0, b(327), 0];
                      if (!c(a10, $i))
                        return [0, b(325), 0];
                      if (!c(a10, $j))
                        return [0, b(1053), 0];
                      if (!c(a10, $k))
                        return [0, b(c1), 0];
                    } else {
                      if (!c(a10, $l))
                        return [0, b(cg), 0];
                      if (!c(a10, $m))
                        return [0, b(10501), 0];
                      if (!c(a10, $n))
                        return [0, b(1052), 0];
                      if (!c(a10, $o))
                        return [0, b(oJ), 0];
                      if (!c(a10, $p))
                        return [0, b(g4), 0];
                      if (!c(a10, $q))
                        return [0, b(120080), 0];
                      if (!c(a10, $r))
                        return [0, b(go), 0];
                      if (!c(a10, $s))
                        return [0, b(120132), 0];
                    }
                  } else {
                    var dm2 = e(a10, $t);
                    if (0 <= dm2) {
                      if (!(0 < dm2))
                        return [0, b(fR), 0];
                      if (!c(a10, $u))
                        return [0, b(fY), 0];
                      if (!c(a10, $v))
                        return [0, b(fO), 0];
                      if (!c(a10, $w))
                        return [0, b(120131), 0];
                      if (!c(a10, $x))
                        return [0, b(nw), 0];
                      if (!c(a10, $y))
                        return [0, b(hD), 0];
                      if (!c(a10, $z))
                        return [0, b(fZ), 0];
                      if (!c(a10, $A))
                        return [0, b(k$), 0];
                    } else {
                      if (!c(a10, $B))
                        return [0, b(f5), 0];
                      if (!c(a10, $C))
                        return [0, b(120079), 0];
                      if (!c(a10, $D))
                        return [0, b(oY), 0];
                      if (!c(a10, $E))
                        return [0, b(kM), 0];
                      if (!c(a10, $F))
                        return [0, b(319), 0];
                      if (!c(a10, $G))
                        return [0, b(fQ), 0];
                      if (!c(a10, $H))
                        return [0, b(fP), 0];
                      if (!c(a10, $I))
                        return [0, b(hc), 0];
                    }
                  }
                }
              }
            }
          } else {
            var dn2 = e(a10, $J);
            if (0 <= dn2) {
              if (!(0 < dn2))
                return [0, b(280), 0];
              var dp2 = e(a10, $K);
              if (0 <= dp2) {
                if (!(0 < dp2))
                  return [0, b(mM), 0];
                var dq2 = e(a10, $L);
                if (0 <= dq2) {
                  if (!(0 < dq2))
                    return [0, b(317), 0];
                  var dr2 = e(a10, $M);
                  if (0 <= dr2) {
                    if (!(0 < dr2))
                      return [0, b(10586), 0];
                    var ds2 = e(a10, $N);
                    if (0 <= ds2) {
                      if (!(0 < ds2))
                        return [0, b(g5), 0];
                      if (!c(a10, $O))
                        return [0, b(10578), 0];
                      if (!c(a10, $P))
                        return [0, b(gV), 0];
                      if (!c(a10, $Q))
                        return [0, b(d4), 0];
                      if (!c(a10, $R))
                        return [0, b(d$), 0];
                      if (!c(a10, $S))
                        return [0, b(cM), 0];
                      if (!c(a10, $T))
                        return [0, b(f_), 0];
                      if (!c(a10, $U))
                        return [0, b(kI), 0];
                    } else {
                      if (!c(a10, $V))
                        return [0, b(gi), 0];
                      if (!c(a10, $W))
                        return [0, b(mn), 0];
                      if (!c(a10, $X))
                        return [0, b(dW), 0];
                      if (!c(a10, $Y))
                        return [0, b(10577), 0];
                      if (!c(a10, $Z))
                        return [0, b(10592), 0];
                      if (!c(a10, $0))
                        return [0, b(fV), 0];
                      if (!c(a10, $1))
                        return [0, b(10584), 0];
                    }
                  } else {
                    var dt2 = e(a10, $2);
                    if (0 <= dt2) {
                      if (!(0 < dt2))
                        return [0, b(10593), 0];
                      if (!c(a10, $3))
                        return [0, b(gl), 0];
                      if (!c(a10, $4))
                        return [0, b(10585), 0];
                      if (!c(a10, $5))
                        return [0, b(oF), 0];
                      if (!c(a10, $6))
                        return [0, b(gq), 0];
                      if (!c(a10, $7))
                        return [0, b(10574), 0];
                      if (!c(a10, $8))
                        return [0, b(mA), 0];
                      if (!c(a10, $9))
                        return [0, b(lI), 0];
                    } else {
                      if (!c(a10, $_))
                        return [0, b(315), 0];
                      if (!c(a10, $$))
                        return [0, b(1051), 0];
                      if (!c(a10, aaa))
                        return [0, b(gx), 0];
                      if (!c(a10, aab))
                        return [0, b(cR), 0];
                      if (!c(a10, aac))
                        return [0, b(lF), 0];
                      if (!c(a10, aad))
                        return [0, b(g7), 0];
                      if (!c(a10, aae))
                        return [0, b(lE), 0];
                      if (!c(a10, aaf))
                        return [0, b(n1), 0];
                    }
                  }
                } else {
                  var du2 = e(a10, aag);
                  if (0 <= du2) {
                    if (!(0 < du2))
                      return [0, b(1028), 0];
                    var dv2 = e(a10, aah);
                    if (0 <= dv2) {
                      if (!(0 < dv2))
                        return [0, b(119974), 0];
                      if (!c(a10, aai))
                        return [0, b(1033), 0];
                      if (!c(a10, aaj))
                        return [0, b(60), 0];
                      if (!c(a10, aak))
                        return [0, b(313), 0];
                      if (!c(a10, aal))
                        return [0, b(923), 0];
                      if (!c(a10, aam))
                        return [0, b(10218), 0];
                      if (!c(a10, aan))
                        return [0, b(fZ), 0];
                      if (!c(a10, aao))
                        return [0, b(kF), 0];
                    } else {
                      if (!c(a10, aap))
                        return [0, b(1061), 0];
                      if (!c(a10, aaq))
                        return [0, b(1036), 0];
                      if (!c(a10, aar))
                        return [0, b(922), 0];
                      if (!c(a10, aas))
                        return [0, b(310), 0];
                      if (!c(a10, aat))
                        return [0, b(1050), 0];
                      if (!c(a10, aau))
                        return [0, b(120078), 0];
                      if (!c(a10, aav))
                        return [0, b(120130), 0];
                    }
                  } else {
                    var dw2 = e(a10, aaw);
                    if (0 <= dw2) {
                      if (!(0 < dw2))
                        return [0, b(1030), 0];
                      if (!c(a10, aax))
                        return [0, b(207), 0];
                      if (!c(a10, aay))
                        return [0, b(308), 0];
                      if (!c(a10, aaz))
                        return [0, b(1049), 0];
                      if (!c(a10, aaA))
                        return [0, b(120077), 0];
                      if (!c(a10, aaB))
                        return [0, b(120129), 0];
                      if (!c(a10, aaC))
                        return [0, b(119973), 0];
                      if (!c(a10, aaD))
                        return [0, b(1032), 0];
                    } else {
                      if (!c(a10, aaE))
                        return [0, b(g1), 0];
                      if (!c(a10, aaF))
                        return [0, b(ll), 0];
                      if (!c(a10, aaG))
                        return [0, b(o1), 0];
                      if (!c(a10, aaH))
                        return [0, b(302), 0];
                      if (!c(a10, aaI))
                        return [0, b(120128), 0];
                      if (!c(a10, aaJ))
                        return [0, b(921), 0];
                      if (!c(a10, aaK))
                        return [0, b(nz), 0];
                      if (!c(a10, aaL))
                        return [0, b(296), 0];
                    }
                  }
                }
              } else {
                var dx2 = e(a10, aaM);
                if (0 <= dx2) {
                  if (!(0 < dx2))
                    return [0, b(b_), 0];
                  var dy2 = e(a10, aaN);
                  if (0 <= dy2) {
                    if (!(0 < dy2))
                      return [0, b(cN), 0];
                    var dz2 = e(a10, aaO);
                    if (0 <= dz2) {
                      if (!(0 < dz2))
                        return [0, b(304), 0];
                      if (!c(a10, aaP))
                        return [0, b(d5), 0];
                      if (!c(a10, aaQ))
                        return [0, b(204), 0];
                      if (!c(a10, aaR))
                        return [0, b(d5), 0];
                      if (!c(a10, aaS))
                        return [0, b(298), 0];
                      if (!c(a10, aaT))
                        return [0, b(mJ), 0];
                      if (!c(a10, aaU))
                        return [0, b(d7), 0];
                      if (!c(a10, aaV))
                        return [0, b(8748), 0];
                    } else {
                      if (!c(a10, aaW))
                        return [0, b(ec), 0];
                      if (!c(a10, aaX))
                        return [0, b(1045), 0];
                      if (!c(a10, aaY))
                        return [0, b(306), 0];
                      if (!c(a10, aaZ))
                        return [0, b(1025), 0];
                      if (!c(a10, aa0))
                        return [0, b(205), 0];
                      if (!c(a10, aa1))
                        return [0, b(206), 0];
                      if (!c(a10, aa2))
                        return [0, b(1048), 0];
                    }
                  } else {
                    var dA2 = e(a10, aa3);
                    if (0 <= dA2) {
                      if (!(0 < dA2))
                        return [0, b(94), 0];
                      if (!c(a10, aa4))
                        return [0, b(292), 0];
                      if (!c(a10, aa5))
                        return [0, b(pi), 0];
                      if (!c(a10, aa6))
                        return [0, b(gB), 0];
                      if (!c(a10, aa7))
                        return [0, b(mD), 0];
                      if (!c(a10, aa8))
                        return [0, b(lx), 0];
                      if (!c(a10, aa9))
                        return [0, b(gB), 0];
                      if (!c(a10, aa_))
                        return [0, b(294), 0];
                    } else {
                      if (!c(a10, aa$))
                        return [0, b(nk), 0];
                      if (!c(a10, aba))
                        return [0, b(hI), 0];
                      if (!c(a10, abb))
                        return [0, b(b6), 0];
                      if (!c(a10, abc))
                        return [0, b(gN), 0];
                      if (!c(a10, abd))
                        return [0, b(119970), 0];
                      if (!c(a10, abe))
                        return [0, b(ce), 0];
                      if (!c(a10, abf))
                        return [0, b(1066), 0];
                      if (!c(a10, abg))
                        return [0, b(po), 0];
                    }
                  }
                } else {
                  var dB2 = e(a10, abh);
                  if (0 <= dB2) {
                    if (!(0 < dB2))
                      return [0, b(nR), 0];
                    var dC2 = e(a10, abi);
                    if (0 <= dC2) {
                      if (!(0 < dC2))
                        return [0, b(284), 0];
                      if (!c(a10, abj))
                        return [0, b(1043), 0];
                      if (!c(a10, abk))
                        return [0, b(288), 0];
                      if (!c(a10, abl))
                        return [0, b(120074), 0];
                      if (!c(a10, abm))
                        return [0, b(gp), 0];
                      if (!c(a10, abn))
                        return [0, b(120126), 0];
                      if (!c(a10, abo))
                        return [0, b(eg), 0];
                      if (!c(a10, abp))
                        return [0, b(ez), 0];
                    } else {
                      if (!c(a10, abq))
                        return [0, b(o7), 0];
                      if (!c(a10, abr))
                        return [0, b(o7), 0];
                      if (!c(a10, abs))
                        return [0, b(hJ), 0];
                      if (!c(a10, abt))
                        return [0, b(62), 0];
                      if (!c(a10, abu))
                        return [0, b(915), 0];
                      if (!c(a10, abv))
                        return [0, b(988), 0];
                      if (!c(a10, abw))
                        return [0, b(286), 0];
                      if (!c(a10, abx))
                        return [0, b(290), 0];
                    }
                  } else {
                    var dD2 = e(a10, aby);
                    if (0 <= dD2) {
                      if (!(0 < dD2))
                        return [0, b(203), 0];
                      if (!c(a10, abz))
                        return [0, b(qi), 0];
                      if (!c(a10, abA))
                        return [0, b(fX), 0];
                      if (!c(a10, abB))
                        return [0, b(1060), 0];
                      if (!c(a10, abC))
                        return [0, b(120073), 0];
                      if (!c(a10, abD))
                        return [0, b(9724), 0];
                      if (!c(a10, abE))
                        return [0, b(ey), 0];
                      if (!c(a10, abF))
                        return [0, b(120125), 0];
                    } else {
                      if (!c(a10, abG))
                        return [0, b(120124), 0];
                      if (!c(a10, abH))
                        return [0, b(917), 0];
                      if (!c(a10, abI))
                        return [0, b(10869), 0];
                      if (!c(a10, abJ))
                        return [0, b(cO), 0];
                      if (!c(a10, abK))
                        return [0, b(fN), 0];
                      if (!c(a10, abL))
                        return [0, b(p$), 0];
                      if (!c(a10, abM))
                        return [0, b(10867), 0];
                      if (!c(a10, abN))
                        return [0, b(919), 0];
                    }
                  }
                }
              }
            } else {
              var dE2 = e(a10, abO);
              if (0 <= dE2) {
                if (!(0 < dE2))
                  return [0, b(10513), 0];
                var dF2 = e(a10, abP);
                if (0 <= dF2) {
                  if (!(0 < dF2))
                    return [0, b(m$), 0];
                  var dG2 = e(a10, abQ);
                  if (0 <= dG2) {
                    if (!(0 < dG2))
                      return [0, b(g9), 0];
                    var dH2 = e(a10, abR);
                    if (0 <= dH2) {
                      if (!(0 < dH2))
                        return [0, b(1069), 0];
                      if (!c(a10, abS))
                        return [0, b(278), 0];
                      if (!c(a10, abT))
                        return [0, b(120072), 0];
                      if (!c(a10, abU))
                        return [0, b(200), 0];
                      if (!c(a10, abV))
                        return [0, b(dZ), 0];
                      if (!c(a10, abW))
                        return [0, b(274), 0];
                      if (!c(a10, abX))
                        return [0, b(9723), 0];
                      if (!c(a10, abY))
                        return [0, b(9643), 0];
                    } else {
                      if (!c(a10, abZ))
                        return [0, b(119967), 0];
                      if (!c(a10, ab0))
                        return [0, b(272), 0];
                      if (!c(a10, ab1))
                        return [0, b(330), 0];
                      if (!c(a10, ab2))
                        return [0, b(208), 0];
                      if (!c(a10, ab3))
                        return [0, b(201), 0];
                      if (!c(a10, ab4))
                        return [0, b(282), 0];
                      if (!c(a10, ab5))
                        return [0, b(202), 0];
                    }
                  } else {
                    var dI2 = e(a10, ab6);
                    if (0 <= dI2) {
                      if (!(0 < dI2))
                        return [0, b(10590), 0];
                      if (!c(a10, ab7))
                        return [0, b(ho), 0];
                      if (!c(a10, ab8))
                        return [0, b(10582), 0];
                      if (!c(a10, ab9))
                        return [0, b(10591), 0];
                      if (!c(a10, ab_))
                        return [0, b(gm), 0];
                      if (!c(a10, ab$))
                        return [0, b(10583), 0];
                      if (!c(a10, aca))
                        return [0, b(lM), 0];
                      if (!c(a10, acb))
                        return [0, b(qr), 0];
                    } else {
                      if (!c(a10, acc))
                        return [0, b(gT), 0];
                      if (!c(a10, acd))
                        return [0, b(gb), 0];
                      if (!c(a10, ace))
                        return [0, b(cX), 0];
                      if (!c(a10, acf))
                        return [0, b(ek), 0];
                      if (!c(a10, acg))
                        return [0, b(10515), 0];
                      if (!c(a10, ach))
                        return [0, b(o$), 0];
                      if (!c(a10, aci))
                        return [0, b(785), 0];
                      if (!c(a10, acj))
                        return [0, b(10576), 0];
                    }
                  }
                } else {
                  var dJ2 = e(a10, ack);
                  if (0 <= dJ2) {
                    if (!(0 < dJ2))
                      return [0, b(f3), 0];
                    var dK2 = e(a10, acl);
                    if (0 <= dK2) {
                      if (!(0 < dK2))
                        return [0, b(g9), 0];
                      if (!c(a10, acm))
                        return [0, b(gV), 0];
                      if (!c(a10, acn))
                        return [0, b(d4), 0];
                      if (!c(a10, aco))
                        return [0, b(qb), 0];
                      if (!c(a10, acp))
                        return [0, b(fR), 0];
                      if (!c(a10, acq))
                        return [0, b(fY), 0];
                      if (!c(a10, acr))
                        return [0, b(fO), 0];
                      if (!c(a10, acs))
                        return [0, b(d7), 0];
                    } else {
                      if (!c(a10, act))
                        return [0, b(pP), 0];
                      if (!c(a10, acu))
                        return [0, b(120123), 0];
                      if (!c(a10, acv))
                        return [0, b(eh), 0];
                      if (!c(a10, acw))
                        return [0, b(8412), 0];
                      if (!c(a10, acx))
                        return [0, b(d3), 0];
                      if (!c(a10, acy))
                        return [0, b(pf), 0];
                      if (!c(a10, acz))
                        return [0, b(eh), 0];
                    }
                  } else {
                    var dL2 = e(a10, acA);
                    if (0 <= dL2) {
                      if (!(0 < dL2))
                        return [0, b(pL), 0];
                      if (!c(a10, acB))
                        return [0, b(916), 0];
                      if (!c(a10, acC))
                        return [0, b(120071), 0];
                      if (!c(a10, acD))
                        return [0, b(lP), 0];
                      if (!c(a10, acE))
                        return [0, b(oQ), 0];
                      if (!c(a10, acF))
                        return [0, b(no), 0];
                      if (!c(a10, acG))
                        return [0, b(96), 0];
                      if (!c(a10, acH))
                        return [0, b(kJ), 0];
                    } else {
                      if (!c(a10, acI))
                        return [0, b(f7), 0];
                      if (!c(a10, acJ))
                        return [0, b(1029), 0];
                      if (!c(a10, acK))
                        return [0, b(1039), 0];
                      if (!c(a10, acL))
                        return [0, b(kO), 0];
                      if (!c(a10, acM))
                        return [0, b(8609), 0];
                      if (!c(a10, acN))
                        return [0, b(qb), 0];
                      if (!c(a10, acO))
                        return [0, b(270), 0];
                      if (!c(a10, acP))
                        return [0, b(1044), 0];
                    }
                  }
                }
              } else {
                var dM2 = e(a10, acQ);
                if (0 <= dM2) {
                  if (!(0 < dM2))
                    return [0, b(262), 0];
                  var dN2 = e(a10, acR);
                  if (0 <= dN2) {
                    if (!(0 < dN2))
                      return [0, b(kG), 0];
                    var dO2 = e(a10, acS);
                    if (0 <= dO2) {
                      if (!(0 < dO2))
                        return [0, b(pI), 0];
                      if (!c(a10, acT))
                        return [0, b(k3), 0];
                      if (!c(a10, acU))
                        return [0, b(o9), 0];
                      if (!c(a10, acV))
                        return [0, b(10799), 0];
                      if (!c(a10, acW))
                        return [0, b(119966), 0];
                      if (!c(a10, acX))
                        return [0, b(8915), 0];
                      if (!c(a10, acY))
                        return [0, b(fT), 0];
                      if (!c(a10, acZ))
                        return [0, b(nM), 0];
                    } else {
                      if (!c(a10, ac0))
                        return [0, b(hb), 0];
                      if (!c(a10, ac1))
                        return [0, b(l8), 0];
                      if (!c(a10, ac2))
                        return [0, b(lo), 0];
                      if (!c(a10, ac3))
                        return [0, b(10868), 0];
                      if (!c(a10, ac4))
                        return [0, b(gy), 0];
                      if (!c(a10, ac5))
                        return [0, b(pf), 0];
                      if (!c(a10, ac6))
                        return [0, b(gL), 0];
                    }
                  } else {
                    var dP2 = e(a10, ac7);
                    if (0 <= dP2) {
                      if (!(0 < dP2))
                        return [0, b(p6), 0];
                      if (!c(a10, ac8))
                        return [0, b(gu), 0];
                      if (!c(a10, ac9))
                        return [0, b(l4), 0];
                      if (!c(a10, ac_))
                        return [0, b(935), 0];
                      if (!c(a10, ac$))
                        return [0, b(pC), 0];
                      if (!c(a10, ada))
                        return [0, b(lJ), 0];
                      if (!c(a10, adb))
                        return [0, b(nC), 0];
                      if (!c(a10, adc))
                        return [0, b(oH), 0];
                    } else {
                      if (!c(a10, add))
                        return [0, b(8914), 0];
                      if (!c(a10, ade))
                        return [0, b(nM), 0];
                      if (!c(a10, adf))
                        return [0, b(l4), 0];
                      if (!c(a10, adg))
                        return [0, b(268), 0];
                      if (!c(a10, adh))
                        return [0, b(199), 0];
                      if (!c(a10, adi))
                        return [0, b(264), 0];
                      if (!c(a10, adj))
                        return [0, b(8752), 0];
                      if (!c(a10, adk))
                        return [0, b(266), 0];
                    }
                  }
                } else {
                  var dR2 = e(a10, adl);
                  if (0 <= dR2) {
                    if (!(0 < dR2))
                      return [0, b(gz), 0];
                    var dV2 = e(a10, adm);
                    if (0 <= dV2) {
                      if (!(0 < dV2))
                        return [0, b(914), 0];
                      if (!c(a10, adn))
                        return [0, b(120069), 0];
                      if (!c(a10, ado))
                        return [0, b(120121), 0];
                      if (!c(a10, adp))
                        return [0, b(nP), 0];
                      if (!c(a10, adq))
                        return [0, b(gw), 0];
                      if (!c(a10, adr))
                        return [0, b(cN), 0];
                      if (!c(a10, ads))
                        return [0, b(1063), 0];
                      if (!c(a10, adt))
                        return [0, b(n6), 0];
                    } else {
                      if (!c(a10, adu))
                        return [0, b(195), 0];
                      if (!c(a10, adv))
                        return [0, b(196), 0];
                      if (!c(a10, adw))
                        return [0, b(cQ), 0];
                      if (!c(a10, adx))
                        return [0, b(10983), 0];
                      if (!c(a10, ady))
                        return [0, b(m5), 0];
                      if (!c(a10, adz))
                        return [0, b(1041), 0];
                      if (!c(a10, adA))
                        return [0, b(hG), 0];
                      if (!c(a10, adB))
                        return [0, b(gw), 0];
                    }
                  } else {
                    var dY2 = e(a10, adC);
                    if (0 <= dY2) {
                      if (!(0 < dY2))
                        return [0, b(913), 0];
                      if (!c(a10, adD))
                        return [0, b(b8), 0];
                      if (!c(a10, adE))
                        return [0, b(10835), 0];
                      if (!c(a10, adF))
                        return [0, b(260), 0];
                      if (!c(a10, adG))
                        return [0, b(120120), 0];
                      if (!c(a10, adH))
                        return [0, b(lG), 0];
                      if (!c(a10, adI))
                        return [0, b(nK), 0];
                      if (!c(a10, adJ))
                        return [0, b(119964), 0];
                    } else {
                      if (!c(a10, adK))
                        return [0, b(198), 0];
                      if (!c(a10, adL))
                        return [0, b(38), 0];
                      if (!c(a10, adM))
                        return [0, b(193), 0];
                      if (!c(a10, adN))
                        return [0, b(258), 0];
                      if (!c(a10, adO))
                        return [0, b(194), 0];
                      if (!c(a10, adP))
                        return [0, b(1040), 0];
                      if (!c(a10, adQ))
                        return [0, b(120068), 0];
                      if (!c(a10, adR))
                        return [0, b(lT), 0];
                    }
                  }
                }
              }
            }
          }
        }
      }
      return 0;
    }
    function dz(a10) {
      return [0, a10, 0, k(a10)];
    }
    function al(a10) {
      return aI(a10[1], a10[2], a10[3]);
    }
    function bi(j10, e10) {
      var k10 = e10[3], l10 = e10[2], m10 = e10[1];
      if (j10 < 0)
        v(adS);
      var f10 = j10, c10 = m10, b10 = l10, a10 = k10;
      for (; ; ) {
        if (f10 !== 0 && a10 !== 0) {
          if (u(c10, b10) === 9) {
            var g10 = (((b10 + 4 | 0) / 4 | 0) * 4 | 0) - b10 | 0, d10 = W(a10);
            de(d10, c10, 0, b10);
            var n10 = 1;
            if (!(g10 < 1)) {
              var h10 = n10;
              for (; ; ) {
                i(d10, 32);
                var o10 = h10 + 1 | 0;
                if (g10 !== h10) {
                  var h10 = o10;
                  continue;
                }
                break;
              }
            }
            de(d10, c10, b10 + 1 | 0, a10 - 1 | 0);
            var c10 = F(d10), a10 = (a10 + g10 | 0) - 1 | 0;
            continue;
          }
          var f10 = f10 - 1 | 0, b10 = b10 + 1 | 0, a10 = a10 - 1 | 0;
          continue;
        }
        return [0, c10, b10, a10];
      }
    }
    function r(b10, a10) {
      return a10[3] === 0 ? 0 : b10 ? [0, u(a10[1], (a10[2] + a10[3] | 0) - 1 | 0)] : [0, u(a10[1], a10[2])];
    }
    function l(b10, a10) {
      return a10[3] === 0 ? a10 : b10 ? [0, a10[1], a10[2], a10[3] - 1 | 0] : [0, a10[1], a10[2] + 1 | 0, a10[3] - 1 | 0];
    }
    function dA(a10, c10) {
      if (a10 < 0)
        v(adT);
      function b10(c11, a11) {
        if (c11 !== 0 && a11[3] !== 0) {
          var d10 = r(0, a11);
          if (d10) {
            var e10 = d10[1];
            return [0, e10, b10(c11 - 1 | 0, l(0, a11))];
          }
          return 0;
        }
        return 0;
      }
      return b10(a10, c10);
    }
    function dB(c10, d10) {
      if (c10 < 0)
        v(adU);
      var b10 = c10, a10 = d10;
      for (; ; ) {
        if (b10 === 0)
          return a10;
        var b10 = b10 - 1 | 0, a10 = l(0, a10);
        continue;
      }
    }
    function jS(a10) {
      return a10[3] === 0 ? 1 : 0;
    }
    function adV(c10, b10) {
      var a10 = 0;
      for (; ; ) {
        if (b10[3] <= a10)
          return 0;
        if (d(c10, u(b10[1], b10[2] + a10 | 0)))
          return 1;
        var a10 = a10 + 1 | 0;
        continue;
      }
    }
    function jT(b10, a10) {
      if (a10[3] < b10)
        v(adW);
      return [0, a10[1], a10[2], b10];
    }
    var g = [y, adX, M(0)];
    function dC(a10) {
      return [0, a10, 0];
    }
    function cC(b10, a10) {
      if (k(a10[1]) <= a10[2])
        throw g;
      if (u(a10[1], a10[2]) !== b10)
        throw g;
      a10[2] = a10[2] + 1 | 0;
      return 0;
    }
    function x(a10) {
      if (k(a10[1]) <= a10[2])
        throw g;
      var b10 = u(a10[1], a10[2]);
      a10[2] = a10[2] + 1 | 0;
      return b10;
    }
    function t(a10) {
      if (k(a10[1]) <= a10[2])
        throw g;
      return u(a10[1], a10[2]);
    }
    function I(a10) {
      return k(a10[1]) <= a10[2] ? 0 : [0, u(a10[1], a10[2])];
    }
    function adY(b10, a10) {
      return a10[2] === 0 ? b10 : u(a10[1], a10[2] - 1 | 0);
    }
    function adZ(b10, a10) {
      return k(a10[1]) <= (a10[2] + 1 | 0) ? b10 : u(a10[1], a10[2] + 1 | 0);
    }
    function as(c10, b10, a10) {
      return aI(c10[1], b10, a10);
    }
    function aS(b10, a10) {
      b10[2] = a10;
      return 0;
    }
    function h(a10) {
      var b10 = a10[2] < k(a10[1]) ? 1 : 0, c10 = b10 ? (a10[2] = a10[2] + 1 | 0, 0) : b10;
      return c10;
    }
    function aL(b10, a10) {
      var c10 = a10[2];
      try {
        var e10 = d(b10, a10);
        return e10;
      } catch (b11) {
        b11 = p(b11);
        aS(a10, c10);
        throw b11;
      }
    }
    function b2(a10, c10, b10) {
      try {
        var e10 = aL(a10, b10);
        return e10;
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return d(c10, b10);
        throw a11;
      }
    }
    function bj(c10) {
      function a10(d10) {
        for (; ; ) {
          var a11 = t(c10), b11 = 0;
          if (14 <= a11) {
            if (a11 === 32)
              b11 = 1;
          } else if (9 <= a11)
            b11 = 1;
          if (b11) {
            h(c10);
            continue;
          }
          return 0;
        }
      }
      try {
        var b10 = a10(0);
        return b10;
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return 0;
        throw a11;
      }
    }
    function fq(a10) {
      function b10(c11) {
        for (; ; ) {
          var b11 = t(a10);
          if (b11 !== 9 && b11 !== 32)
            return 0;
          h(a10);
          continue;
        }
      }
      try {
        var c10 = b10(0);
        return c10;
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return 0;
        throw a11;
      }
    }
    function jU(a10) {
      var b10 = t(a10), c10 = 0;
      if (14 <= b10) {
        if (b10 === 32)
          c10 = 1;
      } else if (9 <= b10)
        c10 = 1;
      if (c10) {
        h(a10);
        return bj(a10);
      }
      throw g;
    }
    function aT(c10, b10, a10) {
      d(c10, a10);
      return d(b10, a10);
    }
    function dD(c10, b10, a10) {
      var e10 = d(c10, a10);
      d(b10, a10);
      return e10;
    }
    function bA(a10, c10, b10) {
      try {
        var e10 = d(a10, b10);
        return e10;
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return d(c10, b10);
        throw a11;
      }
    }
    function at(d10, f10) {
      var a10 = f10;
      for (; ; ) {
        var e10 = r(d10, a10);
        if (e10) {
          var b10 = e10[1], c10 = 0;
          if (14 <= b10) {
            if (b10 === 32)
              c10 = 1;
          } else if (9 <= b10)
            c10 = 1;
          if (c10) {
            var a10 = l(d10, a10);
            continue;
          }
        }
        return a10;
      }
    }
    function cD(a10) {
      return jS(at(0, a10));
    }
    function fr(h10) {
      var i10 = r(0, h10);
      if (i10) {
        var j10 = i10[1], c10 = j10 - 42 | 0, e10 = 0;
        if (3 < c10 >>> 0) {
          if (c10 === 53)
            e10 = 1;
        } else if (1 < c10 - 1 >>> 0)
          e10 = 1;
        if (e10) {
          var d10 = 1, a10 = l(0, h10);
          for (; ; ) {
            var k10 = r(0, a10);
            if (k10) {
              var b10 = k10[1];
              if (j10 === b10) {
                var d10 = d10 + 1 | 0, a10 = l(0, a10);
                continue;
              }
              var f10 = 0;
              if (14 <= b10) {
                if (b10 === 32)
                  f10 = 1;
              } else if (9 <= b10)
                f10 = 1;
              if (f10) {
                var a10 = l(0, a10);
                continue;
              }
              throw g;
            }
            if (d10 < 3)
              throw g;
            return 1;
          }
        }
      }
      throw g;
    }
    function jV(d10) {
      var e10 = r(0, d10);
      if (e10) {
        var a10 = e10[1], i10 = 0;
        if (a10 !== 45 && a10 !== 61)
          i10 = 1;
        if (!i10) {
          var c10 = 1, b10 = l(0, d10);
          for (; ; ) {
            var f10 = r(0, b10);
            if (f10 && a10 === f10[1]) {
              var c10 = c10 + 1 | 0, b10 = l(0, b10);
              continue;
            }
            if (1 - jS(at(0, b10)))
              throw g;
            var h10 = a10 === 45 ? 1 : 0, j10 = h10 ? c10 === 1 ? 1 : 0 : h10;
            if (j10)
              throw g;
            var k10 = a10 === 45 ? 2 : 1;
            return [2, k10, c10];
          }
        }
      }
      throw g;
    }
    function cE(a10) {
      var b10 = 0;
      if (65 <= a10) {
        if (97 <= a10) {
          if (!(3 < a10 + hE >>> 0))
            b10 = 1;
        } else if (91 <= a10)
          b10 = 1;
      } else if (48 <= a10) {
        if (58 <= a10)
          b10 = 1;
      } else if (33 <= a10)
        b10 = 1;
      return b10 ? 1 : 0;
    }
    function jW(b10) {
      if (b10) {
        var g10 = is(32, b10[1]), a10 = bO(function(e11, a11) {
          var b11 = e11[3], c11 = e11[2], d11 = e11[1];
          if (a5(a11, ad0))
            return [0, d11, c11, b11];
          var g11 = u(a11, 0);
          if (g11 === 35)
            return [0, [0, aI(a11, 1, k(a11) - 1 | 0)], c11, b11];
          if (g11 === 46)
            return [0, d11, [0, aI(a11, 1, k(a11) - 1 | 0), c11], b11];
          var f11 = is(61, a11);
          if (f11) {
            var h10 = f11[1];
            return [0, d11, c11, [0, [0, h10, bP(ad1, f11[2])], b11]];
          }
          return [0, d11, c11, b11];
        }, ad2, g10), c10 = a10[2], d10 = a10[1], e10 = ab(a10[3]), f10 = c10 === 0 ? e10 : [0, [0, ad5, bP(ad4, ab(c10))], e10];
        return d10 ? [0, [0, ad3, d10[1]], f10] : f10;
      }
      return 0;
    }
    function jX(s10) {
      var a10 = W(64), b10 = at(0, s10);
      a:
        for (; ; ) {
          var j10 = r(0, b10);
          if (j10) {
            var e10 = j10[1];
            if (e10 === 92) {
              var g10 = l(0, b10), k10 = r(0, g10);
              if (k10) {
                var m10 = k10[1];
                if (cE(m10)) {
                  i(a10, m10);
                  var b10 = l(0, g10);
                  continue;
                }
              }
              i(a10, e10);
              var b10 = g10;
              continue;
            }
            if (aW !== e10) {
              i(a10, e10);
              var b10 = l(0, b10);
              continue;
            }
            var c10 = W(64), d10 = l(0, b10);
            for (; ; ) {
              var n10 = r(0, d10);
              if (n10) {
                var o10 = n10[1], p10 = o10 + hE | 0, h10 = 0;
                if (2 < p10 >>> 0)
                  h10 = 1;
                else
                  switch (p10) {
                    case 0:
                      i(a10, aW);
                      eW(a10, c10);
                      ix(c10);
                      var d10 = l(0, d10);
                      continue;
                    case 1:
                      h10 = 1;
                      break;
                    default:
                      var q10 = l(0, d10);
                      if (r(0, q10)) {
                        i(a10, aW);
                        eW(a10, c10);
                        i(a10, bD);
                        var b10 = q10;
                        continue a;
                      }
                      var t10 = [0, F(c10)], f10 = [0, dz(F(a10)), t10];
                  }
                if (h10) {
                  i(c10, o10);
                  var d10 = l(0, d10);
                  continue;
                }
              } else {
                i(a10, aW);
                eW(a10, c10);
                var f10 = [0, dz(F(a10)), 0];
              }
              break;
            }
          } else
            var f10 = [0, dz(F(a10)), 0];
          var u10 = f10[1];
          return [0, u10, jW(f10[2])];
        }
    }
    function ad$(h10) {
      var p10 = dA(2, h10);
      if (p10) {
        var q10 = p10[1] + gv | 0;
        if (57 < q10 >>> 0) {
          if (q10 === -30) {
            var t10 = p10[2];
            if (t10) {
              var u10 = t10[1], B10 = 0;
              if (u10 !== 88 && gM !== u10)
                B10 = 1;
              if (!B10) {
                var e10 = 0, c10 = 0, d10 = dB(2, h10);
                for (; ; ) {
                  if (8 < e10)
                    throw g;
                  var v10 = r(0, d10);
                  if (v10) {
                    var a10 = v10[1];
                    if (60 <= a10) {
                      if (71 <= a10) {
                        if (!(5 < a10 + ax >>> 0)) {
                          var e10 = e10 + 1 | 0, c10 = (((c10 * 16 | 0) + a10 | 0) - 97 | 0) + 10 | 0, d10 = l(0, d10);
                          continue;
                        }
                      } else if (65 <= a10) {
                        var e10 = e10 + 1 | 0, c10 = (((c10 * 16 | 0) + a10 | 0) - 65 | 0) + 10 | 0, d10 = l(0, d10);
                        continue;
                      }
                    } else if (58 <= a10) {
                      if (59 <= a10) {
                        if (e10 === 0)
                          throw g;
                        var C10 = 0;
                        if (c10 !== 0 && cq(c10)) {
                          var w10 = b(c10);
                          C10 = 1;
                        }
                        if (!C10)
                          var w10 = dx;
                        return [0, [0, w10, 0], l(0, d10)];
                      }
                    } else if (48 <= a10) {
                      var e10 = e10 + 1 | 0, c10 = ((c10 * 16 | 0) + a10 | 0) - 48 | 0, d10 = l(0, d10);
                      continue;
                    }
                  }
                  throw g;
                }
              }
            }
            var k10 = 0, i10 = 0, j10 = l(0, h10);
            for (; ; ) {
              if (8 < k10)
                throw g;
              var x10 = r(0, j10);
              if (x10) {
                var m10 = x10[1];
                if (58 <= m10) {
                  if (m10 === 59) {
                    if (k10 === 0)
                      throw g;
                    var D10 = 0;
                    if (i10 !== 0 && cq(i10)) {
                      var y10 = b(i10);
                      D10 = 1;
                    }
                    if (!D10)
                      var y10 = dx;
                    return [0, [0, y10, 0], l(0, j10)];
                  }
                } else if (48 <= m10) {
                  var k10 = k10 + 1 | 0, i10 = ((i10 * 10 | 0) + m10 | 0) - 48 | 0, j10 = l(0, j10);
                  continue;
                }
              }
              throw g;
            }
          }
        } else if (5 < q10 - 26 >>> 0) {
          var s10 = 1, n10 = l(0, h10);
          for (; ; ) {
            var z10 = r(0, n10);
            if (z10) {
              var f10 = z10[1], o10 = 0;
              if (60 <= f10) {
                if (91 <= f10) {
                  if (!(25 < f10 + ax >>> 0))
                    o10 = 1;
                } else if (65 <= f10)
                  o10 = 1;
              } else if (58 <= f10) {
                if (59 <= f10) {
                  var A10 = jR(al(jT(s10, h10)));
                  if (A10)
                    return [0, A10, l(0, n10)];
                  throw g;
                }
              } else if (48 <= f10)
                o10 = 1;
              if (o10) {
                var s10 = s10 + 1 | 0, n10 = l(0, n10);
                continue;
              }
            }
            throw g;
          }
        }
      }
      throw g;
    }
    function bk(e10) {
      var b10 = 0, a10 = e10;
      for (; ; ) {
        var c10 = r(0, a10);
        if (c10) {
          var d10 = c10[1];
          if (d10 === 9) {
            var b10 = b10 + 4 | 0, a10 = l(0, a10);
            continue;
          }
          if (d10 === 32) {
            var b10 = b10 + 1 | 0, a10 = l(0, a10);
            continue;
          }
        }
        return b10;
      }
    }
    function fs(f10, e10) {
      var h10 = r(0, e10);
      if (h10) {
        var a10 = h10[1], d10 = 0;
        if (44 <= a10) {
          if (a10 === 45)
            d10 = 1;
        } else if (42 <= a10)
          d10 = 1;
        if (d10) {
          var b10 = l(0, e10);
          if (cD(b10))
            return [6, [1, a10], 2 + f10 | 0, b10];
          var c10 = bk(b10);
          if (c10 === 0)
            throw g;
          var i10 = 4 < c10 ? 1 : c10;
          return [6, [1, a10], (i10 + 1 | 0) + f10 | 0, bi(i10, b10)];
        }
      }
      throw g;
    }
    function jY(d10) {
      var i10 = r(0, d10);
      if (i10) {
        var e10 = i10[1], h10 = 0;
        if (91 <= e10) {
          if (!(25 < e10 + ax >>> 0))
            h10 = 1;
        } else if (65 <= e10)
          h10 = 1;
        if (h10) {
          var f10 = 1, b10 = l(0, d10);
          for (; ; ) {
            var j10 = r(0, b10);
            if (j10) {
              var a10 = j10[1], c10 = 0;
              if (58 <= a10) {
                if (91 <= a10) {
                  if (25 < a10 + ax >>> 0)
                    c10 = 1;
                } else if (!(65 <= a10))
                  c10 = 1;
              } else if (a10 !== 45 && !(48 <= a10))
                c10 = 1;
              if (!c10) {
                var f10 = f10 + 1 | 0, b10 = l(0, b10);
                continue;
              }
            }
            return [0, al(jT(f10, d10)), b10];
          }
        }
      }
      throw g;
    }
    function aee(c10) {
      var a10 = at(0, c10), b10 = r(0, a10);
      if (b10 && b10[1] === 62) {
        if (1 - cD(l(0, a10)))
          throw g;
        return aef;
      }
      throw g;
    }
    function jZ(h10, f10) {
      if (1 - ik(cs(h10), aec))
        throw g;
      var c10 = dA(2, f10);
      if (c10) {
        var a10 = c10[1], b10 = 0;
        if (33 <= a10) {
          if (a10 === 47) {
            var e10 = c10[2];
            if (e10 && e10[1] === 62)
              b10 = 1;
          } else if (a10 === 62)
            b10 = 1;
        } else {
          var d10 = 0;
          if (14 <= a10) {
            if (!(32 <= a10))
              d10 = 1;
          } else if (!(9 <= a10))
            d10 = 1;
          if (!d10)
            b10 = 1;
        }
        if (!b10)
          throw g;
      }
      return aeh;
    }
    function aei(A10) {
      var s10 = r(0, A10);
      if (s10) {
        var k10 = s10[1], q10 = 0;
        if (14 <= k10) {
          if (k10 === 32)
            q10 = 1;
        } else if (9 <= k10)
          q10 = 1;
        if (q10) {
          var t10 = at(0, A10), u10 = r(0, t10);
          if (u10) {
            var b10 = u10[1], j10 = 0;
            if (91 <= b10) {
              if (97 <= b10) {
                if (aW <= b10)
                  j10 = 1;
              } else if (b10 !== 95)
                j10 = 1;
            } else if (b10 !== 58 && !(65 <= b10))
              j10 = 1;
            if (!j10) {
              var f10 = t10;
              for (; ; ) {
                var v10 = r(0, f10);
                if (v10) {
                  var c10 = v10[1], d10 = 0;
                  if (65 <= c10) {
                    var m10 = c10 + dR | 0;
                    if (5 < m10 >>> 0) {
                      if (!(32 <= m10))
                        d10 = 1;
                    } else if (m10 === 4)
                      d10 = 1;
                  } else if (48 <= c10) {
                    if (!(59 <= c10))
                      d10 = 1;
                  } else if (c10 === 46)
                    d10 = 1;
                  if (d10) {
                    var f10 = l(0, f10);
                    continue;
                  }
                }
                var o10 = at(0, f10), B10 = r(0, o10);
                if (B10 && B10[1] === 61) {
                  var p10 = at(0, l(0, o10)), w10 = r(0, p10);
                  if (w10) {
                    var n10 = w10[1];
                    if (n10 !== 34 && n10 !== 39) {
                      var y10 = 1, i10 = p10;
                      for (; ; ) {
                        var z10 = r(0, i10);
                        if (z10) {
                          var a10 = z10[1], e10 = 0;
                          if (40 <= a10) {
                            if (63 <= a10) {
                              if (a10 === 96)
                                e10 = 1;
                            } else if (60 <= a10)
                              e10 = 1;
                          } else if (14 <= a10) {
                            if (32 <= a10)
                              switch (a10 + cP | 0) {
                                case 0:
                                case 2:
                                case 7:
                                  e10 = 1;
                                  break;
                              }
                          } else if (9 <= a10)
                            e10 = 1;
                          if (!e10) {
                            var y10 = 0, i10 = l(0, i10);
                            continue;
                          }
                        }
                        if (y10)
                          throw g;
                        return i10;
                      }
                    }
                    var h10 = l(0, p10);
                    for (; ; ) {
                      var x10 = r(0, h10);
                      if (x10) {
                        if (n10 === x10[1])
                          return l(0, h10);
                        var h10 = l(0, h10);
                        continue;
                      }
                      throw g;
                    }
                  }
                  throw g;
                }
                return o10;
              }
            }
          }
          throw g;
        }
      }
      throw g;
    }
    function aej(h10) {
      var c10 = at(0, function(a11) {
        var b11 = a11;
        for (; ; ) {
          try {
            var c11 = aei(b11);
          } catch (a12) {
            a12 = p(a12);
            if (a12 === g)
              return b11;
            throw a12;
            var d11 = a12;
          }
          var b11 = c11;
          continue;
        }
      }(h10)), a10 = dA(2, c10);
      if (a10) {
        var d10 = a10[1], b10 = 0;
        if (d10 === 47) {
          var e10 = a10[2];
          if (e10 && e10[1] === 62) {
            var f10 = 2;
            b10 = 1;
          }
        } else if (d10 === 62) {
          var f10 = 1;
          b10 = 1;
        }
        if (b10) {
          if (1 - cD(dB(f10, c10)))
            throw g;
          return aek;
        }
      }
      throw g;
    }
    function aep(a10) {
      if (1 - cD(a10))
        throw g;
      return 0;
    }
    function aeq(M10) {
      var Q10 = r(0, M10), au2 = 0;
      if (Q10 && Q10[1] === 32) {
        var w10 = l(0, M10), R10 = r(0, w10), O10 = 0;
        if (R10 && R10[1] === 32) {
          var x10 = l(0, w10), S10 = r(0, x10), av2 = 0;
          if (S10 && S10[1] === 32) {
            var m10 = [0, 3, l(0, x10)];
            O10 = 1;
            av2 = 1;
          }
          if (!av2) {
            var m10 = [0, 2, x10];
            O10 = 1;
          }
        }
        if (!O10)
          var m10 = [0, 1, w10];
      } else
        au2 = 1;
      if (au2)
        var m10 = [0, 0, M10];
      var a10 = m10[2], b10 = m10[1], as2 = r(0, a10);
      if (as2) {
        var d10 = as2[1];
        if (96 <= d10) {
          var aw2 = 0;
          if (mr === d10 || !(97 <= d10))
            aw2 = 1;
          if (aw2) {
            var af10 = r(0, a10);
            if (af10) {
              var f10 = af10[1], ax2 = 0;
              if (f10 !== 96 && mr !== f10)
                ax2 = 1;
              if (!ax2) {
                var o10 = 1, h10 = l(0, a10);
                for (; ; ) {
                  var ag10 = r(0, h10);
                  if (ag10 && f10 === ag10[1]) {
                    var o10 = o10 + 1 | 0, h10 = l(0, h10);
                    continue;
                  }
                  if (o10 < 3)
                    throw g;
                  var e10 = W(17), aa10 = r(aea, h10), ay2 = 0;
                  if (aa10 && bD === aa10[1]) {
                    var ab10 = jX(h10), ad10 = ab10[2], ac10 = ab10[1];
                    ay2 = 1;
                  }
                  if (!ay2)
                    var ad10 = 0, ac10 = h10;
                  var aC2 = at(aeb, at(0, ac10)), aD2 = function(q11) {
                    var a11 = q11;
                    for (; ; ) {
                      var h11 = r(0, a11);
                      if (h11) {
                        var b11 = h11[1], d11 = 0;
                        if (38 <= b11) {
                          if (b11 === 92) {
                            var c11 = l(0, a11), j11 = r(0, c11);
                            if (j11) {
                              var k11 = j11[1];
                              if (cE(k11)) {
                                i(e10, k11);
                                var a11 = l(0, c11);
                                continue;
                              }
                            }
                            i(e10, b11);
                            var a11 = c11;
                            continue;
                          }
                          if (b11 === 96) {
                            if (f10 === 96)
                              throw g;
                          } else if (!(39 <= b11)) {
                            var m11 = l(0, a11);
                            try {
                              var n11 = ad$(m11);
                            } catch (c12) {
                              c12 = p(c12);
                              if (c12 === g) {
                                i(e10, b11);
                                var a11 = m11;
                                continue;
                              }
                              throw c12;
                              var w11 = c12;
                            }
                            var s11 = n11[2], t11 = n11[1];
                            aR(function(a12) {
                              return dy(e10, a12);
                            }, t11);
                            var a11 = s11;
                            continue;
                          }
                        } else if (14 <= b11) {
                          if (b11 === 32)
                            d11 = 1;
                        } else if (9 <= b11)
                          d11 = 1;
                        if (!d11) {
                          i(e10, b11);
                          var a11 = l(0, a11);
                          continue;
                        }
                      }
                      var o11 = f10 === 96 ? 1 : 0, u11 = o11 ? adV(function(a12) {
                        return a12 === 96 ? 1 : 0;
                      }, a11) : o11;
                      if (u11)
                        throw g;
                      var v11 = al(at(0, a11));
                      return [0, [0, F(e10), v11], ad10];
                    }
                  }, ae10 = aD2(at(0, aC2)), aE2 = ae10[2], aF2 = ae10[1], aG2 = f10 === 96 ? 1 : 0;
                  return [3, b10, o10, aG2, aF2, aE2];
                }
              }
            }
            throw g;
          }
        } else if (63 <= d10) {
          if (95 <= d10)
            return fr(a10);
        } else if (35 <= d10)
          switch (d10 - 35 | 0) {
            case 0:
              var j10 = 0, c10 = a10;
              for (; ; ) {
                if (6 < j10)
                  throw g;
                var T10 = r(0, c10);
                if (T10) {
                  var y10 = T10[1] - 9 | 0;
                  if (23 < y10 >>> 0) {
                    if (y10 === 26) {
                      var j10 = j10 + 1 | 0, c10 = l(0, c10);
                      continue;
                    }
                  } else if (17 < y10 - 5 >>> 0) {
                    var U10 = r(ad6, c10), az2 = 0;
                    if (U10 && bD === U10[1]) {
                      var V10 = jX(c10), Y10 = V10[2], X10 = V10[1];
                      az2 = 1;
                    }
                    if (!az2)
                      var Y10 = 0, X10 = c10;
                    var Z10 = at(ad7, at(0, X10)), n10 = Z10;
                    for (; ; ) {
                      var _10 = r(ad8, n10), aA2 = 0;
                      if (_10) {
                        var z10 = _10[1] - 9 | 0, aB2 = 0;
                        if (23 < z10 >>> 0) {
                          if (z10 === 26) {
                            var n10 = l(ad9, n10);
                            continue;
                          }
                        } else if (17 < z10 - 5 >>> 0)
                          aB2 = 1;
                        if (!aB2) {
                          var $10 = Z10;
                          aA2 = 1;
                        }
                      }
                      if (!aA2)
                        var $10 = at(ad_, n10);
                      return [1, j10, al(at(0, $10)), Y10];
                    }
                  }
                  throw g;
                }
                return [1, j10, al(c10), 0];
              }
            case 7:
              return bA(fr, function(a11) {
                return fs(b10, a11);
              }, a10);
            case 8:
              return fs(b10, a10);
            case 10:
              var aM2 = function(a11) {
                return fs(b10, a11);
              };
              return bA(function(a11) {
                return bA(jV, fr, a11);
              }, aM2, a10);
            case 23:
              var aq2 = l(0, a10), ar2 = r(0, aq2);
              if (ar2) {
                var L10 = ar2[1], P10 = 0;
                if (14 <= L10) {
                  if (L10 === 32)
                    P10 = 1;
                } else if (9 <= L10)
                  P10 = 1;
                if (P10)
                  return [7, dd(al(aq2))];
              }
              throw g;
            case 25:
              var C10 = dA(10, a10);
              if (C10 && C10[1] === 60) {
                var D10 = C10[2];
                if (D10) {
                  var E10 = D10[1];
                  if (E10 === 33) {
                    var v10 = D10[2];
                    if (v10) {
                      var aj2 = v10[1];
                      if (aj2 === 45) {
                        var ak2 = v10[2];
                        if (ak2 && ak2[1] === 45)
                          return ael;
                      } else if (aj2 === 91) {
                        var G10 = v10[2];
                        if (G10 && G10[1] === 67) {
                          var H10 = G10[2];
                          if (H10 && H10[1] === 68) {
                            var I10 = H10[2];
                            if (I10 && I10[1] === 65) {
                              var J10 = I10[2];
                              if (J10 && J10[1] === 84) {
                                var K10 = J10[2];
                                if (K10 && K10[1] === 65) {
                                  var am2 = K10[2];
                                  if (am2 && am2[1] === 91)
                                    return aen;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    return aem;
                  }
                  if (E10 === 47) {
                    var an2 = jY(dB(2, a10)), aH2 = an2[2], aI2 = an2[1];
                    return bA(function(a11) {
                      return jZ(aI2, a11);
                    }, aee, aH2);
                  }
                  if (E10 === 63)
                    return aeo;
                }
                var ao2 = jY(dB(1, a10)), ap2 = ao2[1], aJ2 = ao2[2], aK2 = function(a11) {
                  return jZ(ap2, a11);
                }, aL2 = function(d11) {
                  if (1 - ik(cs(ap2), aed))
                    throw g;
                  var c11 = r(0, d11);
                  if (c11) {
                    var a11 = c11[1] - 9 | 0, b11 = 0;
                    if (23 < a11 >>> 0) {
                      if (a11 !== 53)
                        b11 = 1;
                    } else if (!(17 < a11 - 5 >>> 0))
                      b11 = 1;
                    if (b11)
                      throw g;
                  }
                  return aeg;
                };
                return bA(function(a11) {
                  return bA(aL2, aK2, a11);
                }, aej, aJ2);
              }
              throw g;
            case 26:
              return jV(a10);
            case 27:
              var N10 = bi(1, a10), aN2 = 0 < bk(N10) ? bi(1, N10) : N10;
              return [0, aN2];
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 11:
            case 12:
            case 24:
              break;
            default:
              var k10 = 0, s10 = 0, q10 = a10;
              for (; ; ) {
                var ah10 = r(0, q10);
                if (ah10) {
                  var t10 = ah10[1], A10 = t10 - 41 | 0;
                  if (5 < A10 >>> 0) {
                    if (!(9 < A10 - 7 >>> 0)) {
                      if (9 <= k10)
                        throw g;
                      var k10 = k10 + 1 | 0, s10 = ((s10 * 10 | 0) + t10 | 0) - 48 | 0, q10 = l(0, q10);
                      continue;
                    }
                  } else if (3 < A10 - 1 >>> 0) {
                    var u10 = l(0, q10);
                    if (cD(u10))
                      return [6, [0, s10, t10], (k10 + 1 | 0) + b10 | 0, u10];
                    var B10 = bk(u10);
                    if (B10 === 0)
                      throw g;
                    var ai2 = 4 < B10 ? 1 : B10;
                    return [6, [0, s10, t10], ((k10 + b10 | 0) + ai2 | 0) + 1 | 0, bi(ai2, u10)];
                  }
                }
                throw g;
              }
          }
        return bA(aep, function(a11) {
          if ((bk(a11) + b10 | 0) < 4)
            throw g;
          return [4, bi(4 - b10 | 0, a11)];
        }, a10);
      }
      return 0;
    }
    function aer(a10) {
      try {
        var b10 = aeq(a10);
        return b10;
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return 2;
        throw a11;
      }
    }
    function aes(a10) {
      var d10 = a10[2];
      try {
        var b10 = function(e10) {
          for (; ; ) {
            var b11 = x(a10), c10 = 0;
            if (14 <= b11) {
              if (b11 === 32)
                c10 = 1;
            } else if (9 <= b11)
              c10 = 1;
            if (c10)
              continue;
            aS(a10, d10);
            return 0;
          }
        }(0);
        return b10;
      } catch (b11) {
        b11 = p(b11);
        if (b11 === g) {
          aS(a10, d10);
          return 1;
        }
        throw b11;
      }
    }
    function dE(a10) {
      var o10 = a10[2];
      bj(a10);
      var c10 = I(a10), m10 = 0;
      if (c10 && aW === c10[1]) {
        var d10 = W(64);
        h(a10);
        var p10 = a10[2];
        for (; ; ) {
          var e10 = I(a10), n10 = 0;
          if (e10) {
            var f10 = e10[1], g10 = f10 + hE | 0, b10 = 0;
            if (!(2 < g10 >>> 0))
              switch (g10) {
                case 0:
                  b10 = 1;
                  break;
                case 1:
                  break;
                default:
                  h(a10);
                  var j10 = [0, F(d10)];
                  n10 = 1;
                  b10 = 1;
              }
            if (!b10) {
              i(d10, f10);
              h(a10);
              continue;
            }
          }
          if (!n10) {
            aS(a10, p10);
            var j10 = 0;
          }
          var k10 = j10;
          m10 = 1;
          break;
        }
      }
      if (!m10)
        var k10 = 0;
      var l10 = jW(k10);
      if (l10 === 0)
        aS(a10, o10);
      return l10;
    }
    function bb(d10, a10) {
      var c10 = a10[2];
      if (x(a10) !== 38)
        throw g;
      var r10 = I(a10);
      if (r10) {
        var k10 = r10[1], o10 = 0;
        if (58 <= k10) {
          if (91 <= k10) {
            if (!(25 < k10 + ax >>> 0))
              o10 = 1;
          } else if (65 <= k10)
            o10 = 1;
        } else {
          if (k10 === 35) {
            h(a10);
            var v10 = I(a10);
            if (v10) {
              var q10 = v10[1] - 88 | 0;
              if (32 < q10 >>> 0) {
                if (!(9 < q10 + 40 >>> 0)) {
                  var m10 = 0, l10 = 0;
                  for (; ; ) {
                    if (8 < m10)
                      return E(d10, as(a10, c10, a10[2] - c10 | 0));
                    var w10 = I(a10);
                    if (w10) {
                      var n10 = w10[1];
                      if (58 <= n10) {
                        if (n10 === 59) {
                          h(a10);
                          if (m10 === 0)
                            return E(d10, as(a10, c10, a10[2] - c10 | 0));
                          var B10 = 0;
                          if (cq(l10) && l10 !== 0) {
                            var y10 = b(l10);
                            B10 = 1;
                          }
                          if (!B10)
                            var y10 = dx;
                          return dy(d10, y10);
                        }
                      } else if (48 <= n10) {
                        h(a10);
                        var m10 = m10 + 1 | 0, l10 = ((l10 * 10 | 0) + n10 | 0) - 48 | 0;
                        continue;
                      }
                    }
                    return E(d10, as(a10, c10, a10[2] - c10 | 0));
                  }
                }
              } else if (30 < q10 - 1 >>> 0) {
                h(a10);
                var i10 = 0, f10 = 0;
                for (; ; ) {
                  if (8 < i10)
                    return E(d10, as(a10, c10, a10[2] - c10 | 0));
                  var z10 = I(a10);
                  if (z10) {
                    var e10 = z10[1];
                    if (60 <= e10) {
                      if (71 <= e10) {
                        if (!(5 < e10 + ax >>> 0)) {
                          h(a10);
                          var i10 = i10 + 1 | 0, f10 = (((f10 * 16 | 0) + e10 | 0) - 97 | 0) + 10 | 0;
                          continue;
                        }
                      } else if (65 <= e10) {
                        h(a10);
                        var i10 = i10 + 1 | 0, f10 = (((f10 * 16 | 0) + e10 | 0) - 65 | 0) + 10 | 0;
                        continue;
                      }
                    } else if (58 <= e10) {
                      if (59 <= e10) {
                        h(a10);
                        if (i10 === 0)
                          return E(d10, as(a10, c10, a10[2] - c10 | 0));
                        var C10 = 0;
                        if (cq(f10) && f10 !== 0) {
                          var A10 = b(f10);
                          C10 = 1;
                        }
                        if (!C10)
                          var A10 = dx;
                        return dy(d10, A10);
                      }
                    } else if (48 <= e10) {
                      h(a10);
                      var i10 = i10 + 1 | 0, f10 = ((f10 * 16 | 0) + e10 | 0) - 48 | 0;
                      continue;
                    }
                  }
                  return E(d10, as(a10, c10, a10[2] - c10 | 0));
                }
              }
            }
            return E(d10, as(a10, c10, a10[2] - c10 | 0));
          }
          if (48 <= k10)
            o10 = 1;
        }
        if (o10) {
          var s10 = a10[2];
          for (; ; ) {
            var t10 = I(a10);
            if (t10) {
              var j10 = t10[1], p10 = 0;
              if (60 <= j10) {
                if (91 <= j10) {
                  if (!(25 < j10 + ax >>> 0))
                    p10 = 1;
                } else if (65 <= j10)
                  p10 = 1;
              } else if (58 <= j10) {
                if (59 <= j10) {
                  var D10 = as(a10, s10, a10[2] - s10 | 0);
                  h(a10);
                  var u10 = jR(D10);
                  return u10 ? aR(function(a11) {
                    return dy(d10, a11);
                  }, u10) : E(d10, as(a10, c10, a10[2] - c10 | 0));
                }
              } else if (48 <= j10)
                p10 = 1;
              if (p10) {
                h(a10);
                continue;
              }
            }
            return E(d10, as(a10, c10, a10[2] - c10 | 0));
          }
        }
      }
      return E(d10, as(a10, c10, a10[2] - c10 | 0));
    }
    function j0(a10) {
      if (a10 && !a10[2])
        return a10[1];
      return [0, 0, a10];
    }
    function ft(a10) {
      if (typeof a10 !== "number" && a10[0] === 1) {
        var b10 = 0, c10 = a10[1];
        if (2 <= a10[2] || !(2 <= c10) && a10[2] === 1)
          b10 = 1;
        if (b10)
          return 1;
      }
      return 0;
    }
    function fu(a10) {
      if (typeof a10 !== "number" && a10[0] === 1) {
        var b10 = 0;
        switch (a10[1]) {
          case 0:
            break;
          case 1:
            if (!(2 <= a10[2]))
              b10 = 1;
            break;
          default:
            b10 = 1;
        }
        if (b10)
          return 1;
      }
      return 0;
    }
    function j1(a10) {
      if (typeof a10 !== "number" && a10[0] === 1) {
        var d10 = a10[1];
        if (a10[3]) {
          var b10 = ft(a10);
          if (b10)
            var e10 = 1 - fu(a10), c10 = e10 || (d10 === 1 ? 1 : 0);
          else
            var c10 = b10;
          return c10;
        }
        return ft(a10);
      }
      return 0;
    }
    function j2(a10) {
      var b10 = 0;
      if (65 <= a10) {
        var c10 = a10 + dR | 0;
        if (35 < c10 >>> 0) {
          if (c10 === 69)
            b10 = 2;
        } else if (25 < c10 - 6 >>> 0)
          b10 = 1;
      } else if (32 <= a10)
        if (48 <= a10) {
          if (58 <= a10)
            b10 = 1;
        } else if (33 <= a10)
          b10 = 1;
        else
          b10 = 2;
      else if (!(4 < a10 - 9 >>> 0))
        b10 = 2;
      switch (b10) {
        case 0:
          return 2;
        case 1:
          return 1;
        default:
          return 0;
      }
    }
    function j3(a10) {
      if (typeof a10 === "number")
        return aet;
      else
        switch (a10[0]) {
          case 0:
            return a10[1] ? aeu : aev;
          case 1:
            return a10[3] ? [1, 0, a8(a10[4], 95)] : [1, 0, a8(a10[4], 42)];
          default:
            return a10[1];
        }
    }
    function dF(A10) {
      var g10 = A10;
      a:
        for (; ; ) {
          if (g10) {
            var c10 = g10[1];
            if (typeof c10 !== "number" && c10[0] === 1) {
              var d10 = c10[4], j10 = c10[3], p10 = c10[1], B10 = g10[2];
              if (j1(c10)) {
                var f10 = 0, b10 = B10;
                for (; ; ) {
                  if (b10) {
                    var a10 = b10[1];
                    if (typeof a10 !== "number" && a10[0] === 1) {
                      var i10 = b10[2], e10 = a10[4], k10 = a10[3], q10 = a10[2], u10 = 0;
                      if (typeof a10 === "number" || !(a10[0] === 1))
                        u10 = 1;
                      else {
                        var y10 = a10[2];
                        if (a10[3]) {
                          var n10 = fu(a10);
                          if (n10)
                            var z10 = 1 - ft(a10), o10 = z10 || (y10 === 1 ? 1 : 0);
                          else
                            var o10 = n10;
                          var l10 = o10;
                        } else
                          var l10 = fu(a10);
                      }
                      if (u10)
                        var l10 = 0;
                      if (l10 && j10 === k10) {
                        var v10 = 0;
                        if (2 <= d10 && 2 <= e10)
                          var m10 = 2 < e10 ? [0, [1, 1, q10, k10, e10 - 2 | 0], i10] : i10;
                        else
                          v10 = 1;
                        if (v10)
                          var m10 = 1 < e10 ? [0, [1, 1, q10, k10, e10 - 1 | 0], i10] : i10;
                        var r10 = j0(ak(j3, dF(ab(f10)))), w10 = 0;
                        if (2 <= d10 && 2 <= e10) {
                          var h10 = [0, [2, [3, 0, r10]], m10];
                          w10 = 1;
                        }
                        if (!w10)
                          var h10 = [0, [2, [2, 0, r10]], m10];
                        var x10 = 0;
                        if (2 <= d10 && 2 <= e10)
                          var s10 = 2 < d10 ? [0, [1, p10, 1, j10, d10 - 2 | 0], h10] : h10;
                        else
                          x10 = 1;
                        if (x10)
                          var s10 = 1 < d10 ? [0, [1, p10, 1, j10, d10 - 1 | 0], h10] : h10;
                        var g10 = s10;
                        continue a;
                      }
                      var C10 = b10[2];
                      if (j1(a10)) {
                        var t10 = dF(b10);
                        if (c5(t10, b10)) {
                          var f10 = [0, a10, f10], b10 = C10;
                          continue;
                        }
                        var b10 = t10;
                        continue;
                      }
                    }
                    var f10 = [0, a10, f10], b10 = b10[2];
                    continue;
                  }
                  return [0, c10, ab(f10)];
                }
              }
            }
            return [0, c10, dF(g10[2])];
          }
          return 0;
        }
    }
    function fv(a10) {
      return j0(ak(j3, dF(a10)));
    }
    function dG(b10, a10) {
      if (x(a10) !== 92)
        throw g;
      var c10 = I(a10);
      if (c10) {
        var d10 = c10[1];
        if (cE(d10)) {
          h(a10);
          return i(b10, d10);
        }
      }
      return i(b10, 92);
    }
    function dH(l10, a10) {
      if (t(a10) !== 91)
        throw g;
      h(a10);
      var b10 = W(17), c10 = 0, e10 = 0;
      for (; ; ) {
        var d10 = t(a10), f10 = d10 - 9 | 0;
        if (23 < f10 >>> 0) {
          var j10 = f10 - 82 | 0;
          if (!(2 < j10 >>> 0))
            switch (j10) {
              case 0:
                if (l10) {
                  h(a10);
                  i(b10, d10);
                  var c10 = c10 + 1 | 0, e10 = 1;
                  continue;
                }
                throw g;
              case 1:
                h(a10);
                i(b10, d10);
                var k10 = t(a10);
                if (cE(k10)) {
                  h(a10);
                  i(b10, k10);
                }
                var e10 = 1;
                continue;
              default:
                if (c10 === 0) {
                  h(a10);
                  if (1 - e10)
                    throw g;
                  return F(b10);
                }
                if (0 < c10) {
                  h(a10);
                  i(b10, d10);
                  var c10 = c10 - 1 | 0, e10 = 1;
                  continue;
                }
                throw [0, B, aew];
            }
        } else if (17 < f10 - 5 >>> 0) {
          h(a10);
          i(b10, d10);
          continue;
        }
        h(a10);
        i(b10, d10);
        var e10 = 1;
        continue;
      }
    }
    function fw(c10) {
      var d10 = W(k(c10)), g10 = 1, e10 = 0, a10 = 0;
      for (; ; ) {
        if (k(c10) <= a10)
          return F(d10);
        var b10 = u(c10, a10), f10 = 0;
        if (14 <= b10) {
          if (b10 === 32)
            f10 = 1;
        } else if (9 <= b10)
          f10 = 1;
        if (f10) {
          var e10 = 1, a10 = a10 + 1 | 0;
          continue;
        }
        var h10 = 1 - g10, j10 = h10 ? e10 : h10;
        if (j10)
          i(d10, 32);
        i(d10, ii(b10));
        var g10 = 0, e10 = 0, a10 = a10 + 1 | 0;
        continue;
      }
    }
    function j4(b10) {
      var d10 = t(b10), e10 = 0;
      if (91 <= d10) {
        if (!(25 < d10 + ax >>> 0))
          e10 = 1;
      } else if (65 <= d10)
        e10 = 1;
      if (e10) {
        h(b10);
        for (; ; ) {
          var f10 = I(b10);
          if (f10) {
            var a10 = f10[1], c10 = 0;
            if (58 <= a10) {
              if (91 <= a10) {
                if (25 < a10 + ax >>> 0)
                  c10 = 1;
              } else if (!(65 <= a10))
                c10 = 1;
            } else if (a10 !== 45 && !(48 <= a10))
              c10 = 1;
            if (!c10) {
              h(b10);
              continue;
            }
          }
          return 0;
        }
      }
      throw g;
    }
    function aex(a10) {
      var b10 = a10[2];
      if (x(a10) !== 60)
        throw g;
      if (x(a10) !== 47)
        throw g;
      j4(a10);
      bj(a10);
      if (x(a10) !== 62)
        throw g;
      return as(a10, b10, a10[2] - b10 | 0);
    }
    function j5(b10, a10) {
      return function(c10) {
        for (; ; ) {
          try {
            aL(b10, a10);
          } catch (a11) {
            a11 = p(a11);
            if (a11 === g)
              return 0;
            throw a11;
            var d10 = a11;
          }
          continue;
        }
      }(0);
    }
    function aey(a10) {
      var f10 = t(a10);
      if (f10 === 34) {
        if (x(a10) !== 34)
          throw g;
        for (; ; ) {
          if (t(a10) === 34)
            return h(a10);
          h(a10);
          continue;
        }
      }
      if (f10 === 39) {
        if (x(a10) !== 39)
          throw g;
        for (; ; ) {
          if (t(a10) === 39)
            return h(a10);
          h(a10);
          continue;
        }
      }
      var d10 = 0;
      for (; ; ) {
        var b10 = t(a10), c10 = 0;
        if (40 <= b10) {
          if (63 <= b10) {
            if (b10 === 96)
              c10 = 1;
          } else if (60 <= b10)
            c10 = 1;
        } else if (14 <= b10) {
          if (32 <= b10)
            switch (b10 + cP | 0) {
              case 0:
              case 2:
              case 7:
                c10 = 1;
                break;
            }
        } else if (9 <= b10)
          c10 = 1;
        if (c10) {
          var e10 = d10 === 0 ? 1 : 0;
          if (e10)
            throw g;
          return e10;
        }
        h(a10);
        var d10 = d10 + 1 | 0;
        continue;
      }
    }
    function fx(c10, b10, a10) {
      try {
        var d10 = aL(b10, a10);
        return d10;
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return c10;
        throw a11;
      }
    }
    var aez = 61;
    function aeA(a10) {
      return cC(aez, a10);
    }
    function aeB(a10) {
      return aT(bj, aeA, a10);
    }
    function aeC(a10) {
      return aT(aeB, bj, a10);
    }
    function aeD(a10) {
      return aT(aeC, aey, a10);
    }
    function aeE(b10) {
      jU(b10);
      var a10 = t(b10), c10 = 0;
      if (91 <= a10) {
        if (97 <= a10) {
          if (aW <= a10)
            c10 = 1;
        } else if (a10 !== 95)
          c10 = 1;
      } else if (a10 !== 58 && !(65 <= a10))
        c10 = 1;
      if (c10)
        throw g;
      h(b10);
      for (; ; ) {
        var i10 = I(b10);
        if (i10) {
          var e10 = i10[1], d10 = 0;
          if (65 <= e10) {
            var f10 = e10 + dR | 0;
            if (5 < f10 >>> 0) {
              if (!(32 <= f10))
                d10 = 1;
            } else if (f10 === 4)
              d10 = 1;
          } else {
            var j10 = e10 - 45 | 0;
            if (!(13 < j10 >>> 0) && j10 !== 2)
              d10 = 1;
          }
          if (d10) {
            h(b10);
            continue;
          }
        }
        return fx(0, aeD, b10);
      }
    }
    function aeF(a10) {
      var b10 = a10[2];
      if (x(a10) !== 60)
        throw g;
      j4(a10);
      j5(aeE, a10);
      bj(a10);
      if (t(a10) === 47)
        h(a10);
      if (x(a10) !== 62)
        throw g;
      return as(a10, b10, a10[2] - b10 | 0);
    }
    function aeG(a10) {
      var b10 = W(17);
      if (x(a10) !== 60)
        throw g;
      if (x(a10) !== 33)
        throw g;
      if (x(a10) !== 45)
        throw g;
      if (x(a10) !== 45)
        throw g;
      E(b10, aeH);
      var c10 = 1;
      for (; ; ) {
        var d10 = t(a10);
        if (d10 === 38) {
          bb(b10, a10);
          var c10 = 0;
          continue;
        }
        if (d10 === 45) {
          h(a10);
          var e10 = t(a10);
          if (e10 === 45) {
            h(a10);
            if (x(a10) !== 62)
              throw g;
            E(b10, aeI);
            return F(b10);
          }
          if (e10 === 62 && c10)
            throw g;
          i(b10, d10);
          var c10 = 0;
          continue;
        }
        if (d10 === 62 && c10)
          throw g;
        h(a10);
        i(b10, d10);
        var c10 = 0;
        continue;
      }
    }
    function aeJ(a10) {
      var b10 = W(17);
      if (x(a10) !== 60)
        throw g;
      if (x(a10) !== 63)
        throw g;
      E(b10, aeK);
      for (; ; ) {
        var c10 = t(a10);
        if (c10 === 38) {
          bb(b10, a10);
          continue;
        }
        if (c10 === 63) {
          h(a10);
          if (t(a10) === 62) {
            h(a10);
            E(b10, aeL);
            return F(b10);
          }
          i(b10, c10);
          continue;
        }
        h(a10);
        i(b10, c10);
        continue;
      }
    }
    function aeM(a10) {
      var b10 = W(17);
      if (x(a10) !== 60)
        throw g;
      if (x(a10) !== 33)
        throw g;
      if (x(a10) !== 91)
        throw g;
      if (x(a10) !== 67)
        throw g;
      if (x(a10) !== 68)
        throw g;
      if (x(a10) !== 65)
        throw g;
      if (x(a10) !== 84)
        throw g;
      if (x(a10) !== 65)
        throw g;
      if (x(a10) !== 91)
        throw g;
      E(b10, aeN);
      for (; ; ) {
        var c10 = t(a10);
        if (c10 === 38) {
          bb(b10, a10);
          continue;
        }
        if (c10 === 93) {
          h(a10);
          var d10 = t(a10);
          if (d10 === 93) {
            h(a10);
            if (t(a10) === 62) {
              h(a10);
              E(b10, aeO);
              return F(b10);
            }
            i(b10, c10);
            i(b10, d10);
            continue;
          }
          i(b10, c10);
          continue;
        }
        h(a10);
        i(b10, c10);
        continue;
      }
    }
    function aeP(a10) {
      var b10 = W(17);
      if (x(a10) !== 60)
        throw g;
      if (x(a10) !== 33)
        throw g;
      E(b10, aeQ);
      if (25 < t(a10) + gv >>> 0)
        throw g;
      for (; ; ) {
        var n10 = t(a10), f10 = n10 - 9 | 0;
        if (23 < f10 >>> 0) {
          if (!(25 < f10 - 56 >>> 0)) {
            h(a10);
            i(b10, n10);
            continue;
          }
        } else if (17 < f10 - 5 >>> 0) {
          var m10 = I(a10);
          if (m10) {
            var e10 = m10[1], j10 = 0;
            if (14 <= e10) {
              if (e10 === 32)
                j10 = 1;
            } else if (9 <= e10)
              j10 = 1;
            if (j10)
              for (; ; ) {
                var l10 = I(a10);
                if (l10) {
                  var c10 = l10[1], k10 = 0;
                  if (14 <= c10) {
                    if (c10 === 32)
                      k10 = 1;
                  } else if (9 <= c10)
                    k10 = 1;
                  if (k10) {
                    i(b10, c10);
                    h(a10);
                    continue;
                  }
                }
                for (; ; ) {
                  var d10 = t(a10);
                  if (d10 === 38) {
                    bb(b10, a10);
                    continue;
                  }
                  if (d10 === 62) {
                    h(a10);
                    i(b10, d10);
                    return F(b10);
                  }
                  h(a10);
                  i(b10, d10);
                  continue;
                }
              }
          }
          throw g;
        }
        throw g;
      }
    }
    function j6(a10) {
      var b10 = W(17);
      if (t(a10) === 60) {
        h(a10);
        for (; ; ) {
          var c10 = t(a10), f10 = 0;
          if (39 <= c10) {
            if (63 <= c10) {
              if (c10 === 92) {
                dG(b10, a10);
                continue;
              }
            } else if (60 <= c10)
              switch (c10 - 60 | 0) {
                case 0:
                  f10 = 1;
                  break;
                case 1:
                  break;
                default:
                  h(a10);
                  return F(b10);
              }
          } else if (14 <= c10) {
            if (38 <= c10) {
              bb(b10, a10);
              continue;
            }
          } else if (10 <= c10)
            f10 = 1;
          if (f10)
            throw g;
          h(a10);
          i(b10, c10);
          continue;
        }
      }
      var e10 = 0;
      for (; ; ) {
        var k10 = I(a10);
        if (k10) {
          var d10 = k10[1], j10 = 0;
          if (42 <= d10) {
            if (b5 <= d10) {
              if (!(ew <= d10))
                j10 = 1;
            } else if (d10 === 92) {
              dG(b10, a10);
              continue;
            }
          } else if (33 <= d10)
            switch (d10 + qh | 0) {
              case 5:
                bb(b10, a10);
                continue;
              case 7:
                h(a10);
                i(b10, d10);
                var e10 = e10 + 1 | 0;
                continue;
              case 8:
                if (e10 === 0) {
                  if (b10[2] === 0)
                    throw g;
                  return F(b10);
                }
                h(a10);
                i(b10, d10);
                var e10 = e10 - 1 | 0;
                continue;
            }
          else
            j10 = 1;
          if (!j10) {
            h(a10);
            i(b10, d10);
            continue;
          }
        }
        var l10 = 0 < e10 ? 1 : 0, m10 = l10 || (b10[2] === 0 ? 1 : 0);
        if (m10)
          throw g;
        return F(b10);
      }
    }
    function j7(a10) {
      var b10 = I(a10);
      if (b10) {
        if (b10[1] === 10)
          return h(a10);
        throw g;
      }
      return 0;
    }
    function j8(a10) {
      var b10 = W(17), e10 = t(a10), f10 = e10 + lV | 0;
      if (!(6 < f10 >>> 0))
        switch (f10) {
          case 6:
            h(a10);
            for (; ; ) {
              var d10 = t(a10);
              if (d10 === 38) {
                bb(b10, a10);
                continue;
              }
              if (d10 === 41) {
                h(a10);
                return F(b10);
              }
              if (d10 === 92) {
                dG(b10, a10);
                continue;
              }
              h(a10);
              i(b10, d10);
              continue;
            }
          case 0:
          case 5:
            h(a10);
            for (; ; ) {
              var c10 = t(a10);
              if (c10 === 38) {
                bb(b10, a10);
                continue;
              }
              if (c10 === 92) {
                dG(b10, a10);
                continue;
              }
              if (e10 === c10) {
                h(a10);
                return F(b10);
              }
              h(a10);
              i(b10, c10);
              continue;
            }
        }
      throw g;
    }
    function j9(a10) {
      if (t(a10) === 32)
        return h(a10);
      throw g;
    }
    function j_(b10, a10) {
      try {
        for (; ; ) {
          d(b10, a10);
          continue;
        }
      } catch (a11) {
        a11 = p(a11);
        if (a11 === g)
          return 0;
        throw a11;
      }
    }
    function aeR(a10) {
      var l10 = a10[2], i10 = t(a10), j10 = 0;
      if (91 <= i10) {
        if (!(25 < i10 + ax >>> 0))
          j10 = 1;
      } else if (65 <= i10)
        j10 = 1;
      if (j10) {
        var e10 = 0;
        for (; ; ) {
          if (!(32 <= e10)) {
            var k10 = I(a10);
            if (k10) {
              var b10 = k10[1], d10 = 0;
              if (48 <= b10) {
                if (91 <= b10) {
                  if (!(25 < b10 + ax >>> 0))
                    d10 = 1;
                } else if (6 < b10 - 58 >>> 0)
                  d10 = 1;
              } else if (45 <= b10) {
                if (!(47 <= b10))
                  d10 = 1;
              } else if (b10 === 43)
                d10 = 1;
              if (d10) {
                h(a10);
                var e10 = e10 + 1 | 0;
                continue;
              }
            }
          }
          if (e10 < 2)
            throw g;
          if (x(a10) !== 58)
            throw g;
          for (; ; ) {
            var m10 = I(a10);
            if (m10) {
              var c10 = m10[1], f10 = 0;
              if (62 <= c10) {
                if (b5 <= c10) {
                  if (ew <= c10)
                    f10 = 1;
                } else if (63 <= c10)
                  f10 = 1;
              } else if (c10 !== 60 && 33 <= c10)
                f10 = 1;
              if (f10) {
                h(a10);
                continue;
              }
            }
            var n10 = as(a10, l10, a10[2] - l10 | 0);
            return [0, n10, n10];
          }
        }
      }
      throw g;
    }
    function aeS(a10) {
      var d10 = a10[2];
      for (; ; ) {
        var b10 = t(a10) + qh | 0, c10 = 0;
        if (57 < b10 >>> 0) {
          if (32 < b10 + k8 >>> 0)
            c10 = 1;
        } else if (!(32 <= b10))
          switch (b10) {
            case 31:
              h(a10);
              var e10 = function(a11) {
                function c11(c12) {
                  var a12 = t(c12), b11 = 0;
                  if (58 <= a12) {
                    if (91 <= a12) {
                      if (!(25 < a12 + ax >>> 0))
                        b11 = 1;
                    } else if (65 <= a12)
                      b11 = 1;
                  } else {
                    if (a12 === 45) {
                      h(c12);
                      return 1;
                    }
                    if (48 <= a12)
                      b11 = 1;
                  }
                  if (b11) {
                    h(c12);
                    return 0;
                  }
                  throw g;
                }
                if (c11(a11))
                  throw g;
                return function(d11) {
                  var b11 = d11;
                  for (; ; ) {
                    try {
                      var e11 = c11(a11);
                    } catch (a12) {
                      a12 = p(a12);
                      if (a12 === g) {
                        if (b11)
                          throw g;
                        return b11;
                      }
                      throw a12;
                      var f11 = a12;
                    }
                    var b11 = e11;
                    continue;
                  }
                }(0);
              };
              e10(a10);
              var i10 = 46, j10 = function(a11) {
                return cC(i10, a11);
              };
              j5(function(a11) {
                return aT(j10, e10, a11);
              }, a10);
              var f10 = as(a10, d10, a10[2] - d10 | 0);
              return [0, f10, ag(aeT, f10)];
            case 1:
            case 7:
            case 8:
            case 11:
            case 25:
            case 26:
            case 27:
            case 29:
              c10 = 1;
              break;
          }
        if (c10)
          throw g;
        h(a10);
        continue;
      }
    }
    function aeU(a10) {
      if (t(a10) === 60) {
        h(a10);
        var b10 = b2(aeR, aeS, a10), c10 = b10[2], d10 = b10[1];
        if (x(a10) !== 62)
          throw g;
        return [0, [1, 0, d10], c10, 0];
      }
      throw g;
    }
    var aeV = 41;
    function aeW(a10) {
      return cC(aeV, a10);
    }
    function aeX(a10) {
      return [0, j8(a10)];
    }
    function aeY(a10) {
      return aT(jU, aeX, a10);
    }
    var aeZ = 0;
    function ae0(a10) {
      var b10 = j6(a10);
      return [0, b10, fx(aeZ, aeY, a10)];
    }
    function ae2(a10) {
      return fx(ae1, ae0, a10);
    }
    var ae3 = 40;
    function ae4(a10) {
      return cC(ae3, a10);
    }
    function ae5(a10) {
      return aT(ae4, bj, a10);
    }
    function ae6(a10) {
      return aT(ae5, ae2, a10);
    }
    function ae7(a10) {
      return dD(ae6, bj, a10);
    }
    function j$(a10) {
      return dD(ae7, aeW, a10);
    }
    function ka(a10, b10) {
      if (a10[2] === 0)
        return b10;
      var c10 = F(a10);
      a10[2] = 0;
      return [0, [2, [1, 0, c10]], b10];
    }
    function ae8(l10, n10, a10) {
      var o10 = a10[2], d10 = 0;
      for (; ; ) {
        var p10 = I(a10);
        if (p10) {
          if (p10[1] === 96) {
            h(a10);
            var d10 = d10 + 1 | 0;
            continue;
          }
          var q10 = ka(l10, n10), f10 = W(17), g10 = 1, b10 = 0;
          for (; ; ) {
            var j10 = I(a10);
            if (j10 && j10[1] === 96) {
              h(a10);
              var b10 = b10 + 1 | 0;
              continue;
            }
            if (b10 === d10) {
              var c10 = F(f10), s10 = 0;
              if (2 <= k(c10) && u(c10, 0) === 32 && u(c10, k(c10) - 1 | 0) === 32) {
                var r10 = aI(c10, 1, k(c10) - 2 | 0);
                s10 = 1;
              }
              if (!s10)
                var r10 = c10;
              return [0, [2, [4, dE(a10), r10]], q10];
            }
            if (j10) {
              var e10 = j10[1], m10 = 0;
              if (14 <= e10) {
                if (e10 === 32)
                  m10 = 1;
              } else if (9 <= e10)
                m10 = 1;
              if (m10) {
                if (0 < b10)
                  E(f10, a8(b10, 96));
                var t10 = e10 === 10 ? 32 : e10;
                i(f10, t10);
                h(a10);
                var v10 = 0, w10 = g10 ? b10 === 0 ? 1 : 0 : g10, g10 = w10, b10 = v10;
                continue;
              }
              h(a10);
              if (0 < b10)
                E(f10, a8(b10, 96));
              i(f10, e10);
              var g10 = 0, b10 = 0;
              continue;
            }
            E(l10, as(a10, o10, d10));
            aS(a10, o10 + d10 | 0);
            return q10;
          }
        }
        E(l10, a8(d10, 96));
        return n10;
      }
    }
    function kb(r10, a10) {
      var c10 = W(0);
      function d10(a11) {
        return ka(c10, a11);
      }
      function q10(e10, j10, f10, a11) {
        var m10 = a11[2];
        try {
          var x10 = 1, k10 = aL(function(a12) {
            return dH(x10, a12);
          }, a11);
        } catch (c11) {
          c11 = p(c11);
          if (c11 === g) {
            h(a11);
            var o10 = [0, [0, j10], d10(f10)];
            return e10 < 50 ? b10(e10 + 1 | 0, o10, a11) : w(b10, [0, o10, a11]);
          }
          throw c11;
        }
        var y10 = a11[2], q11 = kb(r10, dC(k10));
        function l10(k11) {
          var l11 = fw(k11), e11 = jQ(function(a12) {
            return a5(a12[1], l11);
          }, r10);
          if (e11) {
            var b11 = e11[1], g10 = b11[4], h10 = [0, q11, b11[2], b11[3]], m11 = j10 ? [7, g10, h10] : [8, g10, h10];
            return n10([0, [2, m11], d10(f10)], a11);
          }
          if (j10 === 0)
            i(c10, 33);
          i(c10, 91);
          var o11 = [0, [2, q11], d10(f10)];
          i(c10, 93);
          aS(a11, y10);
          return n10(o11, a11);
        }
        var s10 = I(a11);
        if (s10) {
          var t10 = s10[1];
          if (t10 === 40) {
            try {
              aL(j$, a11);
            } catch (a12) {
              a12 = p(a12);
              if (a12 === g)
                return l10(k10);
              throw a12;
            }
            aS(a11, m10);
            h(a11);
            var u10 = [0, [0, j10], d10(f10)];
            return e10 < 50 ? b10(e10 + 1 | 0, u10, a11) : w(b10, [0, u10, a11]);
          }
          if (t10 === 91) {
            if (adZ(0, a11) === 93) {
              h(a11);
              h(a11);
              return l10(k10);
            }
            try {
              var z10 = 0;
              aL(function(a12) {
                return dH(z10, a12);
              }, a11);
            } catch (a12) {
              a12 = p(a12);
              if (a12 === g)
                return l10(k10);
              throw a12;
            }
            aS(a11, m10);
            h(a11);
            var v10 = [0, [0, j10], d10(f10)];
            return e10 < 50 ? b10(e10 + 1 | 0, v10, a11) : w(b10, [0, v10, a11]);
          }
        }
        return l10(k10);
      }
      function b10(o10, T10, a11) {
        var b11 = T10;
        a:
          for (; ; ) {
            try {
              var e10 = t(a11);
            } catch (a12) {
              a12 = p(a12);
              if (a12 === g)
                return fv(ab(d10(b11)));
              throw a12;
              var ao2 = a12;
            }
            var y10 = 0;
            if (43 <= e10) {
              if (91 <= e10) {
                if (!(97 <= e10))
                  switch (e10 + dR | 0) {
                    case 0:
                      var z10 = 1;
                      return o10 < 50 ? q10(o10 + 1 | 0, z10, b11, a11) : w(q10, [0, z10, b11, a11]);
                    case 1:
                      h(a11);
                      var A10 = I(a11);
                      if (A10) {
                        var s10 = A10[1];
                        if (s10 === 10) {
                          h(a11);
                          var b11 = [0, ae9, d10(b11)];
                          continue;
                        }
                        if (cE(s10)) {
                          h(a11);
                          i(c10, s10);
                          continue;
                        }
                      }
                      i(c10, e10);
                      continue;
                    case 2:
                      h(a11);
                      var j10 = d10(b11), B10 = 0, k10 = 0, f10 = j10;
                      for (; ; ) {
                        if (f10) {
                          var l10 = f10[1];
                          if (typeof l10 !== "number")
                            switch (l10[0]) {
                              case 0:
                                var m10 = l10[1];
                                if (m10 && B10) {
                                  i(c10, 93);
                                  var b11 = j10;
                                  continue a;
                                }
                                var u10 = f10[2], C10 = I(a11);
                                if (C10) {
                                  var D10 = C10[1];
                                  if (D10 === 40) {
                                    try {
                                      var F10 = aL(j$, a11);
                                    } catch (a12) {
                                      a12 = p(a12);
                                      if (a12 === g) {
                                        i(c10, 93);
                                        var b11 = j10;
                                        continue a;
                                      }
                                      throw a12;
                                      var ap2 = a12;
                                    }
                                    var U10 = F10[2], V10 = F10[1], G10 = dE(a11), H10 = [0, fv(k10), V10, U10], W10 = m10 ? [7, G10, H10] : [8, G10, H10], b11 = [0, [2, W10], u10];
                                    continue a;
                                  }
                                  if (D10 === 91) {
                                    var v10 = fv(k10), J10 = a11[2];
                                    try {
                                      var Y10 = dH(0, a11);
                                    } catch (e11) {
                                      e11 = p(e11);
                                      if (e11 === g) {
                                        if (m10 === 0)
                                          i(c10, 33);
                                        i(c10, 91);
                                        var X10 = [0, [2, v10], d10(j10)];
                                        i(c10, 93);
                                        aS(a11, J10);
                                        var b11 = X10;
                                        continue a;
                                      }
                                      throw e11;
                                      var aq2 = e11;
                                    }
                                    var Z10 = fw(Y10), K10 = jQ(function(b12) {
                                      return function(a12) {
                                        return a5(a12[1], b12);
                                      };
                                    }(Z10), r10);
                                    if (K10) {
                                      var x10 = K10[1], L10 = x10[4], M10 = [0, v10, x10[2], x10[3]], _10 = m10 ? [7, L10, M10] : [8, L10, M10], b11 = [0, [2, _10], u10];
                                      continue a;
                                    }
                                    if (m10 === 0)
                                      i(c10, 33);
                                    i(c10, 91);
                                    var $10 = [0, [2, v10], d10(u10)];
                                    i(c10, 93);
                                    aS(a11, J10);
                                    var b11 = $10;
                                    continue a;
                                  }
                                }
                                i(c10, 93);
                                var b11 = j10;
                                continue a;
                              case 2:
                                if (l10[1][0] === 7) {
                                  var B10 = 1, k10 = [0, l10, k10], f10 = f10[2];
                                  continue;
                                }
                                break;
                            }
                          var k10 = [0, l10, k10], f10 = f10[2];
                          continue;
                        }
                        i(c10, 93);
                        var b11 = j10;
                        continue a;
                      }
                    case 3:
                      break;
                    case 4:
                      y10 = 1;
                      break;
                    default:
                      var b11 = ae8(c10, b11, a11);
                      continue;
                  }
              } else if (e10 === 60) {
                try {
                  var ah10 = aL(aeU, a11);
                } catch (f11) {
                  f11 = p(f11);
                  if (f11 === g) {
                    try {
                      var ac10 = function(a12) {
                        return b2(aex, aeF, a12);
                      }, ad10 = function(b12) {
                        return function(a12) {
                          return b2(b12, aeG, a12);
                        };
                      }(ac10), ae10 = function(b12) {
                        return function(a12) {
                          return b2(b12, aeP, a12);
                        };
                      }(ad10), af10 = function(b12) {
                        return function(a12) {
                          return b2(b12, aeM, a12);
                        };
                      }(ae10), ag10 = aL(function(b12) {
                        return function(a12) {
                          return b2(b12, aeJ, a12);
                        };
                      }(af10), a11);
                    } catch (b12) {
                      b12 = p(b12);
                      if (b12 === g) {
                        h(a11);
                        i(c10, e10);
                        continue;
                      }
                      throw b12;
                      var ar2 = b12;
                    }
                    var b11 = [0, [2, [9, 0, ag10]], d10(b11)];
                    continue;
                  }
                  throw f11;
                  var as2 = f11;
                }
                var ai2 = dE(a11), b11 = [0, [2, [7, ai2, ah10]], d10(b11)];
                continue;
              }
            } else {
              if (e10 === 10) {
                h(a11);
                fq(a11);
                var b11 = [0, ae_, d10(b11)];
                continue;
              }
              if (32 <= e10)
                switch (e10 + cP | 0) {
                  case 0:
                    h(a11);
                    var O10 = I(a11);
                    if (O10) {
                      var P10 = O10[1];
                      if (P10 === 10)
                        continue;
                      if (P10 === 32) {
                        try {
                          var aj2 = function(a12) {
                            return j_(j9, a12);
                          }, ak2 = 10, al2 = function(b12) {
                            return function(a12) {
                              return cC(b12, a12);
                            };
                          }(ak2), am2 = function(a12) {
                            return j_(j9, a12);
                          }, an2 = function(b12, c11) {
                            return function(a12) {
                              return aT(c11, b12, a12);
                            };
                          }(al2, am2);
                          aL(function(b12, c11) {
                            return function(a12) {
                              return aT(c11, b12, a12);
                            };
                          }(aj2, an2), a11);
                        } catch (b12) {
                          b12 = p(b12);
                          if (b12 === g) {
                            h(a11);
                            E(c10, ae$);
                            continue;
                          }
                          throw b12;
                          var at2 = b12;
                        }
                        var b11 = [0, afa, d10(b11)];
                        continue;
                      }
                    }
                    i(c10, e10);
                    continue;
                  case 1:
                    h(a11);
                    var Q10 = I(a11);
                    if (Q10 && Q10[1] === 91) {
                      var R10 = d10(b11), S10 = 0;
                      return o10 < 50 ? q10(o10 + 1 | 0, S10, R10, a11) : w(q10, [0, S10, R10, a11]);
                    }
                    i(c10, e10);
                    continue;
                  case 6:
                    bb(c10, a11);
                    continue;
                  case 10:
                    y10 = 1;
                    break;
                }
            }
            if (y10) {
              var aa10 = adY(32, a11), N10 = function(f11, c11, a12) {
                var g10 = j2(aa10), h10 = j2(f11), i10 = e10 === 42 ? 0 : 1;
                return n10([0, [1, g10, h10, i10, c11], d10(b11)], a12);
              };
              return function(f11) {
                var b12 = f11;
                for (; ; ) {
                  var c11 = I(a11);
                  if (c11) {
                    var d11 = c11[1];
                    if (d11 === e10) {
                      h(a11);
                      var b12 = b12 + 1 | 0;
                      continue;
                    }
                    return N10(d11, b12, a11);
                  }
                  return N10(32, b12, a11);
                }
              }(0);
            }
            h(a11);
            i(c10, e10);
            continue;
          }
      }
      function n10(a11, c11) {
        return bs(b10(0, a11, c11));
      }
      return n10(0, a10);
    }
    function afb(a10) {
      function c10(a11) {
        var d11 = 0;
        for (; ; ) {
          var e11 = I(a11);
          if (e11) {
            var b11 = e11[1] - 9 | 0, c11 = 0;
            if (4 < b11 >>> 0) {
              if (b11 === 23)
                c11 = 1;
            } else if (b11 === 1) {
              if (!d11) {
                h(a11);
                var d11 = 1;
                continue;
              }
            } else
              c11 = 1;
            if (c11) {
              h(a11);
              continue;
            }
          }
          return 0;
        }
      }
      function n10(d11) {
        var a11 = x(d11), b11 = 0;
        if (14 <= a11) {
          if (a11 === 32)
            b11 = 1;
        } else if (9 <= a11)
          b11 = 1;
        if (b11)
          return c10(d11);
        throw g;
      }
      try {
        var b10 = 0, k10 = t(a10);
        b10 = 1;
      } catch (a11) {
        a11 = p(a11);
        if (a11 !== g)
          throw a11;
      }
      if (b10 && k10 === 32) {
        h(a10);
        try {
          var i10 = 0, l10 = t(a10);
          i10 = 1;
        } catch (a11) {
          a11 = p(a11);
          if (a11 !== g)
            throw a11;
        }
        if (i10 && l10 === 32) {
          h(a10);
          try {
            var j10 = 0, m10 = t(a10);
            j10 = 1;
          } catch (a11) {
            a11 = p(a11);
            if (a11 !== g)
              throw a11;
          }
          if (j10 && m10 === 32)
            h(a10);
        }
      }
      var d10 = dH(0, a10);
      if (x(a10) !== 58)
        throw g;
      c10(a10);
      var e10 = j6(a10), f10 = dE(a10);
      try {
        var o10 = function(a11) {
          return aT(n10, j8, a11);
        }, q10 = function(a11) {
          return dD(o10, fq, a11);
        }, r10 = aL(function(a11) {
          return dD(q10, j7, a11);
        }, a10);
      } catch (b11) {
        b11 = p(b11);
        if (b11 === g) {
          (function(a11) {
            return aT(fq, j7, a11);
          })(a10);
          return [0, d10, e10, 0, f10];
        }
        throw b11;
      }
      return [0, d10, e10, [0, r10], f10];
    }
    function dI(a10) {
      return ag(bP(afd, ab(a10)), afc);
    }
    function afe(b10) {
      var a10 = 0;
      for (; ; ) {
        if (!(k(b10) <= a10)) {
          var c10 = u(b10, a10), d10 = 0;
          if (c10 !== 9 && c10 !== 32)
            d10 = 1;
          if (!d10) {
            var a10 = a10 + 1 | 0;
            continue;
          }
        }
        return 0 < a10 ? aI(b10, a10, k(b10) - a10 | 0) : b10;
      }
    }
    function fy(b10, a10) {
      return ab(kc(b10, a10));
    }
    function kc(e10, i10) {
      var a10 = i10[2], b10 = i10[1];
      function j10(a11) {
        return fy(e10, a11);
      }
      if (typeof a10 === "number")
        return b10;
      else
        switch (a10[0]) {
          case 0:
            return [0, [2, 0, j10(a10[1])], b10];
          case 1:
            var u10 = a10[5], v10 = a10[2], w10 = a10[1];
            return [0, [1, 0, w10, v10, ab([0, j10(a10[6]), u10])], b10];
          case 2:
            var f10 = dI(ak(afe, a10[1])), l10 = dC(f10), h10 = function(a11) {
              var b11 = a11;
              for (; ; ) {
                try {
                  var c10 = aL(afb, l10);
                } catch (a12) {
                  a12 = p(a12);
                  if (a12 === g)
                    return [0, b11, l10[2]];
                  throw a12;
                  var d11 = a12;
                }
                var b11 = [0, c10, b11];
                continue;
              }
            }(0), m10 = h10[2], x10 = h10[1], n10 = dd(aI(f10, m10, k(f10) - m10 | 0));
            e10[1] = bM(x10, e10[1]);
            return a5(n10, aff) ? b10 : [0, [0, 0, n10], b10];
          case 3:
            var o10 = a10[4][1];
            if (a10[5]) {
              var y10 = a10[6];
              return [0, [5, y10, o10, dI(a10[5])], b10];
            }
            return [0, [5, a10[6], o10, afg], b10];
          case 4:
            var d10 = a10[1];
            for (; ; ) {
              if (d10 && !c(d10[1], afh)) {
                var d10 = d10[2];
                continue;
              }
              return [0, [5, 0, afi, dI(d10)], b10];
            }
          case 5:
            return [0, [6, 0, dI(a10[2])], b10];
          default:
            var t10 = 0, z10 = a10[2], A10 = a10[1];
            if (b10) {
              var q10 = b10[1];
              if (q10[0] === 7) {
                var s10 = b10[2], r10 = q10[2];
                t10 = 1;
              }
            }
            if (!t10)
              var s10 = b10, r10 = 0;
            return [0, [7, 0, bM(r10, [0, [0, A10, ab(z10)], 0])], s10];
        }
    }
    function kd(a10) {
      return aer(a10);
    }
    function ke(w10, H10, e10) {
      var b10 = H10[2], d10 = H10[1];
      function f10(a11, b11) {
        return ke(w10, a11, b11);
      }
      function g10(a11) {
        return kc(w10, a11);
      }
      var a10 = kd(e10);
      if (typeof b10 === "number") {
        if (typeof a10 === "number")
          switch (a10) {
            case 0:
              return [0, d10, 0];
            case 1:
              return [0, [0, afj, d10], 0];
          }
        else
          switch (a10[0]) {
            case 0:
              return [0, d10, [0, f10(dJ, a10[1])]];
            case 1:
              return [0, [0, [4, a10[3], a10[1], a10[2]], d10], 0];
            case 2:
              if (a10[1] === 2 && 3 <= a10[2])
                return [0, [0, afk, d10], 0];
              break;
            case 3:
              return [0, d10, [3, a10[1], a10[2], a10[3], a10[4], 0, a10[5]]];
            case 4:
              return [0, d10, [4, [0, al(a10[1]), 0]]];
            case 5:
              return f10([0, d10, [5, a10[2], 0]], e10);
            case 6:
              var ah10 = a10[2], ai2 = a10[1];
              return [0, d10, [1, ai2, 1, 0, ah10, 0, f10(dJ, a10[3])]];
          }
        return [0, d10, [2, [0, al(e10), 0]]];
      } else
        switch (b10[0]) {
          case 0:
            var aj2 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 0)
              return [0, d10, [0, f10(aj2, a10[1])]];
            break;
          case 1:
            var i10 = b10[1], y10 = b10[3], z10 = b10[2];
            if (typeof a10 === "number" && !a10) {
              var ar2 = b10[5], as2 = b10[4];
              return [0, d10, [1, i10, z10, 1, as2, ar2, f10(b10[6], e10)]];
            }
            if (y10) {
              var J10 = b10[6];
              if (!J10[1] && typeof J10[2] === "number") {
                var aq2 = b10[4];
                if (aq2 <= bk(e10))
                  return f10([0, g10([0, d10, b10]), 0], e10);
              }
            }
            var K10 = b10[6], L10 = b10[5], A10 = b10[4];
            if (A10 <= bk(e10)) {
              var M10 = f10(K10, bi(A10, e10)), _10 = 0;
              if (y10) {
                var h10 = M10[2];
                for (; ; ) {
                  var j10 = 0;
                  if (typeof h10 !== "number")
                    switch (h10[0]) {
                      case 0:
                        var N10 = h10[1];
                        if (!N10[1]) {
                          var O10 = N10[2];
                          j10 = 2;
                        }
                        break;
                      case 1:
                        var P10 = h10[6];
                        if (!P10[1]) {
                          var O10 = P10[2];
                          j10 = 2;
                        }
                        break;
                      case 3:
                        if (!h10[5])
                          j10 = 1;
                        break;
                      case 5:
                        var R10 = h10[2];
                        if (R10 && !R10[2])
                          j10 = 1;
                        break;
                      case 6:
                        break;
                      default:
                        var Q10 = h10[1];
                        if (Q10 && !Q10[2])
                          j10 = 1;
                    }
                  switch (j10) {
                    case 0:
                      var S10 = 0;
                      break;
                    case 2:
                      var h10 = O10;
                      continue;
                    default:
                      var S10 = 1;
                  }
                  if (S10) {
                    var T10 = 0;
                    _10 = 1;
                  }
                  break;
                }
              }
              if (!_10)
                var T10 = z10;
              return [0, d10, [1, i10, T10, 0, A10, L10, M10]];
            }
            var aK2 = 0;
            if (typeof a10 !== "number" && a10[0] === 6) {
              var o10 = a10[1], B10 = 0, ak2 = a10[3], am2 = a10[2];
              if (i10[0] === 0) {
                var ac10 = i10[2];
                if (o10[0] === 0) {
                  var F10 = o10[2], E10 = ac10;
                  B10 = 1;
                }
              } else {
                var ad10 = i10[1];
                if (o10[0] !== 0) {
                  var F10 = o10[1], E10 = ad10;
                  B10 = 1;
                }
              }
              var an2 = B10 ? E10 === F10 ? 1 : 0 : 0;
              if (an2) {
                var ao2 = y10 ? 0 : z10, ap2 = f10(dJ, ak2);
                return [0, d10, [1, i10, ao2, 0, am2, [0, fy(w10, K10), L10], ap2]];
              }
              aK2 = 1;
            }
            break;
          case 2:
            var l10 = b10[1], r10 = 0;
            if (l10) {
              var C10 = 0, at2 = l10[1];
              if (!l10[2]) {
                var s10 = 0;
                if (typeof a10 === "number") {
                  if (a10 === 2)
                    s10 = 1;
                } else
                  switch (a10[0]) {
                    case 4:
                      s10 = 1;
                      break;
                    case 7:
                      return [0, d10, [6, at2, [0, a10[1], 0]]];
                    case 2:
                      s10 = 2;
                      break;
                  }
                switch (s10) {
                  case 2:
                    break;
                  case 0:
                    r10 = 1;
                    C10 = 1;
                    break;
                  default:
                    C10 = 1;
                }
              }
              if (!C10) {
                var D10 = 0;
                if (typeof a10 === "number") {
                  if (a10 === 2)
                    D10 = 1;
                } else
                  switch (a10[0]) {
                    case 2:
                      var au2 = a10[1];
                      return [0, [0, [4, 0, au2, dd(bP(afl, ab(l10)))], d10], 0];
                    case 4:
                    case 7:
                      D10 = 1;
                      break;
                  }
                if (!D10)
                  r10 = 1;
              }
            } else
              r10 = 1;
            if (r10) {
              var t10 = 0;
              if (typeof a10 === "number") {
                if (a10 !== 2)
                  t10 = 1;
              } else
                switch (a10[0]) {
                  case 5:
                    if (a10[1])
                      t10 = 1;
                    break;
                  case 6:
                    var U10 = a10[1], $10 = 0;
                    if (U10[0] === 0 && U10[1] !== 1)
                      $10 = 1;
                    if (!$10 && !aes(dC(al(a10[3]))))
                      return f10([0, g10([0, d10, b10]), 0], e10);
                    break;
                  case 0:
                  case 1:
                  case 3:
                    t10 = 1;
                    break;
                }
              if (t10)
                return f10([0, g10([0, d10, b10]), 0], e10);
            }
            return [0, d10, [2, [0, al(e10), l10]]];
          case 3:
            var V10 = b10[1];
            if (typeof a10 !== "number" && a10[0] === 3) {
              var aB2 = a10[3], aC2 = a10[2], aD2 = b10[3], aE2 = b10[2];
              if (!c(a10[4][1], afm) && aE2 <= aC2 && aD2 === aB2)
                return [0, g10([0, d10, b10]), 0];
            }
            var av2 = b10[6], aw2 = b10[5], ax2 = b10[4], ay2 = b10[3], az2 = b10[2], W10 = eL(bk(e10), V10), aA2 = 0 < W10 ? bi(W10, e10) : e10;
            return [0, d10, [3, V10, az2, ay2, ax2, [0, al(aA2), aw2], av2]];
          case 4:
            var X10 = b10[1];
            if (typeof a10 === "number") {
              if (a10 === 0)
                return [0, d10, [4, [0, al(bi(eL(bk(e10), 4), e10)), X10]]];
            } else if (a10[0] === 4)
              return [0, d10, [4, [0, al(a10[1]), X10]]];
            return f10([0, g10([0, d10, b10]), 0], e10);
          case 5:
            var p10 = b10[1];
            if (p10) {
              var m10 = p10[1], aF2 = b10[2];
              a:
                for (; ; ) {
                  if (m10) {
                    var u10 = m10[1], n10 = e10[2], aa10 = m10[2], ae10 = e10[3], af10 = e10[1];
                    for (; ; ) {
                      if (ae10 < (n10 + k(u10) | 0))
                        var v10 = 0;
                      else {
                        var G10 = a5(u10, aI(af10, n10, k(u10)));
                        if (!G10) {
                          var n10 = n10 + 1 | 0;
                          continue;
                        }
                        var v10 = G10;
                      }
                      if (!v10) {
                        var m10 = aa10;
                        continue a;
                      }
                      var Y10 = v10;
                      break;
                    }
                  } else
                    var Y10 = 0;
                  if (Y10)
                    return [0, g10([0, d10, [5, p10, [0, al(e10), aF2]]]), 0];
                  break;
                }
            } else if (typeof a10 === "number" && !a10)
              return [0, g10([0, d10, b10]), 0];
            var aG2 = b10[2];
            return [0, d10, [5, p10, [0, al(e10), aG2]]];
          default:
            var Z10 = b10[1], q10 = b10[2], aL2 = 0;
            if (typeof a10 === "number") {
              if (a10 === 2) {
                if (q10) {
                  var aH2 = q10[2], aJ2 = q10[1];
                  return [0, d10, [6, Z10, [0, ag(aJ2, ag(afn, al(e10))), aH2]]];
                }
                aL2 = 1;
              }
            } else if (a10[0] === 7)
              return [0, d10, [6, Z10, [0, a10[1], q10]]];
            return f10([0, g10([0, d10, b10]), 0], e10);
        }
      function x10(a11) {
        if (typeof a11 !== "number")
          switch (a11[0]) {
            case 0:
              var d11 = a11[1], j11 = d11[1], f11 = x10(d11[2]);
              return f11 ? [0, [0, [0, j11, f11[1]]]] : 0;
            case 1:
              var g11 = a11[6], k10 = g11[1], l11 = a11[5], m11 = a11[4], n11 = a11[3], o11 = a11[2], p11 = a11[1], h11 = x10(g11[2]);
              return h11 ? [0, [1, p11, o11, n11, m11, l11, [0, k10, h11[1]]]] : 0;
            case 2:
              var i11 = a11[1];
              if (i11) {
                var b11 = kd(e10), c10 = 0;
                if (typeof b11 === "number") {
                  if (b11 === 2)
                    c10 = 1;
                } else
                  switch (b11[0]) {
                    case 2:
                      if (b11[1] === 1)
                        c10 = 1;
                      break;
                    case 5:
                      if (!b11[1])
                        c10 = 1;
                      break;
                    case 4:
                      c10 = 1;
                      break;
                  }
                return c10 ? [0, [2, [0, al(e10), i11]]] : 0;
              }
              break;
          }
        return 0;
      }
      var I10 = x10(b10);
      return I10 ? [0, d10, I10[1]] : f10([0, g10([0, d10, b10]), 0], e10);
    }
    var kf = we([0, aY, by, bZ]), cF = d(kf[3], [0]), kg = xC([0, cF[4], cF[6], cF[5], cF[9], cF[8]]);
    function cG(d10) {
      var c10 = d10[1], a10 = i1(0), b10 = fb(a10);
      return s(function(d11) {
        aB(b10, d11);
        e$(b10, 0);
        var c11 = F(a10);
        ix(a10);
        return bw.log(aH(c11));
      }, 0, c10);
    }
    function kh(a10, c10) {
      function b10(a11) {
        if (a11[0] === 0)
          return d(c10, a11[1]);
        var b11 = a11[1][1];
        d(cG(afp), b11);
        return bZ([0, c$, d(q(afq), b11)]);
      }
      return by(d(kf[1][4], a10), b10);
    }
    function afG(k10) {
      var f10 = yd(aH(k10));
      if (f10[0] === 0) {
        var i10 = bz(f10[1], afH);
        if (i10) {
          var j10 = i10[1], b10 = j10[x7], h10 = function(k11) {
            var a11 = j10[k11], l10 = bz(a11, afy), m10 = bz(a11, afz), n10 = bz(a11, afA), f11 = bz(a11, afB);
            if (f11)
              var o10 = f11[1], p10 = ak(function(a12) {
                var b12 = bz(o10, a12);
                return a6(function(b13) {
                  return [0, a12, av(b13)];
                }, b12);
              }, afC), e11 = d(im(function(a12) {
                return a12;
              }), p10);
            else
              var e11 = 0;
            var g11 = bz(a11, afD), h11 = a6(fo, l10), b11 = a6(fo, m10);
            if (h11) {
              var i11 = h11[1];
              if (c(i11, afE)) {
                if (!c(i11, afF) && b11) {
                  var q10 = b11[1], r10 = a6(function(a12) {
                    return a12;
                  }, g11);
                  return [0, [0, [0, 0, q10, e11, a6(fo, n10), r10]]];
                }
              } else if (b11) {
                var s10 = b11[1];
                return [0, [0, [0, 1, s10, e11, 0, a6(function(a12) {
                  return a12;
                }, g11)]]];
              }
            }
            return 0;
          };
          if (0 <= b10)
            if (50 < b10) {
              var e10 = 0, a10 = 0;
              for (; ; ) {
                if (!(b10 <= a10)) {
                  var e10 = [0, h10(a10), e10], a10 = a10 + 1 | 0;
                  continue;
                }
                var g10 = ab(e10);
                break;
              }
            } else
              var g10 = ij(0, b10, h10);
          else
            var g10 = v(rq);
          return [0, d(im(function(a11) {
            return a11;
          }), g10)];
        }
        return afI;
      }
      return [1, f10[1]];
    }
    var afT = aK[afS], R = f(fc, afX, afW), L = f(fc, afZ, afY), dL = f(fc, af1, af0), J = rN([0, R[1]]);
    function kj(a10) {
      return [0, a10, J[1], 0];
    }
    function fz(a10) {
      return kj(J[1]);
    }
    var au = fz(0), dM = fz(0);
    function kk(a10, b10) {
      a10[2] = f(J[4], b10, a10[2]);
      return 0;
    }
    function fA(a10, b10) {
      a10[3] = [0, b10, a10[3]];
      return 0;
    }
    function af2(a10) {
      return v(af3);
    }
    function fL(c10, a10) {
      var b10 = kj(a10);
      dM[1] = a10;
      function e10(c11) {
        var a11 = d(R[3], c11[1]);
        f(L[15], dM, a11);
        return f(L[7], a11, b10);
      }
      f(J[14], e10, a10);
      return c10 < 50 ? fK(c10 + 1 | 0, b10) : w(fK, [0, b10]);
    }
    function fK(c10, a10) {
      function g10(b11) {
        var c11 = d(R[5], b11);
        return aR(d(dL[9], a10), c11);
      }
      f(J[14], g10, a10[1]);
      f(J[14], R[8], a10[1]);
      var e10 = a10[3];
      aR(function(a11) {
        return d(a11, 0);
      }, e10);
      a10[3] = 0;
      fA(a10, af2);
      if (d(J[2], a10[2]))
        return 0;
      var b10 = a10[2];
      return c10 < 50 ? fL(c10 + 1 | 0, b10) : w(fL, [0, b10]);
    }
    function kl(a10) {
      return bs(fL(0, a10));
    }
    function af4(a10) {
      return bs(fK(0, a10));
    }
    function af5(a10) {
      return a10[1][1];
    }
    function af6(a10) {
      return a10[2];
    }
    function af7(a10) {
      return a10[4];
    }
    function af8(b10, a10) {
      return qP(b10[1][1], a10[1][1]);
    }
    function af9(a10) {
      return a10[1][3];
    }
    function af_(c10, b10) {
      var a10 = b10[1];
      a10[3] = [0, c10, a10[3]];
      return 0;
    }
    function af$(g10, f10) {
      var c10 = f10[1], b10 = 0, a10 = c10[3];
      for (; ; ) {
        if (a10) {
          var d10 = a10[1], h10 = a10[2];
          if (d10 !== g10) {
            var b10 = [0, d10, b10], a10 = a10[2];
            continue;
          }
          var e10 = bt(h10, b10);
        } else
          var e10 = b10;
        c10[3] = e10;
        return 0;
      }
    }
    function aga(a10) {
      return f(L[7], a10[1][2], au);
    }
    var km = [y, agb, M(0)], kn = [0, 0];
    function agc(a10, b10) {
      if (a10 !== au)
        return a10;
      function c10(c11) {
        var a11 = d(L[6], c11[1][2]), b11 = a11 !== au ? 1 : 0;
        if (b11)
          throw [0, km, a11];
        return b11;
      }
      try {
        f(J[14], c10, b10);
        return au;
      } catch (a11) {
        a11 = p(a11);
        if (a11[1] === km)
          return a11[2];
        throw a11;
      }
    }
    _(fd, agd, R, [0, af8, af5, af6, af7, af9, af_, af$, aga, agc, function(e10, c10) {
      function g10(b11, a11) {
        return 0;
      }
      var b10 = dP(L[1], e10, au, J[1], c10, g10), a10 = [];
      kn[1]++;
      O(a10, [0, kn[1], b10, 0, [0, a10]]);
      var h10 = d(J[5], a10[4]);
      f(L[10], b10, h10);
      f(L[11], b10, 0);
      return a10;
    }]);
    function age(a10, e10, d10, c10, b10) {
      var f10 = a10 ? a10[1] : c5;
      return [0, f10, e10, d10, 1, c10, 1, b10];
    }
    function agf(a10, b10) {
      var c10 = a10 ? a10[1] : c5;
      function d10(b11, a11) {
        return 0;
      }
      return [0, c10, au, J[1], 0, b10, 0, d10];
    }
    function agg(a10) {
      return a10[1];
    }
    function agh(b10, a10) {
      b10[1] = a10;
      return 0;
    }
    function agi(b10, a10) {
      return [0, b10, a10[2], a10[3], a10[4], a10[5], a10[6], a10[7]];
    }
    function agj(a10) {
      return a10[2];
    }
    function agk(b10, a10) {
      b10[2] = a10;
      return 0;
    }
    function agl(a10) {
      return a10[4];
    }
    function agm(b10, a10) {
      b10[4] = a10;
      return 0;
    }
    function agn(a10) {
      return a10[3];
    }
    function ago(a10, b10) {
      a10[4] = 1;
      a10[3] = b10;
      return 0;
    }
    function agp(a10) {
      return a10[5];
    }
    function agq(a10) {
      return a10[6];
    }
    function fB(a10, b10) {
      return f(a10[1], b10, a10[5]) ? 0 : (a10[6] = 1, a10[5] = b10, 0);
    }
    function fC(b10, a10) {
      var c10 = b10 !== au ? 1 : 0, e10 = c10 ? a10[2] !== b10 ? 1 : 0 : c10;
      if (e10) {
        a10[2] = b10;
        a10[4] = 0;
        a10[6] = 0;
        var g10 = f(J[8], a10[3], b10[1]);
        return d(J[2], g10) ? 0 : f(a10[7], b10, a10);
      }
      return e10;
    }
    function agr(b10, a10) {
      b10[7] = a10;
      return 0;
    }
    function ags(c10, a10, b10) {
      a10[6] = 0;
      return f(a10[1], b10, a10[5]) ? 0 : (a10[2] = c10, a10[6] = 1, a10[5] = b10, 1);
    }
    function agt(a10) {
      fC(f(R[9], au, a10[3]), a10);
      return a10[5];
    }
    function fD(a10) {
      a10[6] = 0;
      a10[5] = 0;
      return 0;
    }
    function agu(c10, a10, b10) {
      return b10 ? (a10[6] = 1, a10[5] = b10, fA(c10, function(b11) {
        return fD(a10);
      })) : 0;
    }
    function agv(a10, f10, c10, e10) {
      var b10 = c10 ? 1 : 0, d10 = [0, c5, a10, f10, 1, c10, b10, e10], g10 = b10 ? cn(a10, au) : b10;
      if (g10)
        fA(a10, function(a11) {
          return fD(d10);
        });
      return d10;
    }
    function agw(b10, a10) {
      return bg(agx);
    }
    function agy(k10, j10, i10) {
      var b10 = f(R[10], k10, j10), c10 = [0, b10], e10 = d(R[3], b10), g10 = d(i10, e10), a10 = g10[1], l10 = g10[2], m10 = a10[7];
      function n10(b11, e11) {
        f(m10, b11, e11);
        var d10 = a10[6];
        return d10 ? kk(b11, c10) : d10;
      }
      function o10(c11, b11) {
        return c11 === dM ? fB(b11, a10[5]) : 0;
      }
      a10[7] = n10;
      e10[7] = o10;
      var p10 = d(L[8], a10), h10 = f(R[9], au, p10);
      fC(h10, a10);
      if (h10 === au)
        kl(d(J[5], c10));
      return l10;
    }
    function agz(i10, a10) {
      var g10 = f(R[10], [0, a10[1]], i10), h10 = [0, g10], b10 = d(R[3], g10);
      function c10(c11, g11) {
        if (c11 === dM)
          return fB(g11, a10[5]);
        f(L[15], c11, a10);
        if (d(L[9], a10)) {
          var i11 = d(L[8], a10);
          f(L[10], b10, i11);
        }
        var e11 = d(L[13], a10);
        return e11 ? kk(c11, h10) : e11;
      }
      b10[7] = c10;
      var e10 = f(R[9], au, a10[3]);
      c10(e10, a10);
      c10(e10, b10);
      if (e10 === au)
        kl(d(J[5], h10));
      return b10;
    }
    _(fd, agB, L, [0, age, agf, agg, agh, agi, agj, agk, agn, agl, ago, agm, agp, agq, fB, fC, agr, ags, agt, agv, fD, agu, agw, agy, agz, function(e10, c10) {
      var g10 = d(J[23], c10[3]), h10 = ak(function(a11) {
        return d(R[2], a11);
      }, g10);
      function i10(b11, e11) {
        var a11 = e11;
        for (; ; ) {
          if (a11) {
            var c11 = a11[1];
            if (a11[2]) {
              var d10 = a11[2];
              iV(b11, c11);
              iW(b11, 1, 0);
              var a11 = d10;
              continue;
            }
            return iV(b11, c11);
          }
          return 0;
        }
      }
      var a10 = agA[1], b10 = 0;
      return f(s(function(a11) {
        aB(e10, a11);
        return 0;
      }, b10, a10), i10, h10);
    }]);
    function agC(a10) {
      return [0, 0, function(b10) {
        return a10;
      }];
    }
    function agD(a10) {
      return [0, [0, [0, a10], 0], function(b10) {
        return d(L[12], a10);
      }];
    }
    function ko(b10, a10) {
      var c10 = a10[2], e10 = a10[1], f10 = b10[2], g10 = b10[1];
      function h10(b11) {
        var a11 = d(c10, 0);
        return d(d(f10, 0), a11);
      }
      return [0, bt(g10, e10), h10];
    }
    function kp(a10) {
      function c10(b11, a11) {
        var c11 = d(L[8], a11[1]);
        return f(J[7], b11, c11);
      }
      var b10 = bO(c10, J[1], a10[3]), e10 = f(J[10], a10[2], b10), g10 = f(J[10], b10, a10[2]), h10 = d(R[7], a10);
      f(J[14], h10, e10);
      var i10 = d(R[6], a10);
      f(J[14], i10, g10);
      a10[2] = b10;
      return 0;
    }
    function kq(b10, a10) {
      var i10 = b10 !== au ? 1 : 0, j10 = i10 ? b10 !== a10[1] ? 1 : 0 : i10;
      if (j10) {
        a10[1] = b10;
        var g10 = 0, e10 = 0, c10 = a10[3];
        for (; ; ) {
          if (c10) {
            var h10 = c10[1][1], k10 = c10[2];
            f(L[15], b10, h10);
            var l10 = e10 || d(L[13], h10), m10 = g10 || d(L[9], h10), g10 = m10, e10 = l10, c10 = k10;
            continue;
          }
          if (g10)
            kp(a10);
          return e10 ? d(a10[4], 0) : e10;
        }
      }
      return j10;
    }
    function kr(a10) {
      kq(f(R[9], au, a10[2]), a10);
      return d(a10[4], 0);
    }
    function ks(c10, b10) {
      var d10 = b10[2], e10 = b10[1], f10 = c10 ? c10[1] : 1, a10 = [0, au, J[1], e10, d10];
      kp(a10);
      if (f10)
        kr(a10);
      return a10;
    }
    function agE(c10, a10, b10) {
      return ks(c10, [0, [0, [0, a10], 0], function(c11) {
        return d(b10, d(L[12], a10));
      }]);
    }
    function kt(a10) {
      var b10 = a10[2], c10 = d(R[7], a10);
      return f(J[14], c10, b10);
    }
    var dN = [0, 0];
    function ku(a10) {
      dN[1] = [0, a10, dN[1]];
      return 0;
    }
    function agF(a10) {
      return a10 ? ku(a10[1]) : 0;
    }
    _(fd, agG, dL, [0, agC, agD, ko, ko, ks, agE, kr, kt, kq, ku, agF, function(a10) {
      aR(kt, dN[1]);
      dN[1] = 0;
      return 0;
    }]);
    f(L[2], 0, 0);
    var fE = L[2];
    f(fE, 0, 0);
    f(fE, 0, 1);
    f(fE, 0, 0);
    var agH = dL[11];
    function kv(c10, b10) {
      if (b10[yg] === 1) {
        var f10 = function(a11) {
          var b11 = a11[c10];
          aR(function(a12) {
            return d(a12, 0);
          }, b11);
          return a11[c10] = 0;
        }, e10 = b10.querySelectorAll("*"), g10 = e10[agI] - 1 | 0, h10 = 0;
        if (!(g10 < 0)) {
          var a10 = h10;
          for (; ; ) {
            f10(e10.item(a10));
            var i10 = a10 + 1 | 0;
            if (g10 !== a10) {
              var a10 = i10;
              continue;
            }
            break;
          }
        }
        return f10(b10);
      }
      return 0;
    }
    function agJ(d10, t10) {
      function e10(a11) {
        return a11.getRootNode() === b1 ? 1 : 0;
      }
      var f10 = d10[agK] - 1 | 0, n10 = 0;
      if (!(f10 < 0)) {
        var a10 = n10;
        for (; ; ) {
          var g10 = d10[a10], h10 = g10[agL], i10 = h10[agM] - 1 | 0, o10 = 0;
          if (!(i10 < 0)) {
            var c10 = o10;
            for (; ; ) {
              var m10 = h10.item(c10);
              if (e10(m10))
                kv(agQ, m10);
              var s10 = c10 + 1 | 0;
              if (i10 !== c10) {
                var c10 = s10;
                continue;
              }
              break;
            }
          }
          var j10 = g10[agN], k10 = j10[agO] - 1 | 0, p10 = 0;
          if (!(k10 < 0)) {
            var b10 = p10;
            for (; ; ) {
              var l10 = j10.item(b10);
              if (1 - e10(l10))
                kv(agP, l10);
              var r10 = b10 + 1 | 0;
              if (k10 !== b10) {
                var b10 = r10;
                continue;
              }
              break;
            }
          }
          var q10 = a10 + 1 | 0;
          if (f10 !== a10) {
            var a10 = q10;
            continue;
          }
          break;
        }
      }
      return 0;
    }
    var agS = new aK[agR](agJ);
    agS.observe(yn(b1), { "childList": jI, "subtree": jI });
    function bB(b10, a10) {
      if (typeof b10 === "number")
        var c10 = a10;
      else {
        if (typeof a10 !== "number")
          return [3, b10, a10];
        var c10 = b10;
      }
      return c10;
    }
    function bC(b10, a10) {
      var c10 = 0;
      return bO(function(c11, a11) {
        return bB(c11, d(b10, a11));
      }, c10, a10);
    }
    function dO(a10) {
      if (typeof a10 === "number")
        return [0, fp(0, agU), 0];
      else
        switch (a10[0]) {
          case 0:
            var b10 = a10[4], c10 = a10[3], d10 = a10[2], e10 = 0, f10 = 0, g10 = b10 ? dO(b10[1]) : f10, h10 = aH(d10);
            return [0, jN(0, [0, ak(function(a11) {
              return [0, aH(a11[1]), aH(a11[2])];
            }, c10)], h10, g10), e10];
          case 1:
            return [0, fp(0, a10[1]), 0];
          case 2:
            return [0, fp(0, a10[1]), 0];
          default:
            var i10 = a10[1], j10 = [0, dO(a10[2]), 0];
            return eP([0, dO(i10), j10]);
        }
    }
    function bc(a10) {
      switch (a10[0]) {
        case 0:
          return bC(bc, a10[2]);
        case 1:
          return [1, a10[2]];
        case 2:
          var m10 = a10[1];
          return [0, 0, ag2, m10, [0, bc(a10[2])]];
        case 3:
          var n10 = a10[1];
          return [0, 0, ag3, n10, [0, bc(a10[2])]];
        case 4:
          return [0, 0, ag4, a10[1], [0, [1, a10[2]]]];
        case 5:
          return bB([0, 0, ag5, a10[1], 0], b3);
        case 6:
          return b3;
        case 7:
          var c10 = a10[2], f10 = c10[3], g10 = a10[1], o10 = c10[2], p10 = c10[1], k10 = f10 ? [0, [0, agV, f10[1]], g10] : g10;
          return [0, 0, agX, [0, [0, agW, o10], k10], [0, bc(p10)]];
        case 8:
          var d10 = a10[2], h10 = d10[3], j10 = a10[1], q10 = d10[2], r10 = d10[1], l10 = h10 ? [0, [0, agY, h10[1]], j10] : j10, b10 = W(b$), e10 = function(d11) {
            var a11 = d11;
            for (; ; ) {
              switch (a11[0]) {
                case 0:
                  return aR(e10, a11[2]);
                case 9:
                  return 0;
                case 1:
                case 4:
                  return E(b10, a11[2]);
                case 2:
                case 3:
                  var c11 = a11[2];
                  break;
                case 7:
                case 8:
                  var c11 = a11[2][1];
                  break;
                default:
                  return i(b10, 32);
              }
              var a11 = c11;
              continue;
            }
          };
          e10(r10);
          return [0, 0, ag1, [0, [0, ag0, q10], [0, [0, agZ, F(b10)], l10]], 0];
        default:
          return [2, a10[2]];
      }
    }
    function fF(b10) {
      switch (b10[0]) {
        case 0:
          var m10 = b10[1];
          return [0, 1, ag6, m10, [0, bc(b10[2])]];
        case 1:
          var e10 = b10[3], d10 = b10[2], f10 = b10[1], n10 = b10[4], o10 = d10[0] === 0 ? ag7 : ag_, l10 = 0;
          if (d10[0] === 0) {
            var g10 = d10[1];
            if (g10 !== 1) {
              var h10 = [0, [0, ag9, a(j + g10)], f10];
              l10 = 1;
            }
          }
          if (!l10)
            var h10 = f10;
          return [0, 1, o10, h10, [0, bB(b3, bC(function(a10) {
            function b11(a11) {
              if (a11[0] === 0 && e10)
                return bB(bc(a11[2]), b3);
              return fF(a11);
            }
            var c11 = e10 === 1 ? 0 : b3;
            return [0, 1, ag8, 0, [0, bB(c11, bC(b11, a10))]];
          }, n10))]];
        case 2:
          var p10 = b10[1];
          return [0, 1, ag$, p10, [0, bB(b3, bC(fF, b10[2]))]];
        case 3:
          return [0, 1, aha, b10[1], 0];
        case 4:
          var i10 = b10[2] - 1 | 0, q10 = b10[3], r10 = b10[1];
          if (5 < i10 >>> 0)
            var c10 = ahb;
          else
            switch (i10) {
              case 0:
                var c10 = ahc;
                break;
              case 1:
                var c10 = ahd;
                break;
              case 2:
                var c10 = ahe;
                break;
              case 3:
                var c10 = ahf;
                break;
              case 4:
                var c10 = ahg;
                break;
              default:
                var c10 = ahh;
            }
          return [0, 1, c10, r10, [0, bc(q10)]];
        case 5:
          var k10 = b10[2], s10 = b10[3], t10 = b10[1], u10 = a5(dd(k10), ahi) ? 0 : [0, [0, ahm, ag(ahl, k10)], 0];
          return [0, 1, ahk, t10, [0, [0, 0, ahj, u10, [0, [1, s10]]]]];
        case 6:
          return [2, b10[2]];
        default:
          var v10 = b10[2], w10 = b10[1];
          return [0, 1, ahp, w10, [0, bC(function(a10) {
            var b11 = a10[2], c11 = a10[1], d11 = bC(function(a11) {
              return [0, 1, ahn, 0, [0, bc(a11)]];
            }, b11);
            return bB([0, 1, aho, 0, [0, bc(c11)]], d11);
          }, v10)]];
      }
    }
    var ahr = aK[ahq], fG = rb(yp(b1, "output")), fH = afG(agT);
    if (fH[0] === 0) {
      var kw = fH[1], ahy = eO(kw);
      bw.log(aH(d(q(ahz), ahy)));
      var ahA = function(b10) {
        bw.log("worker made");
        function c10(b11) {
          function a11(a12) {
            return aY(0);
          }
          return by(jD(function(V10) {
            var m10 = V10[1];
            if (m10[1]) {
              var j10 = function(a13, b13) {
                var c12 = a13 ? [0, a13[1], 0] : 0;
                return ak(function(a14) {
                  var c13 = [0, jO(0, aH(a14)), 0], d10 = [0, cB(ym, 0, [0, [0, jM(aH(b13)), 0]], c13), 0];
                  return cB(yl, 0, 0, [0, cB(yj, 0, [0, [0, jM("language-ocaml"), 0]], d10), 0]);
                }, c12);
              }, t10 = m10[4];
              if (t10)
                var l10 = t10[1], O10 = j10(l10[1], ahu), P10 = j10(l10[2], ahv), Q10 = j10(l10[3], ahw), v10 = dw(0, 0, eP([0, O10, [0, P10, [0, Q10, [0, j10(l10[4], ahx), 0]]]]));
              else
                var v10 = dw(0, 0, 0);
              var x10 = cB(yi, 0, 0, [0, jO(0, "run"), 0]), U10 = m10[2], K10 = [0, [0, ahr, aK[ahs]()]], g10 = {};
              g10[afJ] = aH(U10);
              b0(g10, afK, 0);
              var S10 = [0, fG];
              b0(g10, afL, a6(function(e11) {
                var b13 = e11.length - 1, c12 = jJ(b13), d10 = b13 - 1 | 0, f10 = 0;
                if (!(d10 < 0)) {
                  var a13 = f10;
                  for (; ; ) {
                    c12[a13] = T(e11, a13)[1 + a13];
                    var g11 = a13 + 1 | 0;
                    if (d10 !== a13) {
                      var a13 = g11;
                      continue;
                    }
                    break;
                  }
                }
                return c12;
              }, K10));
              var c11 = {};
              b0(c11, afO, [0, aK[afM].create(g10)]);
              var M10 = 0, N10 = 0;
              b0(c11, afP, a6(function(a13) {
                return a13;
              }, N10));
              b0(c11, afQ, M10);
              b0(c11, afR, a6(function(a13) {
                return a13;
              }, S10));
              var s10 = new afT(c11), E10 = s10[afV], h10 = f(R[10], 0, 0), I10 = 0, H10 = d(R[3], h10);
              jK(I10, ya, function(t11) {
                var e11 = qR(s10[afU][afN].toJSON()), j11 = av, c12 = e11.length - 1;
                if (c12 === 0)
                  var k10 = [0];
                else {
                  var g11 = cm(c12, j11(e11[1])), i10 = c12 - 1 | 0, l11 = 1;
                  if (!(i10 < 1)) {
                    var a13 = l11;
                    for (; ; ) {
                      g11[1 + a13] = j11(e11[1 + a13]);
                      var m11 = a13 + 1 | 0;
                      if (i10 !== a13) {
                        var a13 = m11;
                        continue;
                      }
                      break;
                    }
                  }
                  var k10 = g11;
                }
                var r11 = bP(aht, it(k10)), b13 = fz(0), n11 = d(R[3], h10);
                f(L[7], n11, b13);
                var o11 = d(R[3], h10);
                _(L[21], b13, o11, [0, r11]);
                var p11 = d(R[4], h10);
                b13[1] = f(J[4], p11, b13[1]);
                var q11 = 1;
                return 1 ? af4(b13) : q11;
              }, x10);
              jP(fG, [0, dw(0, 0, [0, E10, [0, x10, [0, v10, 0]]]), 0]);
              var X10 = 0, G10 = function(e11) {
                if (e11) {
                  var c12 = e11[1], g11 = 0, h11 = jF(c12) ? "null" : jG(c12) ? "undefined" : c12.toString(), d10 = jJ(0), b13 = 0, a13 = [0, h11, g11];
                  for (; ; ) {
                    if (a13) {
                      var f10 = a13[2];
                      d10[b13] = a13[1];
                      var b13 = b13 + 1 | 0, a13 = f10;
                      continue;
                    }
                    qQ(yr, ys, qR(d10));
                    return 0;
                  }
                }
                return 0;
              };
              d(agH, [0, _(dL[6], X10, H10, G10)]);
              return aY(0);
            }
            var w10 = m10[2], p10 = [0, 0], r10 = dJ, q10 = afo, Y10 = 0;
            a:
              for (; ; ) {
                if (q10) {
                  var y10 = q10[1], b12 = W(aM), e10 = 0, a12 = y10;
                  for (; ; ) {
                    if (k(w10) <= a12)
                      var o10 = [0, F(b12), 0];
                    else {
                      var n10 = u(w10, a12);
                      if (n10 !== 10) {
                        if (n10 === 13) {
                          if (e10)
                            i(b12, 13);
                          var e10 = 1, a12 = a12 + 1 | 0;
                          continue;
                        }
                        if (e10)
                          i(b12, 13);
                        i(b12, n10);
                        var e10 = 0, a12 = a12 + 1 | 0;
                        continue;
                      }
                      var o10 = [0, F(b12), [0, a12 + 1 | 0]];
                    }
                    var z10 = o10[2], r10 = ke(p10, r10, dz(o10[1])), q10 = z10;
                    continue a;
                  }
                }
                var A10 = fy(p10, r10), B10 = ab(p10[1]), C10 = ak(function(a13) {
                  var b13 = a13[4], c12 = a13[3], d10 = a13[2];
                  return [0, fw(a13[1]), d10, c12, b13];
                }, B10), D10 = function(a13) {
                  return kb(C10, dC(a13));
                };
                jP(fG, [0, dw(0, 0, dO(bC(fF, ak(d(yC[3], D10), A10)))), Y10]);
                return aY(0);
              }
          }, kw), a11);
        }
        bw.log("doing...");
        function a10(a11) {
          bw.log("done...");
          var b11 = a11[1];
          dc(function(a12) {
            return d(cG(afu), a12);
          }, b11);
          var c11 = a11[2];
          dc(function(a12) {
            return d(cG(afv), a12);
          }, c11);
          var e10 = a11[3];
          dc(function(a12) {
            return d(cG(afw), a12);
          }, e10);
          var f10 = a11[4];
          dc(function(a12) {
            return d(cG(afx), a12);
          }, f10);
          return aY(a11);
        }
        return by(kh(f(kg[10], b10[4], 0), a10), c10);
      };
      try {
        var aft = yx(0, "src/worker.js"), dK = aft;
      } catch (a10) {
        a10 = p(a10);
        if (a10[1] !== fn)
          throw a10;
        var dK = bg(afr);
      }
      var cH = yA(dK, 1e5, function(a10) {
        dK.terminate();
        bw.log(ahB);
        return 0;
      }), ki = function(r10) {
        var o10 = aiD(r10, 0), j10 = fg(0), a10 = [0, 0, fg(0), j10];
        function p10(b11) {
          jC(function(b12) {
            return jE(a10, [1, yz]);
          });
          return d(cH[3], 0);
        }
        var n10 = aK.setTimeout(p10, cH[2]);
        cv([0, a10, n10], cH[4]);
        cH[1].postMessage(o10, fm);
        function q10(a11) {
          return a11[0] === 0 ? aY(a11[1]) : bZ(a11[1]);
        }
        var g10 = a10[1];
        if (g10) {
          var l10 = g10[1], e10 = js(a10[2]);
          if (e10) {
            var f10 = e10[1], k10 = f10[2];
            a10[1] = [0, f10[1]];
            jz(k10, 0);
          } else
            a10[1] = 0;
          var c10 = [0, l10];
        } else
          var c10 = 0;
        if (c10)
          var h10 = aY(c10[1]);
        else {
          var m10 = a10[3], b10 = fl(1), i10 = jr(b10, m10);
          b10[1][1][2] = [2, i10];
          var h10 = b10;
        }
        return by(h10, q10);
      }, afs = function(a10) {
        return aY([0, dK, cH, 0, ki]);
      };
      by(kh(_(kg[9], ki, 0, 0), afs), ahA);
    } else
      bw.log(x8(fH[1]));
    db(0);
    return;
  })(function() {
    return this;
  }());
})();
